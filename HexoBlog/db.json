{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/SitePreview.png","path":"images/SitePreview.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","path":"libs/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9c934ecdbda0ea2f0988afb3eb8d15bf5fb22867","modified":1598962363650},{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1598963544829},{"_id":"themes/Wikitten/.gitignore","hash":"08dd24e37b9695df6a47a01059aed60f83ff5de7","modified":1598963516594},{"_id":"themes/Wikitten/LICENSE","hash":"feadcd728a8e828cfc507b4586d7a7ab94b66fe8","modified":1598963516594},{"_id":"themes/Wikitten/_config.yml","hash":"553a86612eb7ae06b21aa11e92cf4e947d1fd7bb","modified":1598963863608},{"_id":"source/.DS_Store","hash":"9ca46cf824d65bbdd2ce4982671ec03f00e08ae1","modified":1598967202860},{"_id":"themes/Wikitten/README.md","hash":"8c9fc9b9ebdf37c9289a4e1d72ac8aedbe23316c","modified":1598963516594},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"8a4e600ff1f75007df8facf15a9c127aafec5e18","modified":1598963516594},{"_id":"themes/Wikitten/_config.yml.example","hash":"e8d451b59680232c5fb3b5f41b64ad248d1ba6e1","modified":1598963516594},{"_id":"themes/Wikitten/package.json","hash":"9944acee34c3d029c73def53593577cc23d54a1e","modified":1598963516606},{"_id":"source/_posts/.DS_Store","hash":"e392bfc1206c2e3c58d7719b966ad28ee7f4d272","modified":1599050947529},{"_id":"source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1598963544828},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1598963544828},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1598963544829},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"0830c3a5b134fbd21a6ddeda141a4de8345cabb1","modified":1598963516595},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"af892af6f7dafdd617c5aa17ee91e9e445d20fa4","modified":1598963516595},{"_id":"themes/Wikitten/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1598963516596},{"_id":"themes/Wikitten/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1598963516596},{"_id":"themes/Wikitten/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1598963516596},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1598963516595},{"_id":"themes/Wikitten/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1598963516596},{"_id":"themes/Wikitten/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1598963516596},{"_id":"themes/Wikitten/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1598963516596},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1598963516596},{"_id":"themes/Wikitten/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1598963516597},{"_id":"themes/Wikitten/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1598963516597},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1598963516597},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"34180dcc26b8fcc59f8644ce506aadf7db5f07e5","modified":1598963516597},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1598963516597},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1598963516597},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1598963516598},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1598963516602},{"_id":"themes/Wikitten/layout/index.ejs","hash":"0980482c3b37acffd1b724ebc51240ca6967be5c","modified":1598963516602},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"61c0dad38893fb9fe4eba7fe2afaf7464310b925","modified":1598963516602},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1598963516602},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1598963516603},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1598963516605},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1598963516605},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1598963516607},{"_id":"themes/Wikitten/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1598963516607},{"_id":"source/_posts/c/c-enum-desc.md","hash":"303aefd1825b879bfef79057bfb83e73a29ef607","modified":1598962363650},{"_id":"source/_posts/c/c-maopaopaixu.md","hash":"a0a501d98616450d330e1dd82ccc0af657a7db82","modified":1598962363650},{"_id":"source/_posts/c/c-pointer-desc.md","hash":"b6710cedbb8fc822602507cbaae20e3fe46cbcf8","modified":1598962363650},{"_id":"source/_posts/c/c语言中的字符串的定义及初始化和输出.md","hash":"10aefde91386843d72d74da572649adf13c56bd6","modified":1598962363650},{"_id":"source/_posts/c/c语言基本数据类型简单介绍.md","hash":"2e231517b445e60518a3503f7f320a0edef122c2","modified":1598962363651},{"_id":"source/_posts/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符.md","hash":"76a0039b2e43abea377a9fbb0a49d4132039df7e","modified":1598962363651},{"_id":"source/_posts/flutter/.DS_Store","hash":"6e3a7125f8433f1ef3173c231fb57fc0365b581d","modified":1598967236926},{"_id":"source/_posts/hexo/hello-hexo.md","hash":"18cb104df2efe2cec16226ca41855e252b888616","modified":1598962363651},{"_id":"source/_posts/hexo/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1598962363651},{"_id":"source/_posts/oc/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1598964842591},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1598963516595},{"_id":"themes/Wikitten/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1598963516595},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1598963516595},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"f0f00cce7a5c37f00dbc4acf49529bdd6a6bdc5d","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1598963516599},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"c666216877453d67db8637e8de7a7f2c1b92d9cb","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"595a086a42a156dd44d30ee7f9e7189ca370bcf1","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"5f2df8713f0ef723b3bfc79ae580fe8707ea2036","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"c3a8e71e1660d58b6ed106a045c6829e77e65881","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1598963516602},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1598963516602},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"6e410c120dabac0dccbd8b0c312f261c9566cacb","modified":1598963516603},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1598963516603},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1598963516604},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1598963516604},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1598963516604},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1598963516604},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1598963516605},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"91a4675876990c12bd252f00e13894e0e7e5e50a","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"d09317d5e328a9c6ff8fded93604ebe04764cc4c","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"0f58cafed5156488f550df6d560814f835a46854","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"dc83051ae67cfae0db0a6d9790c923ff2883ee25","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"5d70b1bf3b1fc977135e458f9a50cb65cff91f17","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"73638a7c91c6d6433e766b35199508719bf27d19","modified":1598963516606},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1598963516607},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"2eba1250b39115da9f32e8a70d271e04186419c0","modified":1598963516624},{"_id":"themes/Wikitten/source/css/style.styl","hash":"d37d6c7754805c60564c0d9a50b7b058e7f830c9","modified":1598963516625},{"_id":"themes/Wikitten/source/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1598963516629},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1598963516628},{"_id":"themes/Wikitten/source/js/main.js","hash":"ea6def87b1338185a6afb7c18fbf43564660876d","modified":1598963516629},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1598963516629},{"_id":"source/_posts/flutter/Dart/01-Dart环境搭建.md","hash":"4a7a88ecc08c5efbda774c4a122f5c87c13312f0","modified":1598967385516},{"_id":"source/_posts/flutter/Dart/02-入口，注释，变量，常量，命名规则.md","hash":"6e4467f1d0e61a7e4db0bea2c2bebbdf83c491f4","modified":1598967274055},{"_id":"source/_posts/flutter/Dart/03-数据类型.md","hash":"2c48265e021aac60f743fc9561ac9cb7bd50cb28","modified":1598967277728},{"_id":"source/_posts/flutter/Dart/04-Dart运算符.md","hash":"92fbee2db0114ae030d48d710cd416c66d2c7f75","modified":1598967280451},{"_id":"source/_posts/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪.md","hash":"abbcecc2eb466a10083036266f0407cd60e6c7f9","modified":1598967283352},{"_id":"source/_posts/flutter/Dart/07-方法参数.md","hash":"17824d7d9dde5b94ba1940d0be514d0fe95f4d37","modified":1598967290230},{"_id":"source/_posts/flutter/Dart/06-Dart集合类型，-List-Set-Map.md","hash":"59fad2c6e9f2b6b10d6751976f19b78219940e43","modified":1598967286502},{"_id":"source/_posts/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包.md","hash":"abf4078f66f8009da049a98a007bece6f0a3d97f","modified":1598967292781},{"_id":"source/_posts/flutter/Dart/09-面向对象.md","hash":"53ab5ac21afe98596ff68db0077fdd34c248d1f7","modified":1598967295447},{"_id":"source/_posts/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承.md","hash":"8a96aab395857cf4cbf7f7fadac293e61d31db3c","modified":1598967298169},{"_id":"source/_posts/flutter/Dart/11-Dart中抽象类.md","hash":"7c811c34afd4e832bbda392d2cb3c5a7da769685","modified":1598967301117},{"_id":"source/_posts/flutter/Dart/12-Dart中的mixins.md","hash":"3685c5410c9bcc8f4264a12c390f1a59a6602ce2","modified":1598967303874},{"_id":"source/_posts/flutter/Dart/13-泛型方法，泛型类，泛型接口.md","hash":"70478c515ecd529eb0c340c6a81bd8096148988b","modified":1598967306629},{"_id":"source/_posts/flutter/Dart/14-Dart中自定义库，系统库，第三方库.md","hash":"7998c6c9d04da03c571b89395ef260387c911862","modified":1598967309388},{"_id":"source/_posts/flutter/flutter框架一/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1599051822869},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建.md","hash":"24d09eb82a2244736639a34570cb0acaf27de38c","modified":1599050337452},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter.md","hash":"6a539df672c4acb8fa7f92d42b83a2110e2e6ea8","modified":1599050340810},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式.md","hash":"703e310927d92ce8f7b55ccfee7cadc57d860f92","modified":1599050343378},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-一.md","hash":"35a920194f99eda181c03e50c5757103c507b890","modified":1599050348894},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始.md","hash":"3256620e730b51708ba60bb8a9b3ae7fc7678584","modified":1599055169433},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二.md","hash":"a158a2e82cc11a8a4346787d7b9d92a6f4677759","modified":1599050346006},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget.md","hash":"23a4d343057bbc633d06a8fb6abaf59abd97d2d2","modified":1599050351353},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置.md","hash":"f13833a3fac42e9b508ac20e06eb1f6be2dab6b3","modified":1599050353868},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片.md","hash":"f65790f19a49215a96d1f67b1ecde269ebde226d","modified":1599050359725},{"_id":"source/_posts/flutter/flutter框架一/09-StatefulWidget生命周期.md","hash":"74ac7f562fe29ded353eb57a52d91e9c29ad88dc","modified":1599050357040},{"_id":"source/_posts/oc/Foundation/oc-foundation-mulString.md","hash":"05dc146cee5fb1503999588460c1c78022da5609","modified":1598965054326},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile.md","hash":"e0cec012722720473d2ea0cdc49386fab5b91e90","modified":1598965058435},{"_id":"source/_posts/oc/Foundation/oc-foundation-string.md","hash":"fa1b76b00eb323121cd12268ed26881da7293b08","modified":1598965061567},{"_id":"source/_posts/oc/Foundation/.DS_Store","hash":"5d8df3d244548597b05ed088eba9114241dac9bf","modified":1598964837583},{"_id":"source/_posts/oc/Foundation/oc-foundation-struct.md","hash":"0e251fd3487496d2aada7d26f12ed6407bd77f70","modified":1598965064229},{"_id":"source/_posts/oc/Foundation/oc_block_desc.md","hash":"a864ac52139402bbd08ce8ded930dcc10edfe5de","modified":1598965642602},{"_id":"source/_posts/oc/Foundation/oc_category_desc.md","hash":"db0a718aa4bd448b217221989fb9debc97c64229","modified":1598965047906},{"_id":"source/_posts/oc/Foundation/oc_class_init.md","hash":"71a65c45818311a449728290cc9c9ec261bc0597","modified":1598965012262},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader.md","hash":"cfe2b558cc616cd6622f405f20e12d230adc32e8","modified":1598965038850},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle.md","hash":"734428655fda81f02a030efed3db8fb77138f99a","modified":1598964554512},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu.md","hash":"42a28dc7abf032d3bc20f2dccabf213db3d60566","modified":1598965035889},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin.md","hash":"8160e26996a39c9cb25851901aff7f92870ceb02","modified":1598964334156},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin.md","hash":"c5e480a6d2d4f26b0c8702f921c52952055b479b","modified":1598964528510},{"_id":"source/_posts/oc/Login/oc-Login-QRCode.md","hash":"16fb5f399d5ab7ce6a80111db9561c6d4d0437ad","modified":1598964532185},{"_id":"source/_posts/oc/Login/oc-Login-TouchID.md","hash":"1817728776ccb2ee06f6d8e329b1feb108f8beef","modified":1598964535489},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail.md","hash":"a2864a3845712d21ddca2580ed32f95233f5b3c5","modified":1598965075385},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc.md","hash":"098c446da24f5354026fbe383e45894584910ae9","modified":1598965080475},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib.md","hash":"cae645f159ecc521698de89619e42d7b27c03217","modified":1598965083028},{"_id":"source/_posts/oc/Upload/oc-Upload-nativeUpload.md","hash":"eaa1de95e6cc3add0d600732fe67a3424a8e6629","modified":1598965087450},{"_id":"source/_posts/oc/Upload/oc-Upload-putAndPost.md","hash":"40f1dfa0693b7bd5603018c5dba041c49a6ddcfa","modified":1598965090125},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel.md","hash":"3025558a53d28a0c0261c6a5cb847aaa954f8ca6","modified":1598965094512},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk.md","hash":"c107b2cb9a7f7ca81b2f218d5480134dca078659","modified":1598965104479},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1598963516601},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1598963516624},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1598963516624},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"146b5a86d6f602232d86e246ea20620ec923cccc","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"85db02a6f51d81ac317a7f0727fa16b7ce7d5e9e","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"d3195723c373a68a05b76d430f8aeb2d2dd1957f","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"154fcfe17c4a9833903b3a91efb1ddf315e7fcba","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"2ecc48d48ad8769556036f19f2769c84c428cbc6","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"4ea679287d49f91634dd32ad812746cccc1e6281","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"4a11aace0de3aeafdd88caef7cd238543ce1cd95","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1598963516620},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1598963516625},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1598963516625},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1598963516625},{"_id":"themes/Wikitten/source/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1598963516627},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1598963516642},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1598963516644},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1598963516644},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1598963516645},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1598963516668},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1598963516669},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1598963516643},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_011.png","hash":"c69ec507c6183d69028c3dd11cd256bc79f2e65c","modified":1599052814104},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","hash":"25baa3d4034bed5cacf98f208c09f9478e14705a","modified":1598962363657},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","hash":"15a736ac1231e1f4848f640afec6fe60468971f4","modified":1598962363657},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_3.jpeg","hash":"e54a0521f0f9080335de03cfdeabbc133348cf93","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_2.jpeg","hash":"e937b540912e15f41fb1f5615bd5302d68be0f3a","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_5.jpeg","hash":"7de04a69c065064133e6d2315e50076b8ac91ba7","modified":1598962363675},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_4.jpeg","hash":"9f6afc9b9fba4b0e5e0a3dcfe42a71d361a252be","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_6.jpeg","hash":"aac2b4c4c60b20e947b675667fcfae7ba4708b91","modified":1598962363675},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_1.jpeg","hash":"cbec0cfc87a8ee2950f0adc9f1128b6622e6d6e5","modified":1598962363676},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_3.jpeg","hash":"19fc9b624ba89ebcd80f7c75864044062c91c252","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_4.jpeg","hash":"2828da94d04b2002fb3fb89b9b26fffd7a49f6a9","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_5.jpeg","hash":"94bff061fcafb6b68c48ae0a2269ff01bea61543","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_6.jpeg","hash":"dd4520a3ef3e8130061be453937181b3f1c3d5ca","modified":1598962363678},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_7.jpeg","hash":"ed49334a419a8b5d9ae59038bde6c69fea2c569c","modified":1598962363678},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","hash":"22943d631426f8101d4786156ae4cb413838f7b2","modified":1598962363652},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","hash":"f06815da9d39db93d195ac892bb24bc8074625b5","modified":1598962363652},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","hash":"d73093cbcfbc465c1c03e11d95f0d2d36550872e","modified":1598962363653},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","hash":"df3e2bd3a9c14d2a559a16340e668cedad0b3ec4","modified":1598962363654},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","hash":"2cd5474cfa817eb6ba7434a7a487ea5c7fb3c071","modified":1598962363654},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","hash":"75a7aa4f1543ab9d0d820ad27ce169225dfc6b5b","modified":1598962363656},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","hash":"3e01fef29cc679f63b3e96e80404b88654f41004","modified":1598962363655},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","hash":"3c04edc6d9c2799b9dccaecd0dce9db56f65661f","modified":1598962363660},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","hash":"19756b5c17253aac9c414d904611ca1716a7a93b","modified":1598962363660},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","hash":"4a49d95fbc0cca1a8d393c70694e68b44afdaa71","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/styleLocalize.png","hash":"c85691dc2b95ecc5d7809a3748cb2e99d7a8be47","modified":1598962363663},{"_id":"source/_posts/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","hash":"1c26567abec83eb90e5c5715366582089eba20af","modified":1598962363668},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","hash":"8e68292c6629493d941fe21b1993354f966066ba","modified":1598962363683},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","hash":"2bdc3e3b8b7d9bcfc96cc123e3fa37113162adbe","modified":1598962363683},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","hash":"35d2ac4c6558a9aafb669b74bb156ccfd5e89516","modified":1598962363684},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","hash":"3f20cf31a6ba9b7abf0d445ca49879b3a6d4fa0b","modified":1598962363684},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","hash":"140795cdc9735be8edfa2e71e2d6ca48da6d2fcb","modified":1598962363685},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","hash":"578380de0f2086bbe5c92e6951b754e0b8d215bc","modified":1598962363688},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","hash":"3ccd49e6e13fe414dc2db451d21fc5277566b636","modified":1598962363689},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","hash":"c05214352e755efe5ab80e98a3065553fdd5c52e","modified":1598962363690},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1598963516630},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598963516631},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1598963516651},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1598963516652},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1598963516652},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1598963516653},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1598963516653},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1598963516668},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1598963516668},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1598963516669},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1598963516656},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_010.png","hash":"d0f973a85de89e22bcc7150a153eb151d5373b45","modified":1599052805039},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1598963516660},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1598963516660},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1598963516661},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1598963516661},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_013.png","hash":"0a4c1a5b141f85d56b23c9be7b38de0e7fc771c0","modified":1599052836611},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_1.jpeg","hash":"1b3af87d2fd6ee952983ee7999a4b5c320b640fb","modified":1598962363673},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_2.jpeg","hash":"2cab785accd23c03c4bbe322eca15abaeb95dd2a","modified":1598962363676},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","hash":"ebfff5fefe8bbc0472eaaa89fe0b7a7577c48f66","modified":1598962363661},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/joinSteps.png","hash":"a8f0d989b5d52104939e265a426ca523201b1dfb","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","hash":"105d1b9a7fd881dde76a4ae7fd95fceab2a9547a","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","hash":"abc959b96273cd27e0ac64cb59b7b05565660963","modified":1598962363663},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","hash":"c2d7afb1f53fe68465eec2638cc9a56a23da8cbb","modified":1598962363667},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/dataStuct.png","hash":"d613f8a2c4b11b680b054446a285f6dd0f83f4f7","modified":1598962363669},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","hash":"e478ca499d74e12f95a5f634e786f5a9d43990ab","modified":1598962363682},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","hash":"76a35a8983b4579c473fbf8332460b7697fc0e1e","modified":1598962363686},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","hash":"609e0946dab07531af36e7b309402039ec0e7178","modified":1598962363687},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","hash":"b959b3be0035561ecb2cc930f2389f895a7f7921","modified":1598962363691},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598963516641},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598963516641},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1598963516647},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_002.png","hash":"8011867aa2c1bc81effb6b252b4141e90dbb03d2","modified":1599052710066},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_003.png","hash":"ec04c33fd32cb3b621fb8bc3245579b378c1d8ae","modified":1599052723734},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_008.png","hash":"dadf5c97fd08a3913fa66610b8420e092ec5e4d9","modified":1599052786401},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_007.png","hash":"559f56f75bcadf4ccff83652da50fe3413b99e9a","modified":1599052775924},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_009.png","hash":"ef0283083f072648614a21505c2b8b1c9e403d4d","modified":1599052796795},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_012.png","hash":"6936877ff71996716caf77c5910bc51ceb4c2bc0","modified":1599052825823},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userLogin.png","hash":"2ffcdfdc6614890c8a29691f2694df36ab795de4","modified":1598962363664},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","hash":"05e1d41d896b0667dbe0876d3746acbdf9c3b5bb","modified":1598962363685},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1598963516633},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598963516634},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1598963516640},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_006.png","hash":"013e3af85ed43c35436bfd2650019d0036bfbe7b","modified":1599052764960},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userVerification.png","hash":"e7f8642528c2717f56da3387c82e854f0c19308b","modified":1598962363666},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/startFingerPrint.png","hash":"cd60ab5e41e9ce4dfb42227240e3db1b9fa9cfb1","modified":1598962363672},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/fingerLogin.png","hash":"8dd699b5adc6feb90201f9bdca267066f0a5efe6","modified":1598962363670},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_001.png","hash":"a24f8af4850879d29ee91aa6f19cb116a9904344","modified":1599052684056},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_005.png","hash":"b85d41399e8bee72b0697434a027ed0d382d63fa","modified":1599052750738},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","hash":"4f027a7c44445cb3e7d963148281cffa9aca706f","modified":1598962363659},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1598963516648},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","hash":"eb4189fc4cf128edd8df6ebdb760447550d68442","modified":1598962363680},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1598963516638},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_004.png","hash":"a0547092ff846402d4c27d61668529e08f10a12c","modified":1599052735666},{"_id":"public/about/index.html","hash":"b012f7b1c38599aadcf08e4ab019dba4be195e87","modified":1599055177499},{"_id":"public/categories/index.html","hash":"30d84c4bd2a0dc41f6a41694dc8da398dc64c28a","modified":1599055177499},{"_id":"public/tags/index.html","hash":"00930983bcff260e8e4ddad6fef78d6f2e69d009","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/10-图文混排，按钮，图片/index.html","hash":"0b05c4c3d3664bcaf37d18887b7e01b6d08eb7c1","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/09-StatefulWidget生命周期/index.html","hash":"23778be54d89da05f8a70efb82b0f058d4db6d72","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/index.html","hash":"320ebf595ebdeb43d7c8e80f383df2ab12ea74fe","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/index.html","hash":"dad4e1d8d5e119d147c83f998ab188f9133239d0","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/index.html","hash":"b755e79cfebefddaa7b0670988ab8ebb5beb2e90","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-一/index.html","hash":"2091ea42606439430bcfeea1083b0b8775b41bd1","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/index.html","hash":"192aeff3fccc78c651e87ff9822159c4bb05300e","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/index.html","hash":"de381db067a5506a26d5c1cba4ea44c3b7cf1839","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/index.html","hash":"9f644109e449507f78ddd5e05e45afe3a18ec909","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/index.html","hash":"c1a7af1328c75ee5b428e34665bea14c71b4ebbc","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/14-Dart中自定义库，系统库，第三方库/index.html","hash":"aa3f090c911e561e703c3c7aeaccb81e5788b822","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/13-泛型方法，泛型类，泛型接口/index.html","hash":"3566939e95fc236a8575707e6319dd55eda4bbbd","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/12-Dart中的mixins/index.html","hash":"798ac827bf84d98a0bf5327c3f72fe581963e7d5","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/11-Dart中抽象类/index.html","hash":"68af400141fc832cc24ce69d76fa9e7fd245bda5","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承/index.html","hash":"0269eb8a30350feaa5d2b2c10136f1481f574998","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/09-面向对象/index.html","hash":"f69620bd6ab21bbdb8412804faaad5638dc9a90a","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包/index.html","hash":"e81e574855c69cf8df132f46081e9ec2d5472ef0","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/07-方法参数/index.html","hash":"cc85590b66fa06a7c588671c5b62d9687fae767c","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/06-Dart集合类型，-List-Set-Map/index.html","hash":"41e44ea7893c15e7a0064778175b35387786411a","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪/index.html","hash":"6be21ec10c3b019fa7ec989ea6d170d1e0b98e55","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/04-Dart运算符/index.html","hash":"a08a1337d0775a1028baa40ce8f4d9d133682cf5","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/03-数据类型/index.html","hash":"2cbea5f86978b60bf620848132b12d0fbc933b06","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/02-入口，注释，变量，常量，命名规则/index.html","hash":"380c07175d07899e6a3f1efede7ad08550740d6b","modified":1599055177499},{"_id":"public/2020/09/01/flutter/Dart/01-Dart环境搭建/index.html","hash":"c7988f3c93f01218eb92cf14c00873ac5e5c0f37","modified":1599055177499},{"_id":"public/2020/09/01/hexo/hello-world/index.html","hash":"d12f659942e221301e899b427c5a44d03ff05a76","modified":1599055177499},{"_id":"public/2020/04/24/oc/Screen/oc-screenSize-detail/index.html","hash":"5a064b3856d9d0832b0dbe233e4f6e23949d9521","modified":1599055177499},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-wk/index.html","hash":"d6c7dbd1859e4a8e6f6fceef06410be73c636009","modified":1599055177499},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/index.html","hash":"6a8b8e6339d9e1cad8a858533fde918e4f05a85b","modified":1599055177499},{"_id":"public/2020/04/08/oc/Login/oc-Login-QRCode/index.html","hash":"00d5b6f09e7198583f90152a4a3b730282e45e6f","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-AKeyLogin/index.html","hash":"0ac917ea7b37735d6e628f5efcc1b8b0e76ba861","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/index.html","hash":"d9249870ed32823ddab23e8ddc424b7740583864","modified":1599055177499},{"_id":"public/2020/04/03/oc/Upload/oc-Upload-nativeUpload/index.html","hash":"2a7395d7ea69ea6d92576d30826952f2e0174d7a","modified":1599055177499},{"_id":"public/2020/04/03/oc/Upload/oc-Upload-putAndPost/index.html","hash":"a488331544609be4e1f83fa4ce3402b80c29c9eb","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/index.html","hash":"d2ecdf04cd5a859571d10d335af46b9048b3f0cc","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/index.html","hash":"f8282a2eca73d1ea46b7625ce26b3df6a514aeca","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/index.html","hash":"1fe1df0b27737201b91f0b5b76dc94a08624b40f","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/index.html","hash":"3d193992a8d54cfd6ffc2cacda969febb4b61575","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/index.html","hash":"61c927c873fe7f4467a87a7237c047e19eee6936","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/index.html","hash":"59a36640d24220a8de83c40fd075639b8d805f44","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/index.html","hash":"d12b0606e7923c839cf0add05df122cad3e25322","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-mulString/index.html","hash":"96473e938283c72c9dd748fa24772ccf7abdfcf5","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-string/index.html","hash":"4aa1dd97b600bb06a3e36e49961012cb0abe939b","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-struct/index.html","hash":"284a263e11f075b83f8b9f3e7d4c106633911914","modified":1599055177499},{"_id":"public/2020/04/03/c/c-enum-desc/index.html","hash":"6f474d182d0ce50fff0fba05870f1c870a7f8ba4","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/index.html","hash":"e7b478f6272af4355ee087f4361f1a55d3b7a27f","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_block_desc/index.html","hash":"c08de6554ccc363ada87ce46a24f0d2f4a818e77","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/index.html","hash":"a6421f82c7e39bb4ff11b598bdeafb8d5f20fcd6","modified":1599055177499},{"_id":"public/2020/04/03/c/c-pointer-desc/index.html","hash":"01ba3b285f3c09f1e361fdac0cec51c7ff437848","modified":1599055177499},{"_id":"public/2020/04/03/c/c-maopaopaixu/index.html","hash":"91d42ac62506d34bfecd28e8be3b9c5766ca6566","modified":1599055177499},{"_id":"public/2020/04/02/c/c语言中的字符串的定义及初始化和输出/index.html","hash":"864cf2bd5ce0830345bd2c88e77d0e02beb513d2","modified":1599055177499},{"_id":"public/2020/04/02/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符/index.html","hash":"7139e85b7c432b40104b8240cda97f7b2d110eda","modified":1599055177499},{"_id":"public/2020/04/02/c/c语言基本数据类型简单介绍/index.html","hash":"594326cc1fbed37adacbd92a7b747b667d18b1a6","modified":1599055177499},{"_id":"public/2020/04/02/hexo/hello-hexo/index.html","hash":"0011c27ca0bce1b895958457470e41a776d03871","modified":1599055177499},{"_id":"public/archives/index.html","hash":"18248f6c7aa3992dcc3a30a31647fac35f8fedea","modified":1599055177499},{"_id":"public/archives/page/2/index.html","hash":"0196d01fcc192de0c7db1abc92c286cccbe1c841","modified":1599055177499},{"_id":"public/archives/page/3/index.html","hash":"e0f31cd19b7025bbea52b175d6c2d66d0f7334cc","modified":1599055177499},{"_id":"public/archives/page/4/index.html","hash":"6170e79793086fa0f983c831842dda702e8e8f1b","modified":1599055177499},{"_id":"public/archives/page/5/index.html","hash":"944a70cbc2dda7b28b2e66e22c0bc5086400583f","modified":1599055177499},{"_id":"public/archives/page/6/index.html","hash":"437737dc2211d8276cdb64d7f92f86e519a644c1","modified":1599055177499},{"_id":"public/archives/2020/index.html","hash":"5474e72c97df74a39fc7c7a1d1e5ba341638ce42","modified":1599055177499},{"_id":"public/archives/2020/page/2/index.html","hash":"398caa1b2621b906dbe0d3b7df5db48681506cb7","modified":1599055177499},{"_id":"public/archives/2020/page/3/index.html","hash":"4b5a0ccd067c1f33b5b229d1fcef987640f8dc24","modified":1599055177499},{"_id":"public/archives/2020/page/4/index.html","hash":"f9df27edc10944554318d76df68ec833a0418602","modified":1599055177499},{"_id":"public/archives/2020/page/5/index.html","hash":"3a40e947aa67898a49153f472f5f2248f2017ceb","modified":1599055177499},{"_id":"public/archives/2020/page/6/index.html","hash":"e5954ef07479c64c411fdf42a437121a332dc5cf","modified":1599055177499},{"_id":"public/archives/2020/04/index.html","hash":"64257541cce083158ee987a360d1af493fce5e6f","modified":1599055177499},{"_id":"public/archives/2020/04/page/2/index.html","hash":"b18e33af38e25237a3cd4cd972ef67ed4510665e","modified":1599055177499},{"_id":"public/archives/2020/04/page/3/index.html","hash":"cd56c97696c9a07364474716615b0f268b7da711","modified":1599055177499},{"_id":"public/archives/2020/09/index.html","hash":"10dfd147e56fd099bf7bd7eae369249176a92d66","modified":1599055177499},{"_id":"public/archives/2020/09/page/2/index.html","hash":"4ca25e814c103bff1d3df82c1e85bc34a79020b3","modified":1599055177499},{"_id":"public/archives/2020/09/page/3/index.html","hash":"2ab1b749e2ff4ddf326f4d541e5b804de18d2626","modified":1599055177499},{"_id":"public/categories/C语言/index.html","hash":"392793f577e7dd3a306959d7096c189b7b8760de","modified":1599055177499},{"_id":"public/categories/Hexo/index.html","hash":"5ba38747e8c083509888f00471dd48eee6b9d171","modified":1599055177499},{"_id":"public/categories/flutter/index.html","hash":"03798cf0c4a41d77f408f79062bd48041e9f9fa6","modified":1599055177499},{"_id":"public/categories/flutter/page/2/index.html","hash":"4a0b7133c58e6b7d52ac30ac37996ee1d93d5327","modified":1599055177499},{"_id":"public/categories/flutter/page/3/index.html","hash":"77c4290006d6dfada6e65544507715a31cf94ef3","modified":1599055177499},{"_id":"public/categories/flutter/Dart语法/index.html","hash":"0aa2061a4b16ee9f50c76596c852652f3de2798d","modified":1599055177499},{"_id":"public/categories/flutter/Dart语法/page/2/index.html","hash":"e9cee07d5b45fd7297b24c4b45a8850398467582","modified":1599055177499},{"_id":"public/categories/flutter/flutter框架一/index.html","hash":"1d5426140133718a617195937579a4e12506a45c","modified":1599055177499},{"_id":"public/categories/OC/index.html","hash":"54e0f3bb0d19edfd79f2b2db241cc58a5939367a","modified":1599055177499},{"_id":"public/categories/OC/page/2/index.html","hash":"09f63d363065a526471a62fbfe46b82825eff149","modified":1599055177499},{"_id":"public/categories/OC/page/3/index.html","hash":"b98014f72952f025e3c64825e6f88d59f35def6d","modified":1599055177499},{"_id":"public/categories/OC/Foundation/index.html","hash":"5cb372655fb3eb74e1e46a37366791f74ada67ca","modified":1599055177499},{"_id":"public/categories/OC/OC动画/index.html","hash":"9ab2c6a8144aaa654182aeda0d6823f5228f4258","modified":1599055177499},{"_id":"public/categories/OC/登录/index.html","hash":"686d3522501593c15d9d05473fc3e6501f2dee01","modified":1599055177499},{"_id":"public/categories/OC/Screen/index.html","hash":"db3f229ba39331a49f252908460dbed532a18105","modified":1599055177499},{"_id":"public/categories/OC/UITableView/index.html","hash":"c6a93eb783297ef150890d39dacd886982b8da27","modified":1599055177499},{"_id":"public/categories/OC/上传/index.html","hash":"764c91312f9fa858ad6272185ed60936c6ae9bfe","modified":1599055177499},{"_id":"public/categories/OC/水印/index.html","hash":"8a932afb1a4a470c821fbf720fce9a1c610577a2","modified":1599055177499},{"_id":"public/tags/C/index.html","hash":"f424c3e22e1836b04bd98a79b2e7ab6c4e2ce4a1","modified":1599055177499},{"_id":"public/tags/Foundation/index.html","hash":"0dd81169f1adc32e198bb3d2a0d9ec9bfd6a06ed","modified":1599055177499},{"_id":"public/tags/OC/index.html","hash":"c906b312c003f9ba1fc322d2169616163b609637","modified":1599055177499},{"_id":"public/tags/OC动画/index.html","hash":"bee828e2826f8e296cdcf517a795434af4967803","modified":1599055177499},{"_id":"public/tags/登录/index.html","hash":"516b5f1c4251f0da1b91c89ed665ef652ca5cc22","modified":1599055177499},{"_id":"public/tags/屏幕/index.html","hash":"46d2d99aa63b86e2ae0749dda4c2c7259add3058","modified":1599055177499},{"_id":"public/tags/UITableViewCell/index.html","hash":"8f298d5b1fbf25aa1885aa1defb242a714ffdcc5","modified":1599055177499},{"_id":"public/tags/上传/index.html","hash":"0929ad398407ba68b9254004af53c690a87fb562","modified":1599055177499},{"_id":"public/tags/动画/index.html","hash":"359ccec150cebdff9dbed0b05811ca05e534ab7b","modified":1599055177499},{"_id":"public/tags/水印/index.html","hash":"a5a358a7bdc10f78a6644adfb33ced4f41e4a7e0","modified":1599055177499},{"_id":"public/index.html","hash":"8dfc2c2d237d68881516bc54a00f9ec9ea504ee7","modified":1599055177499},{"_id":"public/page/2/index.html","hash":"d598dbdb556e08f6ae8f05404d4871f92cde9295","modified":1599055177499},{"_id":"public/page/3/index.html","hash":"e41cee66f6f891e989bd2868582365d5a0f4e807","modified":1599055177499},{"_id":"public/page/4/index.html","hash":"3cac5a92b378ed39cb70a9248bc1b39d4f9d4d47","modified":1599055177499},{"_id":"public/page/5/index.html","hash":"158219426bf8be90b9406f44cc153cd43da420e1","modified":1599055177499},{"_id":"public/page/6/index.html","hash":"2eec6b46c6b772dd8aec1636163c79b943dcadbc","modified":1599055177499},{"_id":"public/CNAME","hash":"9c934ecdbda0ea2f0988afb3eb8d15bf5fb22867","modified":1599055177499},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1599055177499},{"_id":"public/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1599055177499},{"_id":"public/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1599055177499},{"_id":"public/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1599055177499},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1599055177499},{"_id":"public/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1599055177499},{"_id":"public/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1599055177499},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1599055177499},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1599055177499},{"_id":"public/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1599055177499},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1599055177499},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1599055177499},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1599055177499},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1599055177499},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1599055177499},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1599055177499},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1599055177499},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1599055177499},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1599055177499},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1599055177499},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_011.png","hash":"c69ec507c6183d69028c3dd11cd256bc79f2e65c","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","hash":"df3e2bd3a9c14d2a559a16340e668cedad0b3ec4","modified":1599055177499},{"_id":"public/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","hash":"1c26567abec83eb90e5c5715366582089eba20af","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","hash":"25baa3d4034bed5cacf98f208c09f9478e14705a","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","hash":"15a736ac1231e1f4848f640afec6fe60468971f4","modified":1599055177499},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","hash":"3ccd49e6e13fe414dc2db451d21fc5277566b636","modified":1599055177499},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","hash":"c05214352e755efe5ab80e98a3065553fdd5c52e","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","hash":"22943d631426f8101d4786156ae4cb413838f7b2","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","hash":"d73093cbcfbc465c1c03e11d95f0d2d36550872e","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","hash":"f06815da9d39db93d195ac892bb24bc8074625b5","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","hash":"2cd5474cfa817eb6ba7434a7a487ea5c7fb3c071","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","hash":"75a7aa4f1543ab9d0d820ad27ce169225dfc6b5b","modified":1599055177499},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","hash":"3e01fef29cc679f63b3e96e80404b88654f41004","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","hash":"8e68292c6629493d941fe21b1993354f966066ba","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","hash":"2bdc3e3b8b7d9bcfc96cc123e3fa37113162adbe","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg","hash":"e54a0521f0f9080335de03cfdeabbc133348cf93","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg","hash":"9f6afc9b9fba4b0e5e0a3dcfe42a71d361a252be","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg","hash":"e937b540912e15f41fb1f5615bd5302d68be0f3a","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg","hash":"7de04a69c065064133e6d2315e50076b8ac91ba7","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg","hash":"aac2b4c4c60b20e947b675667fcfae7ba4708b91","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg","hash":"cbec0cfc87a8ee2950f0adc9f1128b6622e6d6e5","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg","hash":"2828da94d04b2002fb3fb89b9b26fffd7a49f6a9","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg","hash":"94bff061fcafb6b68c48ae0a2269ff01bea61543","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg","hash":"19fc9b624ba89ebcd80f7c75864044062c91c252","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg","hash":"dd4520a3ef3e8130061be453937181b3f1c3d5ca","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg","hash":"ed49334a419a8b5d9ae59038bde6c69fea2c569c","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","hash":"3f20cf31a6ba9b7abf0d445ca49879b3a6d4fa0b","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","hash":"140795cdc9735be8edfa2e71e2d6ca48da6d2fcb","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","hash":"35d2ac4c6558a9aafb669b74bb156ccfd5e89516","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","hash":"578380de0f2086bbe5c92e6951b754e0b8d215bc","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","hash":"3c04edc6d9c2799b9dccaecd0dce9db56f65661f","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","hash":"4a49d95fbc0cca1a8d393c70694e68b44afdaa71","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","hash":"19756b5c17253aac9c414d904611ca1716a7a93b","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png","hash":"c85691dc2b95ecc5d7809a3748cb2e99d7a8be47","modified":1599055177499},{"_id":"public/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_010.png","hash":"d0f973a85de89e22bcc7150a153eb151d5373b45","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_013.png","hash":"0a4c1a5b141f85d56b23c9be7b38de0e7fc771c0","modified":1599055177499},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","hash":"b959b3be0035561ecb2cc930f2389f895a7f7921","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png","hash":"d613f8a2c4b11b680b054446a285f6dd0f83f4f7","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","hash":"e478ca499d74e12f95a5f634e786f5a9d43990ab","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg","hash":"1b3af87d2fd6ee952983ee7999a4b5c320b640fb","modified":1599055177499},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg","hash":"2cab785accd23c03c4bbe322eca15abaeb95dd2a","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","hash":"609e0946dab07531af36e7b309402039ec0e7178","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","hash":"76a35a8983b4579c473fbf8332460b7697fc0e1e","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png","hash":"a8f0d989b5d52104939e265a426ca523201b1dfb","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","hash":"ebfff5fefe8bbc0472eaaa89fe0b7a7577c48f66","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","hash":"105d1b9a7fd881dde76a4ae7fd95fceab2a9547a","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","hash":"abc959b96273cd27e0ac64cb59b7b05565660963","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","hash":"c2d7afb1f53fe68465eec2638cc9a56a23da8cbb","modified":1599055177499},{"_id":"public/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1599055177499},{"_id":"public/js/main.js","hash":"ea6def87b1338185a6afb7c18fbf43564660876d","modified":1599055177499},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1599055177499},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1599055177499},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1599055177499},{"_id":"public/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1599055177499},{"_id":"public/css/style.css","hash":"31cb7c1002327724788bb36c57f7f8a2ab0cc901","modified":1599055177499},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1599055177499},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1599055177499},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1599055177499},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1599055177499},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1599055177499},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1599055177499},{"_id":"public/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_002.png","hash":"8011867aa2c1bc81effb6b252b4141e90dbb03d2","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_003.png","hash":"ec04c33fd32cb3b621fb8bc3245579b378c1d8ae","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_008.png","hash":"dadf5c97fd08a3913fa66610b8420e092ec5e4d9","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_007.png","hash":"559f56f75bcadf4ccff83652da50fe3413b99e9a","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_009.png","hash":"ef0283083f072648614a21505c2b8b1c9e403d4d","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_012.png","hash":"6936877ff71996716caf77c5910bc51ceb4c2bc0","modified":1599055177499},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","hash":"05e1d41d896b0667dbe0876d3746acbdf9c3b5bb","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png","hash":"2ffcdfdc6614890c8a29691f2694df36ab795de4","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_006.png","hash":"013e3af85ed43c35436bfd2650019d0036bfbe7b","modified":1599055177499},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png","hash":"e7f8642528c2717f56da3387c82e854f0c19308b","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png","hash":"8dd699b5adc6feb90201f9bdca267066f0a5efe6","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png","hash":"cd60ab5e41e9ce4dfb42227240e3db1b9fa9cfb1","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_001.png","hash":"a24f8af4850879d29ee91aa6f19cb116a9904344","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_005.png","hash":"b85d41399e8bee72b0697434a027ed0d382d63fa","modified":1599055177499},{"_id":"public/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","hash":"4f027a7c44445cb3e7d963148281cffa9aca706f","modified":1599055177499},{"_id":"public/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","hash":"eb4189fc4cf128edd8df6ebdb760447550d68442","modified":1599055177499},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1599055177499},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_004.png","hash":"a0547092ff846402d4c27d61668529e08f10a12c","modified":1599055177499}],"Category":[{"name":"C语言","_id":"ckelg5zxt0005l4s6hosz1ke5"},{"name":"Hexo","_id":"ckelg5zy3000ol4s6gpea7zex"},{"name":"flutter","_id":"ckelg6003000xl4s61pjxauom"},{"name":"Dart语法","parent":"ckelg6003000xl4s61pjxauom","_id":"ckelg600f0017l4s61xsyhqa8"},{"name":"flutter框架一","parent":"ckelg6003000xl4s61pjxauom","_id":"ckelg601m002al4s6bxsdeoz8"},{"name":"OC","_id":"ckelg6024003jl4s6dx1u1oxn"},{"name":"Foundation","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602i003zl4s6ft86d6bz"},{"name":"OC动画","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602r004ul4s664ed22jd"},{"name":"登录","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602w005gl4s65z88hzxk"},{"name":"Screen","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg60300065l4s61pla5kx2"},{"name":"UITableView","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6031006bl4s6c73w8ojp"},{"name":"上传","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6032006jl4s656jwdrvv"},{"name":"水印","parent":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6033006tl4s6bv6q5byq"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n","date":"2020-09-01T12:32:24.828Z","updated":"2020-09-01T12:32:24.828Z","path":"about/index.html","comments":1,"_id":"ckelg5zww0000l4s6d8hm8sa8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2020-09-01T12:32:24.829Z","updated":"2020-09-01T12:32:24.828Z","path":"categories/index.html","comments":1,"_id":"ckelg5zwz0001l4s6b1ra2w8o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2020-09-01T12:32:24.829Z","updated":"2020-09-01T12:32:24.829Z","path":"tags/index.html","comments":1,"_id":"ckelg5zx10002l4s668jf7nrb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C语言中枚举的简单介绍","date":"2020-04-03T06:26:49.000Z","_content":"\n1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。\n\n2,定义形式：\n\nenum 枚举名称 {元素1，元素2，元素3，...};\n\n例如： enum Season {spring,summer,autumn,winter};\n\n3,枚举变量的定义有3种方式\n\na,先定义枚举类型，再定义枚举变量\n\nenum Season {spring,summer,autumn,winter};\n\nenum Season s;\n\nb,定义枚举类型的同时定义枚举变量\n\nenum Season {spring,summer,autumn,winter}  s;\n\nc,省略枚举名称，直接定义枚举变量\n\nenum {spring,summer,autumn,winter} s;\n\n使用以上3中方式中的任何一种方式都是可以的。\n\n4，基本操作\n\na,赋值操作\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\ns = spring; // 等价于 s = 0;\n\ns = 3;//等价于 s = winter;\n\nb,遍历\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\n// 遍历枚举元素\n\nfor (s = spring; s <= winter; s++) {\n\n    printf(\"枚举元素：%d \\n\", s);\n\n}\n\n输出结果 ， 0 ，1，2，3\n","source":"_posts/c/c-enum-desc.md","raw":"---\ntitle: C语言中枚举的简单介绍\ndate: 2020-04-03 14:26:49\ncategories: C语言\ntags: C\n---\n\n1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。\n\n2,定义形式：\n\nenum 枚举名称 {元素1，元素2，元素3，...};\n\n例如： enum Season {spring,summer,autumn,winter};\n\n3,枚举变量的定义有3种方式\n\na,先定义枚举类型，再定义枚举变量\n\nenum Season {spring,summer,autumn,winter};\n\nenum Season s;\n\nb,定义枚举类型的同时定义枚举变量\n\nenum Season {spring,summer,autumn,winter}  s;\n\nc,省略枚举名称，直接定义枚举变量\n\nenum {spring,summer,autumn,winter} s;\n\n使用以上3中方式中的任何一种方式都是可以的。\n\n4，基本操作\n\na,赋值操作\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\ns = spring; // 等价于 s = 0;\n\ns = 3;//等价于 s = winter;\n\nb,遍历\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\n// 遍历枚举元素\n\nfor (s = spring; s <= winter; s++) {\n\n    printf(\"枚举元素：%d \\n\", s);\n\n}\n\n输出结果 ， 0 ，1，2，3\n","slug":"c/c-enum-desc","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxq0003l4s68rwidmv3","content":"<p>1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。</p>\n<p>2,定义形式：</p>\n<p>enum 枚举名称 {元素1，元素2，元素3，…};</p>\n<p>例如： enum Season {spring,summer,autumn,winter};</p>\n<p>3,枚举变量的定义有3种方式</p>\n<p>a,先定义枚举类型，再定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter};</p>\n<p>enum Season s;</p>\n<p>b,定义枚举类型的同时定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter}  s;</p>\n<p>c,省略枚举名称，直接定义枚举变量</p>\n<p>enum {spring,summer,autumn,winter} s;</p>\n<p>使用以上3中方式中的任何一种方式都是可以的。</p>\n<p>4，基本操作</p>\n<p>a,赋值操作</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>s = spring; // 等价于 s = 0;</p>\n<p>s = 3;//等价于 s = winter;</p>\n<p>b,遍历</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>// 遍历枚举元素</p>\n<p>for (s = spring; s &lt;= winter; s++) {</p>\n<pre><code>printf(&quot;枚举元素：%d \\n&quot;, s);</code></pre><p>}</p>\n<p>输出结果 ， 0 ，1，2，3</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。</p>\n<p>2,定义形式：</p>\n<p>enum 枚举名称 {元素1，元素2，元素3，…};</p>\n<p>例如： enum Season {spring,summer,autumn,winter};</p>\n<p>3,枚举变量的定义有3种方式</p>\n<p>a,先定义枚举类型，再定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter};</p>\n<p>enum Season s;</p>\n<p>b,定义枚举类型的同时定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter}  s;</p>\n<p>c,省略枚举名称，直接定义枚举变量</p>\n<p>enum {spring,summer,autumn,winter} s;</p>\n<p>使用以上3中方式中的任何一种方式都是可以的。</p>\n<p>4，基本操作</p>\n<p>a,赋值操作</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>s = spring; // 等价于 s = 0;</p>\n<p>s = 3;//等价于 s = winter;</p>\n<p>b,遍历</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>// 遍历枚举元素</p>\n<p>for (s = spring; s &lt;= winter; s++) {</p>\n<pre><code>printf(&quot;枚举元素：%d \\n&quot;, s);</code></pre><p>}</p>\n<p>输出结果 ， 0 ，1，2，3</p>\n"},{"title":"C语言中指针的简单介绍","date":"2020-04-03T02:58:59.000Z","_content":"\n一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。\n\n二：指针定义：\n\n类名标示符  *指针变量名\n\n例如：\n\nint *a;\n\nint *b;\n\nfloat *c;\n\n*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。\n\n\n\n三：指针的初始化\n\n有两种方式，\n\n1，先定义后初始化\n\nint i=10;\n\nint *p;\n\np=&； \n\n\n\n2，在定义的同时就初始化\n\nint i=10;\n\nint *p=&；\n\n\n\n四：使用方法\n\n1，赋值\n\nint a=5;\n\nint *p=&a;\n\n*p=6;\n\nprintf(\"a的值是%d\",a);   //a=6\n\n2, 取值\n\nint a=5;\n\nint *p=&a;\n\nint b=*p;\n\nprintf(\"b的值为%d\",b);  //b=5\n\n3,注意事项\n\n在指针变量未指向地址之前，不要对它所指的内容赋值。\n\nint *p;\n\n//这是错误做法\n\n*p=5;\n","source":"_posts/c/c-pointer-desc.md","raw":"---\ntitle: C语言中指针的简单介绍\ndate: 2020-04-03 10:58:59\ncategories: C语言\ntags: C\n---\n\n一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。\n\n二：指针定义：\n\n类名标示符  *指针变量名\n\n例如：\n\nint *a;\n\nint *b;\n\nfloat *c;\n\n*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。\n\n\n\n三：指针的初始化\n\n有两种方式，\n\n1，先定义后初始化\n\nint i=10;\n\nint *p;\n\np=&； \n\n\n\n2，在定义的同时就初始化\n\nint i=10;\n\nint *p=&；\n\n\n\n四：使用方法\n\n1，赋值\n\nint a=5;\n\nint *p=&a;\n\n*p=6;\n\nprintf(\"a的值是%d\",a);   //a=6\n\n2, 取值\n\nint a=5;\n\nint *p=&a;\n\nint b=*p;\n\nprintf(\"b的值为%d\",b);  //b=5\n\n3,注意事项\n\n在指针变量未指向地址之前，不要对它所指的内容赋值。\n\nint *p;\n\n//这是错误做法\n\n*p=5;\n","slug":"c/c-pointer-desc","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxs0004l4s61wircrzn","content":"<p>一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。</p>\n<p>二：指针定义：</p>\n<p>类名标示符  *指针变量名</p>\n<p>例如：</p>\n<p>int *a;</p>\n<p>int *b;</p>\n<p>float *c;</p>\n<p>*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。</p>\n<p>三：指针的初始化</p>\n<p>有两种方式，</p>\n<p>1，先定义后初始化</p>\n<p>int i=10;</p>\n<p>int *p;</p>\n<p>p=&amp;； </p>\n<p>2，在定义的同时就初始化</p>\n<p>int i=10;</p>\n<p>int *p=&amp;；</p>\n<p>四：使用方法</p>\n<p>1，赋值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>*p=6;</p>\n<p>printf(“a的值是%d”,a);   //a=6</p>\n<p>2, 取值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>int b=*p;</p>\n<p>printf(“b的值为%d”,b);  //b=5</p>\n<p>3,注意事项</p>\n<p>在指针变量未指向地址之前，不要对它所指的内容赋值。</p>\n<p>int *p;</p>\n<p>//这是错误做法</p>\n<p>*p=5;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。</p>\n<p>二：指针定义：</p>\n<p>类名标示符  *指针变量名</p>\n<p>例如：</p>\n<p>int *a;</p>\n<p>int *b;</p>\n<p>float *c;</p>\n<p>*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。</p>\n<p>三：指针的初始化</p>\n<p>有两种方式，</p>\n<p>1，先定义后初始化</p>\n<p>int i=10;</p>\n<p>int *p;</p>\n<p>p=&amp;； </p>\n<p>2，在定义的同时就初始化</p>\n<p>int i=10;</p>\n<p>int *p=&amp;；</p>\n<p>四：使用方法</p>\n<p>1，赋值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>*p=6;</p>\n<p>printf(“a的值是%d”,a);   //a=6</p>\n<p>2, 取值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>int b=*p;</p>\n<p>printf(“b的值为%d”,b);  //b=5</p>\n<p>3,注意事项</p>\n<p>在指针变量未指向地址之前，不要对它所指的内容赋值。</p>\n<p>int *p;</p>\n<p>//这是错误做法</p>\n<p>*p=5;</p>\n"},{"title":"C语言基本数据类型简单介绍","date":"2020-04-02T11:39:11.000Z","_content":"\n\nc语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。\n\n基本数据类型包括int ,float, double, char这四种。\n\nint类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。\n\n\n\n在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如\n\n\n\n\n\n这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。\n\n\n\n如果int类型的变量是全局变量，系统会默认赋值为0。例如：\n\n\n\nchar类型只能存储一个字符，例如：\n\nchar a1='A';\n\nchar a2='b';\n\n\n\n其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1='A';","source":"_posts/c/c语言基本数据类型简单介绍.md","raw":"---\ntitle: C语言基本数据类型简单介绍\ndate: 2020-04-02 19:39:11\ncategories: C语言\ntags: C\n---\n\n\nc语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。\n\n基本数据类型包括int ,float, double, char这四种。\n\nint类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。\n\n\n\n在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如\n\n\n\n\n\n这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。\n\n\n\n如果int类型的变量是全局变量，系统会默认赋值为0。例如：\n\n\n\nchar类型只能存储一个字符，例如：\n\nchar a1='A';\n\nchar a2='b';\n\n\n\n其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1='A';","slug":"c/c语言基本数据类型简单介绍","published":1,"updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxv0007l4s66tho61q0","content":"<p>c语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。</p>\n<p>基本数据类型包括int ,float, double, char这四种。</p>\n<p>int类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。</p>\n<p>在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如</p>\n<p>这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。</p>\n<p>如果int类型的变量是全局变量，系统会默认赋值为0。例如：</p>\n<p>char类型只能存储一个字符，例如：</p>\n<p>char a1=’A’;</p>\n<p>char a2=’b’;</p>\n<p>其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1=’A’;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>c语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。</p>\n<p>基本数据类型包括int ,float, double, char这四种。</p>\n<p>int类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。</p>\n<p>在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如</p>\n<p>这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。</p>\n<p>如果int类型的变量是全局变量，系统会默认赋值为0。例如：</p>\n<p>char类型只能存储一个字符，例如：</p>\n<p>char a1=’A’;</p>\n<p>char a2=’b’;</p>\n<p>其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1=’A’;</p>\n"},{"title":"C语言中的字符串的定义及初始化和输出","date":"2020-04-02T11:44:45.000Z","_content":"\n简介：\n\nc语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。\n\n字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。\n\n\n\n字符串的初始化：\n\n例如：\n\nchar a[4]={'p','z','l','\\0'}；\n\n\n\nchar c[2];\n\nc[0]='a';\n\nc[1]='b';\n\nc[2]='\\0';\n\n\n\n字符串的输出：\n\n1,用printf函数输出  \n\nchar a[4]={'p','z','l','\\0'};\n\nprinft(\"%s\",a);\n\n输出结果：pzl\n\n2,puts函数\n\n用法： 例如：\n\nputs(“pzl”);   \n\n输出结果：pzl\n\nputs函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。\n\n同时输出多个字符串：printf(“%s - %s”,\"pzl\",“pzl”);","source":"_posts/c/c语言中的字符串的定义及初始化和输出.md","raw":"---\ntitle: C语言中的字符串的定义及初始化和输出\ndate: 2020-04-02 19:44:45\ncategories: C语言\ntags: C\n---\n\n简介：\n\nc语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。\n\n字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。\n\n\n\n字符串的初始化：\n\n例如：\n\nchar a[4]={'p','z','l','\\0'}；\n\n\n\nchar c[2];\n\nc[0]='a';\n\nc[1]='b';\n\nc[2]='\\0';\n\n\n\n字符串的输出：\n\n1,用printf函数输出  \n\nchar a[4]={'p','z','l','\\0'};\n\nprinft(\"%s\",a);\n\n输出结果：pzl\n\n2,puts函数\n\n用法： 例如：\n\nputs(“pzl”);   \n\n输出结果：pzl\n\nputs函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。\n\n同时输出多个字符串：printf(“%s - %s”,\"pzl\",“pzl”);","slug":"c/c语言中的字符串的定义及初始化和输出","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxv0008l4s63xha519z","content":"<p>简介：</p>\n<p>c语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。</p>\n<p>字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。</p>\n<p>字符串的初始化：</p>\n<p>例如：</p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’}；</p>\n<p>char c[2];</p>\n<p>c[0]=’a’;</p>\n<p>c[1]=’b’;</p>\n<p>c[2]=’\\0’;</p>\n<p>字符串的输出：</p>\n<p>1,用printf函数输出  </p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’};</p>\n<p>prinft(“%s”,a);</p>\n<p>输出结果：pzl</p>\n<p>2,puts函数</p>\n<p>用法： 例如：</p>\n<p>puts(“pzl”);   </p>\n<p>输出结果：pzl</p>\n<p>puts函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。</p>\n<p>同时输出多个字符串：printf(“%s - %s”,”pzl”,“pzl”);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简介：</p>\n<p>c语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。</p>\n<p>字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。</p>\n<p>字符串的初始化：</p>\n<p>例如：</p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’}；</p>\n<p>char c[2];</p>\n<p>c[0]=’a’;</p>\n<p>c[1]=’b’;</p>\n<p>c[2]=’\\0’;</p>\n<p>字符串的输出：</p>\n<p>1,用printf函数输出  </p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’};</p>\n<p>prinft(“%s”,a);</p>\n<p>输出结果：pzl</p>\n<p>2,puts函数</p>\n<p>用法： 例如：</p>\n<p>puts(“pzl”);   </p>\n<p>输出结果：pzl</p>\n<p>puts函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。</p>\n<p>同时输出多个字符串：printf(“%s - %s”,”pzl”,“pzl”);</p>\n"},{"title":"C语言中的冒泡排序简单介绍","date":"2020-04-03T02:55:10.000Z","_content":"\n\n简介：\n\n冒泡排序是一种比较简单地排序算法。\n\n它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。\n\n这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。\n\n\n\n排序的代码结构：\n\n\n``` \nvoid nums_sort(int nums[],int count){\n\n\tint i,j,temp;\n\tfor(i=0;i<count-1;i++){\n\t\tfor(j=0;j<count-1-j;j++){\n\t\t\tif(nums[j]>nuns[j+1]){\n\n\t\t\t  \ttemp=nums[j];\t\t\t\n\t\t\t\tnums[j]=nums[j+1];\n\t\t\t\tnums[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n``` ","source":"_posts/c/c-maopaopaixu.md","raw":"---\ntitle: C语言中的冒泡排序简单介绍\ndate: 2020-04-03 10:55:10\ncategories: C语言\ntags: C\n---\n\n\n简介：\n\n冒泡排序是一种比较简单地排序算法。\n\n它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。\n\n这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。\n\n\n\n排序的代码结构：\n\n\n``` \nvoid nums_sort(int nums[],int count){\n\n\tint i,j,temp;\n\tfor(i=0;i<count-1;i++){\n\t\tfor(j=0;j<count-1-j;j++){\n\t\t\tif(nums[j]>nuns[j+1]){\n\n\t\t\t  \ttemp=nums[j];\t\t\t\n\t\t\t\tnums[j]=nums[j+1];\n\t\t\t\tnums[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n``` ","slug":"c/c-maopaopaixu","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxx0009l4s6a7nqha5y","content":"<p>简介：</p>\n<p>冒泡排序是一种比较简单地排序算法。</p>\n<p>它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。</p>\n<p>这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。</p>\n<p>排序的代码结构：</p>\n<pre><code>void nums_sort(int nums[],int count){\n\n    int i,j,temp;\n    for(i=0;i&lt;count-1;i++){\n        for(j=0;j&lt;count-1-j;j++){\n            if(nums[j]&gt;nuns[j+1]){\n\n                  temp=nums[j];            \n                nums[j]=nums[j+1];\n                nums[j+1]=temp;\n            }\n        }\n    }\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>简介：</p>\n<p>冒泡排序是一种比较简单地排序算法。</p>\n<p>它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。</p>\n<p>这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。</p>\n<p>排序的代码结构：</p>\n<pre><code>void nums_sort(int nums[],int count){\n\n    int i,j,temp;\n    for(i=0;i&lt;count-1;i++){\n        for(j=0;j&lt;count-1-j;j++){\n            if(nums[j]&gt;nuns[j+1]){\n\n                  temp=nums[j];            \n                nums[j]=nums[j+1];\n                nums[j+1]=temp;\n            }\n        }\n    }\n}</code></pre>"},{"title":"Hexo简单介绍","date":"2020-04-02T08:52:27.000Z","_content":"\n## 一、hexo简介\n\n#### 1, hexo是什么\n> hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.\n\n#### 2, 安装\n\n``` \nHexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n``` \n\n使用apt-get安装 nodejs.\n\n``` \n$ sudo apt-get install -y nodejs\n``` \n\n#### 3, 安装npm\n\n已经安装好了nodejs, 现在安装npm.\n\n``` \n$ sudo apt-get install npm\n``` \n\n#### 4, 安装hexo\n\n现在我们使用npm安装hexo.\n\n``` \n$ sudo npm install hexo-cli -g\n``` \n\n## 二、创建Blog\n\n现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.\n\n#### 1, 创建一个叫blog网站\n\n``` \n$ hexo init blog\n``` \n\n> 注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.\n\n\n#### 2, 我们进入创建的blog目录里. 并运行该服务.\n\n``` \n$ cd blog\n$ npm install\n$ hexo server\n``` \n\n#### 3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\n\n#### 4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\n\n``` \ndeploy:\n  type: 'git'\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master\n``` \n\n>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.\n\n#### 5, 安装部署使用到的git插件.\n\n在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署\n\n``` \n$ npm install hexo-deployer-git --save\n``` \n\n#### 6, 进行生成网站\n当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.\n\n``` \n$ cd blog\n$ hexo g\n``` \n\n#### 7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\n``` \n$ hexo d\n``` \n\n如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件\n\n``` \nERROR Deployer not found: git\n``` \n\n\n## 三、hexo常用命令\n\n#### 1, 安装，升级，初始化\n\n``` \nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n``` \n\n#### 2, 简写：\n\n``` \nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n``` \n\n#### 3, 服务器：\n\n``` \nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n``` \n\n#### 4, 监视文件变动：\n\n``` \nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n``` \n\n完成后部署：\n\n- 两个命令的作用是相同的\n- hexo generate --deploy\n- hexo deploy --generate\n\n``` \nhexo deploy -g\nhexo server -g\n``` \n\n#### 5, 草稿\n\n``` \nhexo publish [layout] <title>\n``` \n\n#### 6, 模版\n\n``` \nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n``` \n\n| 变量 | 描述 |\n| --- | --- | \n| layout | 布局 |\n| title | 标题 |\n| date | 文件建立日期 |\n\n``` \ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n``` \n","source":"_posts/hexo/hello-hexo.md","raw":"---\ntitle: 'Hexo简单介绍'\ndate: 2020-04-02 16:52:27\ncategories: Hexo\ntags:\n---\n\n## 一、hexo简介\n\n#### 1, hexo是什么\n> hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.\n\n#### 2, 安装\n\n``` \nHexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n``` \n\n使用apt-get安装 nodejs.\n\n``` \n$ sudo apt-get install -y nodejs\n``` \n\n#### 3, 安装npm\n\n已经安装好了nodejs, 现在安装npm.\n\n``` \n$ sudo apt-get install npm\n``` \n\n#### 4, 安装hexo\n\n现在我们使用npm安装hexo.\n\n``` \n$ sudo npm install hexo-cli -g\n``` \n\n## 二、创建Blog\n\n现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.\n\n#### 1, 创建一个叫blog网站\n\n``` \n$ hexo init blog\n``` \n\n> 注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.\n\n\n#### 2, 我们进入创建的blog目录里. 并运行该服务.\n\n``` \n$ cd blog\n$ npm install\n$ hexo server\n``` \n\n#### 3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\n\n#### 4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\n\n``` \ndeploy:\n  type: 'git'\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master\n``` \n\n>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.\n\n#### 5, 安装部署使用到的git插件.\n\n在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署\n\n``` \n$ npm install hexo-deployer-git --save\n``` \n\n#### 6, 进行生成网站\n当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.\n\n``` \n$ cd blog\n$ hexo g\n``` \n\n#### 7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\n``` \n$ hexo d\n``` \n\n如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件\n\n``` \nERROR Deployer not found: git\n``` \n\n\n## 三、hexo常用命令\n\n#### 1, 安装，升级，初始化\n\n``` \nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n``` \n\n#### 2, 简写：\n\n``` \nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n``` \n\n#### 3, 服务器：\n\n``` \nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n``` \n\n#### 4, 监视文件变动：\n\n``` \nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n``` \n\n完成后部署：\n\n- 两个命令的作用是相同的\n- hexo generate --deploy\n- hexo deploy --generate\n\n``` \nhexo deploy -g\nhexo server -g\n``` \n\n#### 5, 草稿\n\n``` \nhexo publish [layout] <title>\n``` \n\n#### 6, 模版\n\n``` \nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n``` \n\n| 变量 | 描述 |\n| --- | --- | \n| layout | 布局 |\n| title | 标题 |\n| date | 文件建立日期 |\n\n``` \ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n``` \n","slug":"hexo/hello-hexo","published":1,"updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zxz000dl4s67aeh3v5a","content":"<h2 id=\"一、hexo简介\"><a href=\"#一、hexo简介\" class=\"headerlink\" title=\"一、hexo简介\"></a>一、hexo简介</h2><h4 id=\"1-hexo是什么\"><a href=\"#1-hexo是什么\" class=\"headerlink\" title=\"1, hexo是什么\"></a>1, hexo是什么</h4><blockquote>\n<p>hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p>\n</blockquote>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2, 安装\"></a>2, 安装</h4><pre><code>Hexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.</code></pre><p>使用apt-get安装 nodejs.</p>\n<pre><code>$ sudo apt-get install -y nodejs</code></pre><h4 id=\"3-安装npm\"><a href=\"#3-安装npm\" class=\"headerlink\" title=\"3, 安装npm\"></a>3, 安装npm</h4><p>已经安装好了nodejs, 现在安装npm.</p>\n<pre><code>$ sudo apt-get install npm</code></pre><h4 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4, 安装hexo\"></a>4, 安装hexo</h4><p>现在我们使用npm安装hexo.</p>\n<pre><code>$ sudo npm install hexo-cli -g</code></pre><h2 id=\"二、创建Blog\"><a href=\"#二、创建Blog\" class=\"headerlink\" title=\"二、创建Blog\"></a>二、创建Blog</h2><p>现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.</p>\n<h4 id=\"1-创建一个叫blog网站\"><a href=\"#1-创建一个叫blog网站\" class=\"headerlink\" title=\"1, 创建一个叫blog网站\"></a>1, 创建一个叫blog网站</h4><pre><code>$ hexo init blog</code></pre><blockquote>\n<p>注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.</p>\n</blockquote>\n<h4 id=\"2-我们进入创建的blog目录里-并运行该服务\"><a href=\"#2-我们进入创建的blog目录里-并运行该服务\" class=\"headerlink\" title=\"2, 我们进入创建的blog目录里. 并运行该服务.\"></a>2, 我们进入创建的blog目录里. 并运行该服务.</h4><pre><code>$ cd blog\n$ npm install\n$ hexo server</code></pre><h4 id=\"3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\"><a href=\"#3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\" class=\"headerlink\" title=\"3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\"></a>3, 打开浏览器, 在地址栏输入<a href=\"http://localhost:4000/可以看到我们刚刚创建的blog首页\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以看到我们刚刚创建的blog首页</a>.</h4><h4 id=\"4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\"><a href=\"#4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\" class=\"headerlink\" title=\"4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\"></a>4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.</h4><pre><code>deploy:\n  type: &apos;git&apos;\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master</code></pre><blockquote>\n<p>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.</p>\n</blockquote>\n<h4 id=\"5-安装部署使用到的git插件\"><a href=\"#5-安装部署使用到的git插件\" class=\"headerlink\" title=\"5, 安装部署使用到的git插件.\"></a>5, 安装部署使用到的git插件.</h4><p>在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署</p>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h4 id=\"6-进行生成网站\"><a href=\"#6-进行生成网站\" class=\"headerlink\" title=\"6, 进行生成网站\"></a>6, 进行生成网站</h4><p>当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.</p>\n<pre><code>$ cd blog\n$ hexo g</code></pre><h4 id=\"7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\"><a href=\"#7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\" class=\"headerlink\" title=\"7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\"></a>7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.</h4><pre><code>$ hexo d</code></pre><p>如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件</p>\n<pre><code>ERROR Deployer not found: git</code></pre><h2 id=\"三、hexo常用命令\"><a href=\"#三、hexo常用命令\" class=\"headerlink\" title=\"三、hexo常用命令\"></a>三、hexo常用命令</h2><h4 id=\"1-安装，升级，初始化\"><a href=\"#1-安装，升级，初始化\" class=\"headerlink\" title=\"1, 安装，升级，初始化\"></a>1, 安装，升级，初始化</h4><pre><code>npm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化</code></pre><h4 id=\"2-简写：\"><a href=\"#2-简写：\" class=\"headerlink\" title=\"2, 简写：\"></a>2, 简写：</h4><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署</code></pre><h4 id=\"3-服务器：\"><a href=\"#3-服务器：\" class=\"headerlink\" title=\"3, 服务器：\"></a>3, 服务器：</h4><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署</code></pre><h4 id=\"4-监视文件变动：\"><a href=\"#4-监视文件变动：\" class=\"headerlink\" title=\"4, 监视文件变动：\"></a>4, 监视文件变动：</h4><pre><code>hexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动</code></pre><p>完成后部署：</p>\n<ul>\n<li>两个命令的作用是相同的</li>\n<li>hexo generate –deploy</li>\n<li>hexo deploy –generate</li>\n</ul>\n<pre><code>hexo deploy -g\nhexo server -g</code></pre><h4 id=\"5-草稿\"><a href=\"#5-草稿\" class=\"headerlink\" title=\"5, 草稿\"></a>5, 草稿</h4><pre><code>hexo publish [layout] &lt;title&gt;</code></pre><h4 id=\"6-模版\"><a href=\"#6-模版\" class=\"headerlink\" title=\"6, 模版\"></a>6, 模版</h4><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] &lt;title&gt;\nhexo new photo &quot;My Gallery&quot;\nhexo new &quot;Hello World&quot; --lang tw</code></pre><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody></table>\n<pre><code>title: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、hexo简介\"><a href=\"#一、hexo简介\" class=\"headerlink\" title=\"一、hexo简介\"></a>一、hexo简介</h2><h4 id=\"1-hexo是什么\"><a href=\"#1-hexo是什么\" class=\"headerlink\" title=\"1, hexo是什么\"></a>1, hexo是什么</h4><blockquote>\n<p>hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p>\n</blockquote>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2, 安装\"></a>2, 安装</h4><pre><code>Hexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.</code></pre><p>使用apt-get安装 nodejs.</p>\n<pre><code>$ sudo apt-get install -y nodejs</code></pre><h4 id=\"3-安装npm\"><a href=\"#3-安装npm\" class=\"headerlink\" title=\"3, 安装npm\"></a>3, 安装npm</h4><p>已经安装好了nodejs, 现在安装npm.</p>\n<pre><code>$ sudo apt-get install npm</code></pre><h4 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4, 安装hexo\"></a>4, 安装hexo</h4><p>现在我们使用npm安装hexo.</p>\n<pre><code>$ sudo npm install hexo-cli -g</code></pre><h2 id=\"二、创建Blog\"><a href=\"#二、创建Blog\" class=\"headerlink\" title=\"二、创建Blog\"></a>二、创建Blog</h2><p>现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.</p>\n<h4 id=\"1-创建一个叫blog网站\"><a href=\"#1-创建一个叫blog网站\" class=\"headerlink\" title=\"1, 创建一个叫blog网站\"></a>1, 创建一个叫blog网站</h4><pre><code>$ hexo init blog</code></pre><blockquote>\n<p>注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.</p>\n</blockquote>\n<h4 id=\"2-我们进入创建的blog目录里-并运行该服务\"><a href=\"#2-我们进入创建的blog目录里-并运行该服务\" class=\"headerlink\" title=\"2, 我们进入创建的blog目录里. 并运行该服务.\"></a>2, 我们进入创建的blog目录里. 并运行该服务.</h4><pre><code>$ cd blog\n$ npm install\n$ hexo server</code></pre><h4 id=\"3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\"><a href=\"#3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\" class=\"headerlink\" title=\"3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\"></a>3, 打开浏览器, 在地址栏输入<a href=\"http://localhost:4000/可以看到我们刚刚创建的blog首页\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以看到我们刚刚创建的blog首页</a>.</h4><h4 id=\"4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\"><a href=\"#4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\" class=\"headerlink\" title=\"4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\"></a>4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.</h4><pre><code>deploy:\n  type: &apos;git&apos;\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master</code></pre><blockquote>\n<p>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.</p>\n</blockquote>\n<h4 id=\"5-安装部署使用到的git插件\"><a href=\"#5-安装部署使用到的git插件\" class=\"headerlink\" title=\"5, 安装部署使用到的git插件.\"></a>5, 安装部署使用到的git插件.</h4><p>在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署</p>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h4 id=\"6-进行生成网站\"><a href=\"#6-进行生成网站\" class=\"headerlink\" title=\"6, 进行生成网站\"></a>6, 进行生成网站</h4><p>当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.</p>\n<pre><code>$ cd blog\n$ hexo g</code></pre><h4 id=\"7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\"><a href=\"#7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\" class=\"headerlink\" title=\"7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\"></a>7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.</h4><pre><code>$ hexo d</code></pre><p>如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件</p>\n<pre><code>ERROR Deployer not found: git</code></pre><h2 id=\"三、hexo常用命令\"><a href=\"#三、hexo常用命令\" class=\"headerlink\" title=\"三、hexo常用命令\"></a>三、hexo常用命令</h2><h4 id=\"1-安装，升级，初始化\"><a href=\"#1-安装，升级，初始化\" class=\"headerlink\" title=\"1, 安装，升级，初始化\"></a>1, 安装，升级，初始化</h4><pre><code>npm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化</code></pre><h4 id=\"2-简写：\"><a href=\"#2-简写：\" class=\"headerlink\" title=\"2, 简写：\"></a>2, 简写：</h4><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署</code></pre><h4 id=\"3-服务器：\"><a href=\"#3-服务器：\" class=\"headerlink\" title=\"3, 服务器：\"></a>3, 服务器：</h4><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署</code></pre><h4 id=\"4-监视文件变动：\"><a href=\"#4-监视文件变动：\" class=\"headerlink\" title=\"4, 监视文件变动：\"></a>4, 监视文件变动：</h4><pre><code>hexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动</code></pre><p>完成后部署：</p>\n<ul>\n<li>两个命令的作用是相同的</li>\n<li>hexo generate –deploy</li>\n<li>hexo deploy –generate</li>\n</ul>\n<pre><code>hexo deploy -g\nhexo server -g</code></pre><h4 id=\"5-草稿\"><a href=\"#5-草稿\" class=\"headerlink\" title=\"5, 草稿\"></a>5, 草稿</h4><pre><code>hexo publish [layout] &lt;title&gt;</code></pre><h4 id=\"6-模版\"><a href=\"#6-模版\" class=\"headerlink\" title=\"6, 模版\"></a>6, 模版</h4><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] &lt;title&gt;\nhexo new photo &quot;My Gallery&quot;\nhexo new &quot;Hello World&quot; --lang tw</code></pre><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody></table>\n<pre><code>title: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</code></pre>"},{"title":"C语言基本运算中的自增运算符和自减运算符以及三目运算符","date":"2020-04-02T11:42:20.000Z","_content":"\n\n一：简介\n\n自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。\n\n自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。\n\n自增和自减用于变量，不能用于常量。\n\n\n\n二： a++和++a的区别\n\na++ 是先赋值，后计算。\n\n++a 是先计算，后赋值。\n\n例如：  \n\nint a=5;\n\nint b=a++;\n\n程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算\n\n但是，比如下面这种情况：\n\nint a=5;\n\nint b=++a;\n\n程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b","source":"_posts/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符.md","raw":"---\ntitle: C语言基本运算中的自增运算符和自减运算符以及三目运算符\ndate: 2020-04-02 19:42:20\ncategories: C语言\ntags: C\n---\n\n\n一：简介\n\n自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。\n\n自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。\n\n自增和自减用于变量，不能用于常量。\n\n\n\n二： a++和++a的区别\n\na++ 是先赋值，后计算。\n\n++a 是先计算，后赋值。\n\n例如：  \n\nint a=5;\n\nint b=a++;\n\n程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算\n\n但是，比如下面这种情况：\n\nint a=5;\n\nint b=++a;\n\n程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b","slug":"c/c语言基本运算中的自增运算符和自减运算符以及三目运算符","published":1,"updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zy0000fl4s62dek9l76","content":"<p>一：简介</p>\n<p>自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。</p>\n<p>自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。</p>\n<p>自增和自减用于变量，不能用于常量。</p>\n<p>二： a++和++a的区别</p>\n<p>a++ 是先赋值，后计算。</p>\n<p>++a 是先计算，后赋值。</p>\n<p>例如：  </p>\n<p>int a=5;</p>\n<p>int b=a++;</p>\n<p>程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算</p>\n<p>但是，比如下面这种情况：</p>\n<p>int a=5;</p>\n<p>int b=++a;</p>\n<p>程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：简介</p>\n<p>自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。</p>\n<p>自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。</p>\n<p>自增和自减用于变量，不能用于常量。</p>\n<p>二： a++和++a的区别</p>\n<p>a++ 是先赋值，后计算。</p>\n<p>++a 是先计算，后赋值。</p>\n<p>例如：  </p>\n<p>int a=5;</p>\n<p>int b=a++;</p>\n<p>程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算</p>\n<p>但是，比如下面这种情况：</p>\n<p>int a=5;</p>\n<p>int b=++a;</p>\n<p>程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo/hello-world","published":1,"date":"2020-09-01T12:12:43.651Z","updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg5zy2000kl4s66m6i6wkt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"01-Dart环境搭建","toc":true,"date":"2020-09-01T13:09:28.000Z","_content":"\n\nDart 介绍：\n\nDart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。\n\nDart环境搭建：\n1，要在本地开发Dart程序，首先要安装Dart sdk\n\n官网文档：  https://dart.dev/get-dart\n\nwindowns:\thttps://gekorm.com/dart-windows/\n\nmac:  如果电脑没有安装brew这个工具， 首先得安装它， https://brew.sh\n\n安装dart命令：\nbrew tap dart-lang/dart\nbrew install dart\n\n2, Dart开发工具：\nDart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。\n\n这里我们使用 在VS Code 中配置Dart\n\n1,  找到 VS Code 插件 安装 Dart\n2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/01-Dart环境搭建.md","raw":"---\ntitle: 01-Dart环境搭建\ntoc: true\ndate: 2020-09-01 21:09:28\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\nDart 介绍：\n\nDart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。\n\nDart环境搭建：\n1，要在本地开发Dart程序，首先要安装Dart sdk\n\n官网文档：  https://dart.dev/get-dart\n\nwindowns:\thttps://gekorm.com/dart-windows/\n\nmac:  如果电脑没有安装brew这个工具， 首先得安装它， https://brew.sh\n\n安装dart命令：\nbrew tap dart-lang/dart\nbrew install dart\n\n2, Dart开发工具：\nDart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。\n\n这里我们使用 在VS Code 中配置Dart\n\n1,  找到 VS Code 插件 安装 Dart\n2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/01-Dart环境搭建","published":1,"updated":"2020-09-01T13:36:25.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6002000vl4s60x95g8q7","content":"<p>Dart 介绍：</p>\n<p>Dart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。</p>\n<p>Dart环境搭建：<br>1，要在本地开发Dart程序，首先要安装Dart sdk</p>\n<p>官网文档：  <a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">https://dart.dev/get-dart</a></p>\n<p>windowns:    <a href=\"https://gekorm.com/dart-windows/\" target=\"_blank\" rel=\"noopener\">https://gekorm.com/dart-windows/</a></p>\n<p>mac:  如果电脑没有安装brew这个工具， 首先得安装它， <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">https://brew.sh</a></p>\n<p>安装dart命令：<br>brew tap dart-lang/dart<br>brew install dart</p>\n<p>2, Dart开发工具：<br>Dart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。</p>\n<p>这里我们使用 在VS Code 中配置Dart</p>\n<p>1,  找到 VS Code 插件 安装 Dart<br>2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Dart 介绍：</p>\n<p>Dart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。</p>\n<p>Dart环境搭建：<br>1，要在本地开发Dart程序，首先要安装Dart sdk</p>\n<p>官网文档：  <a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">https://dart.dev/get-dart</a></p>\n<p>windowns:    <a href=\"https://gekorm.com/dart-windows/\" target=\"_blank\" rel=\"noopener\">https://gekorm.com/dart-windows/</a></p>\n<p>mac:  如果电脑没有安装brew这个工具， 首先得安装它， <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">https://brew.sh</a></p>\n<p>安装dart命令：<br>brew tap dart-lang/dart<br>brew install dart</p>\n<p>2, Dart开发工具：<br>Dart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。</p>\n<p>这里我们使用 在VS Code 中配置Dart</p>\n<p>1,  找到 VS Code 插件 安装 Dart<br>2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"04-Dart运算符","toc":true,"date":"2020-09-01T13:20:13.000Z","_content":"\n注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符， \n另外，这里还有 条件表达式， 类型判断。\n\n1，算数运算符：  + - *  / (加减乘除),   ~/ （取整），  %（取余）\n这里的 ~/ 取整运算符，  例如：  14~/10 = 2;\n\n2, 关系运算符：  == ,  !=,   >,   <,   >=,   <=\n3, 逻辑运算符:   !（取反）    &&    ||\n4, 赋值运算符:\n基础赋值运算符，   = ,      ??=\n复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)\n这里讲一下  ??= 这个运算符\n\nvar a = \"111\";\na??=\"222\";\n\n它的意思是：  如果a 为空，那么就会将222赋值给a。\n\n5，条件表达式   \nif else,    switch case， 跟其他语言一样，不再讲解。\n\n三目运算符:\nbool flat = true;\nString str = flag ? \"我是true\":\"我是false\";\nprint(str);\n\n?? 运算符:(如果为空，就直接赋值)\n  var a;\n  var b = a ?? 10;\n  print(b);   // b=10, 已经被赋值\n\n  var c = 20;\n  var d = c ?? 30;  \n  print(d);   //d=20, 因为c不等于空，有值\n\n6, 类型转换，Number 与 String 之间的转换\nNumber类型转换成String类型：  toString()\nString类型转换成Number类型：  int.parse() , double,parse()\n\n其他类型转换成 boolean类型：\nisEmpty 判断是否为空;\n  var str;\n  if(str == null){\n    print(\"str is null\");\n  }else if(str.isEmpty){\n    print(\"str 是 空\");\n  }else{\n    print(\"str 非 空\");\n  }\n\n\n  //NaN 类型\n  var myNum = 0/0;\n  print(myNum);\n\n  if(myNum.isNaN){\n    print(\"是 NaN 类型\");\n  }\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/04-Dart运算符.md","raw":"---\ntitle: 04-Dart运算符\ntoc: true\ndate: 2020-09-01 21:20:13\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符， \n另外，这里还有 条件表达式， 类型判断。\n\n1，算数运算符：  + - *  / (加减乘除),   ~/ （取整），  %（取余）\n这里的 ~/ 取整运算符，  例如：  14~/10 = 2;\n\n2, 关系运算符：  == ,  !=,   >,   <,   >=,   <=\n3, 逻辑运算符:   !（取反）    &&    ||\n4, 赋值运算符:\n基础赋值运算符，   = ,      ??=\n复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)\n这里讲一下  ??= 这个运算符\n\nvar a = \"111\";\na??=\"222\";\n\n它的意思是：  如果a 为空，那么就会将222赋值给a。\n\n5，条件表达式   \nif else,    switch case， 跟其他语言一样，不再讲解。\n\n三目运算符:\nbool flat = true;\nString str = flag ? \"我是true\":\"我是false\";\nprint(str);\n\n?? 运算符:(如果为空，就直接赋值)\n  var a;\n  var b = a ?? 10;\n  print(b);   // b=10, 已经被赋值\n\n  var c = 20;\n  var d = c ?? 30;  \n  print(d);   //d=20, 因为c不等于空，有值\n\n6, 类型转换，Number 与 String 之间的转换\nNumber类型转换成String类型：  toString()\nString类型转换成Number类型：  int.parse() , double,parse()\n\n其他类型转换成 boolean类型：\nisEmpty 判断是否为空;\n  var str;\n  if(str == null){\n    print(\"str is null\");\n  }else if(str.isEmpty){\n    print(\"str 是 空\");\n  }else{\n    print(\"str 非 空\");\n  }\n\n\n  //NaN 类型\n  var myNum = 0/0;\n  print(myNum);\n\n  if(myNum.isNaN){\n    print(\"是 NaN 类型\");\n  }\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/04-Dart运算符","published":1,"updated":"2020-09-01T13:34:40.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6002000wl4s6aaspb61x","content":"<p>注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符，<br>另外，这里还有 条件表达式， 类型判断。</p>\n<p>1，算数运算符：  + - *  / (加减乘除),   <del>/ （取整），  %（取余）<br>这里的 ~/ 取整运算符，  例如：  14</del>/10 = 2;</p>\n<p>2, 关系运算符：  == ,  !=,   &gt;,   &lt;,   &gt;=,   &lt;=<br>3, 逻辑运算符:   !（取反）    &amp;&amp;    ||<br>4, 赋值运算符:<br>基础赋值运算符，   = ,      ??=<br>复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)<br>这里讲一下  ??= 这个运算符</p>\n<p>var a = “111”;<br>a??=”222”;</p>\n<p>它的意思是：  如果a 为空，那么就会将222赋值给a。</p>\n<p>5，条件表达式<br>if else,    switch case， 跟其他语言一样，不再讲解。</p>\n<p>三目运算符:<br>bool flat = true;<br>String str = flag ? “我是true”:”我是false”;<br>print(str);</p>\n<p>?? 运算符:(如果为空，就直接赋值)<br>  var a;<br>  var b = a ?? 10;<br>  print(b);   // b=10, 已经被赋值</p>\n<p>  var c = 20;<br>  var d = c ?? 30;<br>  print(d);   //d=20, 因为c不等于空，有值</p>\n<p>6, 类型转换，Number 与 String 之间的转换<br>Number类型转换成String类型：  toString()<br>String类型转换成Number类型：  int.parse() , double,parse()</p>\n<p>其他类型转换成 boolean类型：<br>isEmpty 判断是否为空;<br>  var str;<br>  if(str == null){<br>    print(“str is null”);<br>  }else if(str.isEmpty){<br>    print(“str 是 空”);<br>  }else{<br>    print(“str 非 空”);<br>  }</p>\n<p>  //NaN 类型<br>  var myNum = 0/0;<br>  print(myNum);</p>\n<p>  if(myNum.isNaN){<br>    print(“是 NaN 类型”);<br>  }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符，<br>另外，这里还有 条件表达式， 类型判断。</p>\n<p>1，算数运算符：  + - *  / (加减乘除),   <del>/ （取整），  %（取余）<br>这里的 ~/ 取整运算符，  例如：  14</del>/10 = 2;</p>\n<p>2, 关系运算符：  == ,  !=,   &gt;,   &lt;,   &gt;=,   &lt;=<br>3, 逻辑运算符:   !（取反）    &amp;&amp;    ||<br>4, 赋值运算符:<br>基础赋值运算符，   = ,      ??=<br>复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)<br>这里讲一下  ??= 这个运算符</p>\n<p>var a = “111”;<br>a??=”222”;</p>\n<p>它的意思是：  如果a 为空，那么就会将222赋值给a。</p>\n<p>5，条件表达式<br>if else,    switch case， 跟其他语言一样，不再讲解。</p>\n<p>三目运算符:<br>bool flat = true;<br>String str = flag ? “我是true”:”我是false”;<br>print(str);</p>\n<p>?? 运算符:(如果为空，就直接赋值)<br>  var a;<br>  var b = a ?? 10;<br>  print(b);   // b=10, 已经被赋值</p>\n<p>  var c = 20;<br>  var d = c ?? 30;<br>  print(d);   //d=20, 因为c不等于空，有值</p>\n<p>6, 类型转换，Number 与 String 之间的转换<br>Number类型转换成String类型：  toString()<br>String类型转换成Number类型：  int.parse() , double,parse()</p>\n<p>其他类型转换成 boolean类型：<br>isEmpty 判断是否为空;<br>  var str;<br>  if(str == null){<br>    print(“str is null”);<br>  }else if(str.isEmpty){<br>    print(“str 是 空”);<br>  }else{<br>    print(“str 非 空”);<br>  }</p>\n<p>  //NaN 类型<br>  var myNum = 0/0;<br>  print(myNum);</p>\n<p>  if(myNum.isNaN){<br>    print(“是 NaN 类型”);<br>  }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"05-图片组件，网络图片以及本地图片，图片裁剪","toc":true,"date":"2020-09-01T13:21:00.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪.md","raw":"---\ntitle: 05-图片组件，网络图片以及本地图片，图片裁剪\ntoc: true\ndate: 2020-09-01 21:21:00\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪","published":1,"updated":"2020-09-01T13:34:43.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6003000yl4s6b10t9oxu","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"03-数据类型","toc":true,"date":"2020-09-01T13:16:43.000Z","_content":"\n/**\n  Dart 中支持以下数据类型:\n  常用数据类型:\n      Numbers（数值）:\n        int \n        doubule\n      Strings (字符串）\n        String\n      Boolean(布尔):\n        bool\n\n      List(数组):\n        在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n      \n      Maps(字典)：\n        通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。\n */\n\n/**\n    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。\n */\n\n1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。\n\n//多行字符串修饰，  三个单引号或者双引号修饰\n  var str = '''   \n    这是第一行\n    第二行\n    。。。\n最后一行\n  ''';\n  print(str);\n\n  var str1 = \"\"\"\n这是双引号修饰1\n\n双引号修饰2\n  \"\"\";\nprint(str1);\n\n2， List类型：\n  //1. 第一种定义List的方式\n  // var l1 = [\"aaa\",\"bbb\",\"ccc\"]; \n  // print(l1);\n\n  // print(l1[0]);\n  // print(l1[1]);\n\n  // print(l1.length);\n\n  //2.第二种定义List的方式\n  // var l2 = new List();\n\n  // l2.add(\"张三\");\n  // l2.add(\"李四\");\n  // l2.add(\"王五\");\n\n  // print(l2);\n  // print(l2.length);\n\n  // l2.removeLast();\n  // print(l2);\n\n  // //3.定义List指定类型\n  // var l3 = new List<String>();\n  // l3.add(\"aa\");\n  // l3.add(\"bb\");\n\n  // print(l3.length);\n  // print(l3);\n\n3， Map类型:\n  //第一种定义 Map的方式\n  // var person = {\n  //   \"name\":\"张三\",\n  //   \"age\":20,\n  //   \"work\":[\"程序员\",\"外卖员\"]\n  // };\n\n  // print(person);\n  // print(person[\"name\"]);\n  // print(person[\"age\"]);\n\n  //第二种定义Mpa的方式\n  // var p = new Map();\n\n  // p[\"name\"] = \"张三\";\n  // p[\"age\"] = 30;\n  // p[\"work\"] = [\"程序员\",\"外卖员\"];\n\n  // print(p);\n\n4, 判断类型\n  //Dart 判断数据类型 is 关键词 来判断。\n\n  // var str = \"1234\";\n  // var str = 11;\n\n  // if(str is String){\n  //   print(\"是字符串类型\");\n  // }else if(str is int){\n  //   print(\"是int类型\");\n  // }else{\n  //   print(\"其他类型\");\n  // }\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/03-数据类型.md","raw":"---\ntitle: 03-数据类型\ntoc: true\ndate: 2020-09-01 21:16:43\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n/**\n  Dart 中支持以下数据类型:\n  常用数据类型:\n      Numbers（数值）:\n        int \n        doubule\n      Strings (字符串）\n        String\n      Boolean(布尔):\n        bool\n\n      List(数组):\n        在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n      \n      Maps(字典)：\n        通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。\n */\n\n/**\n    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。\n */\n\n1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。\n\n//多行字符串修饰，  三个单引号或者双引号修饰\n  var str = '''   \n    这是第一行\n    第二行\n    。。。\n最后一行\n  ''';\n  print(str);\n\n  var str1 = \"\"\"\n这是双引号修饰1\n\n双引号修饰2\n  \"\"\";\nprint(str1);\n\n2， List类型：\n  //1. 第一种定义List的方式\n  // var l1 = [\"aaa\",\"bbb\",\"ccc\"]; \n  // print(l1);\n\n  // print(l1[0]);\n  // print(l1[1]);\n\n  // print(l1.length);\n\n  //2.第二种定义List的方式\n  // var l2 = new List();\n\n  // l2.add(\"张三\");\n  // l2.add(\"李四\");\n  // l2.add(\"王五\");\n\n  // print(l2);\n  // print(l2.length);\n\n  // l2.removeLast();\n  // print(l2);\n\n  // //3.定义List指定类型\n  // var l3 = new List<String>();\n  // l3.add(\"aa\");\n  // l3.add(\"bb\");\n\n  // print(l3.length);\n  // print(l3);\n\n3， Map类型:\n  //第一种定义 Map的方式\n  // var person = {\n  //   \"name\":\"张三\",\n  //   \"age\":20,\n  //   \"work\":[\"程序员\",\"外卖员\"]\n  // };\n\n  // print(person);\n  // print(person[\"name\"]);\n  // print(person[\"age\"]);\n\n  //第二种定义Mpa的方式\n  // var p = new Map();\n\n  // p[\"name\"] = \"张三\";\n  // p[\"age\"] = 30;\n  // p[\"work\"] = [\"程序员\",\"外卖员\"];\n\n  // print(p);\n\n4, 判断类型\n  //Dart 判断数据类型 is 关键词 来判断。\n\n  // var str = \"1234\";\n  // var str = 11;\n\n  // if(str is String){\n  //   print(\"是字符串类型\");\n  // }else if(str is int){\n  //   print(\"是int类型\");\n  // }else{\n  //   print(\"其他类型\");\n  // }\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/03-数据类型","published":1,"updated":"2020-09-01T13:34:37.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6005000zl4s6c61n044e","content":"<p>/**<br>  Dart 中支持以下数据类型:<br>  常用数据类型:<br>      Numbers（数值）:<br>        int<br>        doubule<br>      Strings (字符串）<br>        String<br>      Boolean(布尔):<br>        bool</p>\n<pre><code>List(数组):\n  在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n\nMaps(字典)：\n  通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。</code></pre><p> */</p>\n<p>/**<br>    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。<br> */</p>\n<p>1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。</p>\n<p>//多行字符串修饰，  三个单引号或者双引号修饰<br>  var str = ‘’’<br>    这是第一行<br>    第二行<br>    。。。<br>最后一行<br>  ‘’’;<br>  print(str);</p>\n<p>  var str1 = “””<br>这是双引号修饰1</p>\n<p>双引号修饰2<br>  “””;<br>print(str1);</p>\n<p>2， List类型：<br>  //1. 第一种定义List的方式<br>  // var l1 = [“aaa”,”bbb”,”ccc”];<br>  // print(l1);</p>\n<p>  // print(l1[0]);<br>  // print(l1[1]);</p>\n<p>  // print(l1.length);</p>\n<p>  //2.第二种定义List的方式<br>  // var l2 = new List();</p>\n<p>  // l2.add(“张三”);<br>  // l2.add(“李四”);<br>  // l2.add(“王五”);</p>\n<p>  // print(l2);<br>  // print(l2.length);</p>\n<p>  // l2.removeLast();<br>  // print(l2);</p>\n<p>  // //3.定义List指定类型<br>  // var l3 = new List<String>();<br>  // l3.add(“aa”);<br>  // l3.add(“bb”);</String></p>\n<p>  // print(l3.length);<br>  // print(l3);</p>\n<p>3， Map类型:<br>  //第一种定义 Map的方式<br>  // var person = {<br>  //   “name”:”张三”,<br>  //   “age”:20,<br>  //   “work”:[“程序员”,”外卖员”]<br>  // };</p>\n<p>  // print(person);<br>  // print(person[“name”]);<br>  // print(person[“age”]);</p>\n<p>  //第二种定义Mpa的方式<br>  // var p = new Map();</p>\n<p>  // p[“name”] = “张三”;<br>  // p[“age”] = 30;<br>  // p[“work”] = [“程序员”,”外卖员”];</p>\n<p>  // print(p);</p>\n<p>4, 判断类型<br>  //Dart 判断数据类型 is 关键词 来判断。</p>\n<p>  // var str = “1234”;<br>  // var str = 11;</p>\n<p>  // if(str is String){<br>  //   print(“是字符串类型”);<br>  // }else if(str is int){<br>  //   print(“是int类型”);<br>  // }else{<br>  //   print(“其他类型”);<br>  // }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>/**<br>  Dart 中支持以下数据类型:<br>  常用数据类型:<br>      Numbers（数值）:<br>        int<br>        doubule<br>      Strings (字符串）<br>        String<br>      Boolean(布尔):<br>        bool</p>\n<pre><code>List(数组):\n  在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n\nMaps(字典)：\n  通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。</code></pre><p> */</p>\n<p>/**<br>    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。<br> */</p>\n<p>1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。</p>\n<p>//多行字符串修饰，  三个单引号或者双引号修饰<br>  var str = ‘’’<br>    这是第一行<br>    第二行<br>    。。。<br>最后一行<br>  ‘’’;<br>  print(str);</p>\n<p>  var str1 = “””<br>这是双引号修饰1</p>\n<p>双引号修饰2<br>  “””;<br>print(str1);</p>\n<p>2， List类型：<br>  //1. 第一种定义List的方式<br>  // var l1 = [“aaa”,”bbb”,”ccc”];<br>  // print(l1);</p>\n<p>  // print(l1[0]);<br>  // print(l1[1]);</p>\n<p>  // print(l1.length);</p>\n<p>  //2.第二种定义List的方式<br>  // var l2 = new List();</p>\n<p>  // l2.add(“张三”);<br>  // l2.add(“李四”);<br>  // l2.add(“王五”);</p>\n<p>  // print(l2);<br>  // print(l2.length);</p>\n<p>  // l2.removeLast();<br>  // print(l2);</p>\n<p>  // //3.定义List指定类型<br>  // var l3 = new List<String>();<br>  // l3.add(“aa”);<br>  // l3.add(“bb”);</String></p>\n<p>  // print(l3.length);<br>  // print(l3);</p>\n<p>3， Map类型:<br>  //第一种定义 Map的方式<br>  // var person = {<br>  //   “name”:”张三”,<br>  //   “age”:20,<br>  //   “work”:[“程序员”,”外卖员”]<br>  // };</p>\n<p>  // print(person);<br>  // print(person[“name”]);<br>  // print(person[“age”]);</p>\n<p>  //第二种定义Mpa的方式<br>  // var p = new Map();</p>\n<p>  // p[“name”] = “张三”;<br>  // p[“age”] = 30;<br>  // p[“work”] = [“程序员”,”外卖员”];</p>\n<p>  // print(p);</p>\n<p>4, 判断类型<br>  //Dart 判断数据类型 is 关键词 来判断。</p>\n<p>  // var str = “1234”;<br>  // var str = 11;</p>\n<p>  // if(str is String){<br>  //   print(“是字符串类型”);<br>  // }else if(str is int){<br>  //   print(“是int类型”);<br>  // }else{<br>  //   print(“其他类型”);<br>  // }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"07-方法参数","toc":true,"date":"2020-09-01T13:21:41.000Z","_content":"\n\n1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。\nDart语言方法中是可以嵌套方法的。\n例如：\nvoid main(){\n    void neiBuFn(){\n        print(\"这是内部方法\");\n    }\n}\n\n2,  可选参数\n//方法:可选参数, 注意是中括号[]\nString printUserInfo2(String userName, [int age]){\n  if(age != null){\n    return \"姓名:$userName --- 年龄:$age\";\n  }\n  return \"姓名:$userName --- 年龄保密\";\n}\n\n3,  默认参数\n// 默认参数\nString printUserInfo3(String userName, [String sex = \"男\", int age]){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n4,  命名参数的方法\n//命名参数的方法, 注意是大括号{}\nString printUserInfo4(String userName,{int age, String sex = \"男\"}){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n调用：  \nprint(printUserInfo4(\"小王\",age:20, sex:\"女\"));  //姓名:小王 ---性别：女  --- 年龄:20\n\n\n5，把方法当作参数传进去\n\n例子1：\n  // //把方法当作参数传进去\n  // fn1(){\n  //   print(\"fn1\");\n  // }\n\n  // fn2(fn){\n  //   fn();\n  // }\n\n  // fn2(fn1);\n\n\n例子2：\n  var fn = (){\n    print(\"这是一个匿名方法\");\n  };\n  fn3(tmpFn){\n    tmpFn();\n  };\n  //方法调用\n  fn3(fn);\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/07-方法参数.md","raw":"---\ntitle: 07-方法参数\ntoc: true\ndate: 2020-09-01 21:21:41\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。\nDart语言方法中是可以嵌套方法的。\n例如：\nvoid main(){\n    void neiBuFn(){\n        print(\"这是内部方法\");\n    }\n}\n\n2,  可选参数\n//方法:可选参数, 注意是中括号[]\nString printUserInfo2(String userName, [int age]){\n  if(age != null){\n    return \"姓名:$userName --- 年龄:$age\";\n  }\n  return \"姓名:$userName --- 年龄保密\";\n}\n\n3,  默认参数\n// 默认参数\nString printUserInfo3(String userName, [String sex = \"男\", int age]){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n4,  命名参数的方法\n//命名参数的方法, 注意是大括号{}\nString printUserInfo4(String userName,{int age, String sex = \"男\"}){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n调用：  \nprint(printUserInfo4(\"小王\",age:20, sex:\"女\"));  //姓名:小王 ---性别：女  --- 年龄:20\n\n\n5，把方法当作参数传进去\n\n例子1：\n  // //把方法当作参数传进去\n  // fn1(){\n  //   print(\"fn1\");\n  // }\n\n  // fn2(fn){\n  //   fn();\n  // }\n\n  // fn2(fn1);\n\n\n例子2：\n  var fn = (){\n    print(\"这是一个匿名方法\");\n  };\n  fn3(tmpFn){\n    tmpFn();\n  };\n  //方法调用\n  fn3(fn);\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/07-方法参数","published":1,"updated":"2020-09-01T13:34:50.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg60060010l4s6dspiebty","content":"<p>1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。<br>Dart语言方法中是可以嵌套方法的。<br>例如：<br>void main(){<br>    void neiBuFn(){<br>        print(“这是内部方法”);<br>    }<br>}</p>\n<p>2,  可选参数<br>//方法:可选参数, 注意是中括号[]<br>String printUserInfo2(String userName, [int age]){<br>  if(age != null){<br>    return “姓名:$userName — 年龄:$age”;<br>  }<br>  return “姓名:$userName — 年龄保密”;<br>}</p>\n<p>3,  默认参数<br>// 默认参数<br>String printUserInfo3(String userName, [String sex = “男”, int age]){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>4,  命名参数的方法<br>//命名参数的方法, 注意是大括号{}<br>String printUserInfo4(String userName,{int age, String sex = “男”}){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>调用：<br>print(printUserInfo4(“小王”,age:20, sex:”女”));  //姓名:小王 —性别：女  — 年龄:20</p>\n<p>5，把方法当作参数传进去</p>\n<p>例子1：<br>  // //把方法当作参数传进去<br>  // fn1(){<br>  //   print(“fn1”);<br>  // }</p>\n<p>  // fn2(fn){<br>  //   fn();<br>  // }</p>\n<p>  // fn2(fn1);</p>\n<p>例子2：<br>  var fn = (){<br>    print(“这是一个匿名方法”);<br>  };<br>  fn3(tmpFn){<br>    tmpFn();<br>  };<br>  //方法调用<br>  fn3(fn);</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。<br>Dart语言方法中是可以嵌套方法的。<br>例如：<br>void main(){<br>    void neiBuFn(){<br>        print(“这是内部方法”);<br>    }<br>}</p>\n<p>2,  可选参数<br>//方法:可选参数, 注意是中括号[]<br>String printUserInfo2(String userName, [int age]){<br>  if(age != null){<br>    return “姓名:$userName — 年龄:$age”;<br>  }<br>  return “姓名:$userName — 年龄保密”;<br>}</p>\n<p>3,  默认参数<br>// 默认参数<br>String printUserInfo3(String userName, [String sex = “男”, int age]){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>4,  命名参数的方法<br>//命名参数的方法, 注意是大括号{}<br>String printUserInfo4(String userName,{int age, String sex = “男”}){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>调用：<br>print(printUserInfo4(“小王”,age:20, sex:”女”));  //姓名:小王 —性别：女  — 年龄:20</p>\n<p>5，把方法当作参数传进去</p>\n<p>例子1：<br>  // //把方法当作参数传进去<br>  // fn1(){<br>  //   print(“fn1”);<br>  // }</p>\n<p>  // fn2(fn){<br>  //   fn();<br>  // }</p>\n<p>  // fn2(fn1);</p>\n<p>例子2：<br>  var fn = (){<br>    print(“这是一个匿名方法”);<br>  };<br>  fn3(tmpFn){<br>    tmpFn();<br>  };<br>  //方法调用<br>  fn3(fn);</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-Dart集合类型， List, Set, Map","toc":true,"date":"2020-09-01T13:21:11.000Z","_content":"\n\n1, List 里面常用的属性和方法：\n\n常用属性：\nlength:  \t\t\t长度\nreversed\t\t\t反转\nisEmpty\t\t\t是否位空\nisNotEmpty\t\t是否不位空\n常用方法：\nadd\t\t\t\t添加\naddAll\t\t\t添加数组\nindexOf\t\t\t查找， 传入具体的值\nremove\t\t\t删除， 传入具体的值\nremoveAt\t\t\t删除， 传入索引值\nfillRange\t\t\t修改\ninsert(index, value)  指定位置插入\ninsertAll(index, list)\t指定位置插入List\ntoList()\t\t\t其他类型转换成List\njoin()\t\t\tList转换成字符串\nsplit()\t\t\t切割\nforEach()\t\t\t//循环，不带返回值\nmap()\t\t\t//循环，带有返回值\nwhere()\t\t\t//循环， 返回符合条件的\nany()\t\t\t//循环，只要有一个满足条件，就返回true,  否则返回false\nevery()\t\t\t//循环,   每一个都满足条件， 才返回true， 否则返回false\n\n\n2, \n //forEach方法：\n\n  // List myList = [\"桃子\",\"西瓜\",\"苹果\"];\n  // myList.forEach((value){\n  //   print(\"$value\");\n  // });\n\n\n//map方法：\n  // List myList = [1,3,4];\n  // var newList = myList.map((value){\n  //   return value * 2;\n  // });\n  // print(newList);           //(2, 6, 8)        \n  // print(newList.toList());  //[2, 6, 8]\n\n\n// //where方法：\n//   List myList = [1,3,4,5,6,7,8];\n//   var newList = myList.where((value){\n//     return value > 5;   //返回条件 > 5的\n//   });\n\n//   print(newList);   //(6, 7, 8)\n\n\n// //any方法： \n//   List myList = [1,3,4,5,6,7,8];\n\n//   //只要集合里面有一个满足条件，就返回true\n//   var f = myList.any((value){\n//     return value > 5;\n//   });\n\n//   print(f); //true\n\n\n// // every方法：\n//   //集合中每一个都要满足条件，返回true, 否则返回false\n//   List myList = [1,3,4,5,6,7,8];\n\n//   //\n//   var f = myList.every((value){\n//     return value > 5;\n//   });\n//   print(f);   //false\n\n\n//Set的遍历\n  // var s = new Set();\n  // s.add(\"111\");\n  // s.add(\"222\");\n\n  // //只有一行，可以使用 => \n  // s.forEach((value)=>print(value));\n\n  Map person = {\n    \"name\":\"张三\",\n    \"age\":20\n  };\n\n  person.forEach((key,value){\n    print(\"$key:$value\");\n  });\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/06-Dart集合类型，-List-Set-Map.md","raw":"---\ntitle: '06-Dart集合类型， List, Set, Map'\ntoc: true\ndate: 2020-09-01 21:21:11\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n1, List 里面常用的属性和方法：\n\n常用属性：\nlength:  \t\t\t长度\nreversed\t\t\t反转\nisEmpty\t\t\t是否位空\nisNotEmpty\t\t是否不位空\n常用方法：\nadd\t\t\t\t添加\naddAll\t\t\t添加数组\nindexOf\t\t\t查找， 传入具体的值\nremove\t\t\t删除， 传入具体的值\nremoveAt\t\t\t删除， 传入索引值\nfillRange\t\t\t修改\ninsert(index, value)  指定位置插入\ninsertAll(index, list)\t指定位置插入List\ntoList()\t\t\t其他类型转换成List\njoin()\t\t\tList转换成字符串\nsplit()\t\t\t切割\nforEach()\t\t\t//循环，不带返回值\nmap()\t\t\t//循环，带有返回值\nwhere()\t\t\t//循环， 返回符合条件的\nany()\t\t\t//循环，只要有一个满足条件，就返回true,  否则返回false\nevery()\t\t\t//循环,   每一个都满足条件， 才返回true， 否则返回false\n\n\n2, \n //forEach方法：\n\n  // List myList = [\"桃子\",\"西瓜\",\"苹果\"];\n  // myList.forEach((value){\n  //   print(\"$value\");\n  // });\n\n\n//map方法：\n  // List myList = [1,3,4];\n  // var newList = myList.map((value){\n  //   return value * 2;\n  // });\n  // print(newList);           //(2, 6, 8)        \n  // print(newList.toList());  //[2, 6, 8]\n\n\n// //where方法：\n//   List myList = [1,3,4,5,6,7,8];\n//   var newList = myList.where((value){\n//     return value > 5;   //返回条件 > 5的\n//   });\n\n//   print(newList);   //(6, 7, 8)\n\n\n// //any方法： \n//   List myList = [1,3,4,5,6,7,8];\n\n//   //只要集合里面有一个满足条件，就返回true\n//   var f = myList.any((value){\n//     return value > 5;\n//   });\n\n//   print(f); //true\n\n\n// // every方法：\n//   //集合中每一个都要满足条件，返回true, 否则返回false\n//   List myList = [1,3,4,5,6,7,8];\n\n//   //\n//   var f = myList.every((value){\n//     return value > 5;\n//   });\n//   print(f);   //false\n\n\n//Set的遍历\n  // var s = new Set();\n  // s.add(\"111\");\n  // s.add(\"222\");\n\n  // //只有一行，可以使用 => \n  // s.forEach((value)=>print(value));\n\n  Map person = {\n    \"name\":\"张三\",\n    \"age\":20\n  };\n\n  person.forEach((key,value){\n    print(\"$key:$value\");\n  });\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/06-Dart集合类型，-List-Set-Map","published":1,"updated":"2020-09-01T13:34:46.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg60080012l4s67dh91w09","content":"<p>1, List 里面常用的属性和方法：</p>\n<p>常用属性：<br>length:              长度<br>reversed            反转<br>isEmpty            是否位空<br>isNotEmpty        是否不位空<br>常用方法：<br>add                添加<br>addAll            添加数组<br>indexOf            查找， 传入具体的值<br>remove            删除， 传入具体的值<br>removeAt            删除， 传入索引值<br>fillRange            修改<br>insert(index, value)  指定位置插入<br>insertAll(index, list)    指定位置插入List<br>toList()            其他类型转换成List<br>join()            List转换成字符串<br>split()            切割<br>forEach()            //循环，不带返回值<br>map()            //循环，带有返回值<br>where()            //循环， 返回符合条件的<br>any()            //循环，只要有一个满足条件，就返回true,  否则返回false<br>every()            //循环,   每一个都满足条件， 才返回true， 否则返回false</p>\n<p>2,<br> //forEach方法：</p>\n<p>  // List myList = [“桃子”,”西瓜”,”苹果”];<br>  // myList.forEach((value){<br>  //   print(“$value”);<br>  // });</p>\n<p>//map方法：<br>  // List myList = [1,3,4];<br>  // var newList = myList.map((value){<br>  //   return value * 2;<br>  // });<br>  // print(newList);           //(2, 6, 8)<br>  // print(newList.toList());  //[2, 6, 8]</p>\n<p>// //where方法：<br>//   List myList = [1,3,4,5,6,7,8];<br>//   var newList = myList.where((value){<br>//     return value &gt; 5;   //返回条件 &gt; 5的<br>//   });</p>\n<p>//   print(newList);   //(6, 7, 8)</p>\n<p>// //any方法：<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //只要集合里面有一个满足条件，就返回true<br>//   var f = myList.any((value){<br>//     return value &gt; 5;<br>//   });</p>\n<p>//   print(f); //true</p>\n<p>// // every方法：<br>//   //集合中每一个都要满足条件，返回true, 否则返回false<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //<br>//   var f = myList.every((value){<br>//     return value &gt; 5;<br>//   });<br>//   print(f);   //false</p>\n<p>//Set的遍历<br>  // var s = new Set();<br>  // s.add(“111”);<br>  // s.add(“222”);</p>\n<p>  // //只有一行，可以使用 =&gt;<br>  // s.forEach((value)=&gt;print(value));</p>\n<p>  Map person = {<br>    “name”:”张三”,<br>    “age”:20<br>  };</p>\n<p>  person.forEach((key,value){<br>    print(“$key:$value”);<br>  });</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1, List 里面常用的属性和方法：</p>\n<p>常用属性：<br>length:              长度<br>reversed            反转<br>isEmpty            是否位空<br>isNotEmpty        是否不位空<br>常用方法：<br>add                添加<br>addAll            添加数组<br>indexOf            查找， 传入具体的值<br>remove            删除， 传入具体的值<br>removeAt            删除， 传入索引值<br>fillRange            修改<br>insert(index, value)  指定位置插入<br>insertAll(index, list)    指定位置插入List<br>toList()            其他类型转换成List<br>join()            List转换成字符串<br>split()            切割<br>forEach()            //循环，不带返回值<br>map()            //循环，带有返回值<br>where()            //循环， 返回符合条件的<br>any()            //循环，只要有一个满足条件，就返回true,  否则返回false<br>every()            //循环,   每一个都满足条件， 才返回true， 否则返回false</p>\n<p>2,<br> //forEach方法：</p>\n<p>  // List myList = [“桃子”,”西瓜”,”苹果”];<br>  // myList.forEach((value){<br>  //   print(“$value”);<br>  // });</p>\n<p>//map方法：<br>  // List myList = [1,3,4];<br>  // var newList = myList.map((value){<br>  //   return value * 2;<br>  // });<br>  // print(newList);           //(2, 6, 8)<br>  // print(newList.toList());  //[2, 6, 8]</p>\n<p>// //where方法：<br>//   List myList = [1,3,4,5,6,7,8];<br>//   var newList = myList.where((value){<br>//     return value &gt; 5;   //返回条件 &gt; 5的<br>//   });</p>\n<p>//   print(newList);   //(6, 7, 8)</p>\n<p>// //any方法：<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //只要集合里面有一个满足条件，就返回true<br>//   var f = myList.any((value){<br>//     return value &gt; 5;<br>//   });</p>\n<p>//   print(f); //true</p>\n<p>// // every方法：<br>//   //集合中每一个都要满足条件，返回true, 否则返回false<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //<br>//   var f = myList.every((value){<br>//     return value &gt; 5;<br>//   });<br>//   print(f);   //false</p>\n<p>//Set的遍历<br>  // var s = new Set();<br>  // s.add(“111”);<br>  // s.add(“222”);</p>\n<p>  // //只有一行，可以使用 =&gt;<br>  // s.forEach((value)=&gt;print(value));</p>\n<p>  Map person = {<br>    “name”:”张三”,<br>    “age”:20<br>  };</p>\n<p>  person.forEach((key,value){<br>    print(“$key:$value”);<br>  });</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"09-面向对象","toc":true,"date":"2020-09-01T13:22:12.000Z","_content":"\n面向对象编程（OOP）三个基本特征： 封装，继承，多态\nDart 所有的东西都是对象，所有的对象都继承自object类。\n\nDart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。\n\n一个类通常由属性和方法组成。\n\n1， 构造函数， \n//Person类\nclass Person{\n  String name=\"张三\";\n  int age = 20;\n\n//默认构造函数只能有一个\n  // Person(){\n  // }\n\n  // Person(String name, int age){\n  //   this.name = name;\n  //   this.age = age;\n  // }\n\n  //构造函数也可以写成这样，自动会将数据赋值给对象的属性\n  Person(this.name, this.age);\n\n  void getInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\n2，命名构造函数\n\n //命名构造函数, 可以有多个\n  Person.now(){\n    print(\"这是命名构造函数\");\n  }\n\n  Person.printInfo(){\n    print(\"这是第二个命名构造函数\");\n  }\n\n  //带参数的命名构造函数\n  Person.printInfo1(String name, int age){\n    this.name = name;\n    this.age = age;\n  }\n\n  Person.printInfo2(name, age, num height){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n  }\n\n  Person.printInfo3(name, age, num height, num width){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n    this._width = width;\n  }\n\n\n3, 私有属性和方法\n在变量的前边，加上下划线 —\n\n  num _height;\n  num _width;\n\n这个 _height 和 _witdth就是私有属性，外部不可以直接访问。\n\n4， get和set属性\n  //get属性\n  get area{\n    return this._height * this._width;\n  }\n\n  //set属性\n  set personWidth(num height){\n    this._height = height;\n  }\n\n外部调用：\n Person p3 = Person.printInfo3(\"小李\", 25, 170, 70);\n print(\"${p3.area}\");\n\n p3.personWidth = 10;\n print(\"${p3.area}\");\n\n5，可以在构造函数运行之前初始化实例变量。\nclass Rect{\n  int height;\n  int width;\n\n  Rect():height = 20, width = 10{\n    print(\"${this.height} -- ${this.width}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/09-面向对象.md","raw":"---\ntitle: 09-面向对象\ntoc: true\ndate: 2020-09-01 21:22:12\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n面向对象编程（OOP）三个基本特征： 封装，继承，多态\nDart 所有的东西都是对象，所有的对象都继承自object类。\n\nDart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。\n\n一个类通常由属性和方法组成。\n\n1， 构造函数， \n//Person类\nclass Person{\n  String name=\"张三\";\n  int age = 20;\n\n//默认构造函数只能有一个\n  // Person(){\n  // }\n\n  // Person(String name, int age){\n  //   this.name = name;\n  //   this.age = age;\n  // }\n\n  //构造函数也可以写成这样，自动会将数据赋值给对象的属性\n  Person(this.name, this.age);\n\n  void getInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\n2，命名构造函数\n\n //命名构造函数, 可以有多个\n  Person.now(){\n    print(\"这是命名构造函数\");\n  }\n\n  Person.printInfo(){\n    print(\"这是第二个命名构造函数\");\n  }\n\n  //带参数的命名构造函数\n  Person.printInfo1(String name, int age){\n    this.name = name;\n    this.age = age;\n  }\n\n  Person.printInfo2(name, age, num height){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n  }\n\n  Person.printInfo3(name, age, num height, num width){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n    this._width = width;\n  }\n\n\n3, 私有属性和方法\n在变量的前边，加上下划线 —\n\n  num _height;\n  num _width;\n\n这个 _height 和 _witdth就是私有属性，外部不可以直接访问。\n\n4， get和set属性\n  //get属性\n  get area{\n    return this._height * this._width;\n  }\n\n  //set属性\n  set personWidth(num height){\n    this._height = height;\n  }\n\n外部调用：\n Person p3 = Person.printInfo3(\"小李\", 25, 170, 70);\n print(\"${p3.area}\");\n\n p3.personWidth = 10;\n print(\"${p3.area}\");\n\n5，可以在构造函数运行之前初始化实例变量。\nclass Rect{\n  int height;\n  int width;\n\n  Rect():height = 20, width = 10{\n    print(\"${this.height} -- ${this.width}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/09-面向对象","published":1,"updated":"2020-09-01T13:34:55.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600a0013l4s67c1s88oq","content":"<p>面向对象编程（OOP）三个基本特征： 封装，继承，多态<br>Dart 所有的东西都是对象，所有的对象都继承自object类。</p>\n<p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。</p>\n<p>一个类通常由属性和方法组成。</p>\n<p>1， 构造函数，<br>//Person类<br>class Person{<br>  String name=”张三”;<br>  int age = 20;</p>\n<p>//默认构造函数只能有一个<br>  // Person(){<br>  // }</p>\n<p>  // Person(String name, int age){<br>  //   this.name = name;<br>  //   this.age = age;<br>  // }</p>\n<p>  //构造函数也可以写成这样，自动会将数据赋值给对象的属性<br>  Person(this.name, this.age);</p>\n<p>  void getInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>2，命名构造函数</p>\n<p> //命名构造函数, 可以有多个<br>  Person.now(){<br>    print(“这是命名构造函数”);<br>  }</p>\n<p>  Person.printInfo(){<br>    print(“这是第二个命名构造函数”);<br>  }</p>\n<p>  //带参数的命名构造函数<br>  Person.printInfo1(String name, int age){<br>    this.name = name;<br>    this.age = age;<br>  }</p>\n<p>  Person.printInfo2(name, age, num height){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>  }</p>\n<p>  Person.printInfo3(name, age, num height, num width){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>    this._width = width;<br>  }</p>\n<p>3, 私有属性和方法<br>在变量的前边，加上下划线 —</p>\n<p>  num _height;<br>  num _width;</p>\n<p>这个 _height 和 _witdth就是私有属性，外部不可以直接访问。</p>\n<p>4， get和set属性<br>  //get属性<br>  get area{<br>    return this._height * this._width;<br>  }</p>\n<p>  //set属性<br>  set personWidth(num height){<br>    this._height = height;<br>  }</p>\n<p>外部调用：<br> Person p3 = Person.printInfo3(“小李”, 25, 170, 70);<br> print(“${p3.area}”);</p>\n<p> p3.personWidth = 10;<br> print(“${p3.area}”);</p>\n<p>5，可以在构造函数运行之前初始化实例变量。<br>class Rect{<br>  int height;<br>  int width;</p>\n<p>  Rect():height = 20, width = 10{<br>    print(“${this.height} – ${this.width}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>面向对象编程（OOP）三个基本特征： 封装，继承，多态<br>Dart 所有的东西都是对象，所有的对象都继承自object类。</p>\n<p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。</p>\n<p>一个类通常由属性和方法组成。</p>\n<p>1， 构造函数，<br>//Person类<br>class Person{<br>  String name=”张三”;<br>  int age = 20;</p>\n<p>//默认构造函数只能有一个<br>  // Person(){<br>  // }</p>\n<p>  // Person(String name, int age){<br>  //   this.name = name;<br>  //   this.age = age;<br>  // }</p>\n<p>  //构造函数也可以写成这样，自动会将数据赋值给对象的属性<br>  Person(this.name, this.age);</p>\n<p>  void getInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>2，命名构造函数</p>\n<p> //命名构造函数, 可以有多个<br>  Person.now(){<br>    print(“这是命名构造函数”);<br>  }</p>\n<p>  Person.printInfo(){<br>    print(“这是第二个命名构造函数”);<br>  }</p>\n<p>  //带参数的命名构造函数<br>  Person.printInfo1(String name, int age){<br>    this.name = name;<br>    this.age = age;<br>  }</p>\n<p>  Person.printInfo2(name, age, num height){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>  }</p>\n<p>  Person.printInfo3(name, age, num height, num width){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>    this._width = width;<br>  }</p>\n<p>3, 私有属性和方法<br>在变量的前边，加上下划线 —</p>\n<p>  num _height;<br>  num _width;</p>\n<p>这个 _height 和 _witdth就是私有属性，外部不可以直接访问。</p>\n<p>4， get和set属性<br>  //get属性<br>  get area{<br>    return this._height * this._width;<br>  }</p>\n<p>  //set属性<br>  set personWidth(num height){<br>    this._height = height;<br>  }</p>\n<p>外部调用：<br> Person p3 = Person.printInfo3(“小李”, 25, 170, 70);<br> print(“${p3.area}”);</p>\n<p> p3.personWidth = 10;<br> print(“${p3.area}”);</p>\n<p>5，可以在构造函数运行之前初始化实例变量。<br>class Rect{<br>  int height;<br>  int width;</p>\n<p>  Rect():height = 20, width = 10{<br>    print(“${this.height} – ${this.width}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"02-入口，注释，变量，常量，命名规则","toc":true,"date":"2020-09-01T13:11:59.000Z","_content":"\n1,  入口方法有两种：\nmain(){\n}\nvoid main(){\n}\n\n2,  注释有3中，\n双斜杠 //    三个斜杠 ///\n多行注释\n/**\n这是多行注释\n*/\n\n3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。\nvar  str = \"this is a var\";\n\n4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。\n区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。\n\nconst PI = 3.14159;\n\nfinal str = new DateTime.now();\n\nfinal str1 = \"张三\";\n\n公共点： 都不能修改。\n\n5, Dart的命名规则：\n    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。\n    2， 注意：标示符开头不能使数字。\n    3，标识符不能是保留字和关键字。\n    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。\n    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/02-入口，注释，变量，常量，命名规则.md","raw":"---\ntitle: 02-入口，注释，变量，常量，命名规则\ntoc: true\ndate: 2020-09-01 21:11:59\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1,  入口方法有两种：\nmain(){\n}\nvoid main(){\n}\n\n2,  注释有3中，\n双斜杠 //    三个斜杠 ///\n多行注释\n/**\n这是多行注释\n*/\n\n3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。\nvar  str = \"this is a var\";\n\n4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。\n区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。\n\nconst PI = 3.14159;\n\nfinal str = new DateTime.now();\n\nfinal str1 = \"张三\";\n\n公共点： 都不能修改。\n\n5, Dart的命名规则：\n    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。\n    2， 注意：标示符开头不能使数字。\n    3，标识符不能是保留字和关键字。\n    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。\n    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/02-入口，注释，变量，常量，命名规则","published":1,"updated":"2020-09-01T13:34:34.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600c0015l4s67jp75wx8","content":"<p>1,  入口方法有两种：<br>main(){<br>}<br>void main(){<br>}</p>\n<p>2,  注释有3中，<br>双斜杠 //    三个斜杠 ///<br>多行注释<br>/**<br>这是多行注释<br>*/</p>\n<p>3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。<br>var  str = “this is a var”;</p>\n<p>4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。<br>区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。</p>\n<p>const PI = 3.14159;</p>\n<p>final str = new DateTime.now();</p>\n<p>final str1 = “张三”;</p>\n<p>公共点： 都不能修改。</p>\n<p>5, Dart的命名规则：<br>    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。<br>    2， 注意：标示符开头不能使数字。<br>    3，标识符不能是保留字和关键字。<br>    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。<br>    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1,  入口方法有两种：<br>main(){<br>}<br>void main(){<br>}</p>\n<p>2,  注释有3中，<br>双斜杠 //    三个斜杠 ///<br>多行注释<br>/**<br>这是多行注释<br>*/</p>\n<p>3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。<br>var  str = “this is a var”;</p>\n<p>4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。<br>区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。</p>\n<p>const PI = 3.14159;</p>\n<p>final str = new DateTime.now();</p>\n<p>final str1 = “张三”;</p>\n<p>公共点： 都不能修改。</p>\n<p>5, Dart的命名规则：<br>    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。<br>    2， 注意：标示符开头不能使数字。<br>    3，标识符不能是保留字和关键字。<br>    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。<br>    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"10-类中静态成员，静态方法，操作符，以及继承","toc":true,"date":"2020-09-01T13:22:21.000Z","_content":"\n1， Dart中的静态成员：\n1，使用 static 关键字来实现类级别的变量和函数。\n2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。\n2，Dart中的对象操作符：\n？\t\t条件运算符\nas\t\t类型转换\nis \t\t类型判断\n..\t\t级联操作\n\nPerson p;\n// p.printInfo();// 报错\np?.printInfo(); //不会报错\n\n\nPerson p1 = new Person(\"张三\", 20);\n\n//常规写法\np1.name = \"李四\";\np1.age = 30;\np1.printInfo();\n\n//级联操作符\np1..name = \"李四\"\n    ..age = 25\n    ..printInfo();\n\n3，继承，调用父类构造函数，重写父类方法\nclass Person{\n  String name;\n  int age;\n  Person(this.name, this.age);\n\n  void printInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\nclass Web extends Person{\n  String sex;\n  Web(String name, int age, String sex) : super(name, age){\n    this.sex = sex;\n  }\n\n  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上\n  @override\n  void printInfo(){\n    print(\"姓名:${this.name} --- 年龄:${this.age} --- 性别:${this.sex}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承.md","raw":"---\ntitle: 10-类中静态成员，静态方法，操作符，以及继承\ntoc: true\ndate: 2020-09-01 21:22:21\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1， Dart中的静态成员：\n1，使用 static 关键字来实现类级别的变量和函数。\n2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。\n2，Dart中的对象操作符：\n？\t\t条件运算符\nas\t\t类型转换\nis \t\t类型判断\n..\t\t级联操作\n\nPerson p;\n// p.printInfo();// 报错\np?.printInfo(); //不会报错\n\n\nPerson p1 = new Person(\"张三\", 20);\n\n//常规写法\np1.name = \"李四\";\np1.age = 30;\np1.printInfo();\n\n//级联操作符\np1..name = \"李四\"\n    ..age = 25\n    ..printInfo();\n\n3，继承，调用父类构造函数，重写父类方法\nclass Person{\n  String name;\n  int age;\n  Person(this.name, this.age);\n\n  void printInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\nclass Web extends Person{\n  String sex;\n  Web(String name, int age, String sex) : super(name, age){\n    this.sex = sex;\n  }\n\n  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上\n  @override\n  void printInfo(){\n    print(\"姓名:${this.name} --- 年龄:${this.age} --- 性别:${this.sex}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承","published":1,"updated":"2020-09-01T13:34:58.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600e0016l4s6hjke3lej","content":"<p>1， Dart中的静态成员：<br>1，使用 static 关键字来实现类级别的变量和函数。<br>2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。<br>2，Dart中的对象操作符：<br>？        条件运算符<br>as        类型转换<br>is         类型判断<br>..        级联操作</p>\n<p>Person p;<br>// p.printInfo();// 报错<br>p?.printInfo(); //不会报错</p>\n<p>Person p1 = new Person(“张三”, 20);</p>\n<p>//常规写法<br>p1.name = “李四”;<br>p1.age = 30;<br>p1.printInfo();</p>\n<p>//级联操作符<br>p1..name = “李四”<br>    ..age = 25<br>    ..printInfo();</p>\n<p>3，继承，调用父类构造函数，重写父类方法<br>class Person{<br>  String name;<br>  int age;<br>  Person(this.name, this.age);</p>\n<p>  void printInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>class Web extends Person{<br>  String sex;<br>  Web(String name, int age, String sex) : super(name, age){<br>    this.sex = sex;<br>  }</p>\n<p>  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上<br>  @override<br>  void printInfo(){<br>    print(“姓名:${this.name} — 年龄:${this.age} — 性别:${this.sex}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1， Dart中的静态成员：<br>1，使用 static 关键字来实现类级别的变量和函数。<br>2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。<br>2，Dart中的对象操作符：<br>？        条件运算符<br>as        类型转换<br>is         类型判断<br>..        级联操作</p>\n<p>Person p;<br>// p.printInfo();// 报错<br>p?.printInfo(); //不会报错</p>\n<p>Person p1 = new Person(“张三”, 20);</p>\n<p>//常规写法<br>p1.name = “李四”;<br>p1.age = 30;<br>p1.printInfo();</p>\n<p>//级联操作符<br>p1..name = “李四”<br>    ..age = 25<br>    ..printInfo();</p>\n<p>3，继承，调用父类构造函数，重写父类方法<br>class Person{<br>  String name;<br>  int age;<br>  Person(this.name, this.age);</p>\n<p>  void printInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>class Web extends Person{<br>  String sex;<br>  Web(String name, int age, String sex) : super(name, age){<br>    this.sex = sex;<br>  }</p>\n<p>  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上<br>  @override<br>  void printInfo(){<br>    print(“姓名:${this.name} — 年龄:${this.age} — 性别:${this.sex}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"11-Dart中抽象类","toc":true,"date":"2020-09-01T13:22:31.000Z","_content":"\nDart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。\n1，抽象类是通过abstract 关键字来定义\n2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。\n3，如果子类继承抽象类，，必须得实现里面的抽象方法。\n4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。\n5，抽象类不能被实例化，只有继承它的子类可以。\n\nextends 抽象类 和 implements抽象类的区别：\n1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。\n2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/11-Dart中抽象类.md","raw":"---\ntitle: 11-Dart中抽象类\ntoc: true\ndate: 2020-09-01 21:22:31\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\nDart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。\n1，抽象类是通过abstract 关键字来定义\n2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。\n3，如果子类继承抽象类，，必须得实现里面的抽象方法。\n4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。\n5，抽象类不能被实例化，只有继承它的子类可以。\n\nextends 抽象类 和 implements抽象类的区别：\n1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。\n2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/11-Dart中抽象类","published":1,"updated":"2020-09-01T13:35:01.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600h0018l4s66cnx0wg5","content":"<p>Dart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。<br>1，抽象类是通过abstract 关键字来定义<br>2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。<br>3，如果子类继承抽象类，，必须得实现里面的抽象方法。<br>4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。<br>5，抽象类不能被实例化，只有继承它的子类可以。</p>\n<p>extends 抽象类 和 implements抽象类的区别：<br>1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。<br>2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Dart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。<br>1，抽象类是通过abstract 关键字来定义<br>2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。<br>3，如果子类继承抽象类，，必须得实现里面的抽象方法。<br>4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。<br>5，抽象类不能被实例化，只有继承它的子类可以。</p>\n<p>extends 抽象类 和 implements抽象类的区别：<br>1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。<br>2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"08-箭头函数，匿名方法，自执行方法，闭包","toc":true,"date":"2020-09-01T13:21:53.000Z","_content":"\n1，箭头函数， 方法体只有一句。\n  //箭头函数\n  List myList = [\"橘子\",\"苹果\",\"香蕉\"];\n\n  //常规写法\n  myList.forEach((value){\n    print(value);\n  });\n\n  //箭头函数, 只有一句代码\n  myList.forEach((value)=>print(value));\n\n\n  // 返回一个新的数组， 要求 >2 的 数字乘于2，其他的不变\n  List list = [2,1,4,6];\n  var newList = list.map((value)=> value > 2 ? value * 2 : value);\n  print(newList.toList());  // [2, 1, 8, 12]\n\n2， 匿名函数\n\n  //匿名函数\n  var b = (){\n    print(\"这是要执行的代码1\");\n    print(\"这是要执行的代码2\");\n  };\n  b();\n\n3， 自执行方法\n  //自执行方法 -- 不带参数\n  ((){\n    print(\"自执行方法体\");\n  })();\n\n  //自执行方法 -- 带参数\n  ((value){\n    print(\"传进来的数据:\"+value);\n  })(\"这是参数字符串\");\n\n4， 闭包\n\n>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。\n>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。\n\n想要实现的功能：\n\n>1, 常驻内存\n>2, 不污染全局\n\n产生了闭包， 闭包可以解决这个问题\n闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。\n\n闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。\n\n\n  //闭包\n  fn(){\n    var a = 123;  /** 不污染全局 */\n\n    return(){\n      a++;\n      print(a);\n    };\n  }\n\n  var b = fn();\n  b();\n  b();\n  b();\n\n  /**  执行结果:\n  124\n  125\n  126  \n   */\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包.md","raw":"---\ntitle: 08-箭头函数，匿名方法，自执行方法，闭包\ntoc: true\ndate: 2020-09-01 21:21:53\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1，箭头函数， 方法体只有一句。\n  //箭头函数\n  List myList = [\"橘子\",\"苹果\",\"香蕉\"];\n\n  //常规写法\n  myList.forEach((value){\n    print(value);\n  });\n\n  //箭头函数, 只有一句代码\n  myList.forEach((value)=>print(value));\n\n\n  // 返回一个新的数组， 要求 >2 的 数字乘于2，其他的不变\n  List list = [2,1,4,6];\n  var newList = list.map((value)=> value > 2 ? value * 2 : value);\n  print(newList.toList());  // [2, 1, 8, 12]\n\n2， 匿名函数\n\n  //匿名函数\n  var b = (){\n    print(\"这是要执行的代码1\");\n    print(\"这是要执行的代码2\");\n  };\n  b();\n\n3， 自执行方法\n  //自执行方法 -- 不带参数\n  ((){\n    print(\"自执行方法体\");\n  })();\n\n  //自执行方法 -- 带参数\n  ((value){\n    print(\"传进来的数据:\"+value);\n  })(\"这是参数字符串\");\n\n4， 闭包\n\n>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。\n>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。\n\n想要实现的功能：\n\n>1, 常驻内存\n>2, 不污染全局\n\n产生了闭包， 闭包可以解决这个问题\n闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。\n\n闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。\n\n\n  //闭包\n  fn(){\n    var a = 123;  /** 不污染全局 */\n\n    return(){\n      a++;\n      print(a);\n    };\n  }\n\n  var b = fn();\n  b();\n  b();\n  b();\n\n  /**  执行结果:\n  124\n  125\n  126  \n   */\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包","published":1,"updated":"2020-09-01T13:34:52.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600j0019l4s6fsf11kb3","content":"<p>1，箭头函数， 方法体只有一句。<br>  //箭头函数<br>  List myList = [“橘子”,”苹果”,”香蕉”];</p>\n<p>  //常规写法<br>  myList.forEach((value){<br>    print(value);<br>  });</p>\n<p>  //箭头函数, 只有一句代码<br>  myList.forEach((value)=&gt;print(value));</p>\n<p>  // 返回一个新的数组， 要求 &gt;2 的 数字乘于2，其他的不变<br>  List list = [2,1,4,6];<br>  var newList = list.map((value)=&gt; value &gt; 2 ? value * 2 : value);<br>  print(newList.toList());  // [2, 1, 8, 12]</p>\n<p>2， 匿名函数</p>\n<p>  //匿名函数<br>  var b = (){<br>    print(“这是要执行的代码1”);<br>    print(“这是要执行的代码2”);<br>  };<br>  b();</p>\n<p>3， 自执行方法<br>  //自执行方法 – 不带参数<br>  ((){<br>    print(“自执行方法体”);<br>  })();</p>\n<p>  //自执行方法 – 带参数<br>  ((value){<br>    print(“传进来的数据:”+value);<br>  })(“这是参数字符串”);</p>\n<p>4， 闭包</p>\n<blockquote>\n<p>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。<br>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。</p>\n</blockquote>\n<p>想要实现的功能：</p>\n<blockquote>\n<p>1, 常驻内存<br>2, 不污染全局</p>\n</blockquote>\n<p>产生了闭包， 闭包可以解决这个问题<br>闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。</p>\n<p>闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。</p>\n<p>  //闭包<br>  fn(){<br>    var a = 123;  /** 不污染全局 */</p>\n<pre><code>return(){\n  a++;\n  print(a);\n};</code></pre><p>  }</p>\n<p>  var b = fn();<br>  b();<br>  b();<br>  b();</p>\n<p>  /**  执行结果:<br>  124<br>  125<br>  126<br>   */</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，箭头函数， 方法体只有一句。<br>  //箭头函数<br>  List myList = [“橘子”,”苹果”,”香蕉”];</p>\n<p>  //常规写法<br>  myList.forEach((value){<br>    print(value);<br>  });</p>\n<p>  //箭头函数, 只有一句代码<br>  myList.forEach((value)=&gt;print(value));</p>\n<p>  // 返回一个新的数组， 要求 &gt;2 的 数字乘于2，其他的不变<br>  List list = [2,1,4,6];<br>  var newList = list.map((value)=&gt; value &gt; 2 ? value * 2 : value);<br>  print(newList.toList());  // [2, 1, 8, 12]</p>\n<p>2， 匿名函数</p>\n<p>  //匿名函数<br>  var b = (){<br>    print(“这是要执行的代码1”);<br>    print(“这是要执行的代码2”);<br>  };<br>  b();</p>\n<p>3， 自执行方法<br>  //自执行方法 – 不带参数<br>  ((){<br>    print(“自执行方法体”);<br>  })();</p>\n<p>  //自执行方法 – 带参数<br>  ((value){<br>    print(“传进来的数据:”+value);<br>  })(“这是参数字符串”);</p>\n<p>4， 闭包</p>\n<blockquote>\n<p>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。<br>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。</p>\n</blockquote>\n<p>想要实现的功能：</p>\n<blockquote>\n<p>1, 常驻内存<br>2, 不污染全局</p>\n</blockquote>\n<p>产生了闭包， 闭包可以解决这个问题<br>闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。</p>\n<p>闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。</p>\n<p>  //闭包<br>  fn(){<br>    var a = 123;  /** 不污染全局 */</p>\n<pre><code>return(){\n  a++;\n  print(a);\n};</code></pre><p>  }</p>\n<p>  var b = fn();<br>  b();<br>  b();<br>  b();</p>\n<p>  /**  执行结果:<br>  124<br>  125<br>  126<br>   */</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"12-Dart中的mixins","toc":true,"date":"2020-09-01T13:22:40.000Z","_content":"\nmixins的中文意思是混入，就是在类中混入其他功能。\n在Dart中可以使用mixins实现类似多继承的功能\n\n因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：\n1，作为mixins 的类只能继承自object, 不能继承其他类。\n2，作为mixins的类不能有构造函数。\n3，一个类可以mixins多个mixins类。\n4，mixins绝不是继承，也不是接口，而是一种全新的特性。\n\n例子：\n\nclass Person{\n  String name;\n  int age;\n  Person(this.name,this.age);\n\n  void printUserInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n\n  void run(){\n    print(\"Person run\");\n  }\n}\n\nclass A{\n  void printA(){\n    print(\"printA\");\n  }\n\n  void run(){\n    print(\"A - Run\");\n  }\n}\n\nclass B{\n  void printB(){\n    print(\"printB\");\n  }\n\n  void run(){\n    print(\"B - Run\");\n  }\n}\n\nclass C extends Person with B,A{\n  C(String name, int age) : super(name, age);\n\n  void printC(){\n    print(\"printC\");\n  }\n}\n\n\n  // C c = new C();\n  // c.printA();\n  // c.printB();\n  // c.printC();\n\n  /** 打印结果:\nprintA\nprintB\nprintC\n   */\n\n  C c1 = new C(\"张三\", 20);\n  c1.run();\n  c1.printUserInfo();\n\n打印结果：\n\nA - Run\n张三 --- 20\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/12-Dart中的mixins.md","raw":"---\ntitle: 12-Dart中的mixins\ntoc: true\ndate: 2020-09-01 21:22:40\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\nmixins的中文意思是混入，就是在类中混入其他功能。\n在Dart中可以使用mixins实现类似多继承的功能\n\n因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：\n1，作为mixins 的类只能继承自object, 不能继承其他类。\n2，作为mixins的类不能有构造函数。\n3，一个类可以mixins多个mixins类。\n4，mixins绝不是继承，也不是接口，而是一种全新的特性。\n\n例子：\n\nclass Person{\n  String name;\n  int age;\n  Person(this.name,this.age);\n\n  void printUserInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n\n  void run(){\n    print(\"Person run\");\n  }\n}\n\nclass A{\n  void printA(){\n    print(\"printA\");\n  }\n\n  void run(){\n    print(\"A - Run\");\n  }\n}\n\nclass B{\n  void printB(){\n    print(\"printB\");\n  }\n\n  void run(){\n    print(\"B - Run\");\n  }\n}\n\nclass C extends Person with B,A{\n  C(String name, int age) : super(name, age);\n\n  void printC(){\n    print(\"printC\");\n  }\n}\n\n\n  // C c = new C();\n  // c.printA();\n  // c.printB();\n  // c.printC();\n\n  /** 打印结果:\nprintA\nprintB\nprintC\n   */\n\n  C c1 = new C(\"张三\", 20);\n  c1.run();\n  c1.printUserInfo();\n\n打印结果：\n\nA - Run\n张三 --- 20\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/12-Dart中的mixins","published":1,"updated":"2020-09-01T13:35:03.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600l001bl4s6a0u71un3","content":"<p>mixins的中文意思是混入，就是在类中混入其他功能。<br>在Dart中可以使用mixins实现类似多继承的功能</p>\n<p>因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：<br>1，作为mixins 的类只能继承自object, 不能继承其他类。<br>2，作为mixins的类不能有构造函数。<br>3，一个类可以mixins多个mixins类。<br>4，mixins绝不是继承，也不是接口，而是一种全新的特性。</p>\n<p>例子：</p>\n<p>class Person{<br>  String name;<br>  int age;<br>  Person(this.name,this.age);</p>\n<p>  void printUserInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }</p>\n<p>  void run(){<br>    print(“Person run”);<br>  }<br>}</p>\n<p>class A{<br>  void printA(){<br>    print(“printA”);<br>  }</p>\n<p>  void run(){<br>    print(“A - Run”);<br>  }<br>}</p>\n<p>class B{<br>  void printB(){<br>    print(“printB”);<br>  }</p>\n<p>  void run(){<br>    print(“B - Run”);<br>  }<br>}</p>\n<p>class C extends Person with B,A{<br>  C(String name, int age) : super(name, age);</p>\n<p>  void printC(){<br>    print(“printC”);<br>  }<br>}</p>\n<p>  // C c = new C();<br>  // c.printA();<br>  // c.printB();<br>  // c.printC();</p>\n<p>  /** 打印结果:<br>printA<br>printB<br>printC<br>   */</p>\n<p>  C c1 = new C(“张三”, 20);<br>  c1.run();<br>  c1.printUserInfo();</p>\n<p>打印结果：</p>\n<p>A - Run<br>张三 — 20</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>mixins的中文意思是混入，就是在类中混入其他功能。<br>在Dart中可以使用mixins实现类似多继承的功能</p>\n<p>因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：<br>1，作为mixins 的类只能继承自object, 不能继承其他类。<br>2，作为mixins的类不能有构造函数。<br>3，一个类可以mixins多个mixins类。<br>4，mixins绝不是继承，也不是接口，而是一种全新的特性。</p>\n<p>例子：</p>\n<p>class Person{<br>  String name;<br>  int age;<br>  Person(this.name,this.age);</p>\n<p>  void printUserInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }</p>\n<p>  void run(){<br>    print(“Person run”);<br>  }<br>}</p>\n<p>class A{<br>  void printA(){<br>    print(“printA”);<br>  }</p>\n<p>  void run(){<br>    print(“A - Run”);<br>  }<br>}</p>\n<p>class B{<br>  void printB(){<br>    print(“printB”);<br>  }</p>\n<p>  void run(){<br>    print(“B - Run”);<br>  }<br>}</p>\n<p>class C extends Person with B,A{<br>  C(String name, int age) : super(name, age);</p>\n<p>  void printC(){<br>    print(“printC”);<br>  }<br>}</p>\n<p>  // C c = new C();<br>  // c.printA();<br>  // c.printB();<br>  // c.printC();</p>\n<p>  /** 打印结果:<br>printA<br>printB<br>printC<br>   */</p>\n<p>  C c1 = new C(“张三”, 20);<br>  c1.run();<br>  c1.printUserInfo();</p>\n<p>打印结果：</p>\n<p>A - Run<br>张三 — 20</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"13-泛型方法，泛型类，泛型接口","toc":true,"date":"2020-09-01T13:22:48.000Z","_content":"\n通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)\n\n1, 泛型方法\nT getData<T>(T value){\n  return value;\n}\n\n//调用\nprint(getData(\"你好\"));\nprint(getData(2));\nprint(getData<String>(\"哈哈哈\"));\nprint(getData<int>(2));\n\n2，泛型类\nclass PrintClass<T>{\n  List list = new List<T>();\n\n  void add(T value){\n    this.list.add(value);\n  }\n\n  void printInfo(){\n    for(var i = 0;i<this.list.length;i++){\n      print(this.list[i]);\n    }\n  }\n}\n\n调用：\nPrintClass<String> p = new PrintClass<String>();\np.add(\"你好\");\np.add(\"Dart\");\np.printInfo();\n\n\n3，泛型接口\n\nabstract class Cache<T>{\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass FileCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是文件缓存，把key=${key}, value=${value} 写入到了文件中\");\n  }\n}\n\nclass MemoryCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是内存缓存, 把key=${key}, value=${value} 写入到了内存中\");\n  }\n}\n\n调用：\nFileCache<String> f = new FileCache<String>();\nf.setByKey(\"index\", \"索引值\");\nf.setByKey(\"index1\", 2);  //这是错误写法\n\nMemoryCache<Map> m = new MemoryCache<Map>();\nm.setByKey(\"index\", {\"name\":\"张三\",\"age\":20});\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/13-泛型方法，泛型类，泛型接口.md","raw":"---\ntitle: 13-泛型方法，泛型类，泛型接口\ntoc: true\ndate: 2020-09-01 21:22:48\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)\n\n1, 泛型方法\nT getData<T>(T value){\n  return value;\n}\n\n//调用\nprint(getData(\"你好\"));\nprint(getData(2));\nprint(getData<String>(\"哈哈哈\"));\nprint(getData<int>(2));\n\n2，泛型类\nclass PrintClass<T>{\n  List list = new List<T>();\n\n  void add(T value){\n    this.list.add(value);\n  }\n\n  void printInfo(){\n    for(var i = 0;i<this.list.length;i++){\n      print(this.list[i]);\n    }\n  }\n}\n\n调用：\nPrintClass<String> p = new PrintClass<String>();\np.add(\"你好\");\np.add(\"Dart\");\np.printInfo();\n\n\n3，泛型接口\n\nabstract class Cache<T>{\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass FileCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是文件缓存，把key=${key}, value=${value} 写入到了文件中\");\n  }\n}\n\nclass MemoryCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是内存缓存, 把key=${key}, value=${value} 写入到了内存中\");\n  }\n}\n\n调用：\nFileCache<String> f = new FileCache<String>();\nf.setByKey(\"index\", \"索引值\");\nf.setByKey(\"index1\", 2);  //这是错误写法\n\nMemoryCache<Map> m = new MemoryCache<Map>();\nm.setByKey(\"index\", {\"name\":\"张三\",\"age\":20});\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/13-泛型方法，泛型类，泛型接口","published":1,"updated":"2020-09-01T13:35:06.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600n001cl4s68wzf2uqy","content":"<p>通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)</p>\n<p>1, 泛型方法<br>T getData<T>(T value){<br>  return value;<br>}</T></p>\n<p>//调用<br>print(getData(“你好”));<br>print(getData(2));<br>print(getData<String>(“哈哈哈”));<br>print(getData<int>(2));</int></String></p>\n<p>2，泛型类<br>class PrintClass<T>{<br>  List list = new List<T>();</T></T></p>\n<p>  void add(T value){<br>    this.list.add(value);<br>  }</p>\n<p>  void printInfo(){<br>    for(var i = 0;i&lt;this.list.length;i++){<br>      print(this.list[i]);<br>    }<br>  }<br>}</p>\n<p>调用：<br>PrintClass<String> p = new PrintClass<String>();<br>p.add(“你好”);<br>p.add(“Dart”);<br>p.printInfo();</String></String></p>\n<p>3，泛型接口</p>\n<p>abstract class Cache<T>{<br>  getByKey(String key);<br>  void setByKey(String key, T value);<br>}</T></p>\n<p>class FileCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是文件缓存，把key=${key}, value=${value} 写入到了文件中”);<br>  }<br>}</p>\n<p>class MemoryCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是内存缓存, 把key=${key}, value=${value} 写入到了内存中”);<br>  }<br>}</p>\n<p>调用：<br>FileCache<String> f = new FileCache<String>();<br>f.setByKey(“index”, “索引值”);<br>f.setByKey(“index1”, 2);  //这是错误写法</String></String></p>\n<p>MemoryCache<Map> m = new MemoryCache<Map>();<br>m.setByKey(“index”, {“name”:”张三”,”age”:20});</Map></Map></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)</p>\n<p>1, 泛型方法<br>T getData<T>(T value){<br>  return value;<br>}</T></p>\n<p>//调用<br>print(getData(“你好”));<br>print(getData(2));<br>print(getData<String>(“哈哈哈”));<br>print(getData<int>(2));</int></String></p>\n<p>2，泛型类<br>class PrintClass<T>{<br>  List list = new List<T>();</T></T></p>\n<p>  void add(T value){<br>    this.list.add(value);<br>  }</p>\n<p>  void printInfo(){<br>    for(var i = 0;i&lt;this.list.length;i++){<br>      print(this.list[i]);<br>    }<br>  }<br>}</p>\n<p>调用：<br>PrintClass<String> p = new PrintClass<String>();<br>p.add(“你好”);<br>p.add(“Dart”);<br>p.printInfo();</String></String></p>\n<p>3，泛型接口</p>\n<p>abstract class Cache<T>{<br>  getByKey(String key);<br>  void setByKey(String key, T value);<br>}</T></p>\n<p>class FileCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是文件缓存，把key=${key}, value=${value} 写入到了文件中”);<br>  }<br>}</p>\n<p>class MemoryCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是内存缓存, 把key=${key}, value=${value} 写入到了内存中”);<br>  }<br>}</p>\n<p>调用：<br>FileCache<String> f = new FileCache<String>();<br>f.setByKey(“index”, “索引值”);<br>f.setByKey(“index1”, 2);  //这是错误写法</String></String></p>\n<p>MemoryCache<Map> m = new MemoryCache<Map>();<br>m.setByKey(“index”, {“name”:”张三”,”age”:20});</Map></Map></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"14-Dart中自定义库，系统库，第三方库","toc":true,"date":"2020-09-01T13:22:58.000Z","_content":"\n1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。\n2，引入系统库\n\n引入 math库\nimport 'dart:math';\n\n//求最小数和最大数\nprint(min(10,20));\nprint(max(10,20));\n\n引入io和convert库\nimport 'dart:io';\nimport 'dart:convert';\n\n\n/**\n * async 是让方法变成异步\n * await 是等待异步方法执行完成\n */\ngetDataFromZhiHuAPI() async{\n  //1. 创建HttpClient对象\n  var httpClient = new HttpClient();\n  //2. 创建Uri对象 http://news-at.zhihu.com/api/3/stories/latest\n  var uri = new Uri.http(\"news-at.zhihu.com\", \"/api/3/stories/latest\");\n  //3. 发起请求，等待结束\n  var request = await httpClient.getUrl(uri);\n  //4. 关闭请求，等待响应\n  var response = await request.close();\n  //5. 解码相应的内容\n  return response.transform(utf8.decoder).join();\n}\n\n调用方法：\nvar result = await getDataFromZhiHuAPI();\nprint(result);\n\n\n3，导入第三方库\npub包管理系统\n  1. 从下面网址找到要用的库\nhttps://pub.dev/packages\nhttps://pub.flutter-io.cn/packages\nhttps://pub.dartlang.org/flutter\n\n2. 创建一个pubspec.yaml 文件，内容如下：\n\nname: thisAPubSettingFile\ndescription : A new flutter module project\ndependencies:\n    \thttp: ^0.12.0+4\n   \tdate_format: ^1.0.8\n3. 配置 dependencies\n4. 运行 pub get 获取远程库到本地\n5. 看文档引入库使用。\n\n使用：\nimport 'dart:convert' as convert;\nimport 'package:http/http.dart' as http;\n\nvoid main(List<String> args) async {\n\n  var url = 'http://news-at.zhihu.com/api/3/stories/latest';\n\n  var response = await http.get(url);\n  if (response.statusCode == 200) {\n    var jsonResponse = convert.jsonDecode(response.body);\n    print(jsonResponse);\n  } else {\n    print('Request failed with status: ${response.statusCode}.');\n  }\n}\n\n4. Dart库冲突\n多个文件中，有相同的类，那么引入的时候，怎么办呢？\n使用 as 关键字指定, \n例如： Person1.dart文件和Person2.dart中都有 Person类\n\nimport 'lib/Person1.dart';\nimport 'lib/Person2.dart' as lib;\n\n使用：\nPerson p1 = new Person(\"张三\",20); //这里的Person使用的Person1.dart文件中的Person类\n\nlib.Person p2 = new lib.Person(\"李四\",30);  //这里的Person类就是Person2.dart文件的Person类\n\n5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？\n\n解决这种问题，有两种模式：\n模式一： 只导入需要的部分，使用 show 关键字，例如：\nimport \"package:lib1/lib1.dart\" show foo;   //只引用foo\n\n模式二：隐藏不需要的部分，使用hide关键字， 例如：\nimport \"package:lib2/lib12.dart\" hide  foo;  //隐藏foo, 其他的都引用\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/14-Dart中自定义库，系统库，第三方库.md","raw":"---\ntitle: 14-Dart中自定义库，系统库，第三方库\ntoc: true\ndate: 2020-09-01 21:22:58\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。\n2，引入系统库\n\n引入 math库\nimport 'dart:math';\n\n//求最小数和最大数\nprint(min(10,20));\nprint(max(10,20));\n\n引入io和convert库\nimport 'dart:io';\nimport 'dart:convert';\n\n\n/**\n * async 是让方法变成异步\n * await 是等待异步方法执行完成\n */\ngetDataFromZhiHuAPI() async{\n  //1. 创建HttpClient对象\n  var httpClient = new HttpClient();\n  //2. 创建Uri对象 http://news-at.zhihu.com/api/3/stories/latest\n  var uri = new Uri.http(\"news-at.zhihu.com\", \"/api/3/stories/latest\");\n  //3. 发起请求，等待结束\n  var request = await httpClient.getUrl(uri);\n  //4. 关闭请求，等待响应\n  var response = await request.close();\n  //5. 解码相应的内容\n  return response.transform(utf8.decoder).join();\n}\n\n调用方法：\nvar result = await getDataFromZhiHuAPI();\nprint(result);\n\n\n3，导入第三方库\npub包管理系统\n  1. 从下面网址找到要用的库\nhttps://pub.dev/packages\nhttps://pub.flutter-io.cn/packages\nhttps://pub.dartlang.org/flutter\n\n2. 创建一个pubspec.yaml 文件，内容如下：\n\nname: thisAPubSettingFile\ndescription : A new flutter module project\ndependencies:\n    \thttp: ^0.12.0+4\n   \tdate_format: ^1.0.8\n3. 配置 dependencies\n4. 运行 pub get 获取远程库到本地\n5. 看文档引入库使用。\n\n使用：\nimport 'dart:convert' as convert;\nimport 'package:http/http.dart' as http;\n\nvoid main(List<String> args) async {\n\n  var url = 'http://news-at.zhihu.com/api/3/stories/latest';\n\n  var response = await http.get(url);\n  if (response.statusCode == 200) {\n    var jsonResponse = convert.jsonDecode(response.body);\n    print(jsonResponse);\n  } else {\n    print('Request failed with status: ${response.statusCode}.');\n  }\n}\n\n4. Dart库冲突\n多个文件中，有相同的类，那么引入的时候，怎么办呢？\n使用 as 关键字指定, \n例如： Person1.dart文件和Person2.dart中都有 Person类\n\nimport 'lib/Person1.dart';\nimport 'lib/Person2.dart' as lib;\n\n使用：\nPerson p1 = new Person(\"张三\",20); //这里的Person使用的Person1.dart文件中的Person类\n\nlib.Person p2 = new lib.Person(\"李四\",30);  //这里的Person类就是Person2.dart文件的Person类\n\n5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？\n\n解决这种问题，有两种模式：\n模式一： 只导入需要的部分，使用 show 关键字，例如：\nimport \"package:lib1/lib1.dart\" show foo;   //只引用foo\n\n模式二：隐藏不需要的部分，使用hide关键字， 例如：\nimport \"package:lib2/lib12.dart\" hide  foo;  //隐藏foo, 其他的都引用\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/14-Dart中自定义库，系统库，第三方库","published":1,"updated":"2020-09-01T13:35:09.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600q001fl4s63bpi6gep","content":"<p>1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。<br>2，引入系统库</p>\n<p>引入 math库<br>import ‘dart:math’;</p>\n<p>//求最小数和最大数<br>print(min(10,20));<br>print(max(10,20));</p>\n<p>引入io和convert库<br>import ‘dart:io’;<br>import ‘dart:convert’;</p>\n<p>/**</p>\n<ul>\n<li>async 是让方法变成异步</li>\n<li>await 是等待异步方法执行完成</li>\n<li>/<br>getDataFromZhiHuAPI() async{<br>//1. 创建HttpClient对象<br>var httpClient = new HttpClient();<br>//2. 创建Uri对象 <a href=\"http://news-at.zhihu.com/api/3/stories/latest\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest</a><br>var uri = new Uri.http(“news-at.zhihu.com”, “/api/3/stories/latest”);<br>//3. 发起请求，等待结束<br>var request = await httpClient.getUrl(uri);<br>//4. 关闭请求，等待响应<br>var response = await request.close();<br>//5. 解码相应的内容<br>return response.transform(utf8.decoder).join();<br>}</li>\n</ul>\n<p>调用方法：<br>var result = await getDataFromZhiHuAPI();<br>print(result);</p>\n<p>3，导入第三方库<br>pub包管理系统</p>\n<ol>\n<li>从下面网址找到要用的库<br><a href=\"https://pub.dev/packages\" target=\"_blank\" rel=\"noopener\">https://pub.dev/packages</a><br><a href=\"https://pub.flutter-io.cn/packages\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/packages</a><br><a href=\"https://pub.dartlang.org/flutter\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/flutter</a></li>\n</ol>\n<ol start=\"2\">\n<li>创建一个pubspec.yaml 文件，内容如下：</li>\n</ol>\n<p>name: thisAPubSettingFile<br>description : A new flutter module project<br>dependencies:<br>        http: ^0.12.0+4<br>       date_format: ^1.0.8<br>3. 配置 dependencies<br>4. 运行 pub get 获取远程库到本地<br>5. 看文档引入库使用。</p>\n<p>使用：<br>import ‘dart:convert’ as convert;<br>import ‘package:http/http.dart’ as http;</p>\n<p>void main(List<String> args) async {</String></p>\n<p>  var url = ‘<a href=\"http://news-at.zhihu.com/api/3/stories/latest&#39;\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest&#39;</a>;</p>\n<p>  var response = await http.get(url);<br>  if (response.statusCode == 200) {<br>    var jsonResponse = convert.jsonDecode(response.body);<br>    print(jsonResponse);<br>  } else {<br>    print(‘Request failed with status: ${response.statusCode}.’);<br>  }<br>}</p>\n<ol start=\"4\">\n<li>Dart库冲突<br>多个文件中，有相同的类，那么引入的时候，怎么办呢？<br>使用 as 关键字指定,<br>例如： Person1.dart文件和Person2.dart中都有 Person类</li>\n</ol>\n<p>import ‘lib/Person1.dart’;<br>import ‘lib/Person2.dart’ as lib;</p>\n<p>使用：<br>Person p1 = new Person(“张三”,20); //这里的Person使用的Person1.dart文件中的Person类</p>\n<p>lib.Person p2 = new lib.Person(“李四”,30);  //这里的Person类就是Person2.dart文件的Person类</p>\n<p>5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？</p>\n<p>解决这种问题，有两种模式：<br>模式一： 只导入需要的部分，使用 show 关键字，例如：<br>import “package:lib1/lib1.dart” show foo;   //只引用foo</p>\n<p>模式二：隐藏不需要的部分，使用hide关键字， 例如：<br>import “package:lib2/lib12.dart” hide  foo;  //隐藏foo, 其他的都引用</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。<br>2，引入系统库</p>\n<p>引入 math库<br>import ‘dart:math’;</p>\n<p>//求最小数和最大数<br>print(min(10,20));<br>print(max(10,20));</p>\n<p>引入io和convert库<br>import ‘dart:io’;<br>import ‘dart:convert’;</p>\n<p>/**</p>\n<ul>\n<li>async 是让方法变成异步</li>\n<li>await 是等待异步方法执行完成</li>\n<li>/<br>getDataFromZhiHuAPI() async{<br>//1. 创建HttpClient对象<br>var httpClient = new HttpClient();<br>//2. 创建Uri对象 <a href=\"http://news-at.zhihu.com/api/3/stories/latest\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest</a><br>var uri = new Uri.http(“news-at.zhihu.com”, “/api/3/stories/latest”);<br>//3. 发起请求，等待结束<br>var request = await httpClient.getUrl(uri);<br>//4. 关闭请求，等待响应<br>var response = await request.close();<br>//5. 解码相应的内容<br>return response.transform(utf8.decoder).join();<br>}</li>\n</ul>\n<p>调用方法：<br>var result = await getDataFromZhiHuAPI();<br>print(result);</p>\n<p>3，导入第三方库<br>pub包管理系统</p>\n<ol>\n<li>从下面网址找到要用的库<br><a href=\"https://pub.dev/packages\" target=\"_blank\" rel=\"noopener\">https://pub.dev/packages</a><br><a href=\"https://pub.flutter-io.cn/packages\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/packages</a><br><a href=\"https://pub.dartlang.org/flutter\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/flutter</a></li>\n</ol>\n<ol start=\"2\">\n<li>创建一个pubspec.yaml 文件，内容如下：</li>\n</ol>\n<p>name: thisAPubSettingFile<br>description : A new flutter module project<br>dependencies:<br>        http: ^0.12.0+4<br>       date_format: ^1.0.8<br>3. 配置 dependencies<br>4. 运行 pub get 获取远程库到本地<br>5. 看文档引入库使用。</p>\n<p>使用：<br>import ‘dart:convert’ as convert;<br>import ‘package:http/http.dart’ as http;</p>\n<p>void main(List<String> args) async {</String></p>\n<p>  var url = ‘<a href=\"http://news-at.zhihu.com/api/3/stories/latest&#39;\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest&#39;</a>;</p>\n<p>  var response = await http.get(url);<br>  if (response.statusCode == 200) {<br>    var jsonResponse = convert.jsonDecode(response.body);<br>    print(jsonResponse);<br>  } else {<br>    print(‘Request failed with status: ${response.statusCode}.’);<br>  }<br>}</p>\n<ol start=\"4\">\n<li>Dart库冲突<br>多个文件中，有相同的类，那么引入的时候，怎么办呢？<br>使用 as 关键字指定,<br>例如： Person1.dart文件和Person2.dart中都有 Person类</li>\n</ol>\n<p>import ‘lib/Person1.dart’;<br>import ‘lib/Person2.dart’ as lib;</p>\n<p>使用：<br>Person p1 = new Person(“张三”,20); //这里的Person使用的Person1.dart文件中的Person类</p>\n<p>lib.Person p2 = new lib.Person(“李四”,30);  //这里的Person类就是Person2.dart文件的Person类</p>\n<p>5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？</p>\n<p>解决这种问题，有两种模式：<br>模式一： 只导入需要的部分，使用 show 关键字，例如：<br>import “package:lib1/lib1.dart” show foo;   //只引用foo</p>\n<p>模式二：隐藏不需要的部分，使用hide关键字， 例如：<br>import “package:lib2/lib12.dart” hide  foo;  //隐藏foo, 其他的都引用</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"02-flutter之环境搭建","toc":true,"date":"2020-09-02T12:36:34.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/02-flutter之环境搭建.md","raw":"---\ntitle: 02-flutter之环境搭建\ntoc: true\ndate: 2020-09-02 20:36:34\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/02-flutter之环境搭建","published":1,"updated":"2020-09-02T12:38:57.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600t001hl4s63xjugthr","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"04-Android Studio 中下载Android SDK的两种方式","toc":true,"date":"2020-09-02T12:37:06.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式.md","raw":"---\ntitle: 04-Android Studio 中下载Android SDK的两种方式\ntoc: true\ndate: 2020-09-02 20:37:06\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式","published":1,"updated":"2020-09-02T12:39:03.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600u001kl4s6brfq20mj","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"03-Hello Flutter","toc":true,"date":"2020-09-02T12:36:52.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/03-Hello-Flutter.md","raw":"---\ntitle: 03-Hello Flutter\ntoc: true\ndate: 2020-09-02 20:36:52\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/03-Hello-Flutter","published":1,"updated":"2020-09-02T12:39:00.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600w001ml4s65fqd135y","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"01-flutter学习开始","toc":true,"date":"2020-09-02T12:35:52.000Z","_content":"\n\n# 一. 认识Flutter\n\n### 1.1. 什么是Flutter ?\n\nFlutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。\n但是现在，它只是活跃于移动端。\n\n那么，目前移动平台主要有哪些呢？没错，iOS、Android！\n\n于是，我们可以简单概述一下Flutter：\n\nFlutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。\n它不仅仅性能优越，而且开发非常高效！\n\n![图1](01-flutter学习开始/01_001.png)\n\n为什么需要这样一种跨平台解决方案呢？\n待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。\n\n### 1.2. Flutter的特点\n\nGoogle公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。\n这部分了解即可，后面学习过程中，慢慢体会。\n\n美观\n\n使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。\n\n当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的\n\n快速\n\n后面有专门讲解为什么性能这么高，先做一个了解即可\n\nFlutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。\n\nFlutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。\n\n这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。\n\n![图1](01/01_002.png)\n\n高效\n\n对开发者来说，使用 Flutter 开发应用十分高效。\nFlutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。\n\n另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。\n\n![图1](01/01_003.png)\n\n开放\n\nFlutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。\ngithub地址： https://github.com/flutter/flutter\n\n![图1](01/01_004.png)\n\n# 二. 跨平台历史\n### 2.1. 平台独立开发\n目前移动端有两大系统：iOS和Android\n\n很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App\n\n  - 意味着Android系统上需要一个Android版本的App\n  \n  - 意味着iOS系统上需要一个iOS版本的App\n  \n  - 但是他们的开发方式完全不同！！！\n\n\niOS系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。\n  \n  - 2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。\n  \n  - 也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift\n\n\nAndroid系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Java\n\n  - 2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持\n\n  - 也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin\n\n\n通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。\n\n但是，对于一家小公司来说，这样的成本是非常高的。\n在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.\n\n### 2.2. 跨平台解决方案\n基于 JavaScript 和 WebView的跨平台\n\n最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。\n\n主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。\n但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。\n但是，它本身的体验并不理想，而且开发过程中的坑非常多。\n\n![图1](01/01_005.png)\n\n\n备受欢迎的React Native\n\n在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。\n\nReact Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。\n\nRN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。\n\n并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。\n\n但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。\n\n还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。\n\n所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。\n\n![图1](01/01_006.png)\n\n可能是终极的解决方案: Flutter\n从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。\n我们直接看下面这幅图来对比flutter - native - rn的区别\n\n  - Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）\n  - Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）\n  - 而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。\n\n具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。\n\n![图1](01/01_007.png)\n\n\n![图1](01/01_008.png)\n\n# 三. Flutter绘制原理\n### 3.1. Flutter渲染本质\n\n问题：一个图像到底是如何显示到屏幕上的呢？\n首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。\n\n比如下面的一个GIF图片:\n\n![图1](01/01_009.png)\n\n我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:\n\n![图1](01/01_010.png)\n\n但是我们为什么能看到类似于动画的效果呢？\n这是因为它播放的速度非常快，研究表明：\n*   当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿\n*   所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）\n\n\n我们说回到电脑、手机屏幕的显示\n\n事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。\n\n一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。\n\n![图1](01/01_011.png)\n\n在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：\n\n- CPU将计算好的显示内容提交给 GPU；\n- GPU渲染后放入帧缓冲区；\n- 视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；\n当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。\n\n![图1](01/01_012.png)\n\n  - GPU将信号同步到 UI 线程\n  - UI 线程用Dart来构建图层树\n  - 图层树在GPU 线程进行合成\n  - 合成后的视图数据提供给Skia 引擎\n  - Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU\n这也是flutter区别于React Native的本质区别：\n\n  - React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；\n  - Flutter 则是自己完成了组件渲染的闭环。\n\n### 3.2. Dart语言优势\nFlutter为什么要选择Dart作为开发语言？\n\n有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）\n\n早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。\n其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。\n\n但是Flutter团队从一开始就决定，不将就！！！\n\n*   Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。\n\n*   Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。\n\n*   Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。\n*   Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。\n*   开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。\n\n并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。\n\n### 3.3. 渲染引擎skia\n想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。\n\nSkia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。\n\n目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；\n\n而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。\n\n底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。\n\n![图1](01/01_013.png)\n\n# 四. 如何学习flutter\n### 4.1. 大前端学不动了\n很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。\n\n但是作为大前端开发者就是这样，各种折腾：\n\n*   客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）\n*   前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）\n\n大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。\n但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。\n并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。\n\n### 4.2. flutter学得会吗？\n\n很多人对于学习望而却步，主要是基于两点考虑：\n\n\n*   学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。\n*   flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等\n\ndart语言并不复杂，而且非常现代化\n\n*   首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）\n*   其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）\n\nflutter并没有非常多创新的概念：\n \n*   flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。\n*   声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/01-flutter学习开始.md","raw":"---\ntitle: 01-flutter学习开始\ntoc: true\ndate: 2020-09-02 20:35:52\ncategories:\n- flutter\n- flutter框架一\ntags:\n\n---\n\n\n# 一. 认识Flutter\n\n### 1.1. 什么是Flutter ?\n\nFlutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。\n但是现在，它只是活跃于移动端。\n\n那么，目前移动平台主要有哪些呢？没错，iOS、Android！\n\n于是，我们可以简单概述一下Flutter：\n\nFlutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。\n它不仅仅性能优越，而且开发非常高效！\n\n![图1](01-flutter学习开始/01_001.png)\n\n为什么需要这样一种跨平台解决方案呢？\n待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。\n\n### 1.2. Flutter的特点\n\nGoogle公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。\n这部分了解即可，后面学习过程中，慢慢体会。\n\n美观\n\n使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。\n\n当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的\n\n快速\n\n后面有专门讲解为什么性能这么高，先做一个了解即可\n\nFlutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。\n\nFlutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。\n\n这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。\n\n![图1](01/01_002.png)\n\n高效\n\n对开发者来说，使用 Flutter 开发应用十分高效。\nFlutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。\n\n另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。\n\n![图1](01/01_003.png)\n\n开放\n\nFlutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。\ngithub地址： https://github.com/flutter/flutter\n\n![图1](01/01_004.png)\n\n# 二. 跨平台历史\n### 2.1. 平台独立开发\n目前移动端有两大系统：iOS和Android\n\n很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App\n\n  - 意味着Android系统上需要一个Android版本的App\n  \n  - 意味着iOS系统上需要一个iOS版本的App\n  \n  - 但是他们的开发方式完全不同！！！\n\n\niOS系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。\n  \n  - 2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。\n  \n  - 也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift\n\n\nAndroid系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Java\n\n  - 2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持\n\n  - 也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin\n\n\n通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。\n\n但是，对于一家小公司来说，这样的成本是非常高的。\n在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.\n\n### 2.2. 跨平台解决方案\n基于 JavaScript 和 WebView的跨平台\n\n最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。\n\n主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。\n但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。\n但是，它本身的体验并不理想，而且开发过程中的坑非常多。\n\n![图1](01/01_005.png)\n\n\n备受欢迎的React Native\n\n在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。\n\nReact Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。\n\nRN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。\n\n并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。\n\n但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。\n\n还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。\n\n所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。\n\n![图1](01/01_006.png)\n\n可能是终极的解决方案: Flutter\n从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。\n我们直接看下面这幅图来对比flutter - native - rn的区别\n\n  - Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）\n  - Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）\n  - 而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。\n\n具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。\n\n![图1](01/01_007.png)\n\n\n![图1](01/01_008.png)\n\n# 三. Flutter绘制原理\n### 3.1. Flutter渲染本质\n\n问题：一个图像到底是如何显示到屏幕上的呢？\n首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。\n\n比如下面的一个GIF图片:\n\n![图1](01/01_009.png)\n\n我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:\n\n![图1](01/01_010.png)\n\n但是我们为什么能看到类似于动画的效果呢？\n这是因为它播放的速度非常快，研究表明：\n*   当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿\n*   所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）\n\n\n我们说回到电脑、手机屏幕的显示\n\n事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。\n\n一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。\n\n![图1](01/01_011.png)\n\n在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：\n\n- CPU将计算好的显示内容提交给 GPU；\n- GPU渲染后放入帧缓冲区；\n- 视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；\n当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。\n\n![图1](01/01_012.png)\n\n  - GPU将信号同步到 UI 线程\n  - UI 线程用Dart来构建图层树\n  - 图层树在GPU 线程进行合成\n  - 合成后的视图数据提供给Skia 引擎\n  - Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU\n这也是flutter区别于React Native的本质区别：\n\n  - React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；\n  - Flutter 则是自己完成了组件渲染的闭环。\n\n### 3.2. Dart语言优势\nFlutter为什么要选择Dart作为开发语言？\n\n有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）\n\n早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。\n其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。\n\n但是Flutter团队从一开始就决定，不将就！！！\n\n*   Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。\n\n*   Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。\n\n*   Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。\n*   Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。\n*   开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。\n\n并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。\n\n### 3.3. 渲染引擎skia\n想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。\n\nSkia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。\n\n目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；\n\n而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。\n\n底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。\n\n![图1](01/01_013.png)\n\n# 四. 如何学习flutter\n### 4.1. 大前端学不动了\n很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。\n\n但是作为大前端开发者就是这样，各种折腾：\n\n*   客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）\n*   前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）\n\n大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。\n但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。\n并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。\n\n### 4.2. flutter学得会吗？\n\n很多人对于学习望而却步，主要是基于两点考虑：\n\n\n*   学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。\n*   flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等\n\ndart语言并不复杂，而且非常现代化\n\n*   首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）\n*   其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）\n\nflutter并没有非常多创新的概念：\n \n*   flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。\n*   声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/01-flutter学习开始","published":1,"updated":"2020-09-02T13:59:29.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg600x001pl4s6d7ljdiv1","content":"<h1 id=\"一-认识Flutter\"><a href=\"#一-认识Flutter\" class=\"headerlink\" title=\"一. 认识Flutter\"></a>一. 认识Flutter</h1><h3 id=\"1-1-什么是Flutter\"><a href=\"#1-1-什么是Flutter\" class=\"headerlink\" title=\"1.1. 什么是Flutter ?\"></a>1.1. 什么是Flutter ?</h3><p>Flutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。<br>但是现在，它只是活跃于移动端。</p>\n<p>那么，目前移动平台主要有哪些呢？没错，iOS、Android！</p>\n<p>于是，我们可以简单概述一下Flutter：</p>\n<p>Flutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。<br>它不仅仅性能优越，而且开发非常高效！</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_001.png\" alt=\"图1\"></p>\n<p>为什么需要这样一种跨平台解决方案呢？<br>待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。</p>\n<h3 id=\"1-2-Flutter的特点\"><a href=\"#1-2-Flutter的特点\" class=\"headerlink\" title=\"1.2. Flutter的特点\"></a>1.2. Flutter的特点</h3><p>Google公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。<br>这部分了解即可，后面学习过程中，慢慢体会。</p>\n<p>美观</p>\n<p>使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</p>\n<p>当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的</p>\n<p>快速</p>\n<p>后面有专门讲解为什么性能这么高，先做一个了解即可</p>\n<p>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。</p>\n<p>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。</p>\n<p>这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_002.png\" alt=\"图1\"></p>\n<p>高效</p>\n<p>对开发者来说，使用 Flutter 开发应用十分高效。<br>Flutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。</p>\n<p>另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_003.png\" alt=\"图1\"></p>\n<p>开放</p>\n<p>Flutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。<br>github地址： <a href=\"https://github.com/flutter/flutter\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter</a></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-跨平台历史\"><a href=\"#二-跨平台历史\" class=\"headerlink\" title=\"二. 跨平台历史\"></a>二. 跨平台历史</h1><h3 id=\"2-1-平台独立开发\"><a href=\"#2-1-平台独立开发\" class=\"headerlink\" title=\"2.1. 平台独立开发\"></a>2.1. 平台独立开发</h3><p>目前移动端有两大系统：iOS和Android</p>\n<p>很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App</p>\n<ul>\n<li><p>意味着Android系统上需要一个Android版本的App</p>\n</li>\n<li><p>意味着iOS系统上需要一个iOS版本的App</p>\n</li>\n<li><p>但是他们的开发方式完全不同！！！</p>\n</li>\n</ul>\n<p>iOS系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。</p>\n</li>\n<li><p>2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。</p>\n</li>\n<li><p>也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift</p>\n</li>\n</ul>\n<p>Android系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Java</p>\n</li>\n<li><p>2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持</p>\n</li>\n<li><p>也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin</p>\n</li>\n</ul>\n<p>通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。</p>\n<p>但是，对于一家小公司来说，这样的成本是非常高的。<br>在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.</p>\n<h3 id=\"2-2-跨平台解决方案\"><a href=\"#2-2-跨平台解决方案\" class=\"headerlink\" title=\"2.2. 跨平台解决方案\"></a>2.2. 跨平台解决方案</h3><p>基于 JavaScript 和 WebView的跨平台</p>\n<p>最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。</p>\n<p>主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。<br>但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。<br>但是，它本身的体验并不理想，而且开发过程中的坑非常多。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_005.png\" alt=\"图1\"></p>\n<p>备受欢迎的React Native</p>\n<p>在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。</p>\n<p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。</p>\n<p>RN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</p>\n<p>并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。</p>\n<p>但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。</p>\n<p>还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。</p>\n<p>所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_006.png\" alt=\"图1\"></p>\n<p>可能是终极的解决方案: Flutter<br>从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。<br>我们直接看下面这幅图来对比flutter - native - rn的区别</p>\n<ul>\n<li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）</li>\n<li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li>\n<li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li>\n</ul>\n<p>具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-Flutter绘制原理\"><a href=\"#三-Flutter绘制原理\" class=\"headerlink\" title=\"三. Flutter绘制原理\"></a>三. Flutter绘制原理</h1><h3 id=\"3-1-Flutter渲染本质\"><a href=\"#3-1-Flutter渲染本质\" class=\"headerlink\" title=\"3.1. Flutter渲染本质\"></a>3.1. Flutter渲染本质</h3><p>问题：一个图像到底是如何显示到屏幕上的呢？<br>首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。</p>\n<p>比如下面的一个GIF图片:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_009.png\" alt=\"图1\"></p>\n<p>我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_010.png\" alt=\"图1\"></p>\n<p>但是我们为什么能看到类似于动画的效果呢？<br>这是因为它播放的速度非常快，研究表明：</p>\n<ul>\n<li>当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿</li>\n<li>所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）</li>\n</ul>\n<p>我们说回到电脑、手机屏幕的显示</p>\n<p>事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。</p>\n<p>一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_011.png\" alt=\"图1\"></p>\n<p>在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：</p>\n<ul>\n<li>CPU将计算好的显示内容提交给 GPU；</li>\n<li>GPU渲染后放入帧缓冲区；</li>\n<li>视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；<br>当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_012.png\" alt=\"图1\"></p>\n<ul>\n<li><p>GPU将信号同步到 UI 线程</p>\n</li>\n<li><p>UI 线程用Dart来构建图层树</p>\n</li>\n<li><p>图层树在GPU 线程进行合成</p>\n</li>\n<li><p>合成后的视图数据提供给Skia 引擎</p>\n</li>\n<li><p>Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU<br>这也是flutter区别于React Native的本质区别：</p>\n</li>\n<li><p>React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；</p>\n</li>\n<li><p>Flutter 则是自己完成了组件渲染的闭环。</p>\n</li>\n</ul>\n<h3 id=\"3-2-Dart语言优势\"><a href=\"#3-2-Dart语言优势\" class=\"headerlink\" title=\"3.2. Dart语言优势\"></a>3.2. Dart语言优势</h3><p>Flutter为什么要选择Dart作为开发语言？</p>\n<p>有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）</p>\n<p>早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。<br>其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。</p>\n<p>但是Flutter团队从一开始就决定，不将就！！！</p>\n<ul>\n<li><p>Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。</p>\n</li>\n<li><p>Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。</p>\n</li>\n<li><p>Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。</p>\n</li>\n<li><p>Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。</p>\n</li>\n<li><p>开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。</p>\n</li>\n</ul>\n<p>并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。</p>\n<h3 id=\"3-3-渲染引擎skia\"><a href=\"#3-3-渲染引擎skia\" class=\"headerlink\" title=\"3.3. 渲染引擎skia\"></a>3.3. 渲染引擎skia</h3><p>想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。</p>\n<p>Skia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。</p>\n<p>目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；</p>\n<p>而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。</p>\n<p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_013.png\" alt=\"图1\"></p>\n<h1 id=\"四-如何学习flutter\"><a href=\"#四-如何学习flutter\" class=\"headerlink\" title=\"四. 如何学习flutter\"></a>四. 如何学习flutter</h1><h3 id=\"4-1-大前端学不动了\"><a href=\"#4-1-大前端学不动了\" class=\"headerlink\" title=\"4.1. 大前端学不动了\"></a>4.1. 大前端学不动了</h3><p>很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。</p>\n<p>但是作为大前端开发者就是这样，各种折腾：</p>\n<ul>\n<li>客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）</li>\n<li>前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）</li>\n</ul>\n<p>大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。<br>但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。<br>并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。</p>\n<h3 id=\"4-2-flutter学得会吗？\"><a href=\"#4-2-flutter学得会吗？\" class=\"headerlink\" title=\"4.2. flutter学得会吗？\"></a>4.2. flutter学得会吗？</h3><p>很多人对于学习望而却步，主要是基于两点考虑：</p>\n<ul>\n<li>学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。</li>\n<li>flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等</li>\n</ul>\n<p>dart语言并不复杂，而且非常现代化</p>\n<ul>\n<li>首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）</li>\n<li>其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）</li>\n</ul>\n<p>flutter并没有非常多创新的概念：</p>\n<ul>\n<li>flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。</li>\n<li>声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-认识Flutter\"><a href=\"#一-认识Flutter\" class=\"headerlink\" title=\"一. 认识Flutter\"></a>一. 认识Flutter</h1><h3 id=\"1-1-什么是Flutter\"><a href=\"#1-1-什么是Flutter\" class=\"headerlink\" title=\"1.1. 什么是Flutter ?\"></a>1.1. 什么是Flutter ?</h3><p>Flutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。<br>但是现在，它只是活跃于移动端。</p>\n<p>那么，目前移动平台主要有哪些呢？没错，iOS、Android！</p>\n<p>于是，我们可以简单概述一下Flutter：</p>\n<p>Flutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。<br>它不仅仅性能优越，而且开发非常高效！</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_001.png\" alt=\"图1\"></p>\n<p>为什么需要这样一种跨平台解决方案呢？<br>待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。</p>\n<h3 id=\"1-2-Flutter的特点\"><a href=\"#1-2-Flutter的特点\" class=\"headerlink\" title=\"1.2. Flutter的特点\"></a>1.2. Flutter的特点</h3><p>Google公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。<br>这部分了解即可，后面学习过程中，慢慢体会。</p>\n<p>美观</p>\n<p>使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</p>\n<p>当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的</p>\n<p>快速</p>\n<p>后面有专门讲解为什么性能这么高，先做一个了解即可</p>\n<p>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。</p>\n<p>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。</p>\n<p>这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_002.png\" alt=\"图1\"></p>\n<p>高效</p>\n<p>对开发者来说，使用 Flutter 开发应用十分高效。<br>Flutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。</p>\n<p>另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_003.png\" alt=\"图1\"></p>\n<p>开放</p>\n<p>Flutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。<br>github地址： <a href=\"https://github.com/flutter/flutter\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter</a></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-跨平台历史\"><a href=\"#二-跨平台历史\" class=\"headerlink\" title=\"二. 跨平台历史\"></a>二. 跨平台历史</h1><h3 id=\"2-1-平台独立开发\"><a href=\"#2-1-平台独立开发\" class=\"headerlink\" title=\"2.1. 平台独立开发\"></a>2.1. 平台独立开发</h3><p>目前移动端有两大系统：iOS和Android</p>\n<p>很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App</p>\n<ul>\n<li><p>意味着Android系统上需要一个Android版本的App</p>\n</li>\n<li><p>意味着iOS系统上需要一个iOS版本的App</p>\n</li>\n<li><p>但是他们的开发方式完全不同！！！</p>\n</li>\n</ul>\n<p>iOS系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。</p>\n</li>\n<li><p>2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。</p>\n</li>\n<li><p>也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift</p>\n</li>\n</ul>\n<p>Android系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Java</p>\n</li>\n<li><p>2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持</p>\n</li>\n<li><p>也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin</p>\n</li>\n</ul>\n<p>通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。</p>\n<p>但是，对于一家小公司来说，这样的成本是非常高的。<br>在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.</p>\n<h3 id=\"2-2-跨平台解决方案\"><a href=\"#2-2-跨平台解决方案\" class=\"headerlink\" title=\"2.2. 跨平台解决方案\"></a>2.2. 跨平台解决方案</h3><p>基于 JavaScript 和 WebView的跨平台</p>\n<p>最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。</p>\n<p>主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。<br>但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。<br>但是，它本身的体验并不理想，而且开发过程中的坑非常多。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_005.png\" alt=\"图1\"></p>\n<p>备受欢迎的React Native</p>\n<p>在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。</p>\n<p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。</p>\n<p>RN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</p>\n<p>并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。</p>\n<p>但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。</p>\n<p>还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。</p>\n<p>所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_006.png\" alt=\"图1\"></p>\n<p>可能是终极的解决方案: Flutter<br>从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。<br>我们直接看下面这幅图来对比flutter - native - rn的区别</p>\n<ul>\n<li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）</li>\n<li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li>\n<li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li>\n</ul>\n<p>具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-Flutter绘制原理\"><a href=\"#三-Flutter绘制原理\" class=\"headerlink\" title=\"三. Flutter绘制原理\"></a>三. Flutter绘制原理</h1><h3 id=\"3-1-Flutter渲染本质\"><a href=\"#3-1-Flutter渲染本质\" class=\"headerlink\" title=\"3.1. Flutter渲染本质\"></a>3.1. Flutter渲染本质</h3><p>问题：一个图像到底是如何显示到屏幕上的呢？<br>首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。</p>\n<p>比如下面的一个GIF图片:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_009.png\" alt=\"图1\"></p>\n<p>我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_010.png\" alt=\"图1\"></p>\n<p>但是我们为什么能看到类似于动画的效果呢？<br>这是因为它播放的速度非常快，研究表明：</p>\n<ul>\n<li>当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿</li>\n<li>所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）</li>\n</ul>\n<p>我们说回到电脑、手机屏幕的显示</p>\n<p>事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。</p>\n<p>一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_011.png\" alt=\"图1\"></p>\n<p>在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：</p>\n<ul>\n<li>CPU将计算好的显示内容提交给 GPU；</li>\n<li>GPU渲染后放入帧缓冲区；</li>\n<li>视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；<br>当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_012.png\" alt=\"图1\"></p>\n<ul>\n<li><p>GPU将信号同步到 UI 线程</p>\n</li>\n<li><p>UI 线程用Dart来构建图层树</p>\n</li>\n<li><p>图层树在GPU 线程进行合成</p>\n</li>\n<li><p>合成后的视图数据提供给Skia 引擎</p>\n</li>\n<li><p>Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU<br>这也是flutter区别于React Native的本质区别：</p>\n</li>\n<li><p>React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；</p>\n</li>\n<li><p>Flutter 则是自己完成了组件渲染的闭环。</p>\n</li>\n</ul>\n<h3 id=\"3-2-Dart语言优势\"><a href=\"#3-2-Dart语言优势\" class=\"headerlink\" title=\"3.2. Dart语言优势\"></a>3.2. Dart语言优势</h3><p>Flutter为什么要选择Dart作为开发语言？</p>\n<p>有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）</p>\n<p>早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。<br>其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。</p>\n<p>但是Flutter团队从一开始就决定，不将就！！！</p>\n<ul>\n<li><p>Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。</p>\n</li>\n<li><p>Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。</p>\n</li>\n<li><p>Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。</p>\n</li>\n<li><p>Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。</p>\n</li>\n<li><p>开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。</p>\n</li>\n</ul>\n<p>并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。</p>\n<h3 id=\"3-3-渲染引擎skia\"><a href=\"#3-3-渲染引擎skia\" class=\"headerlink\" title=\"3.3. 渲染引擎skia\"></a>3.3. 渲染引擎skia</h3><p>想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。</p>\n<p>Skia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。</p>\n<p>目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；</p>\n<p>而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。</p>\n<p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_013.png\" alt=\"图1\"></p>\n<h1 id=\"四-如何学习flutter\"><a href=\"#四-如何学习flutter\" class=\"headerlink\" title=\"四. 如何学习flutter\"></a>四. 如何学习flutter</h1><h3 id=\"4-1-大前端学不动了\"><a href=\"#4-1-大前端学不动了\" class=\"headerlink\" title=\"4.1. 大前端学不动了\"></a>4.1. 大前端学不动了</h3><p>很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。</p>\n<p>但是作为大前端开发者就是这样，各种折腾：</p>\n<ul>\n<li>客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）</li>\n<li>前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）</li>\n</ul>\n<p>大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。<br>但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。<br>并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。</p>\n<h3 id=\"4-2-flutter学得会吗？\"><a href=\"#4-2-flutter学得会吗？\" class=\"headerlink\" title=\"4.2. flutter学得会吗？\"></a>4.2. flutter学得会吗？</h3><p>很多人对于学习望而却步，主要是基于两点考虑：</p>\n<ul>\n<li>学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。</li>\n<li>flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等</li>\n</ul>\n<p>dart语言并不复杂，而且非常现代化</p>\n<ul>\n<li>首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）</li>\n<li>其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）</li>\n</ul>\n<p>flutter并没有非常多创新的概念：</p>\n<ul>\n<li>flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。</li>\n<li>声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-Dart(一)","toc":true,"date":"2020-09-02T12:37:33.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/06-Dart-一.md","raw":"---\ntitle: 06-Dart(一)\ntoc: true\ndate: 2020-09-02 20:37:33\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/06-Dart-一","published":1,"updated":"2020-09-02T12:39:08.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6011001rl4s69r4oh83d","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-Dart(二)","toc":true,"date":"2020-09-02T12:37:45.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/06-Dart-二.md","raw":"---\ntitle: 06-Dart(二)\ntoc: true\ndate: 2020-09-02 20:37:45\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/06-Dart-二","published":1,"updated":"2020-09-02T12:39:06.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6015001ul4s6evly7p1z","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"07-Flutter的基础Widget","toc":true,"date":"2020-09-02T12:38:01.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/07-Flutter的基础Widget.md","raw":"---\ntitle: 07-Flutter的基础Widget\ntoc: true\ndate: 2020-09-02 20:38:01\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/07-Flutter的基础Widget","published":1,"updated":"2020-09-02T12:39:11.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg601a001wl4s6apy1e6on","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"10-图文混排，按钮，图片","toc":true,"date":"2020-09-02T12:38:31.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/10-图文混排，按钮，图片.md","raw":"---\ntitle: 10-图文混排，按钮，图片\ntoc: true\ndate: 2020-09-02 20:38:31\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/10-图文混排，按钮，图片","published":1,"updated":"2020-09-02T12:39:19.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg601e001zl4s68r0yaufs","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"08-按钮变小设置","toc":true,"date":"2020-09-02T12:38:11.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/08-按钮变小设置.md","raw":"---\ntitle: 08-按钮变小设置\ntoc: true\ndate: 2020-09-02 20:38:11\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/08-按钮变小设置","published":1,"updated":"2020-09-02T12:39:13.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg601h0021l4s6clss77et","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"09-StatefulWidget生命周期","toc":true,"date":"2020-09-02T12:38:22.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/09-StatefulWidget生命周期.md","raw":"---\ntitle: 09-StatefulWidget生命周期\ntoc: true\ndate: 2020-09-02 20:38:22\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/09-StatefulWidget生命周期","published":1,"updated":"2020-09-02T12:39:17.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg601l0024l4s6bxkt5ke9","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"Foundation中的NSMutableString的创建","date":"2020-04-03T06:41:37.000Z","_content":"\n\nNSMutableString是可变字符串，相当于java中的StringBuffer。\n\nNSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。\n\n它的方法的简单介绍：\n\nsetString  : 设置字符串的内容\n\nappendString : 拼接一个字符串\n\nappendFormat : 拼接带有格式符的字符串\n\nreplaceCharactersInRange : 替换字符串\n\ninsertString ： 插入字符串\n\ndeleteCharactersInRange ：删除字符串\n\n如下是代码示例：\n\n\n``` \n    //预先分配10个数字的存储空间\n\n    NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n    //设置字符串的内容\n\n    [str setString:@\"1234\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendString:@\"567\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendFormat:@\"age is %i and height is %.2f\",27,1.7f];\n\n    \n\n    //替换字符串\n\n    NSRange range=[str rangeOfString:@\"height\"];\n\n   // NSRange range=NSMakeRange(7, 3);\n\n    [str replaceCharactersInRange:range withString:@\"no\"];\n\n    \n\n    //插入字符串\n\n    [str insertString:@\"abc\" atIndex:2];\n\n    \n\n    //删除字符串\n\n    range=[str rangeOfString:@\"age\"];\n\n    [str deleteCharactersInRange:range];\n\n    \n\n    NSLog(@\"%@\",str);\n\n        \n\n    //释放对象\n\n    [str release];\n   \n``` ","source":"_posts/oc/Foundation/oc-foundation-mulString.md","raw":"---\ntitle: Foundation中的NSMutableString的创建\ndate: 2020-04-03 14:41:37\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n\nNSMutableString是可变字符串，相当于java中的StringBuffer。\n\nNSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。\n\n它的方法的简单介绍：\n\nsetString  : 设置字符串的内容\n\nappendString : 拼接一个字符串\n\nappendFormat : 拼接带有格式符的字符串\n\nreplaceCharactersInRange : 替换字符串\n\ninsertString ： 插入字符串\n\ndeleteCharactersInRange ：删除字符串\n\n如下是代码示例：\n\n\n``` \n    //预先分配10个数字的存储空间\n\n    NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n    //设置字符串的内容\n\n    [str setString:@\"1234\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendString:@\"567\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendFormat:@\"age is %i and height is %.2f\",27,1.7f];\n\n    \n\n    //替换字符串\n\n    NSRange range=[str rangeOfString:@\"height\"];\n\n   // NSRange range=NSMakeRange(7, 3);\n\n    [str replaceCharactersInRange:range withString:@\"no\"];\n\n    \n\n    //插入字符串\n\n    [str insertString:@\"abc\" atIndex:2];\n\n    \n\n    //删除字符串\n\n    range=[str rangeOfString:@\"age\"];\n\n    [str deleteCharactersInRange:range];\n\n    \n\n    NSLog(@\"%@\",str);\n\n        \n\n    //释放对象\n\n    [str release];\n   \n``` ","slug":"oc/Foundation/oc-foundation-mulString","published":1,"updated":"2020-09-01T12:57:34.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6021003hl4s616yvfdqu","content":"<p>NSMutableString是可变字符串，相当于java中的StringBuffer。</p>\n<p>NSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。</p>\n<p>它的方法的简单介绍：</p>\n<p>setString  : 设置字符串的内容</p>\n<p>appendString : 拼接一个字符串</p>\n<p>appendFormat : 拼接带有格式符的字符串</p>\n<p>replaceCharactersInRange : 替换字符串</p>\n<p>insertString ： 插入字符串</p>\n<p>deleteCharactersInRange ：删除字符串</p>\n<p>如下是代码示例：</p>\n<pre><code> //预先分配10个数字的存储空间\n\n NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n //设置字符串的内容\n\n [str setString:@&quot;1234&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendString:@&quot;567&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendFormat:@&quot;age is %i and height is %.2f&quot;,27,1.7f];\n\n\n\n //替换字符串\n\n NSRange range=[str rangeOfString:@&quot;height&quot;];\n\n// NSRange range=NSMakeRange(7, 3);\n\n [str replaceCharactersInRange:range withString:@&quot;no&quot;];\n\n\n\n //插入字符串\n\n [str insertString:@&quot;abc&quot; atIndex:2];\n\n\n\n //删除字符串\n\n range=[str rangeOfString:@&quot;age&quot;];\n\n [str deleteCharactersInRange:range];\n\n\n\n NSLog(@&quot;%@&quot;,str);\n\n\n\n //释放对象\n\n [str release];\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>NSMutableString是可变字符串，相当于java中的StringBuffer。</p>\n<p>NSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。</p>\n<p>它的方法的简单介绍：</p>\n<p>setString  : 设置字符串的内容</p>\n<p>appendString : 拼接一个字符串</p>\n<p>appendFormat : 拼接带有格式符的字符串</p>\n<p>replaceCharactersInRange : 替换字符串</p>\n<p>insertString ： 插入字符串</p>\n<p>deleteCharactersInRange ：删除字符串</p>\n<p>如下是代码示例：</p>\n<pre><code> //预先分配10个数字的存储空间\n\n NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n //设置字符串的内容\n\n [str setString:@&quot;1234&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendString:@&quot;567&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendFormat:@&quot;age is %i and height is %.2f&quot;,27,1.7f];\n\n\n\n //替换字符串\n\n NSRange range=[str rangeOfString:@&quot;height&quot;];\n\n// NSRange range=NSMakeRange(7, 3);\n\n [str replaceCharactersInRange:range withString:@&quot;no&quot;];\n\n\n\n //插入字符串\n\n [str insertString:@&quot;abc&quot; atIndex:2];\n\n\n\n //删除字符串\n\n range=[str rangeOfString:@&quot;age&quot;];\n\n [str deleteCharactersInRange:range];\n\n\n\n NSLog(@&quot;%@&quot;,str);\n\n\n\n //释放对象\n\n [str release];\n</code></pre>"},{"title":"Foundation中将字符串写入到磁盘文件上","date":"2020-04-03T06:43:18.000Z","_content":"\n在日常操作中，有时我们需要将字符串写入到文本文件上，例如：\n\n\n\n    NSString *str=@\"123456这是字符串ss\";\n\n    //如果文件不存在，会自动创建文件\n\n    //如果文件夹不存在，会直接报错\n\n   NSString *path=@\"/Users/mac/Desktop/abcss.txt\";\n\n    \n\n    NSError *err=nil;\n\n    //YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n    [strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&err];\n\n    \n\n    if(err){\n\n       //[err localizedDescription] 会返回主要的错误信息\n\n       NSLog(@\"写入错误：%@\",[errlocalizedDescription]);\n\n    }else{\n\n        NSLog(@\"写入成功\");\n\n    }\n\n如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。\n\n以下是atomically为YES的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-1.jpeg)\n\n以下是atomically为NO的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-2.jpeg)\n\n","source":"_posts/oc/Foundation/oc-foundation-strFile.md","raw":"---\ntitle: Foundation中将字符串写入到磁盘文件上\ndate: 2020-04-03 14:43:18\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n在日常操作中，有时我们需要将字符串写入到文本文件上，例如：\n\n\n\n    NSString *str=@\"123456这是字符串ss\";\n\n    //如果文件不存在，会自动创建文件\n\n    //如果文件夹不存在，会直接报错\n\n   NSString *path=@\"/Users/mac/Desktop/abcss.txt\";\n\n    \n\n    NSError *err=nil;\n\n    //YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n    [strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&err];\n\n    \n\n    if(err){\n\n       //[err localizedDescription] 会返回主要的错误信息\n\n       NSLog(@\"写入错误：%@\",[errlocalizedDescription]);\n\n    }else{\n\n        NSLog(@\"写入成功\");\n\n    }\n\n如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。\n\n以下是atomically为YES的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-1.jpeg)\n\n以下是atomically为NO的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-2.jpeg)\n\n","slug":"oc/Foundation/oc-foundation-strFile","published":1,"updated":"2020-09-01T12:57:38.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6022003il4s60mwlbkks","content":"<p>在日常操作中，有时我们需要将字符串写入到文本文件上，例如：</p>\n<pre><code>NSString *str=@&quot;123456这是字符串ss&quot;;\n\n//如果文件不存在，会自动创建文件\n\n//如果文件夹不存在，会直接报错</code></pre><p>   NSString *path=@”/Users/mac/Desktop/abcss.txt”;</p>\n<pre><code>NSError *err=nil;\n\n//YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n[strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&amp;err];\n\n\n\nif(err){\n\n   //[err localizedDescription] 会返回主要的错误信息\n\n   NSLog(@&quot;写入错误：%@&quot;,[errlocalizedDescription]);\n\n}else{\n\n    NSLog(@&quot;写入成功&quot;);\n\n}</code></pre><p>如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。</p>\n<p>以下是atomically为YES的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg\" alt></p>\n<p>以下是atomically为NO的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在日常操作中，有时我们需要将字符串写入到文本文件上，例如：</p>\n<pre><code>NSString *str=@&quot;123456这是字符串ss&quot;;\n\n//如果文件不存在，会自动创建文件\n\n//如果文件夹不存在，会直接报错</code></pre><p>   NSString *path=@”/Users/mac/Desktop/abcss.txt”;</p>\n<pre><code>NSError *err=nil;\n\n//YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n[strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&amp;err];\n\n\n\nif(err){\n\n   //[err localizedDescription] 会返回主要的错误信息\n\n   NSLog(@&quot;写入错误：%@&quot;,[errlocalizedDescription]);\n\n}else{\n\n    NSLog(@&quot;写入成功&quot;);\n\n}</code></pre><p>如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。</p>\n<p>以下是atomically为YES的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg\" alt></p>\n<p>以下是atomically为NO的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg\" alt></p>\n"},{"title":"Foundation框架中字符串的创建","date":"2020-04-03T06:40:07.000Z","_content":"\n我们先看一下，c语言中的字符串是如何定义的，例如：\n\n\n\nchar *s=\"this is a string\"; //C语言中的字符串·\n\n在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种\n\n1，创建常量字符串，例如：\n\n\n\n//这种方式创建出来的字符串是不需要释放的\n\nNSString *str1=@\"this is a string\";\n\n\n\n2，创建空字符串，然后给予赋值\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\nNSString *str2=[[NSStringalloc] init];\n\nstr2=@\"this is a string\";\n\n[str2 release];\n\n\n\n3，通过字符串，创建字符串（需要手动释放）\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\n\n\nNSString *str3=[[NSStringalloc] initWithString:@\"this is a string\"];\n\n[str3 release];\n\n\n\n4，通过字符串，创建字符串（不需要手动释放）\n\n//使用对应的静态方法创建字符串，这样就不需要管理内存\n\nNSString *str4=[NSStringstringWithString:@\"this is a string\"];\n\n\n\n5，将c语言中的字符串转换成oc中的字符串（需要手动释放）\n\n\n\n//通过c语言的字符串转换成oc的字符串\n\nNSString *str5=[[NSStringalloc] initWithUTF8String:\"this is a string\"];\n\n[str5 release];\n\n\n\n6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)\n\n\n\n//使用静态方法创建字符串，不需释放内存\n\nNSString *str6=[NSStringstringWithUTF8String:\"this is a string\"];\n\n\n\n7，通过Format创建字符串（需要手动释放）\n\n//因为alloc,所以，需要手动释放内存\n\n\n\nNSString *str7=[[NSStringalloc] initWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n[str7 release];\n\n\n\n8，通过Format创建字符串（不需要手动释放）\n\n\n\n//因为使用静态方法创建字符串，所以不需要手动释放\n\nNSString *str8=[NSStringstringWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n\n\n9，我们还可以从磁盘上的文件中读取内容来创建字符串\n//文件路径\n\nNSString *path=@\"/Users/mac/Desktop/test.txt\";\n\n//这个方法已经过期，只能解析英文内容，不能解析中文内容\n\nNSString *str=[NSStringstringWithContentsOfFile:path];\n\n\n\n10，通过指定字符串编码来创建字符串\n\n\n\nNSError *err=nil;\n\n//指定字符串编码为UTF-8   NSUTF8StringEncoding\n\nNSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&err];\n\nif(err == nil){\n\n    NSLog(@\"读取文件成功,%@\",str);\n\n} else {\n\n    NSLog(@\"%@\",err);\n\n}\n\n其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式\n\nerror:&err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。\n\n\n\n11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串\n\n\n\nNSURL *url=[NSURLURLWithString:@\"file:///Users/mac/Desktop/test.txt\"];\n\nNSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str2);\n\n\n\n12，通过指定网络路径，获取网络上的内容来创建字符串。\n\n\n\nNSURL *url3=[NSURLURLWithString:@\"http://www.baidu.com\"];\n\nNSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str3);","source":"_posts/oc/Foundation/oc-foundation-string.md","raw":"---\ntitle: Foundation框架中字符串的创建\ndate: 2020-04-03 14:40:07\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n我们先看一下，c语言中的字符串是如何定义的，例如：\n\n\n\nchar *s=\"this is a string\"; //C语言中的字符串·\n\n在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种\n\n1，创建常量字符串，例如：\n\n\n\n//这种方式创建出来的字符串是不需要释放的\n\nNSString *str1=@\"this is a string\";\n\n\n\n2，创建空字符串，然后给予赋值\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\nNSString *str2=[[NSStringalloc] init];\n\nstr2=@\"this is a string\";\n\n[str2 release];\n\n\n\n3，通过字符串，创建字符串（需要手动释放）\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\n\n\nNSString *str3=[[NSStringalloc] initWithString:@\"this is a string\"];\n\n[str3 release];\n\n\n\n4，通过字符串，创建字符串（不需要手动释放）\n\n//使用对应的静态方法创建字符串，这样就不需要管理内存\n\nNSString *str4=[NSStringstringWithString:@\"this is a string\"];\n\n\n\n5，将c语言中的字符串转换成oc中的字符串（需要手动释放）\n\n\n\n//通过c语言的字符串转换成oc的字符串\n\nNSString *str5=[[NSStringalloc] initWithUTF8String:\"this is a string\"];\n\n[str5 release];\n\n\n\n6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)\n\n\n\n//使用静态方法创建字符串，不需释放内存\n\nNSString *str6=[NSStringstringWithUTF8String:\"this is a string\"];\n\n\n\n7，通过Format创建字符串（需要手动释放）\n\n//因为alloc,所以，需要手动释放内存\n\n\n\nNSString *str7=[[NSStringalloc] initWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n[str7 release];\n\n\n\n8，通过Format创建字符串（不需要手动释放）\n\n\n\n//因为使用静态方法创建字符串，所以不需要手动释放\n\nNSString *str8=[NSStringstringWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n\n\n9，我们还可以从磁盘上的文件中读取内容来创建字符串\n//文件路径\n\nNSString *path=@\"/Users/mac/Desktop/test.txt\";\n\n//这个方法已经过期，只能解析英文内容，不能解析中文内容\n\nNSString *str=[NSStringstringWithContentsOfFile:path];\n\n\n\n10，通过指定字符串编码来创建字符串\n\n\n\nNSError *err=nil;\n\n//指定字符串编码为UTF-8   NSUTF8StringEncoding\n\nNSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&err];\n\nif(err == nil){\n\n    NSLog(@\"读取文件成功,%@\",str);\n\n} else {\n\n    NSLog(@\"%@\",err);\n\n}\n\n其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式\n\nerror:&err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。\n\n\n\n11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串\n\n\n\nNSURL *url=[NSURLURLWithString:@\"file:///Users/mac/Desktop/test.txt\"];\n\nNSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str2);\n\n\n\n12，通过指定网络路径，获取网络上的内容来创建字符串。\n\n\n\nNSURL *url3=[NSURLURLWithString:@\"http://www.baidu.com\"];\n\nNSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str3);","slug":"oc/Foundation/oc-foundation-string","published":1,"updated":"2020-09-01T12:57:41.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6024003ll4s695ks4x7b","content":"<p>我们先看一下，c语言中的字符串是如何定义的，例如：</p>\n<p>char *s=”this is a string”; //C语言中的字符串·</p>\n<p>在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种</p>\n<p>1，创建常量字符串，例如：</p>\n<p>//这种方式创建出来的字符串是不需要释放的</p>\n<p>NSString *str1=@”this is a string”;</p>\n<p>2，创建空字符串，然后给予赋值</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str2=[[NSStringalloc] init];</p>\n<p>str2=@”this is a string”;</p>\n<p>[str2 release];</p>\n<p>3，通过字符串，创建字符串（需要手动释放）</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str3=[[NSStringalloc] initWithString:@”this is a string”];</p>\n<p>[str3 release];</p>\n<p>4，通过字符串，创建字符串（不需要手动释放）</p>\n<p>//使用对应的静态方法创建字符串，这样就不需要管理内存</p>\n<p>NSString *str4=[NSStringstringWithString:@”this is a string”];</p>\n<p>5，将c语言中的字符串转换成oc中的字符串（需要手动释放）</p>\n<p>//通过c语言的字符串转换成oc的字符串</p>\n<p>NSString *str5=[[NSStringalloc] initWithUTF8String:”this is a string”];</p>\n<p>[str5 release];</p>\n<p>6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)</p>\n<p>//使用静态方法创建字符串，不需释放内存</p>\n<p>NSString *str6=[NSStringstringWithUTF8String:”this is a string”];</p>\n<p>7，通过Format创建字符串（需要手动释放）</p>\n<p>//因为alloc,所以，需要手动释放内存</p>\n<p>NSString *str7=[[NSStringalloc] initWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>[str7 release];</p>\n<p>8，通过Format创建字符串（不需要手动释放）</p>\n<p>//因为使用静态方法创建字符串，所以不需要手动释放</p>\n<p>NSString *str8=[NSStringstringWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>9，我们还可以从磁盘上的文件中读取内容来创建字符串<br>//文件路径</p>\n<p>NSString *path=@”/Users/mac/Desktop/test.txt”;</p>\n<p>//这个方法已经过期，只能解析英文内容，不能解析中文内容</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path];</p>\n<p>10，通过指定字符串编码来创建字符串</p>\n<p>NSError *err=nil;</p>\n<p>//指定字符串编码为UTF-8   NSUTF8StringEncoding</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&amp;err];</p>\n<p>if(err == nil){</p>\n<pre><code>NSLog(@&quot;读取文件成功,%@&quot;,str);</code></pre><p>} else {</p>\n<pre><code>NSLog(@&quot;%@&quot;,err);</code></pre><p>}</p>\n<p>其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式</p>\n<p>error:&amp;err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。</p>\n<p>11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串</p>\n<p>NSURL *url=[NSURLURLWithString:@”file:///Users/mac/Desktop/test.txt”];</p>\n<p>NSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str2);</p>\n<p>12，通过指定网络路径，获取网络上的内容来创建字符串。</p>\n<p>NSURL *url3=[NSURLURLWithString:@”<a href=\"http://www.baidu.com&quot;]\">http://www.baidu.com&quot;]</a>;</p>\n<p>NSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str3);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们先看一下，c语言中的字符串是如何定义的，例如：</p>\n<p>char *s=”this is a string”; //C语言中的字符串·</p>\n<p>在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种</p>\n<p>1，创建常量字符串，例如：</p>\n<p>//这种方式创建出来的字符串是不需要释放的</p>\n<p>NSString *str1=@”this is a string”;</p>\n<p>2，创建空字符串，然后给予赋值</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str2=[[NSStringalloc] init];</p>\n<p>str2=@”this is a string”;</p>\n<p>[str2 release];</p>\n<p>3，通过字符串，创建字符串（需要手动释放）</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str3=[[NSStringalloc] initWithString:@”this is a string”];</p>\n<p>[str3 release];</p>\n<p>4，通过字符串，创建字符串（不需要手动释放）</p>\n<p>//使用对应的静态方法创建字符串，这样就不需要管理内存</p>\n<p>NSString *str4=[NSStringstringWithString:@”this is a string”];</p>\n<p>5，将c语言中的字符串转换成oc中的字符串（需要手动释放）</p>\n<p>//通过c语言的字符串转换成oc的字符串</p>\n<p>NSString *str5=[[NSStringalloc] initWithUTF8String:”this is a string”];</p>\n<p>[str5 release];</p>\n<p>6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)</p>\n<p>//使用静态方法创建字符串，不需释放内存</p>\n<p>NSString *str6=[NSStringstringWithUTF8String:”this is a string”];</p>\n<p>7，通过Format创建字符串（需要手动释放）</p>\n<p>//因为alloc,所以，需要手动释放内存</p>\n<p>NSString *str7=[[NSStringalloc] initWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>[str7 release];</p>\n<p>8，通过Format创建字符串（不需要手动释放）</p>\n<p>//因为使用静态方法创建字符串，所以不需要手动释放</p>\n<p>NSString *str8=[NSStringstringWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>9，我们还可以从磁盘上的文件中读取内容来创建字符串<br>//文件路径</p>\n<p>NSString *path=@”/Users/mac/Desktop/test.txt”;</p>\n<p>//这个方法已经过期，只能解析英文内容，不能解析中文内容</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path];</p>\n<p>10，通过指定字符串编码来创建字符串</p>\n<p>NSError *err=nil;</p>\n<p>//指定字符串编码为UTF-8   NSUTF8StringEncoding</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&amp;err];</p>\n<p>if(err == nil){</p>\n<pre><code>NSLog(@&quot;读取文件成功,%@&quot;,str);</code></pre><p>} else {</p>\n<pre><code>NSLog(@&quot;%@&quot;,err);</code></pre><p>}</p>\n<p>其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式</p>\n<p>error:&amp;err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。</p>\n<p>11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串</p>\n<p>NSURL *url=[NSURLURLWithString:@”file:///Users/mac/Desktop/test.txt”];</p>\n<p>NSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str2);</p>\n<p>12，通过指定网络路径，获取网络上的内容来创建字符串。</p>\n<p>NSURL *url3=[NSURLURLWithString:@”<a href=\"http://www.baidu.com&quot;]\">http://www.baidu.com&quot;]</a>;</p>\n<p>NSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str3);</p>\n"},{"title":"Foundation中结构体的简单介绍","date":"2020-04-03T06:30:33.000Z","_content":"\n一：先看一下，在c语言中定义的结构体：\n\n\n\n    //定义了Date这种结构体类型\n\n    struct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n    //定义结构体变量\n\n    struct Date d={2014,7,4};\n\n    \n\n   NSLog(@\"year is %i,month is %i,day is %i\",d.year,d.month,d.day);\n\n   d.day=6;\n\n   NSLog(@\"day is %i\",d.day);\n\n\n\n如上事例中的\n\n\n\nstruct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n定义了一个结构体类型。\n\n定义变量时：\n\nstruct Date d={2014,7,4};\n\n使用：d.year,d.month,d.day\n\n\n\n我们也可以使用typedef来定义一个结构体类型：如：\n\n\n\n    typedef struct {\n\n        int year;\n\n        int month;\n\n        int day;\n\n\n\n    } MyDate;\n\n    MyDate d={2014,7,4};\n\n    NSLog(@\"year is %i,month is %i, day is %i\",d.year,d.month,d.day);\n\n二：Foundation中的结构体\nFoundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect\n\n1,NSRange的介绍：\n我们先看一下，在NSRange.h中，NSRange的定义：\ntypedef struct _NSRange {\n\n    NSUInteger location;\n\n    NSUInteger length;\n\n} NSRange;\n\n\n这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。\n比如，在 \"I Love You\" 中，Love可以用location为2，length为4的范围来表示。\nNSRange创建方式有3种：\na,  第一种，直接给成员变量赋值\n    \n    NSRange range;\n\n    range.location=10;\n\n    range.length=4;\n\nb, 第二种，应用c语言的聚合结构赋值机制\n\n   \n\n    NSRangerange={8,3};\n\nc, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange\n\n    NSRange range=NSMakeRange(12,3);\n\n使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：\n\n通过变量名称引用：\n\n\n\nNSLog(@\"location is %zi\",range.location);//其中z代表无符号\n\n将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange\n\n\n\nNSString *str=NSStringFromRange(range);\n\n2,NSPoint的介绍：\n\n\n\n先看一下NSPoint的定义：\n   struct CGPoint {\n\n     CGFloat x;\n\n     CGFloat y;\n\n   };\n\n   typedef structCGPoint CGPoint;\n\n其中CGPoint和NSPoint是相等的\n\n这个结构体代表的时平面中的一个点（x,y）\n\n创建方式有3种：\na,直接赋值\n    NSPoint p;\n\n    p.x=8;\n\n    p.y=10;\n\nb,调用NSMakePoint函数创建\n\nNSPoint p=NSMakePoint(3, 5);\n\n\nc,调用CGPointMake函数创建\n\nNSPoint p=CGPointMake(6,8);\n使用：\nNSString *str=NSStringFromPoint(p);\n\n3,NSSize的介绍：\n\n先看一下NSSize的定义：\n   struct CGSize {\n\n      CGFloat width;\n\n      CGFloat height;\n\n   };\n\n   typedef structCGSize CGSize;\n\n其中CGSize和NSSize是相等的\n这个可以用来代表布局，或者是一个按钮的宽度和高度。\n\n创建方式有3种：\na,直接赋值\n\n    NSSize size;\n\n    size.width=100;\n\n    size.height=80;\n\n\nb,调用NSMakeSize函数来创建\nNSSizesize=NSMakeSize(50,60);\n\nc,调用CGSizeMake函数来创建\n\nNSSizesize=CGSizeMake(40,50);\n\n使用: \nNSString *str=NSStringFromSize(size);\n\n4,NSRect的介绍：\n先看一下NSRect的定义：\nstruct CGRect {\n\n  CGPoint origin;\n\n  CGSize size;\n\n};\n\ntypedef structCGRect CGRect;\n\n其中CGRect和NSRect是一样的\n这个结构体用来存储宽度和高度以及横坐标和纵坐标\n\na,直接赋值\n    NSRect rect;\n\n    rect.size.height=8;\n\n    rect.size.width=10;\n\n    rect.origin.x=40;\n\n    rect.origin.y=50;\n\nb,调用NSMakeRect函数创建\n    NSRect rect=NSMakeRect(100,80,10,8);\n\nc,调用CGRectMake函数创建\n\n    NSRect rect=CGRectMake(100,80,10,8);\n\n使用：\n    NSString *str=NSStringFromRect(rect);","source":"_posts/oc/Foundation/oc-foundation-struct.md","raw":"---\ntitle: Foundation中结构体的简单介绍\ndate: 2020-04-03 14:30:33\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n一：先看一下，在c语言中定义的结构体：\n\n\n\n    //定义了Date这种结构体类型\n\n    struct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n    //定义结构体变量\n\n    struct Date d={2014,7,4};\n\n    \n\n   NSLog(@\"year is %i,month is %i,day is %i\",d.year,d.month,d.day);\n\n   d.day=6;\n\n   NSLog(@\"day is %i\",d.day);\n\n\n\n如上事例中的\n\n\n\nstruct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n定义了一个结构体类型。\n\n定义变量时：\n\nstruct Date d={2014,7,4};\n\n使用：d.year,d.month,d.day\n\n\n\n我们也可以使用typedef来定义一个结构体类型：如：\n\n\n\n    typedef struct {\n\n        int year;\n\n        int month;\n\n        int day;\n\n\n\n    } MyDate;\n\n    MyDate d={2014,7,4};\n\n    NSLog(@\"year is %i,month is %i, day is %i\",d.year,d.month,d.day);\n\n二：Foundation中的结构体\nFoundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect\n\n1,NSRange的介绍：\n我们先看一下，在NSRange.h中，NSRange的定义：\ntypedef struct _NSRange {\n\n    NSUInteger location;\n\n    NSUInteger length;\n\n} NSRange;\n\n\n这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。\n比如，在 \"I Love You\" 中，Love可以用location为2，length为4的范围来表示。\nNSRange创建方式有3种：\na,  第一种，直接给成员变量赋值\n    \n    NSRange range;\n\n    range.location=10;\n\n    range.length=4;\n\nb, 第二种，应用c语言的聚合结构赋值机制\n\n   \n\n    NSRangerange={8,3};\n\nc, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange\n\n    NSRange range=NSMakeRange(12,3);\n\n使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：\n\n通过变量名称引用：\n\n\n\nNSLog(@\"location is %zi\",range.location);//其中z代表无符号\n\n将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange\n\n\n\nNSString *str=NSStringFromRange(range);\n\n2,NSPoint的介绍：\n\n\n\n先看一下NSPoint的定义：\n   struct CGPoint {\n\n     CGFloat x;\n\n     CGFloat y;\n\n   };\n\n   typedef structCGPoint CGPoint;\n\n其中CGPoint和NSPoint是相等的\n\n这个结构体代表的时平面中的一个点（x,y）\n\n创建方式有3种：\na,直接赋值\n    NSPoint p;\n\n    p.x=8;\n\n    p.y=10;\n\nb,调用NSMakePoint函数创建\n\nNSPoint p=NSMakePoint(3, 5);\n\n\nc,调用CGPointMake函数创建\n\nNSPoint p=CGPointMake(6,8);\n使用：\nNSString *str=NSStringFromPoint(p);\n\n3,NSSize的介绍：\n\n先看一下NSSize的定义：\n   struct CGSize {\n\n      CGFloat width;\n\n      CGFloat height;\n\n   };\n\n   typedef structCGSize CGSize;\n\n其中CGSize和NSSize是相等的\n这个可以用来代表布局，或者是一个按钮的宽度和高度。\n\n创建方式有3种：\na,直接赋值\n\n    NSSize size;\n\n    size.width=100;\n\n    size.height=80;\n\n\nb,调用NSMakeSize函数来创建\nNSSizesize=NSMakeSize(50,60);\n\nc,调用CGSizeMake函数来创建\n\nNSSizesize=CGSizeMake(40,50);\n\n使用: \nNSString *str=NSStringFromSize(size);\n\n4,NSRect的介绍：\n先看一下NSRect的定义：\nstruct CGRect {\n\n  CGPoint origin;\n\n  CGSize size;\n\n};\n\ntypedef structCGRect CGRect;\n\n其中CGRect和NSRect是一样的\n这个结构体用来存储宽度和高度以及横坐标和纵坐标\n\na,直接赋值\n    NSRect rect;\n\n    rect.size.height=8;\n\n    rect.size.width=10;\n\n    rect.origin.x=40;\n\n    rect.origin.y=50;\n\nb,调用NSMakeRect函数创建\n    NSRect rect=NSMakeRect(100,80,10,8);\n\nc,调用CGRectMake函数创建\n\n    NSRect rect=CGRectMake(100,80,10,8);\n\n使用：\n    NSString *str=NSStringFromRect(rect);","slug":"oc/Foundation/oc-foundation-struct","published":1,"updated":"2020-09-01T12:57:44.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg6028003ml4s62r2g17o1","content":"<p>一：先看一下，在c语言中定义的结构体：</p>\n<pre><code>//定义了Date这种结构体类型\n\nstruct Date{\n\n    int year;\n\n    int month;\n\n    int day;\n\n};\n\n//定义结构体变量\n\nstruct Date d={2014,7,4};</code></pre><p>   NSLog(@”year is %i,month is %i,day is %i”,d.year,d.month,d.day);</p>\n<p>   d.day=6;</p>\n<p>   NSLog(@”day is %i”,d.day);</p>\n<p>如上事例中的</p>\n<p>struct Date{</p>\n<pre><code>    int year;\n\n    int month;\n\n    int day;\n\n};</code></pre><p>定义了一个结构体类型。</p>\n<p>定义变量时：</p>\n<p>struct Date d={2014,7,4};</p>\n<p>使用：d.year,d.month,d.day</p>\n<p>我们也可以使用typedef来定义一个结构体类型：如：</p>\n<pre><code>typedef struct {\n\n    int year;\n\n    int month;\n\n    int day;\n\n\n\n} MyDate;\n\nMyDate d={2014,7,4};\n\nNSLog(@&quot;year is %i,month is %i, day is %i&quot;,d.year,d.month,d.day);</code></pre><p>二：Foundation中的结构体<br>Foundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect</p>\n<p>1,NSRange的介绍：<br>我们先看一下，在NSRange.h中，NSRange的定义：<br>typedef struct _NSRange {</p>\n<pre><code>NSUInteger location;\n\nNSUInteger length;</code></pre><p>} NSRange;</p>\n<p>这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。<br>比如，在 “I Love You” 中，Love可以用location为2，length为4的范围来表示。<br>NSRange创建方式有3种：<br>a,  第一种，直接给成员变量赋值</p>\n<pre><code>NSRange range;\n\nrange.location=10;\n\nrange.length=4;</code></pre><p>b, 第二种，应用c语言的聚合结构赋值机制</p>\n<pre><code>NSRangerange={8,3};</code></pre><p>c, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange</p>\n<pre><code>NSRange range=NSMakeRange(12,3);</code></pre><p>使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：</p>\n<p>通过变量名称引用：</p>\n<p>NSLog(@”location is %zi”,range.location);//其中z代表无符号</p>\n<p>将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange</p>\n<p>NSString *str=NSStringFromRange(range);</p>\n<p>2,NSPoint的介绍：</p>\n<p>先看一下NSPoint的定义：<br>   struct CGPoint {</p>\n<pre><code>CGFloat x;\n\nCGFloat y;</code></pre><p>   };</p>\n<p>   typedef structCGPoint CGPoint;</p>\n<p>其中CGPoint和NSPoint是相等的</p>\n<p>这个结构体代表的时平面中的一个点（x,y）</p>\n<p>创建方式有3种：<br>a,直接赋值<br>    NSPoint p;</p>\n<pre><code>p.x=8;\n\np.y=10;</code></pre><p>b,调用NSMakePoint函数创建</p>\n<p>NSPoint p=NSMakePoint(3, 5);</p>\n<p>c,调用CGPointMake函数创建</p>\n<p>NSPoint p=CGPointMake(6,8);<br>使用：<br>NSString *str=NSStringFromPoint(p);</p>\n<p>3,NSSize的介绍：</p>\n<p>先看一下NSSize的定义：<br>   struct CGSize {</p>\n<pre><code>CGFloat width;\n\nCGFloat height;</code></pre><p>   };</p>\n<p>   typedef structCGSize CGSize;</p>\n<p>其中CGSize和NSSize是相等的<br>这个可以用来代表布局，或者是一个按钮的宽度和高度。</p>\n<p>创建方式有3种：<br>a,直接赋值</p>\n<pre><code>NSSize size;\n\nsize.width=100;\n\nsize.height=80;</code></pre><p>b,调用NSMakeSize函数来创建<br>NSSizesize=NSMakeSize(50,60);</p>\n<p>c,调用CGSizeMake函数来创建</p>\n<p>NSSizesize=CGSizeMake(40,50);</p>\n<p>使用:<br>NSString *str=NSStringFromSize(size);</p>\n<p>4,NSRect的介绍：<br>先看一下NSRect的定义：<br>struct CGRect {</p>\n<p>  CGPoint origin;</p>\n<p>  CGSize size;</p>\n<p>};</p>\n<p>typedef structCGRect CGRect;</p>\n<p>其中CGRect和NSRect是一样的<br>这个结构体用来存储宽度和高度以及横坐标和纵坐标</p>\n<p>a,直接赋值<br>    NSRect rect;</p>\n<pre><code>rect.size.height=8;\n\nrect.size.width=10;\n\nrect.origin.x=40;\n\nrect.origin.y=50;</code></pre><p>b,调用NSMakeRect函数创建<br>    NSRect rect=NSMakeRect(100,80,10,8);</p>\n<p>c,调用CGRectMake函数创建</p>\n<pre><code>NSRect rect=CGRectMake(100,80,10,8);</code></pre><p>使用：<br>    NSString *str=NSStringFromRect(rect);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：先看一下，在c语言中定义的结构体：</p>\n<pre><code>//定义了Date这种结构体类型\n\nstruct Date{\n\n    int year;\n\n    int month;\n\n    int day;\n\n};\n\n//定义结构体变量\n\nstruct Date d={2014,7,4};</code></pre><p>   NSLog(@”year is %i,month is %i,day is %i”,d.year,d.month,d.day);</p>\n<p>   d.day=6;</p>\n<p>   NSLog(@”day is %i”,d.day);</p>\n<p>如上事例中的</p>\n<p>struct Date{</p>\n<pre><code>    int year;\n\n    int month;\n\n    int day;\n\n};</code></pre><p>定义了一个结构体类型。</p>\n<p>定义变量时：</p>\n<p>struct Date d={2014,7,4};</p>\n<p>使用：d.year,d.month,d.day</p>\n<p>我们也可以使用typedef来定义一个结构体类型：如：</p>\n<pre><code>typedef struct {\n\n    int year;\n\n    int month;\n\n    int day;\n\n\n\n} MyDate;\n\nMyDate d={2014,7,4};\n\nNSLog(@&quot;year is %i,month is %i, day is %i&quot;,d.year,d.month,d.day);</code></pre><p>二：Foundation中的结构体<br>Foundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect</p>\n<p>1,NSRange的介绍：<br>我们先看一下，在NSRange.h中，NSRange的定义：<br>typedef struct _NSRange {</p>\n<pre><code>NSUInteger location;\n\nNSUInteger length;</code></pre><p>} NSRange;</p>\n<p>这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。<br>比如，在 “I Love You” 中，Love可以用location为2，length为4的范围来表示。<br>NSRange创建方式有3种：<br>a,  第一种，直接给成员变量赋值</p>\n<pre><code>NSRange range;\n\nrange.location=10;\n\nrange.length=4;</code></pre><p>b, 第二种，应用c语言的聚合结构赋值机制</p>\n<pre><code>NSRangerange={8,3};</code></pre><p>c, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange</p>\n<pre><code>NSRange range=NSMakeRange(12,3);</code></pre><p>使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：</p>\n<p>通过变量名称引用：</p>\n<p>NSLog(@”location is %zi”,range.location);//其中z代表无符号</p>\n<p>将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange</p>\n<p>NSString *str=NSStringFromRange(range);</p>\n<p>2,NSPoint的介绍：</p>\n<p>先看一下NSPoint的定义：<br>   struct CGPoint {</p>\n<pre><code>CGFloat x;\n\nCGFloat y;</code></pre><p>   };</p>\n<p>   typedef structCGPoint CGPoint;</p>\n<p>其中CGPoint和NSPoint是相等的</p>\n<p>这个结构体代表的时平面中的一个点（x,y）</p>\n<p>创建方式有3种：<br>a,直接赋值<br>    NSPoint p;</p>\n<pre><code>p.x=8;\n\np.y=10;</code></pre><p>b,调用NSMakePoint函数创建</p>\n<p>NSPoint p=NSMakePoint(3, 5);</p>\n<p>c,调用CGPointMake函数创建</p>\n<p>NSPoint p=CGPointMake(6,8);<br>使用：<br>NSString *str=NSStringFromPoint(p);</p>\n<p>3,NSSize的介绍：</p>\n<p>先看一下NSSize的定义：<br>   struct CGSize {</p>\n<pre><code>CGFloat width;\n\nCGFloat height;</code></pre><p>   };</p>\n<p>   typedef structCGSize CGSize;</p>\n<p>其中CGSize和NSSize是相等的<br>这个可以用来代表布局，或者是一个按钮的宽度和高度。</p>\n<p>创建方式有3种：<br>a,直接赋值</p>\n<pre><code>NSSize size;\n\nsize.width=100;\n\nsize.height=80;</code></pre><p>b,调用NSMakeSize函数来创建<br>NSSizesize=NSMakeSize(50,60);</p>\n<p>c,调用CGSizeMake函数来创建</p>\n<p>NSSizesize=CGSizeMake(40,50);</p>\n<p>使用:<br>NSString *str=NSStringFromSize(size);</p>\n<p>4,NSRect的介绍：<br>先看一下NSRect的定义：<br>struct CGRect {</p>\n<p>  CGPoint origin;</p>\n<p>  CGSize size;</p>\n<p>};</p>\n<p>typedef structCGRect CGRect;</p>\n<p>其中CGRect和NSRect是一样的<br>这个结构体用来存储宽度和高度以及横坐标和纵坐标</p>\n<p>a,直接赋值<br>    NSRect rect;</p>\n<pre><code>rect.size.height=8;\n\nrect.size.width=10;\n\nrect.origin.x=40;\n\nrect.origin.y=50;</code></pre><p>b,调用NSMakeRect函数创建<br>    NSRect rect=NSMakeRect(100,80,10,8);</p>\n<p>c,调用CGRectMake函数创建</p>\n<pre><code>NSRect rect=CGRectMake(100,80,10,8);</code></pre><p>使用：<br>    NSString *str=NSStringFromRect(rect);</p>\n"},{"title":"OC中类的创建简单介绍","date":"2020-04-03T06:13:32.000Z","_content":"\n\n一：创建一个类。\n\n在文件上右键单击create file\n\n![](oc_class_init/class_init_1.jpeg)\n\n点击过后：\n\n![](oc_class_init/class_init_2.jpeg)\n\n左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。\n\n![](oc_class_init/class_init_3.jpeg)\n\nClass代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类\n\n点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。\n\n创建之后，会生成两个文件：如图所示：\n\n![](oc_class_init/class_init_4.jpeg)\n\n一个是类名.h文件，另外一个是类名.m文件\n\nh文件是头文件，用于变量和方法的声明\n\nm文件是实现文件，用于方法的实现。\n\n创建好的头文件为：\n\n![](oc_class_init/class_init_5.jpeg)\n\n@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。\n\nNSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：\n\n![](oc_class_init/class_init_6.jpeg)\n\n在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。\n\n如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。\n\n如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;\n\n方法的实现：如图所示：\n\n![](oc_class_init/class_init_7.jpeg)","source":"_posts/oc/Foundation/oc_class_init.md","raw":"---\ntitle: OC中类的创建简单介绍\ndate: 2020-04-03 14:13:32\ncategories: \n- OC\n- Foundation\ntags: OC\n---\n\n\n一：创建一个类。\n\n在文件上右键单击create file\n\n![](oc_class_init/class_init_1.jpeg)\n\n点击过后：\n\n![](oc_class_init/class_init_2.jpeg)\n\n左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。\n\n![](oc_class_init/class_init_3.jpeg)\n\nClass代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类\n\n点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。\n\n创建之后，会生成两个文件：如图所示：\n\n![](oc_class_init/class_init_4.jpeg)\n\n一个是类名.h文件，另外一个是类名.m文件\n\nh文件是头文件，用于变量和方法的声明\n\nm文件是实现文件，用于方法的实现。\n\n创建好的头文件为：\n\n![](oc_class_init/class_init_5.jpeg)\n\n@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。\n\nNSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：\n\n![](oc_class_init/class_init_6.jpeg)\n\n在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。\n\n如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。\n\n如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;\n\n方法的实现：如图所示：\n\n![](oc_class_init/class_init_7.jpeg)","slug":"oc/Foundation/oc_class_init","published":1,"updated":"2020-09-01T12:56:52.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602b003nl4s602r51z7l","content":"<p>一：创建一个类。</p>\n<p>在文件上右键单击create file</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg\" alt></p>\n<p>点击过后：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg\" alt></p>\n<p>左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg\" alt></p>\n<p>Class代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类</p>\n<p>点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。</p>\n<p>创建之后，会生成两个文件：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg\" alt></p>\n<p>一个是类名.h文件，另外一个是类名.m文件</p>\n<p>h文件是头文件，用于变量和方法的声明</p>\n<p>m文件是实现文件，用于方法的实现。</p>\n<p>创建好的头文件为：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg\" alt></p>\n<p>@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。</p>\n<p>NSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg\" alt></p>\n<p>在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。</p>\n<p>如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。</p>\n<p>如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;</p>\n<p>方法的实现：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：创建一个类。</p>\n<p>在文件上右键单击create file</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg\" alt></p>\n<p>点击过后：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg\" alt></p>\n<p>左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg\" alt></p>\n<p>Class代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类</p>\n<p>点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。</p>\n<p>创建之后，会生成两个文件：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg\" alt></p>\n<p>一个是类名.h文件，另外一个是类名.m文件</p>\n<p>h文件是头文件，用于变量和方法的声明</p>\n<p>m文件是实现文件，用于方法的实现。</p>\n<p>创建好的头文件为：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg\" alt></p>\n<p>@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。</p>\n<p>NSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg\" alt></p>\n<p>在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。</p>\n<p>如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。</p>\n<p>如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;</p>\n<p>方法的实现：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg\" alt></p>\n"},{"title":"OC中的Category简单介绍","date":"2020-04-03T03:01:01.000Z","_content":"\n\n简单介绍:\n\n1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category\n\n2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。\n\n3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。\n\n\n\n使用方法：\n\na , 创建Category的时候，选择 Objective-C category：\n\n![](oc_category_desc/category_1.jpeg)\n\n![](oc_category_desc/category_2.jpeg)\n\n\ncategory:代表要创建的分类\n\ncategory on : 代表给哪个类创建分类\n\n创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类\n\n![](oc_category_desc/category_3.jpeg)\n\n再看一下这两个文件中的内容：\n\n![](oc_category_desc/category_4.jpeg)\n![](oc_category_desc/category_5.jpeg)\n\n要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。\n\n在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：\n\n![](oc_category_desc/category_6.jpeg)\n\n使用场合：\n\n1，在需求变更的情况下，有可能为某些类添加新的方法。\n\n2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。\n\n3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法\n","source":"_posts/oc/Foundation/oc_category_desc.md","raw":"---\ntitle: OC中的Category简单介绍\ndate: 2020-04-03 11:01:01\ncategories: \n- OC\n- Foundation\ntags: OC\n---\n\n\n简单介绍:\n\n1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category\n\n2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。\n\n3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。\n\n\n\n使用方法：\n\na , 创建Category的时候，选择 Objective-C category：\n\n![](oc_category_desc/category_1.jpeg)\n\n![](oc_category_desc/category_2.jpeg)\n\n\ncategory:代表要创建的分类\n\ncategory on : 代表给哪个类创建分类\n\n创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类\n\n![](oc_category_desc/category_3.jpeg)\n\n再看一下这两个文件中的内容：\n\n![](oc_category_desc/category_4.jpeg)\n![](oc_category_desc/category_5.jpeg)\n\n要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。\n\n在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：\n\n![](oc_category_desc/category_6.jpeg)\n\n使用场合：\n\n1，在需求变更的情况下，有可能为某些类添加新的方法。\n\n2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。\n\n3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法\n","slug":"oc/Foundation/oc_category_desc","published":1,"updated":"2020-09-01T12:57:27.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602c003rl4s6fr1w5zjx","content":"<p>简单介绍:</p>\n<p>1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category</p>\n<p>2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。</p>\n<p>3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。</p>\n<p>使用方法：</p>\n<p>a , 创建Category的时候，选择 Objective-C category：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg\" alt></p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg\" alt></p>\n<p>category:代表要创建的分类</p>\n<p>category on : 代表给哪个类创建分类</p>\n<p>创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg\" alt></p>\n<p>再看一下这两个文件中的内容：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg\" alt><br><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg\" alt></p>\n<p>要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。</p>\n<p>在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg\" alt></p>\n<p>使用场合：</p>\n<p>1，在需求变更的情况下，有可能为某些类添加新的方法。</p>\n<p>2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。</p>\n<p>3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单介绍:</p>\n<p>1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category</p>\n<p>2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。</p>\n<p>3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。</p>\n<p>使用方法：</p>\n<p>a , 创建Category的时候，选择 Objective-C category：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg\" alt></p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg\" alt></p>\n<p>category:代表要创建的分类</p>\n<p>category on : 代表给哪个类创建分类</p>\n<p>创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg\" alt></p>\n<p>再看一下这两个文件中的内容：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg\" alt><br><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg\" alt></p>\n<p>要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。</p>\n<p>在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg\" alt></p>\n<p>使用场合：</p>\n<p>1，在需求变更的情况下，有可能为某些类添加新的方法。</p>\n<p>2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。</p>\n<p>3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法</p>\n"},{"title":"IOS-自制进度圈","date":"2020-04-03T09:36:16.000Z","_content":"\n最终要实现的效果，如图：\n\n![](oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png)\n\n将实现这个效果的View写成了分类：\n\n.h文件：\n\n```\n#import <UIKit/UIKit.h>\n@interface CZProgressView : UIView\n\n@property(nonatomic,assign) CGFloat progress;\n\n@end\n```\n\n.m文件：\n\n```\n#import \"CZProgressView.h\"\n@interface CZProgressView ()\n@property(nonatomic,strong) UILabel *label;\n@end\n\n@implementation CZProgressView\n\n-(UILabel *)label{\n    if(_label == nil){\n       _label = [[UILabelalloc] initWithFrame:self.bounds];\n\t\t_label.textAlignment = NSTextAlignmentCenter;\n\t\t[self addSubview:_label];\n    }\n\n    return _label;\n}\n\n- (id)initWithFrame:(CGRect)frame{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n-(void)setProgress:(CGFloat)progress{\n    _progress = progress;\n\n    self.label.text = [NSStringstringWithFormat:@\"%0.2f%%\",progress* 100];\n\n    [self setNeedsDisplay];\n}\n\n- (void)drawRect:(CGRect)rect{\n\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    CGFloat w = rect.size.width * 0.5;\n    CGFloat h = rect.size.height * 0.5;\n    CGPoint centerPoint = CGPointMake(w,h);\n    CGFloat radius = w > h ? h : w;\n\n    radius-= 5;\n    CGFloat startAngle = - M_PI_2;\n    CGFloat endAngle = self.progress * 2 * M_PI + startAngle;\n\n    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];\n\n    path.lineWidth = 10.0;\n    path.lineCapStyle = kCGLineCapRound;\n\n    [[UIColor yellowColor] set];\n\n    [path stroke];\n}\n```\n\n\n","source":"_posts/oc/Ani/oc-Ani-customProgressCircle.md","raw":"---\ntitle: IOS-自制进度圈\ndate: 2020-04-03 17:36:16\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n最终要实现的效果，如图：\n\n![](oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png)\n\n将实现这个效果的View写成了分类：\n\n.h文件：\n\n```\n#import <UIKit/UIKit.h>\n@interface CZProgressView : UIView\n\n@property(nonatomic,assign) CGFloat progress;\n\n@end\n```\n\n.m文件：\n\n```\n#import \"CZProgressView.h\"\n@interface CZProgressView ()\n@property(nonatomic,strong) UILabel *label;\n@end\n\n@implementation CZProgressView\n\n-(UILabel *)label{\n    if(_label == nil){\n       _label = [[UILabelalloc] initWithFrame:self.bounds];\n\t\t_label.textAlignment = NSTextAlignmentCenter;\n\t\t[self addSubview:_label];\n    }\n\n    return _label;\n}\n\n- (id)initWithFrame:(CGRect)frame{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n-(void)setProgress:(CGFloat)progress{\n    _progress = progress;\n\n    self.label.text = [NSStringstringWithFormat:@\"%0.2f%%\",progress* 100];\n\n    [self setNeedsDisplay];\n}\n\n- (void)drawRect:(CGRect)rect{\n\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    CGFloat w = rect.size.width * 0.5;\n    CGFloat h = rect.size.height * 0.5;\n    CGPoint centerPoint = CGPointMake(w,h);\n    CGFloat radius = w > h ? h : w;\n\n    radius-= 5;\n    CGFloat startAngle = - M_PI_2;\n    CGFloat endAngle = self.progress * 2 * M_PI + startAngle;\n\n    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];\n\n    path.lineWidth = 10.0;\n    path.lineCapStyle = kCGLineCapRound;\n\n    [[UIColor yellowColor] set];\n\n    [path stroke];\n}\n```\n\n\n","slug":"oc/Ani/oc-Ani-customProgressCircle","published":1,"updated":"2020-09-01T12:49:14.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602d003tl4s60hsy2031","content":"<p>最终要实现的效果，如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png\" alt></p>\n<p>将实现这个效果的View写成了分类：</p>\n<p>.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@interface CZProgressView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat progress;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZProgressView.h&quot;</span><br><span class=\"line\">@interface CZProgressView ()</span><br><span class=\"line\">@property(nonatomic,strong) UILabel *label;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZProgressView</span><br><span class=\"line\"></span><br><span class=\"line\">-(UILabel *)label&#123;</span><br><span class=\"line\">    if(_label &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">       _label &#x3D; [[UILabelalloc] initWithFrame:self.bounds];</span><br><span class=\"line\">\t\t_label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">\t\t[self addSubview:_label];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithFrame:frame];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setProgress:(CGFloat)progress&#123;</span><br><span class=\"line\">    _progress &#x3D; progress;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.label.text &#x3D; [NSStringstringWithFormat:@&quot;%0.2f%%&quot;,progress* 100];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class=\"line\">    CGFloat w &#x3D; rect.size.width * 0.5;</span><br><span class=\"line\">    CGFloat h &#x3D; rect.size.height * 0.5;</span><br><span class=\"line\">    CGPoint centerPoint &#x3D; CGPointMake(w,h);</span><br><span class=\"line\">    CGFloat radius &#x3D; w &gt; h ? h : w;</span><br><span class=\"line\"></span><br><span class=\"line\">    radius-&#x3D; 5;</span><br><span class=\"line\">    CGFloat startAngle &#x3D; - M_PI_2;</span><br><span class=\"line\">    CGFloat endAngle &#x3D; self.progress * 2 * M_PI + startAngle;</span><br><span class=\"line\"></span><br><span class=\"line\">    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineWidth &#x3D; 10.0;</span><br><span class=\"line\">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[UIColor yellowColor] set];</span><br><span class=\"line\"></span><br><span class=\"line\">    [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>最终要实现的效果，如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png\" alt></p>\n<p>将实现这个效果的View写成了分类：</p>\n<p>.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@interface CZProgressView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat progress;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZProgressView.h&quot;</span><br><span class=\"line\">@interface CZProgressView ()</span><br><span class=\"line\">@property(nonatomic,strong) UILabel *label;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZProgressView</span><br><span class=\"line\"></span><br><span class=\"line\">-(UILabel *)label&#123;</span><br><span class=\"line\">    if(_label &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">       _label &#x3D; [[UILabelalloc] initWithFrame:self.bounds];</span><br><span class=\"line\">\t\t_label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">\t\t[self addSubview:_label];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithFrame:frame];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setProgress:(CGFloat)progress&#123;</span><br><span class=\"line\">    _progress &#x3D; progress;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.label.text &#x3D; [NSStringstringWithFormat:@&quot;%0.2f%%&quot;,progress* 100];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class=\"line\">    CGFloat w &#x3D; rect.size.width * 0.5;</span><br><span class=\"line\">    CGFloat h &#x3D; rect.size.height * 0.5;</span><br><span class=\"line\">    CGPoint centerPoint &#x3D; CGPointMake(w,h);</span><br><span class=\"line\">    CGFloat radius &#x3D; w &gt; h ? h : w;</span><br><span class=\"line\"></span><br><span class=\"line\">    radius-&#x3D; 5;</span><br><span class=\"line\">    CGFloat startAngle &#x3D; - M_PI_2;</span><br><span class=\"line\">    CGFloat endAngle &#x3D; self.progress * 2 * M_PI + startAngle;</span><br><span class=\"line\"></span><br><span class=\"line\">    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineWidth &#x3D; 10.0;</span><br><span class=\"line\">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[UIColor yellowColor] set];</span><br><span class=\"line\"></span><br><span class=\"line\">    [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"OC中的Block简单介绍","date":"2020-04-03T06:07:19.000Z","_content":"\n\nBlock的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：\n\n\n\n //定义了一个block,这个block返回值是int类型，接收两个int类型的参数\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int a=Sum(10,5);\n\n    \n\n    NSLog(@\"%i\",a);\n\n\n\n上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。\n\n我们可以先定义一个Block类型，然后再去实现，例如：\n\n\n\n    //定义了MySum这种Block类型\n\n    typedef int (^MySum)(int,int);\n\n    \n\n   //定义了一个block变量\n\n    MySum sum1=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int c=sum1(1,2);\n\n    NSLog(@\"%i\",c);\n\n例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。\n\n\n\nBlock在使用的时候，跟指针函数有点类似，例如：\n\n\n\nint sum(int a,int b){\n\n    return a+b;\n\n}\n\n\n\n\n\nvoid test(){\n\n    //block\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    int c=Sum(10,10);\n\n    NSLog(@\"%i\",c);\n\n\n\n\n\n    //指针函数\n\n    int (*sump)(int ,int)=sum;\n\n    \n\n    c=(*sump)(10,7);\n\n    NSLog(@\"%i\",c);\n\n}","source":"_posts/oc/Foundation/oc_block_desc.md","raw":"---\ntitle: OC中的Block简单介绍\ndate: 2020-04-03 14:07:19\ncategories:\n- OC\n- Foundation\ntags: OC\n---\n\n\nBlock的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：\n\n\n\n //定义了一个block,这个block返回值是int类型，接收两个int类型的参数\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int a=Sum(10,5);\n\n    \n\n    NSLog(@\"%i\",a);\n\n\n\n上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。\n\n我们可以先定义一个Block类型，然后再去实现，例如：\n\n\n\n    //定义了MySum这种Block类型\n\n    typedef int (^MySum)(int,int);\n\n    \n\n   //定义了一个block变量\n\n    MySum sum1=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int c=sum1(1,2);\n\n    NSLog(@\"%i\",c);\n\n例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。\n\n\n\nBlock在使用的时候，跟指针函数有点类似，例如：\n\n\n\nint sum(int a,int b){\n\n    return a+b;\n\n}\n\n\n\n\n\nvoid test(){\n\n    //block\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    int c=Sum(10,10);\n\n    NSLog(@\"%i\",c);\n\n\n\n\n\n    //指针函数\n\n    int (*sump)(int ,int)=sum;\n\n    \n\n    c=(*sump)(10,7);\n\n    NSLog(@\"%i\",c);\n\n}","slug":"oc/Foundation/oc_block_desc","published":1,"updated":"2020-09-01T13:07:22.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602e003xl4s662vsby26","content":"<p>Block的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：</p>\n<p> //定义了一个block,这个block返回值是int类型，接收两个int类型的参数</p>\n<pre><code>int (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint a=Sum(10,5);\n\n\n\nNSLog(@&quot;%i&quot;,a);</code></pre><p>上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。</p>\n<p>我们可以先定义一个Block类型，然后再去实现，例如：</p>\n<pre><code>//定义了MySum这种Block类型\n\ntypedef int (^MySum)(int,int);</code></pre><p>   //定义了一个block变量</p>\n<pre><code>MySum sum1=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint c=sum1(1,2);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。</p>\n<p>Block在使用的时候，跟指针函数有点类似，例如：</p>\n<p>int sum(int a,int b){</p>\n<pre><code>return a+b;</code></pre><p>}</p>\n<p>void test(){</p>\n<pre><code>//block\n\nint (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\nint c=Sum(10,10);\n\nNSLog(@&quot;%i&quot;,c);\n\n\n\n\n\n//指针函数\n\nint (*sump)(int ,int)=sum;\n\n\n\nc=(*sump)(10,7);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Block的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：</p>\n<p> //定义了一个block,这个block返回值是int类型，接收两个int类型的参数</p>\n<pre><code>int (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint a=Sum(10,5);\n\n\n\nNSLog(@&quot;%i&quot;,a);</code></pre><p>上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。</p>\n<p>我们可以先定义一个Block类型，然后再去实现，例如：</p>\n<pre><code>//定义了MySum这种Block类型\n\ntypedef int (^MySum)(int,int);</code></pre><p>   //定义了一个block变量</p>\n<pre><code>MySum sum1=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint c=sum1(1,2);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。</p>\n<p>Block在使用的时候，跟指针函数有点类似，例如：</p>\n<p>int sum(int a,int b){</p>\n<pre><code>return a+b;</code></pre><p>}</p>\n<p>void test(){</p>\n<pre><code>//block\n\nint (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\nint c=Sum(10,10);\n\nNSLog(@&quot;%i&quot;,c);\n\n\n\n\n\n//指针函数\n\nint (*sump)(int ,int)=sum;\n\n\n\nc=(*sump)(10,7);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>}</p>\n"},{"title":"UITableViewHeader头部拉伸变化","date":"2020-04-03T10:29:50.000Z","_content":"\n经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。\n\n一：效果图：\n\n正常图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg)\n\n向下拖动图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg)\n\n二：原理如下：\n\n- 1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。\n\n- 2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点\n\n- 3，设置imageview的内容模式为等比例拉伸(这是最重要的)\n\n- 4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。\n\n三：示意图：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg)\n\n\n四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）\n\n```\n#import \"CZViewController.h\"\n\n#import \"UIView+Extension.h\"\n\nCGFloat const CZInitH = 320;\n\nCGFloat const CZInitW = 320;\n\nCGFloat const CZInsetTop = 150;\n\n@interface CZViewController ()\n\n@property(nonatomic,strong) UIImageView *imageView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //先设置tableview的顶部内边距\n\n    self.tableView.contentInset = UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);\n\n    \n\n    UIImageView *imageView = [[UIImageView alloc] init];\n\n    imageView.image = [UIImage imageNamed:@\"biaoqingdi\"];\n\n    \n\n    //imageview的一部分在屏幕外，一部分在屏幕中\n\n    imageView.frame = CGRectMake(0, -CZInitH, CZInitW, CZInitH);\n\n    //设置imageView等比例伸缩\n\n    imageView.contentMode = UIViewContentModeScaleAspectFill;\n\n    [self.tableView insertSubview:imageView atIndex:0];\n\n    self.imageView = imageView;\n\n}\n\n/** tableview已经拖拽 */\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    //计算往下拖拽的距离\n\n    CGFloat dragDelta = -CZInsetTop - scrollView.contentOffset.y;\n\n    if(dragDelta < 0){ //如果dragDelta＜0，说明，tableview向上拖动\n\n        dragDelta = 0;\n\n    }\n\n    //设置imageview的高度\n\n    self.imageView.height = CZInitH + dragDelta;\n\n}\n\n#pragma mark - tableview的数据源方法\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return 20;\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    static NSString *ID = @\"cell\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];\n\n    if(cell == nil){\n\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"测试数据-%d\",indexPath.row];\n\n    return cell;\n\n}\n@end\n```","source":"_posts/oc/Ani/oc-Ani-TableViewHeader.md","raw":"---\ntitle: UITableViewHeader头部拉伸变化\ndate: 2020-04-03 18:29:50\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。\n\n一：效果图：\n\n正常图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg)\n\n向下拖动图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg)\n\n二：原理如下：\n\n- 1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。\n\n- 2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点\n\n- 3，设置imageview的内容模式为等比例拉伸(这是最重要的)\n\n- 4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。\n\n三：示意图：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg)\n\n\n四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）\n\n```\n#import \"CZViewController.h\"\n\n#import \"UIView+Extension.h\"\n\nCGFloat const CZInitH = 320;\n\nCGFloat const CZInitW = 320;\n\nCGFloat const CZInsetTop = 150;\n\n@interface CZViewController ()\n\n@property(nonatomic,strong) UIImageView *imageView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //先设置tableview的顶部内边距\n\n    self.tableView.contentInset = UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);\n\n    \n\n    UIImageView *imageView = [[UIImageView alloc] init];\n\n    imageView.image = [UIImage imageNamed:@\"biaoqingdi\"];\n\n    \n\n    //imageview的一部分在屏幕外，一部分在屏幕中\n\n    imageView.frame = CGRectMake(0, -CZInitH, CZInitW, CZInitH);\n\n    //设置imageView等比例伸缩\n\n    imageView.contentMode = UIViewContentModeScaleAspectFill;\n\n    [self.tableView insertSubview:imageView atIndex:0];\n\n    self.imageView = imageView;\n\n}\n\n/** tableview已经拖拽 */\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    //计算往下拖拽的距离\n\n    CGFloat dragDelta = -CZInsetTop - scrollView.contentOffset.y;\n\n    if(dragDelta < 0){ //如果dragDelta＜0，说明，tableview向上拖动\n\n        dragDelta = 0;\n\n    }\n\n    //设置imageview的高度\n\n    self.imageView.height = CZInitH + dragDelta;\n\n}\n\n#pragma mark - tableview的数据源方法\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return 20;\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    static NSString *ID = @\"cell\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];\n\n    if(cell == nil){\n\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"测试数据-%d\",indexPath.row];\n\n    return cell;\n\n}\n@end\n```","slug":"oc/Ani/oc-Ani-TableViewHeader","published":1,"updated":"2020-09-01T12:57:18.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602i003yl4s69qdy3zk9","content":"<p>经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。</p>\n<p>一：效果图：</p>\n<p>正常图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg\" alt></p>\n<p>向下拖动图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg\" alt></p>\n<p>二：原理如下：</p>\n<ul>\n<li><p>1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。</p>\n</li>\n<li><p>2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点</p>\n</li>\n<li><p>3，设置imageview的内容模式为等比例拉伸(这是最重要的)</p>\n</li>\n<li><p>4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。</p>\n</li>\n</ul>\n<p>三：示意图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg\" alt></p>\n<p>四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;UIView+Extension.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitH &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitW &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInsetTop &#x3D; 150;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIImageView *imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    &#x2F;&#x2F;先设置tableview的顶部内边距</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.contentInset &#x3D; UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *imageView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.image &#x3D; [UIImage imageNamed:@&quot;biaoqingdi&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;imageview的一部分在屏幕外，一部分在屏幕中</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.frame &#x3D; CGRectMake(0, -CZInitH, CZInitW, CZInitH);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageView等比例伸缩</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.contentMode &#x3D; UIViewContentModeScaleAspectFill;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView insertSubview:imageView atIndex:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView &#x3D; imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** tableview已经拖拽 *&#x2F;</span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;计算往下拖拽的距离</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat dragDelta &#x3D; -CZInsetTop - scrollView.contentOffset.y;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(dragDelta &lt; 0)&#123; &#x2F;&#x2F;如果dragDelta＜0，说明，tableview向上拖动</span><br><span class=\"line\"></span><br><span class=\"line\">        dragDelta &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageview的高度</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView.height &#x3D; CZInitH + dragDelta;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - tableview的数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 20;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *ID &#x3D; @&quot;cell&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; [NSString stringWithFormat:@&quot;测试数据-%d&quot;,indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。</p>\n<p>一：效果图：</p>\n<p>正常图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg\" alt></p>\n<p>向下拖动图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg\" alt></p>\n<p>二：原理如下：</p>\n<ul>\n<li><p>1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。</p>\n</li>\n<li><p>2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点</p>\n</li>\n<li><p>3，设置imageview的内容模式为等比例拉伸(这是最重要的)</p>\n</li>\n<li><p>4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。</p>\n</li>\n</ul>\n<p>三：示意图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg\" alt></p>\n<p>四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;UIView+Extension.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitH &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitW &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInsetTop &#x3D; 150;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIImageView *imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    &#x2F;&#x2F;先设置tableview的顶部内边距</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.contentInset &#x3D; UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *imageView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.image &#x3D; [UIImage imageNamed:@&quot;biaoqingdi&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;imageview的一部分在屏幕外，一部分在屏幕中</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.frame &#x3D; CGRectMake(0, -CZInitH, CZInitW, CZInitH);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageView等比例伸缩</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.contentMode &#x3D; UIViewContentModeScaleAspectFill;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView insertSubview:imageView atIndex:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView &#x3D; imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** tableview已经拖拽 *&#x2F;</span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;计算往下拖拽的距离</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat dragDelta &#x3D; -CZInsetTop - scrollView.contentOffset.y;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(dragDelta &lt; 0)&#123; &#x2F;&#x2F;如果dragDelta＜0，说明，tableview向上拖动</span><br><span class=\"line\"></span><br><span class=\"line\">        dragDelta &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageview的高度</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView.height &#x3D; CZInitH + dragDelta;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - tableview的数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 20;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *ID &#x3D; @&quot;cell&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; [NSString stringWithFormat:@&quot;测试数据-%d&quot;,indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"},{"title":"IOS一键登录","date":"2020-04-07T10:26:28.000Z","_content":"\n## 一、简介\n为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。\n\n流程图：\n\n![](oc-Login-AKeyLogin/ios_akey_flowChart.png)\n\n步骤分析：\n\n1. 预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。\n\n2. 授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。\n\n3. 登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。\n\n## 二、兼容\n三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。\n\n如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：\n\n> 阿里 - 号码认证服务\n\n> 创蓝 - 闪验\n\n> 极光 - 极光认证\n\n> mob - 秒验\n\n\n原理和使用方法基本都是一样的，具体以查看它们的文档。","source":"_posts/oc/Login/oc-Login-AKeyLogin.md","raw":"---\ntitle: IOS一键登录\ndate: 2020-04-07 18:26:28\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n## 一、简介\n为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。\n\n流程图：\n\n![](oc-Login-AKeyLogin/ios_akey_flowChart.png)\n\n步骤分析：\n\n1. 预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。\n\n2. 授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。\n\n3. 登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。\n\n## 二、兼容\n三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。\n\n如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：\n\n> 阿里 - 号码认证服务\n\n> 创蓝 - 闪验\n\n> 极光 - 极光认证\n\n> mob - 秒验\n\n\n原理和使用方法基本都是一样的，具体以查看它们的文档。","slug":"oc/Login/oc-Login-AKeyLogin","published":1,"updated":"2020-09-01T12:45:34.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602j0042l4s693ndftu4","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。</p>\n<p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png\" alt></p>\n<p>步骤分析：</p>\n<ol>\n<li><p>预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。</p>\n</li>\n<li><p>授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。</p>\n</li>\n<li><p>登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。</p>\n</li>\n</ol>\n<h2 id=\"二、兼容\"><a href=\"#二、兼容\" class=\"headerlink\" title=\"二、兼容\"></a>二、兼容</h2><p>三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。</p>\n<p>如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：</p>\n<blockquote>\n<p>阿里 - 号码认证服务</p>\n</blockquote>\n<blockquote>\n<p>创蓝 - 闪验</p>\n</blockquote>\n<blockquote>\n<p>极光 - 极光认证</p>\n</blockquote>\n<blockquote>\n<p>mob - 秒验</p>\n</blockquote>\n<p>原理和使用方法基本都是一样的，具体以查看它们的文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。</p>\n<p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png\" alt></p>\n<p>步骤分析：</p>\n<ol>\n<li><p>预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。</p>\n</li>\n<li><p>授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。</p>\n</li>\n<li><p>登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。</p>\n</li>\n</ol>\n<h2 id=\"二、兼容\"><a href=\"#二、兼容\" class=\"headerlink\" title=\"二、兼容\"></a>二、兼容</h2><p>三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。</p>\n<p>如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：</p>\n<blockquote>\n<p>阿里 - 号码认证服务</p>\n</blockquote>\n<blockquote>\n<p>创蓝 - 闪验</p>\n</blockquote>\n<blockquote>\n<p>极光 - 极光认证</p>\n</blockquote>\n<blockquote>\n<p>mob - 秒验</p>\n</blockquote>\n<p>原理和使用方法基本都是一样的，具体以查看它们的文档。</p>\n"},{"title":"IOS苹果登录(sign in with apple)","date":"2020-04-03T10:47:31.000Z","_content":"\n\n## 一、 sign in with apple 简介  \n 苹果官方介绍:\n \n ```\nThe fast, easy way to sign in to apps and websites.\n\nSign In With Apple 是一种在app 和网站上快速、容易登录的方式。\n\nSign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. \nInstead of filling out forms, verifying email addresses, and choosing new passwords, they can use \nSign In with Apple to set up an account and start using your app right away. All accounts are protected\nwith two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.\n\n对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。\n而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。\n为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。\n ```\n \n注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。\n\n集成步骤：\n\n![](oc-Login-AppleLogin/joinSteps.png)\n\n## 二、 相关设置\n\n### 1、开启 Sign in with Apple 功能\n\n1. 登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)\n\n\t![URI结构图](oc-Login-AppleLogin/backgroundSetup.png)\n\t\n2. Xcode 里面 Signing & Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）\n\n\t![URI结构图](oc-Login-AppleLogin/xcodeSetup.png)\n\n## 三、 App端实现  \n### 1、使用苹果提供的按钮\n\n官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。\n\n```\nASAuthorizationAppleIDButton *loginBtn = [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];\n[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];\nloginBtn.center = self.view.center;\nloginBtn.bounds = CGRectMake(0, 0, 200, 40);\n[self.view addSubview:loginBtn];\n\n```\n\n这个按钮具有两种文案类型和三个样式，分别是：\n\n```\ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) {\n    ASAuthorizationAppleIDButtonTypeSignIn,\n    ASAuthorizationAppleIDButtonTypeContinue,\n    ASAuthorizationAppleIDButtonTypeDefault = ASAuthorizationAppleIDButtonTypeSignIn,\n} \n \ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) {\n    ASAuthorizationAppleIDButtonStyleWhite,\n    ASAuthorizationAppleIDButtonStyleWhiteOutline,\n    ASAuthorizationAppleIDButtonStyleBlack,\n}\n```\n\n样式如下图：\n\n![URI结构图](oc-Login-AppleLogin/loginBtnStyle.png)\n\n从图上可以看出：\n\n**>** Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。\n\n**>** 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）\n\n另外，按钮宽高默认值为 {width:130, height:30}。\n\n对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。\n\n本地化：必要且重要的一点\n\n![URI结构图](oc-Login-AppleLogin/styleLocalize.png)\n\n\n### 2、Authorization 发起授权登录请求\n\n```\n#pragma mark- 点击登录\n-(void)signInWithApple API_AVAILABLE(ios(13.0))\n{\n    ASAuthorizationAppleIDProvider *provider = [[ASAuthorizationAppleIDProvider alloc]init];\n    ASAuthorizationAppleIDRequest * request = [provider createRequest];\n    request.requestedScopes = @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];\n    \n    ASAuthorizationController *vc= [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];\n    vc.delegate = self;\n    vc.presentationContextProvider = self;\n    \n    [vc performRequests];\n}\n\n```\n\n>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。\n\n>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。\n\n>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。\n\n\n设置上下文\n\nASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。\n\n```\n-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller\nAPI_AVAILABLE(ios(13.0)){\n   return  self.view.window;\n}\n\n```\n\n### 3、Verification 授权\n\n用户发起授权请求后，系统就会弹出用户登录验证的页面。\n\n![URI结构图](oc-Login-AppleLogin/userVerification.png)\n\n\n在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。\n\n授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：\n\n![URI结构图](oc-Login-AppleLogin/userLogin.png)\n\n授权回调处理\n\n下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。\n\n```\n#pragma mark- 授权成功的回调\n-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization\nAPI_AVAILABLE(ios(13.0)){\n    \n    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) {\n        \n        ASAuthorizationAppleIDCredential * credential = authorization.credential;\n        \n        NSString *state = credential.state;\n        \n        NSString * userID = credential.user;\n        \n        NSPersonNameComponents *fullName = credential.fullName;\n        NSString * email = credential.email;\n        //refresh token\n        NSString * authorizationCode = [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];\n        // access token\n        NSString * identityToken = [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];\n        \n        ASUserDetectionStatus realUserStatus = credential.realUserStatus;\n\t\t \n\t\t NSLog(@\"state: %@\", state);\n\t\t NSLog(@\"userID: %@\", userID);\n\t\t NSLog(@\"fullName: %@\", fullName);\n\t\t NSLog(@\"email: %@\", email);\n\t\t NSLog(@\"authorizationCode: %@\", authorizationCode);\n\t\t NSLog(@\"identityToken: %@\", identityToken);\n\t\t NSLog(@\"realUserStatus: %@\", @(realUserStatus));\n    }\n   \n}\n \n#pragma mark- 授权失败的回调\n- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error\nAPI_AVAILABLE(ios(13.0)){\n    \n    NSString * errorMsg = nil;\n    \n    switch (error.code) {\n        case ASAuthorizationErrorCanceled:\n            errorMsg = @\"用户取消了授权请求\";\n            break;\n        case ASAuthorizationErrorFailed:\n            errorMsg = @\"授权请求失败\";\n            break;\n        case ASAuthorizationErrorInvalidResponse:\n            errorMsg = @\"授权请求响应无效\";\n            break;\n        case ASAuthorizationErrorNotHandled:\n            errorMsg = @\"未能处理授权请求\";\n            break;\n        case ASAuthorizationErrorUnknown:\n            errorMsg = @\"授权请求失败未知原因\";\n            break;\n    \n    }\n  \n}\n\n```\n\n当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。\n\n这些信息具体含义和用途：\n\n-  User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。\n\n-  Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。\n\n-  Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。\n\n-  Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n-  失败情况会走 authorizationController:didCompleteWithError\n\n### 4、Handling Changes\n\n通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。\n\n-  用户终止 App 中使用 Sign in with Apple 功能\n\n-  用户在设置里注销了 AppleId\n\n这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。\n\n我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    if (@available(iOS 13.0, *)) {\n        NSString *userIdentifier = 钥匙串中取出的 userIdentifier;\n        if (userIdentifier) {\n            ASAuthorizationAppleIDProvider *appleIDProvider = [ASAuthorizationAppleIDProvider new];\n            [appleIDProvider getCredentialStateForUserID:userIdentifier\n                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,\n                                                           NSError * _Nullable error)\n            {\n                switch (credentialState) {\n                    case ASAuthorizationAppleIDProviderCredentialAuthorized:\n                        // The Apple ID credential is valid\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialRevoked:\n                        // Apple ID Credential revoked, handle unlink\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialNotFound:\n                        // Credential not found, show login UI\n                        break;\n                }\n            }];\n        }\n    }\n    \n    return YES;\n}\n\n```\n\nASAuthorizationAppleIDProviderCredentialState 解析如下：\n\n-  ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；\n-  ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；\n\n-  ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。\n\n另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：\n\n - 用户退出当前设备 和 重新登录授权\n\n```\n- (void)observeAppleSignInState\n{\n    if (@available(iOS 13.0, *)) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleSignInWithAppleStateChanged:)\n                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification\n                                                   object:nil];\n    }\n}\n \n- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification\n{\n    // Sign the user out, optionally guide them to sign in again\n    NSLog(@\"%@\", notification.userInfo);\n\n}\n```\n\n## 四、 后端校验\n### 1、整体流程图\n\n  ![URI结构图](oc-Login-AppleLogin/signVerityProcess.jpg)\n\n > #### 1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\n  -  **User ID**: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。\n  -  **Verification Data**: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。\n  -  **Account Information**: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。\nReal User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n > #### 2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\n \n### 2、JWT数据\n在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:\n\n![URI结构图](oc-Login-AppleLogin/identityTokenDataStruct.jpg)\n\n它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。\n\nJWT 的三个部分依次如下。\n\n```\n- Header（头部）\n- Payload（负载）\n- Signature（签名）\n```\n\n写成一行，就是下面的样子。\n\n```\nHeader.Payload.Signature\n```\n\n![URI结构图](oc-Login-AppleLogin/jwtDataStruct.jpg)\n\n**注意：**\n\nheader(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码\n \n第一部分解码:\n\n```\n{\n    \"kid\": \"AIDOPK1\",\n    \"alg\": \"RS256\"\n}\n```\n\n第二部分解码:\n\n```\n{\n    \"iss\": \"https://appleid.apple.com\",\n    \"aud\": \"**********\",\n    \"exp\": 1570617356,\n    \"iat\": 1570616756,\n    \"sub\": \"00*****1790047f40335c6c1a.0641\",\n    \"c_hash\": \"eqOdpr_**TyHiRymHbPQ\",\n    \"auth_time\": 1570616756\n}\n\n```\n\n**备注:**  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。\n\nJWT的这个三部分的字段分别代表：\n\n> - **header:** 包括了key id 与加密算法\n> - **payload:**\n\t* iss: 签发机构，苹果\n\t* aud: 接收者，目标app\n\t* exp: 过期时间\n\t* iat: 签发时间\n\t* sub: 用户id\n\t* c_hash: 一个哈希数列，作用未知\n\t* auth_time: 签名时间\n> - **signature:** 用于验证JWT的签名\n\n### 3、校验identityToken\n上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？\n\n![URI结构图](oc-Login-AppleLogin/identityTokenVerityProcess.jpg)\n\n> ##### 1、从苹果服务器获取publickey\n\n```\npublic PublicKey getPublicKey() throws Exception {\n\tString urlData = getUrlData(\"https://appleid.apple.com/auth/keys\");\n\tMap maps = (Map)JSON.parse(urlData);\n\tList keys = (List<Map>)maps.get(\"keys\");\n\tMap o = (Map) keys.get(0);\n\tJwk jwa = Jwk.fromValues(o);\n\ttry {\n\t    PublicKey publicKey = jwa.getPublicKey();\n\t    return publicKey;\n\t} catch (InvalidPublicKeyException e) {\n\t    e.printStackTrace();\n\t}\n\treturn null;\n}\n\n```\n\n需要引入 jar 包：\n\n```\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.9.0</version>\n</dependency>\n```  \n\n> ##### 2、解析identityToken\n\n```\nString jwt = \"app端请求的identityToken\";\nString decode = Base64.decoded(jwt.split(\"\\\\.\")[1]);\nString substring = decode.substring(0, decode.indexOf(\"}\")+1);\nJSONObject jsonObject = JSON.parseObject(substring);\nString iss = jsonObject.getString(\"iss\");\nString sub = jsonObject.getString(\"sub\");\nString aud = jsonObject.getString(\"aud\");\n\n``` \n\n> ##### 3、验证\n\n``` \npublic String verify(String jwt, String iss,String aud, String sub) throws Exception {\n    PublicKey publicKey = getPublicKey();\n    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n    jwtParser.requireIssuer(iss);\n    jwtParser.requireAudience(aud);\n    jwtParser.requireSubject(sub);\n    try {\n        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);\n        if (claim != null && claim.getBody().containsKey(\"auth_time\")) {\n            return \"SUCCESS\";\n        }\n        return \"FIALD\";\n    } catch (ExpiredJwtException e) {\n        log.error(\"apple identityToken expired\", e);\n        return \"FIALD\";\n    } catch (Exception e) {\n        log.error(\"apple identityToken illegal\", e);\n        return \"FIALD\";\n    } \n}\n``` \n \n\n使用到的jar包：\n\n``` \n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n \n","source":"_posts/oc/Login/oc-Login-AppleLogin.md","raw":"---\ntitle: IOS苹果登录(sign in with apple)\ndate: 2020-04-03 18:47:31\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n\n## 一、 sign in with apple 简介  \n 苹果官方介绍:\n \n ```\nThe fast, easy way to sign in to apps and websites.\n\nSign In With Apple 是一种在app 和网站上快速、容易登录的方式。\n\nSign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. \nInstead of filling out forms, verifying email addresses, and choosing new passwords, they can use \nSign In with Apple to set up an account and start using your app right away. All accounts are protected\nwith two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.\n\n对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。\n而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。\n为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。\n ```\n \n注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。\n\n集成步骤：\n\n![](oc-Login-AppleLogin/joinSteps.png)\n\n## 二、 相关设置\n\n### 1、开启 Sign in with Apple 功能\n\n1. 登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)\n\n\t![URI结构图](oc-Login-AppleLogin/backgroundSetup.png)\n\t\n2. Xcode 里面 Signing & Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）\n\n\t![URI结构图](oc-Login-AppleLogin/xcodeSetup.png)\n\n## 三、 App端实现  \n### 1、使用苹果提供的按钮\n\n官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。\n\n```\nASAuthorizationAppleIDButton *loginBtn = [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];\n[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];\nloginBtn.center = self.view.center;\nloginBtn.bounds = CGRectMake(0, 0, 200, 40);\n[self.view addSubview:loginBtn];\n\n```\n\n这个按钮具有两种文案类型和三个样式，分别是：\n\n```\ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) {\n    ASAuthorizationAppleIDButtonTypeSignIn,\n    ASAuthorizationAppleIDButtonTypeContinue,\n    ASAuthorizationAppleIDButtonTypeDefault = ASAuthorizationAppleIDButtonTypeSignIn,\n} \n \ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) {\n    ASAuthorizationAppleIDButtonStyleWhite,\n    ASAuthorizationAppleIDButtonStyleWhiteOutline,\n    ASAuthorizationAppleIDButtonStyleBlack,\n}\n```\n\n样式如下图：\n\n![URI结构图](oc-Login-AppleLogin/loginBtnStyle.png)\n\n从图上可以看出：\n\n**>** Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。\n\n**>** 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）\n\n另外，按钮宽高默认值为 {width:130, height:30}。\n\n对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。\n\n本地化：必要且重要的一点\n\n![URI结构图](oc-Login-AppleLogin/styleLocalize.png)\n\n\n### 2、Authorization 发起授权登录请求\n\n```\n#pragma mark- 点击登录\n-(void)signInWithApple API_AVAILABLE(ios(13.0))\n{\n    ASAuthorizationAppleIDProvider *provider = [[ASAuthorizationAppleIDProvider alloc]init];\n    ASAuthorizationAppleIDRequest * request = [provider createRequest];\n    request.requestedScopes = @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];\n    \n    ASAuthorizationController *vc= [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];\n    vc.delegate = self;\n    vc.presentationContextProvider = self;\n    \n    [vc performRequests];\n}\n\n```\n\n>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。\n\n>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。\n\n>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。\n\n\n设置上下文\n\nASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。\n\n```\n-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller\nAPI_AVAILABLE(ios(13.0)){\n   return  self.view.window;\n}\n\n```\n\n### 3、Verification 授权\n\n用户发起授权请求后，系统就会弹出用户登录验证的页面。\n\n![URI结构图](oc-Login-AppleLogin/userVerification.png)\n\n\n在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。\n\n授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：\n\n![URI结构图](oc-Login-AppleLogin/userLogin.png)\n\n授权回调处理\n\n下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。\n\n```\n#pragma mark- 授权成功的回调\n-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization\nAPI_AVAILABLE(ios(13.0)){\n    \n    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) {\n        \n        ASAuthorizationAppleIDCredential * credential = authorization.credential;\n        \n        NSString *state = credential.state;\n        \n        NSString * userID = credential.user;\n        \n        NSPersonNameComponents *fullName = credential.fullName;\n        NSString * email = credential.email;\n        //refresh token\n        NSString * authorizationCode = [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];\n        // access token\n        NSString * identityToken = [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];\n        \n        ASUserDetectionStatus realUserStatus = credential.realUserStatus;\n\t\t \n\t\t NSLog(@\"state: %@\", state);\n\t\t NSLog(@\"userID: %@\", userID);\n\t\t NSLog(@\"fullName: %@\", fullName);\n\t\t NSLog(@\"email: %@\", email);\n\t\t NSLog(@\"authorizationCode: %@\", authorizationCode);\n\t\t NSLog(@\"identityToken: %@\", identityToken);\n\t\t NSLog(@\"realUserStatus: %@\", @(realUserStatus));\n    }\n   \n}\n \n#pragma mark- 授权失败的回调\n- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error\nAPI_AVAILABLE(ios(13.0)){\n    \n    NSString * errorMsg = nil;\n    \n    switch (error.code) {\n        case ASAuthorizationErrorCanceled:\n            errorMsg = @\"用户取消了授权请求\";\n            break;\n        case ASAuthorizationErrorFailed:\n            errorMsg = @\"授权请求失败\";\n            break;\n        case ASAuthorizationErrorInvalidResponse:\n            errorMsg = @\"授权请求响应无效\";\n            break;\n        case ASAuthorizationErrorNotHandled:\n            errorMsg = @\"未能处理授权请求\";\n            break;\n        case ASAuthorizationErrorUnknown:\n            errorMsg = @\"授权请求失败未知原因\";\n            break;\n    \n    }\n  \n}\n\n```\n\n当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。\n\n这些信息具体含义和用途：\n\n-  User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。\n\n-  Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。\n\n-  Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。\n\n-  Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n-  失败情况会走 authorizationController:didCompleteWithError\n\n### 4、Handling Changes\n\n通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。\n\n-  用户终止 App 中使用 Sign in with Apple 功能\n\n-  用户在设置里注销了 AppleId\n\n这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。\n\n我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    if (@available(iOS 13.0, *)) {\n        NSString *userIdentifier = 钥匙串中取出的 userIdentifier;\n        if (userIdentifier) {\n            ASAuthorizationAppleIDProvider *appleIDProvider = [ASAuthorizationAppleIDProvider new];\n            [appleIDProvider getCredentialStateForUserID:userIdentifier\n                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,\n                                                           NSError * _Nullable error)\n            {\n                switch (credentialState) {\n                    case ASAuthorizationAppleIDProviderCredentialAuthorized:\n                        // The Apple ID credential is valid\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialRevoked:\n                        // Apple ID Credential revoked, handle unlink\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialNotFound:\n                        // Credential not found, show login UI\n                        break;\n                }\n            }];\n        }\n    }\n    \n    return YES;\n}\n\n```\n\nASAuthorizationAppleIDProviderCredentialState 解析如下：\n\n-  ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；\n-  ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；\n\n-  ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。\n\n另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：\n\n - 用户退出当前设备 和 重新登录授权\n\n```\n- (void)observeAppleSignInState\n{\n    if (@available(iOS 13.0, *)) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleSignInWithAppleStateChanged:)\n                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification\n                                                   object:nil];\n    }\n}\n \n- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification\n{\n    // Sign the user out, optionally guide them to sign in again\n    NSLog(@\"%@\", notification.userInfo);\n\n}\n```\n\n## 四、 后端校验\n### 1、整体流程图\n\n  ![URI结构图](oc-Login-AppleLogin/signVerityProcess.jpg)\n\n > #### 1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\n  -  **User ID**: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。\n  -  **Verification Data**: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。\n  -  **Account Information**: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。\nReal User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n > #### 2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\n \n### 2、JWT数据\n在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:\n\n![URI结构图](oc-Login-AppleLogin/identityTokenDataStruct.jpg)\n\n它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。\n\nJWT 的三个部分依次如下。\n\n```\n- Header（头部）\n- Payload（负载）\n- Signature（签名）\n```\n\n写成一行，就是下面的样子。\n\n```\nHeader.Payload.Signature\n```\n\n![URI结构图](oc-Login-AppleLogin/jwtDataStruct.jpg)\n\n**注意：**\n\nheader(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码\n \n第一部分解码:\n\n```\n{\n    \"kid\": \"AIDOPK1\",\n    \"alg\": \"RS256\"\n}\n```\n\n第二部分解码:\n\n```\n{\n    \"iss\": \"https://appleid.apple.com\",\n    \"aud\": \"**********\",\n    \"exp\": 1570617356,\n    \"iat\": 1570616756,\n    \"sub\": \"00*****1790047f40335c6c1a.0641\",\n    \"c_hash\": \"eqOdpr_**TyHiRymHbPQ\",\n    \"auth_time\": 1570616756\n}\n\n```\n\n**备注:**  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。\n\nJWT的这个三部分的字段分别代表：\n\n> - **header:** 包括了key id 与加密算法\n> - **payload:**\n\t* iss: 签发机构，苹果\n\t* aud: 接收者，目标app\n\t* exp: 过期时间\n\t* iat: 签发时间\n\t* sub: 用户id\n\t* c_hash: 一个哈希数列，作用未知\n\t* auth_time: 签名时间\n> - **signature:** 用于验证JWT的签名\n\n### 3、校验identityToken\n上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？\n\n![URI结构图](oc-Login-AppleLogin/identityTokenVerityProcess.jpg)\n\n> ##### 1、从苹果服务器获取publickey\n\n```\npublic PublicKey getPublicKey() throws Exception {\n\tString urlData = getUrlData(\"https://appleid.apple.com/auth/keys\");\n\tMap maps = (Map)JSON.parse(urlData);\n\tList keys = (List<Map>)maps.get(\"keys\");\n\tMap o = (Map) keys.get(0);\n\tJwk jwa = Jwk.fromValues(o);\n\ttry {\n\t    PublicKey publicKey = jwa.getPublicKey();\n\t    return publicKey;\n\t} catch (InvalidPublicKeyException e) {\n\t    e.printStackTrace();\n\t}\n\treturn null;\n}\n\n```\n\n需要引入 jar 包：\n\n```\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.9.0</version>\n</dependency>\n```  \n\n> ##### 2、解析identityToken\n\n```\nString jwt = \"app端请求的identityToken\";\nString decode = Base64.decoded(jwt.split(\"\\\\.\")[1]);\nString substring = decode.substring(0, decode.indexOf(\"}\")+1);\nJSONObject jsonObject = JSON.parseObject(substring);\nString iss = jsonObject.getString(\"iss\");\nString sub = jsonObject.getString(\"sub\");\nString aud = jsonObject.getString(\"aud\");\n\n``` \n\n> ##### 3、验证\n\n``` \npublic String verify(String jwt, String iss,String aud, String sub) throws Exception {\n    PublicKey publicKey = getPublicKey();\n    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n    jwtParser.requireIssuer(iss);\n    jwtParser.requireAudience(aud);\n    jwtParser.requireSubject(sub);\n    try {\n        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);\n        if (claim != null && claim.getBody().containsKey(\"auth_time\")) {\n            return \"SUCCESS\";\n        }\n        return \"FIALD\";\n    } catch (ExpiredJwtException e) {\n        log.error(\"apple identityToken expired\", e);\n        return \"FIALD\";\n    } catch (Exception e) {\n        log.error(\"apple identityToken illegal\", e);\n        return \"FIALD\";\n    } \n}\n``` \n \n\n使用到的jar包：\n\n``` \n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n \n","slug":"oc/Login/oc-Login-AppleLogin","published":1,"updated":"2020-09-01T12:48:48.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602k0043l4s643ue6jvf","content":"<h2 id=\"一、-sign-in-with-apple-简介\"><a href=\"#一、-sign-in-with-apple-简介\" class=\"headerlink\" title=\"一、 sign in with apple 简介\"></a>一、 sign in with apple 简介</h2><p> 苹果官方介绍:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The fast, easy way to sign in to apps and websites.</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In With Apple 是一种在app 和网站上快速、容易登录的方式。</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. </span><br><span class=\"line\">Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use </span><br><span class=\"line\">Sign In with Apple to set up an account and start using your app right away. All accounts are protected</span><br><span class=\"line\">with two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.</span><br><span class=\"line\"></span><br><span class=\"line\">对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。</span><br><span class=\"line\">而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。</span><br><span class=\"line\">为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。</span><br></pre></td></tr></table></figure>\n\n<p>注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。</p>\n<p>集成步骤：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png\" alt></p>\n<h2 id=\"二、-相关设置\"><a href=\"#二、-相关设置\" class=\"headerlink\" title=\"二、 相关设置\"></a>二、 相关设置</h2><h3 id=\"1、开启-Sign-in-with-Apple-功能\"><a href=\"#1、开启-Sign-in-with-Apple-功能\" class=\"headerlink\" title=\"1、开启 Sign in with Apple 功能\"></a>1、开启 Sign in with Apple 功能</h3><ol>\n<li><p>登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png\" alt=\"URI结构图\"></p>\n</li>\n<li><p>Xcode 里面 Signing &amp; Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png\" alt=\"URI结构图\"></p>\n</li>\n</ol>\n<h2 id=\"三、-App端实现\"><a href=\"#三、-App端实现\" class=\"headerlink\" title=\"三、 App端实现\"></a>三、 App端实现</h2><h3 id=\"1、使用苹果提供的按钮\"><a href=\"#1、使用苹果提供的按钮\" class=\"headerlink\" title=\"1、使用苹果提供的按钮\"></a>1、使用苹果提供的按钮</h3><p>官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASAuthorizationAppleIDButton *loginBtn &#x3D; [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];</span><br><span class=\"line\">[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">loginBtn.center &#x3D; self.view.center;</span><br><span class=\"line\">loginBtn.bounds &#x3D; CGRectMake(0, 0, 200, 40);</span><br><span class=\"line\">[self.view addSubview:loginBtn];</span><br></pre></td></tr></table></figure>\n\n<p>这个按钮具有两种文案类型和三个样式，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeContinue,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeDefault &#x3D; ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhite,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhiteOutline,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleBlack,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>样式如下图：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png\" alt=\"URI结构图\"></p>\n<p>从图上可以看出：</p>\n<p><strong>&gt;</strong> Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。</p>\n<p><strong>&gt;</strong> 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）</p>\n<p>另外，按钮宽高默认值为 {width:130, height:30}。</p>\n<p>对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。</p>\n<p>本地化：必要且重要的一点</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png\" alt=\"URI结构图\"></p>\n<h3 id=\"2、Authorization-发起授权登录请求\"><a href=\"#2、Authorization-发起授权登录请求\" class=\"headerlink\" title=\"2、Authorization 发起授权登录请求\"></a>2、Authorization 发起授权登录请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 点击登录</span><br><span class=\"line\">-(void)signInWithApple API_AVAILABLE(ios(13.0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDProvider *provider &#x3D; [[ASAuthorizationAppleIDProvider alloc]init];</span><br><span class=\"line\">    ASAuthorizationAppleIDRequest * request &#x3D; [provider createRequest];</span><br><span class=\"line\">    request.requestedScopes &#x3D; @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];</span><br><span class=\"line\">    </span><br><span class=\"line\">    ASAuthorizationController *vc&#x3D; [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];</span><br><span class=\"line\">    vc.delegate &#x3D; self;</span><br><span class=\"line\">    vc.presentationContextProvider &#x3D; self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [vc performRequests];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。</p>\n</blockquote>\n<blockquote>\n<p>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。</p>\n</blockquote>\n<blockquote>\n<p>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。</p>\n</blockquote>\n<p>设置上下文</p>\n<p>ASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">   return  self.view.window;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Verification-授权\"><a href=\"#3、Verification-授权\" class=\"headerlink\" title=\"3、Verification 授权\"></a>3、Verification 授权</h3><p>用户发起授权请求后，系统就会弹出用户登录验证的页面。</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png\" alt=\"URI结构图\"></p>\n<p>在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。</p>\n<p>授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png\" alt=\"URI结构图\"></p>\n<p>授权回调处理</p>\n<p>下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 授权成功的回调</span><br><span class=\"line\">-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASAuthorizationAppleIDCredential * credential &#x3D; authorization.credential;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString *state &#x3D; credential.state;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString * userID &#x3D; credential.user;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSPersonNameComponents *fullName &#x3D; credential.fullName;</span><br><span class=\"line\">        NSString * email &#x3D; credential.email;</span><br><span class=\"line\">        &#x2F;&#x2F;refresh token</span><br><span class=\"line\">        NSString * authorizationCode &#x3D; [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        &#x2F;&#x2F; access token</span><br><span class=\"line\">        NSString * identityToken &#x3D; [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASUserDetectionStatus realUserStatus &#x3D; credential.realUserStatus;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t NSLog(@&quot;state: %@&quot;, state);</span><br><span class=\"line\">\t\t NSLog(@&quot;userID: %@&quot;, userID);</span><br><span class=\"line\">\t\t NSLog(@&quot;fullName: %@&quot;, fullName);</span><br><span class=\"line\">\t\t NSLog(@&quot;email: %@&quot;, email);</span><br><span class=\"line\">\t\t NSLog(@&quot;authorizationCode: %@&quot;, authorizationCode);</span><br><span class=\"line\">\t\t NSLog(@&quot;identityToken: %@&quot;, identityToken);</span><br><span class=\"line\">\t\t NSLog(@&quot;realUserStatus: %@&quot;, @(realUserStatus));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">#pragma mark- 授权失败的回调</span><br><span class=\"line\">- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString * errorMsg &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    switch (error.code) &#123;</span><br><span class=\"line\">        case ASAuthorizationErrorCanceled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;用户取消了授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorFailed:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorInvalidResponse:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求响应无效&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorNotHandled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;未能处理授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorUnknown:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败未知原因&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。</p>\n<p>这些信息具体含义和用途：</p>\n<ul>\n<li><p>User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。</p>\n</li>\n<li><p>Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。</p>\n</li>\n<li><p>Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。</p>\n</li>\n<li><p>Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n</li>\n<li><p>失败情况会走 authorizationController:didCompleteWithError</p>\n</li>\n</ul>\n<h3 id=\"4、Handling-Changes\"><a href=\"#4、Handling-Changes\" class=\"headerlink\" title=\"4、Handling Changes\"></a>4、Handling Changes</h3><p>通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。</p>\n<ul>\n<li><p>用户终止 App 中使用 Sign in with Apple 功能</p>\n</li>\n<li><p>用户在设置里注销了 AppleId</p>\n</li>\n</ul>\n<p>这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。</p>\n<p>我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        NSString *userIdentifier &#x3D; 钥匙串中取出的 userIdentifier;</span><br><span class=\"line\">        if (userIdentifier) &#123;</span><br><span class=\"line\">            ASAuthorizationAppleIDProvider *appleIDProvider &#x3D; [ASAuthorizationAppleIDProvider new];</span><br><span class=\"line\">            [appleIDProvider getCredentialStateForUserID:userIdentifier</span><br><span class=\"line\">                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,</span><br><span class=\"line\">                                                           NSError * _Nullable error)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                switch (credentialState) &#123;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialAuthorized:</span><br><span class=\"line\">                        &#x2F;&#x2F; The Apple ID credential is valid</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialRevoked:</span><br><span class=\"line\">                        &#x2F;&#x2F; Apple ID Credential revoked, handle unlink</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialNotFound:</span><br><span class=\"line\">                        &#x2F;&#x2F; Credential not found, show login UI</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASAuthorizationAppleIDProviderCredentialState 解析如下：</p>\n<ul>\n<li><p>ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。</p>\n</li>\n</ul>\n<p>另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：</p>\n<ul>\n<li>用户退出当前设备 和 重新登录授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeAppleSignInState</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class=\"line\">                                                 selector:@selector(handleSignInWithAppleStateChanged:)</span><br><span class=\"line\">                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification</span><br><span class=\"line\">                                                   object:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Sign the user out, optionally guide them to sign in again</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, notification.userInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-后端校验\"><a href=\"#四、-后端校验\" class=\"headerlink\" title=\"四、 后端校验\"></a>四、 后端校验</h2><h3 id=\"1、整体流程图\"><a href=\"#1、整体流程图\" class=\"headerlink\" title=\"1、整体流程图\"></a>1、整体流程图</h3><p>  <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h4 id=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\"><a href=\"#1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\" class=\"headerlink\" title=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\"></a>1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:</h4></blockquote>\n<ul>\n<li><p><strong>User ID</strong>: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。</p>\n</li>\n<li><p><strong>Verification Data</strong>: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。</p>\n</li>\n<li><p><strong>Account Information</strong>: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。<br>Real User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n<blockquote>\n<h4 id=\"2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\"><a href=\"#2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\" class=\"headerlink\" title=\"2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\"></a>2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。</h4></blockquote>\n</li>\n</ul>\n<h3 id=\"2、JWT数据\"><a href=\"#2、JWT数据\" class=\"headerlink\" title=\"2、JWT数据\"></a>2、JWT数据</h3><p>在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>\n<p>JWT 的三个部分依次如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Header（头部）</span><br><span class=\"line\">- Payload（负载）</span><br><span class=\"line\">- Signature（签名）</span><br></pre></td></tr></table></figure>\n\n<p>写成一行，就是下面的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.Payload.Signature</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p><strong>注意：</strong></p>\n<p>header(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码</p>\n<p>第一部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;kid&quot;: &quot;AIDOPK1&quot;,</span><br><span class=\"line\">    &quot;alg&quot;: &quot;RS256&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;iss&quot;: &quot;https:&#x2F;&#x2F;appleid.apple.com&quot;,</span><br><span class=\"line\">    &quot;aud&quot;: &quot;**********&quot;,</span><br><span class=\"line\">    &quot;exp&quot;: 1570617356,</span><br><span class=\"line\">    &quot;iat&quot;: 1570616756,</span><br><span class=\"line\">    &quot;sub&quot;: &quot;00*****1790047f40335c6c1a.0641&quot;,</span><br><span class=\"line\">    &quot;c_hash&quot;: &quot;eqOdpr_**TyHiRymHbPQ&quot;,</span><br><span class=\"line\">    &quot;auth_time&quot;: 1570616756</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注:</strong>  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。</p>\n<p>JWT的这个三部分的字段分别代表：</p>\n<blockquote>\n<ul>\n<li><strong>header:</strong> 包括了key id 与加密算法</li>\n<li><strong>payload:</strong><ul>\n<li>iss: 签发机构，苹果</li>\n<li>aud: 接收者，目标app</li>\n<li>exp: 过期时间</li>\n<li>iat: 签发时间</li>\n<li>sub: 用户id</li>\n<li>c_hash: 一个哈希数列，作用未知</li>\n<li>auth_time: 签名时间</li>\n</ul>\n</li>\n<li><strong>signature:</strong> 用于验证JWT的签名</li>\n</ul>\n</blockquote>\n<h3 id=\"3、校验identityToken\"><a href=\"#3、校验identityToken\" class=\"headerlink\" title=\"3、校验identityToken\"></a>3、校验identityToken</h3><p>上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h5 id=\"1、从苹果服务器获取publickey\"><a href=\"#1、从苹果服务器获取publickey\" class=\"headerlink\" title=\"1、从苹果服务器获取publickey\"></a>1、从苹果服务器获取publickey</h5></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public PublicKey getPublicKey() throws Exception &#123;</span><br><span class=\"line\">\tString urlData &#x3D; getUrlData(&quot;https:&#x2F;&#x2F;appleid.apple.com&#x2F;auth&#x2F;keys&quot;);</span><br><span class=\"line\">\tMap maps &#x3D; (Map)JSON.parse(urlData);</span><br><span class=\"line\">\tList keys &#x3D; (List&lt;Map&gt;)maps.get(&quot;keys&quot;);</span><br><span class=\"line\">\tMap o &#x3D; (Map) keys.get(0);</span><br><span class=\"line\">\tJwk jwa &#x3D; Jwk.fromValues(o);</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    PublicKey publicKey &#x3D; jwa.getPublicKey();</span><br><span class=\"line\">\t    return publicKey;</span><br><span class=\"line\">\t&#125; catch (InvalidPublicKeyException e) &#123;</span><br><span class=\"line\">\t    e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要引入 jar 包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jwks-rsa&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ##### 2、解析identityToken</span><br></pre></td></tr></table></figure>\n<p>String jwt = “app端请求的identityToken”;<br>String decode = Base64.decoded(jwt.split(“\\.”)[1]);<br>String substring = decode.substring(0, decode.indexOf(“}”)+1);<br>JSONObject jsonObject = JSON.parseObject(substring);<br>String iss = jsonObject.getString(“iss”);<br>String sub = jsonObject.getString(“sub”);<br>String aud = jsonObject.getString(“aud”);</p>\n<pre><code>\n&gt; ##### 3、验证\n</code></pre><p>public String verify(String jwt, String iss,String aud, String sub) throws Exception {<br>    PublicKey publicKey = getPublicKey();<br>    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);<br>    jwtParser.requireIssuer(iss);<br>    jwtParser.requireAudience(aud);<br>    jwtParser.requireSubject(sub);<br>    try {<br>        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);<br>        if (claim != null &amp;&amp; claim.getBody().containsKey(“auth_time”)) {<br>            return “SUCCESS”;<br>        }<br>        return “FIALD”;<br>    } catch (ExpiredJwtException e) {<br>        log.error(“apple identityToken expired”, e);<br>        return “FIALD”;<br>    } catch (Exception e) {<br>        log.error(“apple identityToken illegal”, e);<br>        return “FIALD”;<br>    }<br>}</Claims></p>\n<pre><code>\n\n使用到的jar包：\n</code></pre><dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-sign-in-with-apple-简介\"><a href=\"#一、-sign-in-with-apple-简介\" class=\"headerlink\" title=\"一、 sign in with apple 简介\"></a>一、 sign in with apple 简介</h2><p> 苹果官方介绍:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The fast, easy way to sign in to apps and websites.</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In With Apple 是一种在app 和网站上快速、容易登录的方式。</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. </span><br><span class=\"line\">Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use </span><br><span class=\"line\">Sign In with Apple to set up an account and start using your app right away. All accounts are protected</span><br><span class=\"line\">with two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.</span><br><span class=\"line\"></span><br><span class=\"line\">对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。</span><br><span class=\"line\">而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。</span><br><span class=\"line\">为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。</span><br></pre></td></tr></table></figure>\n\n<p>注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。</p>\n<p>集成步骤：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png\" alt></p>\n<h2 id=\"二、-相关设置\"><a href=\"#二、-相关设置\" class=\"headerlink\" title=\"二、 相关设置\"></a>二、 相关设置</h2><h3 id=\"1、开启-Sign-in-with-Apple-功能\"><a href=\"#1、开启-Sign-in-with-Apple-功能\" class=\"headerlink\" title=\"1、开启 Sign in with Apple 功能\"></a>1、开启 Sign in with Apple 功能</h3><ol>\n<li><p>登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png\" alt=\"URI结构图\"></p>\n</li>\n<li><p>Xcode 里面 Signing &amp; Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png\" alt=\"URI结构图\"></p>\n</li>\n</ol>\n<h2 id=\"三、-App端实现\"><a href=\"#三、-App端实现\" class=\"headerlink\" title=\"三、 App端实现\"></a>三、 App端实现</h2><h3 id=\"1、使用苹果提供的按钮\"><a href=\"#1、使用苹果提供的按钮\" class=\"headerlink\" title=\"1、使用苹果提供的按钮\"></a>1、使用苹果提供的按钮</h3><p>官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASAuthorizationAppleIDButton *loginBtn &#x3D; [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];</span><br><span class=\"line\">[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">loginBtn.center &#x3D; self.view.center;</span><br><span class=\"line\">loginBtn.bounds &#x3D; CGRectMake(0, 0, 200, 40);</span><br><span class=\"line\">[self.view addSubview:loginBtn];</span><br></pre></td></tr></table></figure>\n\n<p>这个按钮具有两种文案类型和三个样式，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeContinue,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeDefault &#x3D; ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhite,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhiteOutline,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleBlack,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>样式如下图：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png\" alt=\"URI结构图\"></p>\n<p>从图上可以看出：</p>\n<p><strong>&gt;</strong> Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。</p>\n<p><strong>&gt;</strong> 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）</p>\n<p>另外，按钮宽高默认值为 {width:130, height:30}。</p>\n<p>对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。</p>\n<p>本地化：必要且重要的一点</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png\" alt=\"URI结构图\"></p>\n<h3 id=\"2、Authorization-发起授权登录请求\"><a href=\"#2、Authorization-发起授权登录请求\" class=\"headerlink\" title=\"2、Authorization 发起授权登录请求\"></a>2、Authorization 发起授权登录请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 点击登录</span><br><span class=\"line\">-(void)signInWithApple API_AVAILABLE(ios(13.0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDProvider *provider &#x3D; [[ASAuthorizationAppleIDProvider alloc]init];</span><br><span class=\"line\">    ASAuthorizationAppleIDRequest * request &#x3D; [provider createRequest];</span><br><span class=\"line\">    request.requestedScopes &#x3D; @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];</span><br><span class=\"line\">    </span><br><span class=\"line\">    ASAuthorizationController *vc&#x3D; [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];</span><br><span class=\"line\">    vc.delegate &#x3D; self;</span><br><span class=\"line\">    vc.presentationContextProvider &#x3D; self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [vc performRequests];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。</p>\n</blockquote>\n<blockquote>\n<p>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。</p>\n</blockquote>\n<blockquote>\n<p>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。</p>\n</blockquote>\n<p>设置上下文</p>\n<p>ASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">   return  self.view.window;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Verification-授权\"><a href=\"#3、Verification-授权\" class=\"headerlink\" title=\"3、Verification 授权\"></a>3、Verification 授权</h3><p>用户发起授权请求后，系统就会弹出用户登录验证的页面。</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png\" alt=\"URI结构图\"></p>\n<p>在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。</p>\n<p>授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png\" alt=\"URI结构图\"></p>\n<p>授权回调处理</p>\n<p>下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 授权成功的回调</span><br><span class=\"line\">-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASAuthorizationAppleIDCredential * credential &#x3D; authorization.credential;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString *state &#x3D; credential.state;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString * userID &#x3D; credential.user;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSPersonNameComponents *fullName &#x3D; credential.fullName;</span><br><span class=\"line\">        NSString * email &#x3D; credential.email;</span><br><span class=\"line\">        &#x2F;&#x2F;refresh token</span><br><span class=\"line\">        NSString * authorizationCode &#x3D; [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        &#x2F;&#x2F; access token</span><br><span class=\"line\">        NSString * identityToken &#x3D; [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASUserDetectionStatus realUserStatus &#x3D; credential.realUserStatus;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t NSLog(@&quot;state: %@&quot;, state);</span><br><span class=\"line\">\t\t NSLog(@&quot;userID: %@&quot;, userID);</span><br><span class=\"line\">\t\t NSLog(@&quot;fullName: %@&quot;, fullName);</span><br><span class=\"line\">\t\t NSLog(@&quot;email: %@&quot;, email);</span><br><span class=\"line\">\t\t NSLog(@&quot;authorizationCode: %@&quot;, authorizationCode);</span><br><span class=\"line\">\t\t NSLog(@&quot;identityToken: %@&quot;, identityToken);</span><br><span class=\"line\">\t\t NSLog(@&quot;realUserStatus: %@&quot;, @(realUserStatus));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">#pragma mark- 授权失败的回调</span><br><span class=\"line\">- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString * errorMsg &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    switch (error.code) &#123;</span><br><span class=\"line\">        case ASAuthorizationErrorCanceled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;用户取消了授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorFailed:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorInvalidResponse:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求响应无效&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorNotHandled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;未能处理授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorUnknown:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败未知原因&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。</p>\n<p>这些信息具体含义和用途：</p>\n<ul>\n<li><p>User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。</p>\n</li>\n<li><p>Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。</p>\n</li>\n<li><p>Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。</p>\n</li>\n<li><p>Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n</li>\n<li><p>失败情况会走 authorizationController:didCompleteWithError</p>\n</li>\n</ul>\n<h3 id=\"4、Handling-Changes\"><a href=\"#4、Handling-Changes\" class=\"headerlink\" title=\"4、Handling Changes\"></a>4、Handling Changes</h3><p>通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。</p>\n<ul>\n<li><p>用户终止 App 中使用 Sign in with Apple 功能</p>\n</li>\n<li><p>用户在设置里注销了 AppleId</p>\n</li>\n</ul>\n<p>这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。</p>\n<p>我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        NSString *userIdentifier &#x3D; 钥匙串中取出的 userIdentifier;</span><br><span class=\"line\">        if (userIdentifier) &#123;</span><br><span class=\"line\">            ASAuthorizationAppleIDProvider *appleIDProvider &#x3D; [ASAuthorizationAppleIDProvider new];</span><br><span class=\"line\">            [appleIDProvider getCredentialStateForUserID:userIdentifier</span><br><span class=\"line\">                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,</span><br><span class=\"line\">                                                           NSError * _Nullable error)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                switch (credentialState) &#123;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialAuthorized:</span><br><span class=\"line\">                        &#x2F;&#x2F; The Apple ID credential is valid</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialRevoked:</span><br><span class=\"line\">                        &#x2F;&#x2F; Apple ID Credential revoked, handle unlink</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialNotFound:</span><br><span class=\"line\">                        &#x2F;&#x2F; Credential not found, show login UI</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASAuthorizationAppleIDProviderCredentialState 解析如下：</p>\n<ul>\n<li><p>ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。</p>\n</li>\n</ul>\n<p>另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：</p>\n<ul>\n<li>用户退出当前设备 和 重新登录授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeAppleSignInState</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class=\"line\">                                                 selector:@selector(handleSignInWithAppleStateChanged:)</span><br><span class=\"line\">                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification</span><br><span class=\"line\">                                                   object:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Sign the user out, optionally guide them to sign in again</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, notification.userInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-后端校验\"><a href=\"#四、-后端校验\" class=\"headerlink\" title=\"四、 后端校验\"></a>四、 后端校验</h2><h3 id=\"1、整体流程图\"><a href=\"#1、整体流程图\" class=\"headerlink\" title=\"1、整体流程图\"></a>1、整体流程图</h3><p>  <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h4 id=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\"><a href=\"#1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\" class=\"headerlink\" title=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\"></a>1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:</h4></blockquote>\n<ul>\n<li><p><strong>User ID</strong>: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。</p>\n</li>\n<li><p><strong>Verification Data</strong>: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。</p>\n</li>\n<li><p><strong>Account Information</strong>: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。<br>Real User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n<blockquote>\n<h4 id=\"2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\"><a href=\"#2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\" class=\"headerlink\" title=\"2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\"></a>2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。</h4></blockquote>\n</li>\n</ul>\n<h3 id=\"2、JWT数据\"><a href=\"#2、JWT数据\" class=\"headerlink\" title=\"2、JWT数据\"></a>2、JWT数据</h3><p>在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>\n<p>JWT 的三个部分依次如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Header（头部）</span><br><span class=\"line\">- Payload（负载）</span><br><span class=\"line\">- Signature（签名）</span><br></pre></td></tr></table></figure>\n\n<p>写成一行，就是下面的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.Payload.Signature</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p><strong>注意：</strong></p>\n<p>header(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码</p>\n<p>第一部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;kid&quot;: &quot;AIDOPK1&quot;,</span><br><span class=\"line\">    &quot;alg&quot;: &quot;RS256&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;iss&quot;: &quot;https:&#x2F;&#x2F;appleid.apple.com&quot;,</span><br><span class=\"line\">    &quot;aud&quot;: &quot;**********&quot;,</span><br><span class=\"line\">    &quot;exp&quot;: 1570617356,</span><br><span class=\"line\">    &quot;iat&quot;: 1570616756,</span><br><span class=\"line\">    &quot;sub&quot;: &quot;00*****1790047f40335c6c1a.0641&quot;,</span><br><span class=\"line\">    &quot;c_hash&quot;: &quot;eqOdpr_**TyHiRymHbPQ&quot;,</span><br><span class=\"line\">    &quot;auth_time&quot;: 1570616756</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注:</strong>  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。</p>\n<p>JWT的这个三部分的字段分别代表：</p>\n<blockquote>\n<ul>\n<li><strong>header:</strong> 包括了key id 与加密算法</li>\n<li><strong>payload:</strong><ul>\n<li>iss: 签发机构，苹果</li>\n<li>aud: 接收者，目标app</li>\n<li>exp: 过期时间</li>\n<li>iat: 签发时间</li>\n<li>sub: 用户id</li>\n<li>c_hash: 一个哈希数列，作用未知</li>\n<li>auth_time: 签名时间</li>\n</ul>\n</li>\n<li><strong>signature:</strong> 用于验证JWT的签名</li>\n</ul>\n</blockquote>\n<h3 id=\"3、校验identityToken\"><a href=\"#3、校验identityToken\" class=\"headerlink\" title=\"3、校验identityToken\"></a>3、校验identityToken</h3><p>上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h5 id=\"1、从苹果服务器获取publickey\"><a href=\"#1、从苹果服务器获取publickey\" class=\"headerlink\" title=\"1、从苹果服务器获取publickey\"></a>1、从苹果服务器获取publickey</h5></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public PublicKey getPublicKey() throws Exception &#123;</span><br><span class=\"line\">\tString urlData &#x3D; getUrlData(&quot;https:&#x2F;&#x2F;appleid.apple.com&#x2F;auth&#x2F;keys&quot;);</span><br><span class=\"line\">\tMap maps &#x3D; (Map)JSON.parse(urlData);</span><br><span class=\"line\">\tList keys &#x3D; (List&lt;Map&gt;)maps.get(&quot;keys&quot;);</span><br><span class=\"line\">\tMap o &#x3D; (Map) keys.get(0);</span><br><span class=\"line\">\tJwk jwa &#x3D; Jwk.fromValues(o);</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    PublicKey publicKey &#x3D; jwa.getPublicKey();</span><br><span class=\"line\">\t    return publicKey;</span><br><span class=\"line\">\t&#125; catch (InvalidPublicKeyException e) &#123;</span><br><span class=\"line\">\t    e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要引入 jar 包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jwks-rsa&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ##### 2、解析identityToken</span><br></pre></td></tr></table></figure>\n<p>String jwt = “app端请求的identityToken”;<br>String decode = Base64.decoded(jwt.split(“\\.”)[1]);<br>String substring = decode.substring(0, decode.indexOf(“}”)+1);<br>JSONObject jsonObject = JSON.parseObject(substring);<br>String iss = jsonObject.getString(“iss”);<br>String sub = jsonObject.getString(“sub”);<br>String aud = jsonObject.getString(“aud”);</p>\n<pre><code>\n&gt; ##### 3、验证\n</code></pre><p>public String verify(String jwt, String iss,String aud, String sub) throws Exception {<br>    PublicKey publicKey = getPublicKey();<br>    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);<br>    jwtParser.requireIssuer(iss);<br>    jwtParser.requireAudience(aud);<br>    jwtParser.requireSubject(sub);<br>    try {<br>        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);<br>        if (claim != null &amp;&amp; claim.getBody().containsKey(“auth_time”)) {<br>            return “SUCCESS”;<br>        }<br>        return “FIALD”;<br>    } catch (ExpiredJwtException e) {<br>        log.error(“apple identityToken expired”, e);<br>        return “FIALD”;<br>    } catch (Exception e) {<br>        log.error(“apple identityToken illegal”, e);<br>        return “FIALD”;<br>    }<br>}</Claims></p>\n<pre><code>\n\n使用到的jar包：\n</code></pre><dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n\n"},{"title":"IOS旋转菜单","date":"2020-04-03T09:27:18.000Z","_content":"\n我们先看一下，最终要实现的情况：如图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg)\n\n再看一下，项目代码的结构图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg)\n\n实现思路：\n\n- 1，自定义view类和xib文件，将view类和xib文件关联上。\n\n- 2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。\n\n- 3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。\n\n- 4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)\n\n- 5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。\n\n- 6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。\n\n- 7，点击按钮的时候，通知代理，按钮被人点击了。\n\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg)\n\n\n第一部分：视图控制器的代码：\n\n```\n#import \"CZViewController.h\"\n\n#import \"CZBottomView.h\"\n\n@interface CZViewController () <CZBottomViewDelegate>\n\n@property (weak, nonatomic) IBOutletUIView *bottomView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad\n\n{\n\n    [superviewDidLoad];\n\n    \n\n    CZBottomView *btmView = [CZBottomViewbottomView];\n\n    btmView.delegate =self;\n\n    [self.bottomViewaddSubview:btmView];\n\n}\n\n\n\n/**\n\n *  CZBottomView的代理方法\n\n *  @param bottomButton 当前被点击的按钮\n\n *  @param index        被点击按钮的索引\n\n */\n\n\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index{\n\n   NSLog(@\"点击了第%d个按钮\",index);\n\n}\n```\n\n第二部分：\n\n1，CZBottomView的头文件：\n\n```\n#import <UIKit/UIKit.h>\n\n@class CZBottomButton,CZBottomView;\n\n@protocol CZBottomViewDelegate <NSObject>\n\n@optional\n\n//按钮的点击事件\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;\n\n@end\n\n@interface CZBottomView :UIView\n\n//代理\n\n@property(nonatomic,weak)id<CZBottomViewDelegate> delegate;\n\n\n\n//快速创建\n\n+(instancetype)bottomView;\n\n@end\n```\n\n2，CZBottomView的实现文件：\n\n```\n#import \"CZBottomView.h\"\n\n#import \"CZBottomButton.h\"\n\n\n\n//动画持续时间\n\n#define AniDuration 3.0\n\n@interface CZBottomView ()\n\n\n\n//最左边的菜单按钮\n\n@property (weak, nonatomic) IBOutletUIButton *menuBtn;\n\n//所有按钮的集合\n\n@property(nonatomic,strong)NSMutableArray *btns;\n\n\n\n//最左边菜单按钮的点击事件\n\n- (IBAction)menuBtnClick;\n\n\n\n@end\n\n\n\n@implementation CZBottomView\n\n\n\n-(NSMutableArray *)btns{\n\n   if(!_btns){\n\n       _btns = [NSMutableArrayarray];\n\n    }\n\n   return _btns;\n\n}\n\n/**\n\n *  快速创建\n\n */\n\n+(instancetype)bottomView{\n\n   return [[[NSBundlemainBundle] loadNibNamed:@\"CZBottomView\"owner:niloptions:nil]lastObject];\n\n    \n\n}\n\n\n\n- (id)initWithFrame:(CGRect)frame\n\n{\n\n   self = [superinitWithFrame:frame];\n\n   if (self) {\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n\n\n-(id)initWithCoder:(NSCoder *)aDecoder{\n\n   if(self = [superinitWithCoder:aDecoder]){\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n/**\n\n *  初始化数据\n\n */\n\n-(void)setUp{\n\n    //添加3个按钮\n\n    [selfaddBtnWithImgName:@\"menu_btn_call\"andTag:0];\n\n    [selfaddBtnWithImgName:@\"menu_btn_cheyou\"andTag:1];\n\n    [selfaddBtnWithImgName:@\"menu_btn_tixing\"andTag:2];\n\n}\n\n/**\n\n *  添加按钮\n\n *\n\n *  @param imgName 按钮图片的名称\n\n *  @param tag     tag\n\n */\n\n-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag{\n\n    //初始化按钮\n\n    CZBottomButton *btn = [CZBottomButtonbuttonWithType:UIButtonTypeCustom];\n\n    \n\n    //设置按钮的图片\n\n    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];\n\n    btn.tag = tag;\n\n    btn.bounds =CGRectMake(0,0, 44, 44);\n\n    \n\n    //添加监听\n\n    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];\n\n    [selfaddSubview:btn];\n\n    [self.btnsaddObject:btn];\n\n}\n\n/**\n\n *  按钮的点击事件\n\n */\n\n-(void)btnClick:(CZBottomButton *)btn{\n\n    //先判断代理是否实现了此方法\n\n   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)]){\n\n        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];\n\n    }\n\n}\n\n\n\n-(void)layoutSubviews{\n\n    [superlayoutSubviews];\n\n    //设置按钮的frame\n\n    for (CZBottomButton *btnin self.btns) {\n\n        //如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置\n\n       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero)){\n\n            btn.center = btn.currentPoint;\n\n        }else{\n\n            btn.center =self.menuBtn.center;\n\n        }\n\n        \n\n    }\n\n    //将菜单按钮放到最上边\n\n    [selfbringSubviewToFront:self.menuBtn];\n\n}\n\n\n\n\n\n- (IBAction)menuBtnClick {\n\n    \n\n    //主菜单按钮也要旋转\n\n    BOOL isOpen =CGAffineTransformIsIdentity(self.menuBtn.transform);\n\n    [UIViewanimateWithDuration:AniDurationanimations:^{\n\n       if(isOpen){\n\n           //打开\n\n            self.menuBtn.transform = CGAffineTransformMakeRotation(M_PI_4);\n\n        }else{\n\n           //关闭\n\n            self.menuBtn.transform =CGAffineTransformIdentity;\n\n        }\n\n    }];\n\n\n\n    [selfopenBtn:isOpen];\n\n}\n\n/**\n\n *  是否打开按钮\n\n */\n\n-(void)openBtn:(BOOL)isOpen{\n\n    //按钮间隔的位置\n\n   CGFloat padding = 80;\n\n    \n\n    //菜单按钮的位置\n\n   CGPoint menuCenter = self.menuBtn.center;\n\n    //平移，旋转\n\n   for (int i=0; i<self.btns.count; i++) {\n\n       CZBottomButton *btn = self.btns[i];\n\n        \n\n        //x轴需要移动的距离\n\n       CGFloat move = (i+1) * padding;\n\n        \n\n       //按钮中心点\n\n       CGPoint btnCenter = btn.center;\n\n        btnCenter.x += move;\n\n        \n\n       //平移动画\n\n        CAKeyframeAnimation *keyTranslationAni = [CAKeyframeAnimationanimation];\n\n        keyTranslationAni.keyPath =@\"position\";\n\n        \n\n       //最开始的位置\n\n       NSValue *value1 = [NSValuevalueWithCGPoint:self.menuBtn.center];\n\n        \n\n        //第一阶段末尾位置\n\n       NSValue *value2 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];\n\n        \n\n        //第二阶段末尾位置\n\n       NSValue *value3 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];\n\n        \n\n        //第三阶段末尾位置\n\n       NSValue *value4 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];\n\n        \n\n        //如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1\n\n       if(isOpen){\n\n            keyTranslationAni.values =@[value1,value2,value3,value4];\n\n        }else{\n\n            keyTranslationAni.values =@[value4,value3,value2,value1];\n\n        }\n\n        \n\n        \n\n       //旋转动画\n\n        CAKeyframeAnimation *rotationAni = [CAKeyframeAnimationanimation];\n\n        rotationAni.keyPath =@\"transform.rotation\";\n\n        \n\n        //如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI\n\n       if(isOpen){\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];\n\n        }else{\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];\n\n        }\n\n        \n\n       //组动画\n\n        CAAnimationGroup *group = [CAAnimationGroupanimation];\n\n        \n\n       //动画持续时间\n\n        group.duration =AniDuration;\n\n        group.animations =@[keyTranslationAni,rotationAni];\n\n        \n\n        //动画结束之后，不要回到原先的位置\n\n        group.removedOnCompletion =NO;\n\n        group.fillMode =kCAFillModeForwards;\n\n        [btn.layeraddAnimation:group forKey:nil];\n\n        \n\n        //设置按钮的当前位置\n\n       if(isOpen){\n\n            btn.currentPoint = btnCenter;\n\n        }else{\n\n            btn.currentPoint =self.menuBtn.center;\n\n        }\n\n                \n\n    }\n\n}\n\n@end\n```\n\n第三部分：\n\n1，CZBottomButton的头文件\n\n\n```\n#import <UIKit/UIKit.h>\n\n@interface CZBottomButton :UIButton\n\n@property(nonatomic,assign)CGPoint currentPoint;\n\n@end\n\n```\n\n2，CZBottomButton的实现文件\n\n```\n#import \"CZBottomButton.h\"\n@implementation CZBottomButton\n@end\n```\n","source":"_posts/oc/Ani/oc-Ani-rotatingMenu.md","raw":"---\ntitle: IOS旋转菜单\ndate: 2020-04-03 17:27:18\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n我们先看一下，最终要实现的情况：如图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg)\n\n再看一下，项目代码的结构图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg)\n\n实现思路：\n\n- 1，自定义view类和xib文件，将view类和xib文件关联上。\n\n- 2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。\n\n- 3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。\n\n- 4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)\n\n- 5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。\n\n- 6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。\n\n- 7，点击按钮的时候，通知代理，按钮被人点击了。\n\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg)\n\n\n第一部分：视图控制器的代码：\n\n```\n#import \"CZViewController.h\"\n\n#import \"CZBottomView.h\"\n\n@interface CZViewController () <CZBottomViewDelegate>\n\n@property (weak, nonatomic) IBOutletUIView *bottomView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad\n\n{\n\n    [superviewDidLoad];\n\n    \n\n    CZBottomView *btmView = [CZBottomViewbottomView];\n\n    btmView.delegate =self;\n\n    [self.bottomViewaddSubview:btmView];\n\n}\n\n\n\n/**\n\n *  CZBottomView的代理方法\n\n *  @param bottomButton 当前被点击的按钮\n\n *  @param index        被点击按钮的索引\n\n */\n\n\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index{\n\n   NSLog(@\"点击了第%d个按钮\",index);\n\n}\n```\n\n第二部分：\n\n1，CZBottomView的头文件：\n\n```\n#import <UIKit/UIKit.h>\n\n@class CZBottomButton,CZBottomView;\n\n@protocol CZBottomViewDelegate <NSObject>\n\n@optional\n\n//按钮的点击事件\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;\n\n@end\n\n@interface CZBottomView :UIView\n\n//代理\n\n@property(nonatomic,weak)id<CZBottomViewDelegate> delegate;\n\n\n\n//快速创建\n\n+(instancetype)bottomView;\n\n@end\n```\n\n2，CZBottomView的实现文件：\n\n```\n#import \"CZBottomView.h\"\n\n#import \"CZBottomButton.h\"\n\n\n\n//动画持续时间\n\n#define AniDuration 3.0\n\n@interface CZBottomView ()\n\n\n\n//最左边的菜单按钮\n\n@property (weak, nonatomic) IBOutletUIButton *menuBtn;\n\n//所有按钮的集合\n\n@property(nonatomic,strong)NSMutableArray *btns;\n\n\n\n//最左边菜单按钮的点击事件\n\n- (IBAction)menuBtnClick;\n\n\n\n@end\n\n\n\n@implementation CZBottomView\n\n\n\n-(NSMutableArray *)btns{\n\n   if(!_btns){\n\n       _btns = [NSMutableArrayarray];\n\n    }\n\n   return _btns;\n\n}\n\n/**\n\n *  快速创建\n\n */\n\n+(instancetype)bottomView{\n\n   return [[[NSBundlemainBundle] loadNibNamed:@\"CZBottomView\"owner:niloptions:nil]lastObject];\n\n    \n\n}\n\n\n\n- (id)initWithFrame:(CGRect)frame\n\n{\n\n   self = [superinitWithFrame:frame];\n\n   if (self) {\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n\n\n-(id)initWithCoder:(NSCoder *)aDecoder{\n\n   if(self = [superinitWithCoder:aDecoder]){\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n/**\n\n *  初始化数据\n\n */\n\n-(void)setUp{\n\n    //添加3个按钮\n\n    [selfaddBtnWithImgName:@\"menu_btn_call\"andTag:0];\n\n    [selfaddBtnWithImgName:@\"menu_btn_cheyou\"andTag:1];\n\n    [selfaddBtnWithImgName:@\"menu_btn_tixing\"andTag:2];\n\n}\n\n/**\n\n *  添加按钮\n\n *\n\n *  @param imgName 按钮图片的名称\n\n *  @param tag     tag\n\n */\n\n-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag{\n\n    //初始化按钮\n\n    CZBottomButton *btn = [CZBottomButtonbuttonWithType:UIButtonTypeCustom];\n\n    \n\n    //设置按钮的图片\n\n    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];\n\n    btn.tag = tag;\n\n    btn.bounds =CGRectMake(0,0, 44, 44);\n\n    \n\n    //添加监听\n\n    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];\n\n    [selfaddSubview:btn];\n\n    [self.btnsaddObject:btn];\n\n}\n\n/**\n\n *  按钮的点击事件\n\n */\n\n-(void)btnClick:(CZBottomButton *)btn{\n\n    //先判断代理是否实现了此方法\n\n   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)]){\n\n        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];\n\n    }\n\n}\n\n\n\n-(void)layoutSubviews{\n\n    [superlayoutSubviews];\n\n    //设置按钮的frame\n\n    for (CZBottomButton *btnin self.btns) {\n\n        //如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置\n\n       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero)){\n\n            btn.center = btn.currentPoint;\n\n        }else{\n\n            btn.center =self.menuBtn.center;\n\n        }\n\n        \n\n    }\n\n    //将菜单按钮放到最上边\n\n    [selfbringSubviewToFront:self.menuBtn];\n\n}\n\n\n\n\n\n- (IBAction)menuBtnClick {\n\n    \n\n    //主菜单按钮也要旋转\n\n    BOOL isOpen =CGAffineTransformIsIdentity(self.menuBtn.transform);\n\n    [UIViewanimateWithDuration:AniDurationanimations:^{\n\n       if(isOpen){\n\n           //打开\n\n            self.menuBtn.transform = CGAffineTransformMakeRotation(M_PI_4);\n\n        }else{\n\n           //关闭\n\n            self.menuBtn.transform =CGAffineTransformIdentity;\n\n        }\n\n    }];\n\n\n\n    [selfopenBtn:isOpen];\n\n}\n\n/**\n\n *  是否打开按钮\n\n */\n\n-(void)openBtn:(BOOL)isOpen{\n\n    //按钮间隔的位置\n\n   CGFloat padding = 80;\n\n    \n\n    //菜单按钮的位置\n\n   CGPoint menuCenter = self.menuBtn.center;\n\n    //平移，旋转\n\n   for (int i=0; i<self.btns.count; i++) {\n\n       CZBottomButton *btn = self.btns[i];\n\n        \n\n        //x轴需要移动的距离\n\n       CGFloat move = (i+1) * padding;\n\n        \n\n       //按钮中心点\n\n       CGPoint btnCenter = btn.center;\n\n        btnCenter.x += move;\n\n        \n\n       //平移动画\n\n        CAKeyframeAnimation *keyTranslationAni = [CAKeyframeAnimationanimation];\n\n        keyTranslationAni.keyPath =@\"position\";\n\n        \n\n       //最开始的位置\n\n       NSValue *value1 = [NSValuevalueWithCGPoint:self.menuBtn.center];\n\n        \n\n        //第一阶段末尾位置\n\n       NSValue *value2 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];\n\n        \n\n        //第二阶段末尾位置\n\n       NSValue *value3 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];\n\n        \n\n        //第三阶段末尾位置\n\n       NSValue *value4 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];\n\n        \n\n        //如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1\n\n       if(isOpen){\n\n            keyTranslationAni.values =@[value1,value2,value3,value4];\n\n        }else{\n\n            keyTranslationAni.values =@[value4,value3,value2,value1];\n\n        }\n\n        \n\n        \n\n       //旋转动画\n\n        CAKeyframeAnimation *rotationAni = [CAKeyframeAnimationanimation];\n\n        rotationAni.keyPath =@\"transform.rotation\";\n\n        \n\n        //如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI\n\n       if(isOpen){\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];\n\n        }else{\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];\n\n        }\n\n        \n\n       //组动画\n\n        CAAnimationGroup *group = [CAAnimationGroupanimation];\n\n        \n\n       //动画持续时间\n\n        group.duration =AniDuration;\n\n        group.animations =@[keyTranslationAni,rotationAni];\n\n        \n\n        //动画结束之后，不要回到原先的位置\n\n        group.removedOnCompletion =NO;\n\n        group.fillMode =kCAFillModeForwards;\n\n        [btn.layeraddAnimation:group forKey:nil];\n\n        \n\n        //设置按钮的当前位置\n\n       if(isOpen){\n\n            btn.currentPoint = btnCenter;\n\n        }else{\n\n            btn.currentPoint =self.menuBtn.center;\n\n        }\n\n                \n\n    }\n\n}\n\n@end\n```\n\n第三部分：\n\n1，CZBottomButton的头文件\n\n\n```\n#import <UIKit/UIKit.h>\n\n@interface CZBottomButton :UIButton\n\n@property(nonatomic,assign)CGPoint currentPoint;\n\n@end\n\n```\n\n2，CZBottomButton的实现文件\n\n```\n#import \"CZBottomButton.h\"\n@implementation CZBottomButton\n@end\n```\n","slug":"oc/Ani/oc-Ani-rotatingMenu","published":1,"updated":"2020-09-01T12:57:15.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602l0046l4s6hvz43p3c","content":"<p>我们先看一下，最终要实现的情况：如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg\" alt></p>\n<p>再看一下，项目代码的结构图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg\" alt></p>\n<p>实现思路：</p>\n<ul>\n<li><p>1，自定义view类和xib文件，将view类和xib文件关联上。</p>\n</li>\n<li><p>2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。</p>\n</li>\n<li><p>3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。</p>\n</li>\n<li><p>4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)</p>\n</li>\n<li><p>5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。</p>\n</li>\n<li><p>6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。</p>\n</li>\n<li><p>7，点击按钮的时候，通知代理，按钮被人点击了。</p>\n</li>\n</ul>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg\" alt></p>\n<p>第一部分：视图控制器的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController () &lt;CZBottomViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIView *bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superviewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomView *btmView &#x3D; [CZBottomViewbottomView];</span><br><span class=\"line\"></span><br><span class=\"line\">    btmView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.bottomViewaddSubview:btmView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  CZBottomView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param bottomButton 当前被点击的按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param index        被点击按钮的索引</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   NSLog(@&quot;点击了第%d个按钮&quot;,index);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：</p>\n<p>1，CZBottomView的头文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class CZBottomButton,CZBottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol CZBottomViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView :UIView</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak)id&lt;CZBottomViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;快速创建</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomView的实现文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">#define AniDuration 3.0</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView ()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边的菜单按钮</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIButton *menuBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;所有按钮的集合</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong)NSMutableArray *btns;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边菜单按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZBottomView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)btns&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(!_btns)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       _btns &#x3D; [NSMutableArrayarray];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   return _btns;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  快速创建</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return [[[NSBundlemainBundle] loadNibNamed:@&quot;CZBottomView&quot;owner:niloptions:nil]lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   self &#x3D; [superinitWithFrame:frame];</span><br><span class=\"line\"></span><br><span class=\"line\">   if (self) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithCoder:(NSCoder *)aDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(self &#x3D; [superinitWithCoder:aDecoder])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setUp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加3个按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_call&quot;andTag:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_cheyou&quot;andTag:1];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_tixing&quot;andTag:2];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  添加按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param imgName 按钮图片的名称</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param tag     tag</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomButton *btn &#x3D; [CZBottomButtonbuttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的图片</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.tag &#x3D; tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.bounds &#x3D;CGRectMake(0,0, 44, 44);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加监听</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddSubview:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.btnsaddObject:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)btnClick:(CZBottomButton *)btn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;先判断代理是否实现了此方法</span><br><span class=\"line\"></span><br><span class=\"line\">   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)layoutSubviews&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superlayoutSubviews];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的frame</span><br><span class=\"line\"></span><br><span class=\"line\">    for (CZBottomButton *btnin self.btns) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D; btn.currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;将菜单按钮放到最上边</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfbringSubviewToFront:self.menuBtn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;主菜单按钮也要旋转</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL isOpen &#x3D;CGAffineTransformIsIdentity(self.menuBtn.transform);</span><br><span class=\"line\"></span><br><span class=\"line\">    [UIViewanimateWithDuration:AniDurationanimations:^&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;打开</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D; CGAffineTransformMakeRotation(M_PI_4);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;关闭</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D;CGAffineTransformIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [selfopenBtn:isOpen];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  是否打开按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)openBtn:(BOOL)isOpen&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;按钮间隔的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGFloat padding &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGPoint menuCenter &#x3D; self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;平移，旋转</span><br><span class=\"line\"></span><br><span class=\"line\">   for (int i&#x3D;0; i&lt;self.btns.count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       CZBottomButton *btn &#x3D; self.btns[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;x轴需要移动的距离</span><br><span class=\"line\"></span><br><span class=\"line\">       CGFloat move &#x3D; (i+1) * padding;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;按钮中心点</span><br><span class=\"line\"></span><br><span class=\"line\">       CGPoint btnCenter &#x3D; btn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        btnCenter.x +&#x3D; move;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;平移动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *keyTranslationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        keyTranslationAni.keyPath &#x3D;@&quot;position&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;最开始的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value1 &#x3D; [NSValuevalueWithCGPoint:self.menuBtn.center];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第一阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value2 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第二阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value3 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第三阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value4 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value1,value2,value3,value4];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value4,value3,value2,value1];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;旋转动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *rotationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        rotationAni.keyPath &#x3D;@&quot;transform.rotation&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;组动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAAnimationGroup *group &#x3D; [CAAnimationGroupanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">        group.duration &#x3D;AniDuration;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.animations &#x3D;@[keyTranslationAni,rotationAni];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;动画结束之后，不要回到原先的位置</span><br><span class=\"line\"></span><br><span class=\"line\">        group.removedOnCompletion &#x3D;NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.fillMode &#x3D;kCAFillModeForwards;</span><br><span class=\"line\"></span><br><span class=\"line\">        [btn.layeraddAnimation:group forKey:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;设置按钮的当前位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D; btnCenter;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>第三部分：</p>\n<p>1，CZBottomButton的头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomButton :UIButton</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign)CGPoint currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomButton的实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\">@implementation CZBottomButton</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我们先看一下，最终要实现的情况：如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg\" alt></p>\n<p>再看一下，项目代码的结构图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg\" alt></p>\n<p>实现思路：</p>\n<ul>\n<li><p>1，自定义view类和xib文件，将view类和xib文件关联上。</p>\n</li>\n<li><p>2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。</p>\n</li>\n<li><p>3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。</p>\n</li>\n<li><p>4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)</p>\n</li>\n<li><p>5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。</p>\n</li>\n<li><p>6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。</p>\n</li>\n<li><p>7，点击按钮的时候，通知代理，按钮被人点击了。</p>\n</li>\n</ul>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg\" alt></p>\n<p>第一部分：视图控制器的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController () &lt;CZBottomViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIView *bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superviewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomView *btmView &#x3D; [CZBottomViewbottomView];</span><br><span class=\"line\"></span><br><span class=\"line\">    btmView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.bottomViewaddSubview:btmView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  CZBottomView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param bottomButton 当前被点击的按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param index        被点击按钮的索引</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   NSLog(@&quot;点击了第%d个按钮&quot;,index);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：</p>\n<p>1，CZBottomView的头文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class CZBottomButton,CZBottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol CZBottomViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView :UIView</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak)id&lt;CZBottomViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;快速创建</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomView的实现文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">#define AniDuration 3.0</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView ()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边的菜单按钮</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIButton *menuBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;所有按钮的集合</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong)NSMutableArray *btns;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边菜单按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZBottomView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)btns&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(!_btns)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       _btns &#x3D; [NSMutableArrayarray];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   return _btns;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  快速创建</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return [[[NSBundlemainBundle] loadNibNamed:@&quot;CZBottomView&quot;owner:niloptions:nil]lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   self &#x3D; [superinitWithFrame:frame];</span><br><span class=\"line\"></span><br><span class=\"line\">   if (self) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithCoder:(NSCoder *)aDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(self &#x3D; [superinitWithCoder:aDecoder])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setUp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加3个按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_call&quot;andTag:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_cheyou&quot;andTag:1];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_tixing&quot;andTag:2];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  添加按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param imgName 按钮图片的名称</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param tag     tag</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomButton *btn &#x3D; [CZBottomButtonbuttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的图片</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.tag &#x3D; tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.bounds &#x3D;CGRectMake(0,0, 44, 44);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加监听</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddSubview:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.btnsaddObject:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)btnClick:(CZBottomButton *)btn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;先判断代理是否实现了此方法</span><br><span class=\"line\"></span><br><span class=\"line\">   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)layoutSubviews&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superlayoutSubviews];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的frame</span><br><span class=\"line\"></span><br><span class=\"line\">    for (CZBottomButton *btnin self.btns) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D; btn.currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;将菜单按钮放到最上边</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfbringSubviewToFront:self.menuBtn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;主菜单按钮也要旋转</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL isOpen &#x3D;CGAffineTransformIsIdentity(self.menuBtn.transform);</span><br><span class=\"line\"></span><br><span class=\"line\">    [UIViewanimateWithDuration:AniDurationanimations:^&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;打开</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D; CGAffineTransformMakeRotation(M_PI_4);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;关闭</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D;CGAffineTransformIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [selfopenBtn:isOpen];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  是否打开按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)openBtn:(BOOL)isOpen&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;按钮间隔的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGFloat padding &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGPoint menuCenter &#x3D; self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;平移，旋转</span><br><span class=\"line\"></span><br><span class=\"line\">   for (int i&#x3D;0; i&lt;self.btns.count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       CZBottomButton *btn &#x3D; self.btns[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;x轴需要移动的距离</span><br><span class=\"line\"></span><br><span class=\"line\">       CGFloat move &#x3D; (i+1) * padding;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;按钮中心点</span><br><span class=\"line\"></span><br><span class=\"line\">       CGPoint btnCenter &#x3D; btn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        btnCenter.x +&#x3D; move;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;平移动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *keyTranslationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        keyTranslationAni.keyPath &#x3D;@&quot;position&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;最开始的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value1 &#x3D; [NSValuevalueWithCGPoint:self.menuBtn.center];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第一阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value2 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第二阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value3 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第三阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value4 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value1,value2,value3,value4];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value4,value3,value2,value1];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;旋转动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *rotationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        rotationAni.keyPath &#x3D;@&quot;transform.rotation&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;组动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAAnimationGroup *group &#x3D; [CAAnimationGroupanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">        group.duration &#x3D;AniDuration;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.animations &#x3D;@[keyTranslationAni,rotationAni];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;动画结束之后，不要回到原先的位置</span><br><span class=\"line\"></span><br><span class=\"line\">        group.removedOnCompletion &#x3D;NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.fillMode &#x3D;kCAFillModeForwards;</span><br><span class=\"line\"></span><br><span class=\"line\">        [btn.layeraddAnimation:group forKey:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;设置按钮的当前位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D; btnCenter;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>第三部分：</p>\n<p>1，CZBottomButton的头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomButton :UIButton</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign)CGPoint currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomButton的实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\">@implementation CZBottomButton</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n"},{"title":"IOS指纹登录","date":"2020-04-07T08:22:33.000Z","_content":"\n\n## 一、简介\nTouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.\n\n指纹登录，可以分解为两个流程：\n\n1. 用户名密码登录成功之后，开启指纹登录。\n2. 指纹登录开启后，下次使用指纹登录。\n\n## 二、登录流程介绍\n\n### 1. 开启指纹登录\n流程图：\n\n![](oc-Login-TouchID/startFingerPrint.png)\n\n主要流程说明如下：\n\n1. 用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color = red> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font>\n2. 用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。\n3. 弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。\n4. **本地生成**当前登录账户对应的“**账户指纹标识**”，记作 `ProfileTouchID`。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的`profileID+IDFA` ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。\n5. 绑定：绑定就是将当前用户的`profileID` 和上面第四步生产的`ProfileTouchID` 发送到后端，后端保存对应关系，完成绑定。\n6. 绑定成功后，用户本机存储`ProfileTouchID`，为将来指纹登录做准备。\n\n### 2. 后端数据结构\n随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID---profileID可以对应多个“账户指纹标识”--`ProfileTouchID` ，故而，将后端的数据结构定义如下：\n\n![](oc-Login-TouchID/dataStuct.png)\n\n### 3. 指纹登录流程\n如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：\n\n![](oc-Login-TouchID/fingerLogin.png)\n\n1. 用户选择指纹登录，<font color = red>这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font>\n2. 验证指纹，即，证明使用者是你本人，假如验证成功。\n3. 取出本地存储的“账户指纹标识”--`ProfileTouchID`。<font color = red>解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font>\n4. 将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录\n\n### 4. 安全性\n对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：\n\n1. 指纹验证的安全性，这是系统层面的问题，无法介入。\n2. 本地存储 “账户指纹标识”（`ProfileTouchID` ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。\n3. 生成“账户指纹标识”（`ProfileTouchID` 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。\n4. 绑定步骤、登录步骤中， 将“账户指纹标识”（`ProfileTouchID` ）发送到后端过程中也存在安全性。加密传输即可。\n\n## 三、登录代码\n\n#### 1. 添加头文件\n```\n#import <LocalAuthentication/LocalAuthentication.h>\n```\n\n#### 2. 指纹验证\n\n```\n- (IBAction)btnClick:(id)sender {\n    //首先判断版本\n    if(NSFoundationVersionNumber < NSFoundationVersionNumber_iOS_8_0){\n        NSLog(@\"系统版本不支持TouchID\");\n        return;\n    }\n    \n    LAContext *context = [[LAContext alloc] init];\n    context.localizedFallbackTitle = @\"输入密码\";\n    \n    NSError *error = nil;\n    \n    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&error]){\n        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@\"通过Home键验证已有手机指纹\" reply:^(BOOL success, NSError * _Nullable error) {\n            if(success){\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    NSLog(@\"TouchID 验证成功\");\n                });\n            }else if(error){\n                switch (error.code) {\n                    case LAErrorAuthenticationFailed:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 验证失败\");\n                        });\n                        break;\n                    case LAErrorUserCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"TouchID 被用户手动取消\");\n                        });\n                        break;\n                    case LAErrorUserFallback:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"用户不使用TouchID,选择手动输入密码\");\n                        });\n                        break;\n                    case LAErrorSystemCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)\");\n                        });\n                        break;\n                    case LAErrorPasscodeNotSet:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置密码\");\n                        });\n                        break;\n                    case LAErrorTouchIDNotEnrolled:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置TouchID\");\n                        });\n                        break;\n                    case LAErrorTouchIDLockout:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)\");\n                        });\n                        break;\n                    case LAErrorAppCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"当前软件被挂起并取消了授权 (如App进入了后台等)\");\n                        });\n                        break;\n                    case LAErrorInvalidContext:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"当前软件被挂起并取消了授权 (LAContext对象无效)\");\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }];\n    }else{\n        NSLog(@\"当前设备不支持TouchID\");\n    }\n}\n```\n\n#### 3. 鉴定方式\n在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值\n\n>  LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。\n\n>  LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。\n\n\n\n\n","source":"_posts/oc/Login/oc-Login-TouchID.md","raw":"---\ntitle: IOS指纹登录\ndate: 2020-04-07 16:22:33\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n\n## 一、简介\nTouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.\n\n指纹登录，可以分解为两个流程：\n\n1. 用户名密码登录成功之后，开启指纹登录。\n2. 指纹登录开启后，下次使用指纹登录。\n\n## 二、登录流程介绍\n\n### 1. 开启指纹登录\n流程图：\n\n![](oc-Login-TouchID/startFingerPrint.png)\n\n主要流程说明如下：\n\n1. 用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color = red> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font>\n2. 用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。\n3. 弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。\n4. **本地生成**当前登录账户对应的“**账户指纹标识**”，记作 `ProfileTouchID`。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的`profileID+IDFA` ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。\n5. 绑定：绑定就是将当前用户的`profileID` 和上面第四步生产的`ProfileTouchID` 发送到后端，后端保存对应关系，完成绑定。\n6. 绑定成功后，用户本机存储`ProfileTouchID`，为将来指纹登录做准备。\n\n### 2. 后端数据结构\n随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID---profileID可以对应多个“账户指纹标识”--`ProfileTouchID` ，故而，将后端的数据结构定义如下：\n\n![](oc-Login-TouchID/dataStuct.png)\n\n### 3. 指纹登录流程\n如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：\n\n![](oc-Login-TouchID/fingerLogin.png)\n\n1. 用户选择指纹登录，<font color = red>这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font>\n2. 验证指纹，即，证明使用者是你本人，假如验证成功。\n3. 取出本地存储的“账户指纹标识”--`ProfileTouchID`。<font color = red>解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font>\n4. 将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录\n\n### 4. 安全性\n对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：\n\n1. 指纹验证的安全性，这是系统层面的问题，无法介入。\n2. 本地存储 “账户指纹标识”（`ProfileTouchID` ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。\n3. 生成“账户指纹标识”（`ProfileTouchID` 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。\n4. 绑定步骤、登录步骤中， 将“账户指纹标识”（`ProfileTouchID` ）发送到后端过程中也存在安全性。加密传输即可。\n\n## 三、登录代码\n\n#### 1. 添加头文件\n```\n#import <LocalAuthentication/LocalAuthentication.h>\n```\n\n#### 2. 指纹验证\n\n```\n- (IBAction)btnClick:(id)sender {\n    //首先判断版本\n    if(NSFoundationVersionNumber < NSFoundationVersionNumber_iOS_8_0){\n        NSLog(@\"系统版本不支持TouchID\");\n        return;\n    }\n    \n    LAContext *context = [[LAContext alloc] init];\n    context.localizedFallbackTitle = @\"输入密码\";\n    \n    NSError *error = nil;\n    \n    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&error]){\n        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@\"通过Home键验证已有手机指纹\" reply:^(BOOL success, NSError * _Nullable error) {\n            if(success){\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    NSLog(@\"TouchID 验证成功\");\n                });\n            }else if(error){\n                switch (error.code) {\n                    case LAErrorAuthenticationFailed:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 验证失败\");\n                        });\n                        break;\n                    case LAErrorUserCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"TouchID 被用户手动取消\");\n                        });\n                        break;\n                    case LAErrorUserFallback:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"用户不使用TouchID,选择手动输入密码\");\n                        });\n                        break;\n                    case LAErrorSystemCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)\");\n                        });\n                        break;\n                    case LAErrorPasscodeNotSet:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置密码\");\n                        });\n                        break;\n                    case LAErrorTouchIDNotEnrolled:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置TouchID\");\n                        });\n                        break;\n                    case LAErrorTouchIDLockout:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)\");\n                        });\n                        break;\n                    case LAErrorAppCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"当前软件被挂起并取消了授权 (如App进入了后台等)\");\n                        });\n                        break;\n                    case LAErrorInvalidContext:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"当前软件被挂起并取消了授权 (LAContext对象无效)\");\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }];\n    }else{\n        NSLog(@\"当前设备不支持TouchID\");\n    }\n}\n```\n\n#### 3. 鉴定方式\n在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值\n\n>  LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。\n\n>  LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。\n\n\n\n\n","slug":"oc/Login/oc-Login-TouchID","published":1,"updated":"2020-09-01T12:48:55.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602l0048l4s6hfe67s0k","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>TouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.</p>\n<p>指纹登录，可以分解为两个流程：</p>\n<ol>\n<li>用户名密码登录成功之后，开启指纹登录。</li>\n<li>指纹登录开启后，下次使用指纹登录。</li>\n</ol>\n<h2 id=\"二、登录流程介绍\"><a href=\"#二、登录流程介绍\" class=\"headerlink\" title=\"二、登录流程介绍\"></a>二、登录流程介绍</h2><h3 id=\"1-开启指纹登录\"><a href=\"#1-开启指纹登录\" class=\"headerlink\" title=\"1. 开启指纹登录\"></a>1. 开启指纹登录</h3><p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png\" alt></p>\n<p>主要流程说明如下：</p>\n<ol>\n<li>用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color=\"red\"> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font></li>\n<li>用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。</li>\n<li>弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。</li>\n<li><strong>本地生成</strong>当前登录账户对应的“<strong>账户指纹标识</strong>”，记作 <code>ProfileTouchID</code>。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的<code>profileID+IDFA</code> ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。</li>\n<li>绑定：绑定就是将当前用户的<code>profileID</code> 和上面第四步生产的<code>ProfileTouchID</code> 发送到后端，后端保存对应关系，完成绑定。</li>\n<li>绑定成功后，用户本机存储<code>ProfileTouchID</code>，为将来指纹登录做准备。</li>\n</ol>\n<h3 id=\"2-后端数据结构\"><a href=\"#2-后端数据结构\" class=\"headerlink\" title=\"2. 后端数据结构\"></a>2. 后端数据结构</h3><p>随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID—profileID可以对应多个“账户指纹标识”–<code>ProfileTouchID</code> ，故而，将后端的数据结构定义如下：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png\" alt></p>\n<h3 id=\"3-指纹登录流程\"><a href=\"#3-指纹登录流程\" class=\"headerlink\" title=\"3. 指纹登录流程\"></a>3. 指纹登录流程</h3><p>如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png\" alt></p>\n<ol>\n<li>用户选择指纹登录，<font color=\"red\">这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font></li>\n<li>验证指纹，即，证明使用者是你本人，假如验证成功。</li>\n<li>取出本地存储的“账户指纹标识”–<code>ProfileTouchID</code>。<font color=\"red\">解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font></li>\n<li>将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录</li>\n</ol>\n<h3 id=\"4-安全性\"><a href=\"#4-安全性\" class=\"headerlink\" title=\"4. 安全性\"></a>4. 安全性</h3><p>对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：</p>\n<ol>\n<li>指纹验证的安全性，这是系统层面的问题，无法介入。</li>\n<li>本地存储 “账户指纹标识”（<code>ProfileTouchID</code> ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。</li>\n<li>生成“账户指纹标识”（<code>ProfileTouchID</code> 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。</li>\n<li>绑定步骤、登录步骤中， 将“账户指纹标识”（<code>ProfileTouchID</code> ）发送到后端过程中也存在安全性。加密传输即可。</li>\n</ol>\n<h2 id=\"三、登录代码\"><a href=\"#三、登录代码\" class=\"headerlink\" title=\"三、登录代码\"></a>三、登录代码</h2><h4 id=\"1-添加头文件\"><a href=\"#1-添加头文件\" class=\"headerlink\" title=\"1. 添加头文件\"></a>1. 添加头文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;LocalAuthentication&#x2F;LocalAuthentication.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-指纹验证\"><a href=\"#2-指纹验证\" class=\"headerlink\" title=\"2. 指纹验证\"></a>2. 指纹验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)btnClick:(id)sender &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;首先判断版本</span><br><span class=\"line\">    if(NSFoundationVersionNumber &lt; NSFoundationVersionNumber_iOS_8_0)&#123;</span><br><span class=\"line\">        NSLog(@&quot;系统版本不支持TouchID&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LAContext *context &#x3D; [[LAContext alloc] init];</span><br><span class=\"line\">    context.localizedFallbackTitle &#x3D; @&quot;输入密码&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSError *error &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error])&#123;</span><br><span class=\"line\">        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@&quot;通过Home键验证已有手机指纹&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class=\"line\">            if(success)&#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                    NSLog(@&quot;TouchID 验证成功&quot;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;else if(error)&#123;</span><br><span class=\"line\">                switch (error.code) &#123;</span><br><span class=\"line\">                    case LAErrorAuthenticationFailed:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 验证失败&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;TouchID 被用户手动取消&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserFallback:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;用户不使用TouchID,选择手动输入密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorSystemCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorPasscodeNotSet:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDNotEnrolled:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置TouchID&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDLockout:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorAppCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;当前软件被挂起并取消了授权 (如App进入了后台等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorInvalidContext:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;当前软件被挂起并取消了授权 (LAContext对象无效)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        NSLog(@&quot;当前设备不支持TouchID&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-鉴定方式\"><a href=\"#3-鉴定方式\" class=\"headerlink\" title=\"3. 鉴定方式\"></a>3. 鉴定方式</h4><p>在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值</p>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>TouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.</p>\n<p>指纹登录，可以分解为两个流程：</p>\n<ol>\n<li>用户名密码登录成功之后，开启指纹登录。</li>\n<li>指纹登录开启后，下次使用指纹登录。</li>\n</ol>\n<h2 id=\"二、登录流程介绍\"><a href=\"#二、登录流程介绍\" class=\"headerlink\" title=\"二、登录流程介绍\"></a>二、登录流程介绍</h2><h3 id=\"1-开启指纹登录\"><a href=\"#1-开启指纹登录\" class=\"headerlink\" title=\"1. 开启指纹登录\"></a>1. 开启指纹登录</h3><p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png\" alt></p>\n<p>主要流程说明如下：</p>\n<ol>\n<li>用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color=\"red\"> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font></li>\n<li>用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。</li>\n<li>弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。</li>\n<li><strong>本地生成</strong>当前登录账户对应的“<strong>账户指纹标识</strong>”，记作 <code>ProfileTouchID</code>。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的<code>profileID+IDFA</code> ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。</li>\n<li>绑定：绑定就是将当前用户的<code>profileID</code> 和上面第四步生产的<code>ProfileTouchID</code> 发送到后端，后端保存对应关系，完成绑定。</li>\n<li>绑定成功后，用户本机存储<code>ProfileTouchID</code>，为将来指纹登录做准备。</li>\n</ol>\n<h3 id=\"2-后端数据结构\"><a href=\"#2-后端数据结构\" class=\"headerlink\" title=\"2. 后端数据结构\"></a>2. 后端数据结构</h3><p>随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID—profileID可以对应多个“账户指纹标识”–<code>ProfileTouchID</code> ，故而，将后端的数据结构定义如下：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png\" alt></p>\n<h3 id=\"3-指纹登录流程\"><a href=\"#3-指纹登录流程\" class=\"headerlink\" title=\"3. 指纹登录流程\"></a>3. 指纹登录流程</h3><p>如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png\" alt></p>\n<ol>\n<li>用户选择指纹登录，<font color=\"red\">这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font></li>\n<li>验证指纹，即，证明使用者是你本人，假如验证成功。</li>\n<li>取出本地存储的“账户指纹标识”–<code>ProfileTouchID</code>。<font color=\"red\">解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font></li>\n<li>将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录</li>\n</ol>\n<h3 id=\"4-安全性\"><a href=\"#4-安全性\" class=\"headerlink\" title=\"4. 安全性\"></a>4. 安全性</h3><p>对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：</p>\n<ol>\n<li>指纹验证的安全性，这是系统层面的问题，无法介入。</li>\n<li>本地存储 “账户指纹标识”（<code>ProfileTouchID</code> ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。</li>\n<li>生成“账户指纹标识”（<code>ProfileTouchID</code> 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。</li>\n<li>绑定步骤、登录步骤中， 将“账户指纹标识”（<code>ProfileTouchID</code> ）发送到后端过程中也存在安全性。加密传输即可。</li>\n</ol>\n<h2 id=\"三、登录代码\"><a href=\"#三、登录代码\" class=\"headerlink\" title=\"三、登录代码\"></a>三、登录代码</h2><h4 id=\"1-添加头文件\"><a href=\"#1-添加头文件\" class=\"headerlink\" title=\"1. 添加头文件\"></a>1. 添加头文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;LocalAuthentication&#x2F;LocalAuthentication.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-指纹验证\"><a href=\"#2-指纹验证\" class=\"headerlink\" title=\"2. 指纹验证\"></a>2. 指纹验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)btnClick:(id)sender &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;首先判断版本</span><br><span class=\"line\">    if(NSFoundationVersionNumber &lt; NSFoundationVersionNumber_iOS_8_0)&#123;</span><br><span class=\"line\">        NSLog(@&quot;系统版本不支持TouchID&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LAContext *context &#x3D; [[LAContext alloc] init];</span><br><span class=\"line\">    context.localizedFallbackTitle &#x3D; @&quot;输入密码&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSError *error &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error])&#123;</span><br><span class=\"line\">        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@&quot;通过Home键验证已有手机指纹&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class=\"line\">            if(success)&#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                    NSLog(@&quot;TouchID 验证成功&quot;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;else if(error)&#123;</span><br><span class=\"line\">                switch (error.code) &#123;</span><br><span class=\"line\">                    case LAErrorAuthenticationFailed:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 验证失败&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;TouchID 被用户手动取消&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserFallback:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;用户不使用TouchID,选择手动输入密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorSystemCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorPasscodeNotSet:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDNotEnrolled:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置TouchID&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDLockout:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorAppCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;当前软件被挂起并取消了授权 (如App进入了后台等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorInvalidContext:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;当前软件被挂起并取消了授权 (LAContext对象无效)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        NSLog(@&quot;当前设备不支持TouchID&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-鉴定方式\"><a href=\"#3-鉴定方式\" class=\"headerlink\" title=\"3. 鉴定方式\"></a>3. 鉴定方式</h4><p>在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值</p>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n"},{"title":"IOS扫码登录","date":"2020-04-08T10:07:19.000Z","_content":"\n很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：\n\n1. 浏览器输入网站地址，展示登录二维码信息等。\n2. 手机通过扫描二维码，确认登录。\n3. 网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。\n\n小编从网上找了一张图片(懒得画)，大致流程图：\n![](oc-Login-QRCode/ios_qrcode_login.jpeg)\n\n小编个人感觉：\n\n1. 第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？\n2. 第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。\n3. \n\n","source":"_posts/oc/Login/oc-Login-QRCode.md","raw":"---\ntitle: IOS扫码登录\ndate: 2020-04-08 18:07:19\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：\n\n1. 浏览器输入网站地址，展示登录二维码信息等。\n2. 手机通过扫描二维码，确认登录。\n3. 网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。\n\n小编从网上找了一张图片(懒得画)，大致流程图：\n![](oc-Login-QRCode/ios_qrcode_login.jpeg)\n\n小编个人感觉：\n\n1. 第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？\n2. 第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。\n3. \n\n","slug":"oc/Login/oc-Login-QRCode","published":1,"updated":"2020-09-01T12:48:52.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602m004cl4s67jfdhvh9","content":"<p>很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：</p>\n<ol>\n<li>浏览器输入网站地址，展示登录二维码信息等。</li>\n<li>手机通过扫描二维码，确认登录。</li>\n<li>网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。</li>\n</ol>\n<p>小编从网上找了一张图片(懒得画)，大致流程图：<br><img src=\"/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg\" alt></p>\n<p>小编个人感觉：</p>\n<ol>\n<li>第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？</li>\n<li>第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：</p>\n<ol>\n<li>浏览器输入网站地址，展示登录二维码信息等。</li>\n<li>手机通过扫描二维码，确认登录。</li>\n<li>网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。</li>\n</ol>\n<p>小编从网上找了一张图片(懒得画)，大致流程图：<br><img src=\"/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg\" alt></p>\n<p>小编个人感觉：</p>\n<ol>\n<li>第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？</li>\n<li>第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。</li>\n<li></li>\n</ol>\n"},{"title":"iphone屏幕尺寸，分辨率， PPI详细数据对比","date":"2020-04-24T07:56:37.000Z","_content":"\n![](oc-screenSize-detail/oc-screenSize-detail-1.png)\n","source":"_posts/oc/Screen/oc-screenSize-detail.md","raw":"---\ntitle: iphone屏幕尺寸，分辨率， PPI详细数据对比\ndate: 2020-04-24 15:56:37\ncategories:\n- OC\n- Screen\ntags: 屏幕\n---\n\n![](oc-screenSize-detail/oc-screenSize-detail-1.png)\n","slug":"oc/Screen/oc-screenSize-detail","published":1,"updated":"2020-09-01T12:57:55.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602n004fl4s66q2nfppl","content":"<p><img src=\"/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png\" alt></p>\n"},{"title":"使用代码创建UITableViewCell","date":"2020-04-03T06:49:35.000Z","_content":"\n先看一下，我们将要做出的效果：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg)\n\n\n如上图中，现在分析：\n\n- 1，这像是一个表格，而表格的每一个cell高度不定。\n- 2，头像不一样 \n- 3，昵称不一样，昵称的字数也不一样 \n- 4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) \n- 5，内容不一样，内容的高度不定 \n- 6，有的有配图，有的没有配图\n\n如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。\n\n先看一下我们的plist文件：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg)\n\n一：文件分类及作用：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg)\n\n - 1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 \n - 2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。\n - 3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。\n - 4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。\n\n二：各个文件的代码：\n\n1，ViewController.m文件中的代码：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJStatus.h\"\n#import \"MJStatusCell.h\"\n#import \"MJStatusFrame.h\"\n \n@interface MJViewController ()\n \n@property(nonatomic,strong)NSArray *statusFrames;\n \n@end\n \n@implementation MJViewController\n \n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n}\n/** 懒加载（只加载一次） */\n-(NSArray *)statusFrames{\n    \n    if(_statusFrames == nil){\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"statuses.plist\" ofType:nil];\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n        NSMutableArray *statusFrameArray = [NSMutableArray array];\n        for (NSDictionary *dict in dictArray) {\n            MJStatus *status = [MJStatus statusWithDict:dict];\n            MJStatusFrame *statusFrame = [[MJStatusFrame alloc] init];\n            statusFrame.status = status;\n            \n            [statusFrameArray addObject:statusFrame];\n        }\n        _statusFrames = statusFrameArray;\n    }\n    return _statusFrames;\n}\n#pragma mark - UITableView的数据源方法\n/** 返回本组数据有多少行 */\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.statusFrames.count;\n}\n#pragma mark 返回每一组的UITableViewcell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    // 1,创建cell\n    MJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n    \n    // 2,设置cell的数据和控件的frame\n    cell.statusFrame = self.statusFrames[indexPath.row];\n    \n    return cell;\n  \n}\n \n/** 每一行的高度 */\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    MJStatusFrame *statusFrame = self.statusFrames[indexPath.row];\n    \n    return statusFrame.cellHeight;\n    \n}\n \n@end\n\n```\n\n2，StatusCell.h中的代码：\n\n```\n#import <UIKit/UIKit.h>\n@class MJStatusFrame;\n@interface MJStatusCell : UITableViewCell\n@property(nonatomic,strong) MJStatusFrame *statusFrame;\n \n+(id)cellWithTableView:(UITableView *)tableView;\n \n@end\n\n\n```\n\nStatusCell.m中的代码：\n\n```\n#import \"MJStatusCell.h\"\n#import \"MJStatus.h\"\n#import \"MJStatusFrame.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n@interface MJStatusCell ()\n/** \n 头像 \n*/\n@property(nonatomic,weak) UIImageView *iconImgView;\n/** 昵称 */\n@property(nonatomic,weak) UILabel *nameLbl;\n/** 会员图标 */\n@property(nonatomic,weak) UIImageView *vipImgView;\n/** 正文 */\n@property(nonatomic,weak) UILabel *textLbl;\n/** 配图 */\n@property(nonatomic,weak) UIImageView *pictureImgView;\n \n@end\n \n \n@implementation MJStatusCell\n \n+(id)cellWithTableView:(UITableView *)tableView{\n    static NSString *flag = @\"status\";\n    \n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    \n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n    return cell;\n}\n \n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];\n    if (self) {\n        \n        //头像\n        UIImageView *iconImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:iconImgView];\n        self.iconImgView = iconImgView;\n        \n        //昵称\n        UILabel *nameLbl = [[UILabel alloc] init];\n        nameLbl.font = MJNameFont;\n        [self.contentView addSubview:nameLbl];\n        self.nameLbl = nameLbl;\n        \n        //会员头像\n        UIImageView *vipImgView = [[UIImageView alloc] init];\n        vipImgView.image = [UIImage imageNamed:@\"vip\"];\n        [self.contentView addSubview:vipImgView];\n        self.vipImgView = vipImgView;\n        \n        //正文\n        UILabel *textLbl = [[UILabel alloc] init];\n        textLbl.numberOfLines = 0;\n        textLbl.font = MJTextFont;\n        [self.contentView addSubview:textLbl];\n        self.textLbl = textLbl;\n        \n        //配图\n        UIImageView *pictureImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:pictureImgView];\n        self.pictureImgView = pictureImgView;\n        \n    }\n    return self;\n}\n \n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n    _statusFrame = statusFrame;\n    //1,设置数据\n    [self settingData];\n    //2，设置frame\n    [self settingFrame];\n}\n/**\n 设置数据\n */\n-(void)settingData{\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n    \n}\n/**\n 设置frame\n */\n-(void)settingFrame{\n    /** 头像 */\n    \n    self.iconImgView.frame = self.statusFrame.iconFrame;\n    \n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n  \n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n    \n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n    \n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n    }\n   \n    \n}\n \n@end\n\n```\n\n3, status.h中的代码：\n\n```\n#import <Foundation/Foundation.h>\n \n@interface MJStatus : NSObject\n/** 正文 */\n@property(nonatomic,copy) NSString *text;\n/** 头像 */\n@property(nonatomic,copy) NSString *icon;\n/** 昵称 */\n@property(nonatomic,copy) NSString *name;\n/** 配图 */\n@property(nonatomic,copy) NSString *picture;\n/** 会员 */\n@property(nonatomic,assign) BOOL vip;\n \n+(id)statusWithDict:(NSDictionary *)dict;\n-(id)initWithDict:(NSDictionary *)dict;\n \n@end\n\n```\n\nStatus.m中的代码：\n\n```\n#import \"MJStatus.h\"\n \n@implementation MJStatus\n \n+(id)statusWithDict:(NSDictionary *)dict{\n    return [[self alloc] initWithDict:dict];\n}\n-(id)initWithDict:(NSDictionary *)dict{\n    if(self = [super init]){\n        [self setValuesForKeysWithDictionary:dict];\n    }\n    return self;\n}\n \n@end\n\n```\n\n4，StatusFrame.h文件中的代码：\n\n```\n#import <Foundation/Foundation.h>\n@class MJStatus;\n \n@interface MJStatusFrame : NSObject\n \n@property(nonatomic,assign,readonly) CGRect iconFrame;\n@property(nonatomic,assign,readonly) CGRect nameFrame;\n@property(nonatomic,assign,readonly) CGRect vipFrame;\n@property(nonatomic,assign,readonly) CGRect textFrame;\n@property(nonatomic,assign,readonly) CGRect pictureFrame;\n \n@property(nonatomic,assign,readonly) CGFloat cellHeight;\n \n@property(nonatomic,strong) MJStatus *status;\n \n \n@end\n\n```\n\nStatusFrame.m中的代码：\n\n```\n\n#import \"MJStatusFrame.h\"\n#import \"MJStatus.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n \n@implementation MJStatusFrame\n \n-(void)setStatus:(MJStatus *)status{\n    _status = status;\n    CGFloat padding = 10;\n    \n    CGFloat iconX = padding;\n    CGFloat iconY = padding;\n    CGFloat iconW = 30;\n    CGFloat iconH = 30;\n    \n    _iconFrame = CGRectMake(iconX, iconY, iconW, iconH);\n    \n    /** 昵称 */\n    CGFloat nameX = CGRectGetMaxX(_iconFrame) + padding;\n    CGSize nameMaxSize = [self.status.name sizeWithFont:MJNameFont];\n    CGFloat nameW = nameMaxSize.width;\n    CGFloat nameH = nameMaxSize.height;\n    CGFloat nameY = padding + (iconH - nameH) * 0.5;\n    _nameFrame = CGRectMake(nameX, nameY, nameW, nameH);\n    \n    /** 会员头像 */\n    \n    CGFloat vipX = CGRectGetMaxX(_nameFrame) + padding;\n    CGFloat vipY = nameY;\n    CGFloat vipW = 14;\n    CGFloat vipH = 14;\n    \n    _vipFrame = CGRectMake(vipX, vipY, vipW, vipH);\n    \n    /** 正文 */\n    CGFloat textX = iconX;\n    CGFloat textY = CGRectGetMaxY(_iconFrame) + padding;\n    CGFloat textW = 300;\n    CGSize textMaxSize = [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];\n    CGFloat textH = textMaxSize.height;\n    _textFrame = CGRectMake(textX, textY, textW, textH);\n    \n    /** 配图 */\n    CGFloat pictureX = iconX;\n    CGFloat pictureY = CGRectGetMaxY(_textFrame) + padding;\n    CGFloat pictureW = 100;\n    CGFloat pictureH = 100;\n    _pictureFrame = CGRectMake(pictureX, pictureY, pictureW, pictureH);\n    \n    if(self.status.picture){\n        _cellHeight = CGRectGetMaxY(_pictureFrame) + padding;\n    }else{\n        _cellHeight = CGRectGetMaxY(_textFrame) + padding;\n    }\n}\n \n@end\n\n```\n\n虽然贴上了代码，还是要说一下这个过程：\n\n- 1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。\n\n- 2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,\n\n- 3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:\n- 4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。\n\n- 5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：\n\n```\n// 1,创建cell\nMJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n\n// 2,设置cell的数据和控件的frame\t\ncell.statusFrame = self.statusFrames[indexPath.row];\n\nreturn cell;\n```\n\n\n第一行代码，就是创建一个cell,创建cell代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag = @\"status\";\n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n\n    return cell;\n}\n\n```\n\n这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。\n\n\n再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.\n现在贴上赋值的代码：\n\n```\n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n\n    _statusFrame = statusFrame;\n\n    //1,设置数据\n    [self settingData];\n\n    //2，设置frame\n    [self settingFrame];\n\n}\n\n/**\n 设置数据\n */\n-(void)settingData{\n\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n}\n\n/**\n 设置frame\n */\n\n-(void)settingFrame{\n\n    /** 头像 */\n    self.iconImgView.frame = self.statusFrame.iconFrame;\n\n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n\n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n\n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n\n    }\n}\n\n```\n\n通过代码自定义cell(cell的高度不一致)\n\n总结：\n\n- 1，新建一个继承自UITableViewCell类。\n\n- 2，重新这个类的initWithStyle:reuseIdentifier:方法\n\n\t   a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\t\n\t   b,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)\n\n- 3，提供2个模型\n\n\t  a,数据模型：存放文字数据\\图片数据\n\t\n\t  b,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度\n\n- 4，cell拥有一个frame模型（不要直接拥有数据模型）\n\n- 5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame\n\n- 6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）\n","source":"_posts/oc/UITableView/oc-UITableViewCell-sc.md","raw":"---\ntitle: 使用代码创建UITableViewCell\ndate: 2020-04-03 14:49:35\ncategories:\n- OC\n- UITableView\ntags: UITableViewCell\n---\n\n先看一下，我们将要做出的效果：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg)\n\n\n如上图中，现在分析：\n\n- 1，这像是一个表格，而表格的每一个cell高度不定。\n- 2，头像不一样 \n- 3，昵称不一样，昵称的字数也不一样 \n- 4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) \n- 5，内容不一样，内容的高度不定 \n- 6，有的有配图，有的没有配图\n\n如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。\n\n先看一下我们的plist文件：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg)\n\n一：文件分类及作用：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg)\n\n - 1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 \n - 2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。\n - 3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。\n - 4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。\n\n二：各个文件的代码：\n\n1，ViewController.m文件中的代码：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJStatus.h\"\n#import \"MJStatusCell.h\"\n#import \"MJStatusFrame.h\"\n \n@interface MJViewController ()\n \n@property(nonatomic,strong)NSArray *statusFrames;\n \n@end\n \n@implementation MJViewController\n \n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n}\n/** 懒加载（只加载一次） */\n-(NSArray *)statusFrames{\n    \n    if(_statusFrames == nil){\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"statuses.plist\" ofType:nil];\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n        NSMutableArray *statusFrameArray = [NSMutableArray array];\n        for (NSDictionary *dict in dictArray) {\n            MJStatus *status = [MJStatus statusWithDict:dict];\n            MJStatusFrame *statusFrame = [[MJStatusFrame alloc] init];\n            statusFrame.status = status;\n            \n            [statusFrameArray addObject:statusFrame];\n        }\n        _statusFrames = statusFrameArray;\n    }\n    return _statusFrames;\n}\n#pragma mark - UITableView的数据源方法\n/** 返回本组数据有多少行 */\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.statusFrames.count;\n}\n#pragma mark 返回每一组的UITableViewcell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    // 1,创建cell\n    MJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n    \n    // 2,设置cell的数据和控件的frame\n    cell.statusFrame = self.statusFrames[indexPath.row];\n    \n    return cell;\n  \n}\n \n/** 每一行的高度 */\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    MJStatusFrame *statusFrame = self.statusFrames[indexPath.row];\n    \n    return statusFrame.cellHeight;\n    \n}\n \n@end\n\n```\n\n2，StatusCell.h中的代码：\n\n```\n#import <UIKit/UIKit.h>\n@class MJStatusFrame;\n@interface MJStatusCell : UITableViewCell\n@property(nonatomic,strong) MJStatusFrame *statusFrame;\n \n+(id)cellWithTableView:(UITableView *)tableView;\n \n@end\n\n\n```\n\nStatusCell.m中的代码：\n\n```\n#import \"MJStatusCell.h\"\n#import \"MJStatus.h\"\n#import \"MJStatusFrame.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n@interface MJStatusCell ()\n/** \n 头像 \n*/\n@property(nonatomic,weak) UIImageView *iconImgView;\n/** 昵称 */\n@property(nonatomic,weak) UILabel *nameLbl;\n/** 会员图标 */\n@property(nonatomic,weak) UIImageView *vipImgView;\n/** 正文 */\n@property(nonatomic,weak) UILabel *textLbl;\n/** 配图 */\n@property(nonatomic,weak) UIImageView *pictureImgView;\n \n@end\n \n \n@implementation MJStatusCell\n \n+(id)cellWithTableView:(UITableView *)tableView{\n    static NSString *flag = @\"status\";\n    \n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    \n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n    return cell;\n}\n \n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];\n    if (self) {\n        \n        //头像\n        UIImageView *iconImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:iconImgView];\n        self.iconImgView = iconImgView;\n        \n        //昵称\n        UILabel *nameLbl = [[UILabel alloc] init];\n        nameLbl.font = MJNameFont;\n        [self.contentView addSubview:nameLbl];\n        self.nameLbl = nameLbl;\n        \n        //会员头像\n        UIImageView *vipImgView = [[UIImageView alloc] init];\n        vipImgView.image = [UIImage imageNamed:@\"vip\"];\n        [self.contentView addSubview:vipImgView];\n        self.vipImgView = vipImgView;\n        \n        //正文\n        UILabel *textLbl = [[UILabel alloc] init];\n        textLbl.numberOfLines = 0;\n        textLbl.font = MJTextFont;\n        [self.contentView addSubview:textLbl];\n        self.textLbl = textLbl;\n        \n        //配图\n        UIImageView *pictureImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:pictureImgView];\n        self.pictureImgView = pictureImgView;\n        \n    }\n    return self;\n}\n \n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n    _statusFrame = statusFrame;\n    //1,设置数据\n    [self settingData];\n    //2，设置frame\n    [self settingFrame];\n}\n/**\n 设置数据\n */\n-(void)settingData{\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n    \n}\n/**\n 设置frame\n */\n-(void)settingFrame{\n    /** 头像 */\n    \n    self.iconImgView.frame = self.statusFrame.iconFrame;\n    \n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n  \n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n    \n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n    \n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n    }\n   \n    \n}\n \n@end\n\n```\n\n3, status.h中的代码：\n\n```\n#import <Foundation/Foundation.h>\n \n@interface MJStatus : NSObject\n/** 正文 */\n@property(nonatomic,copy) NSString *text;\n/** 头像 */\n@property(nonatomic,copy) NSString *icon;\n/** 昵称 */\n@property(nonatomic,copy) NSString *name;\n/** 配图 */\n@property(nonatomic,copy) NSString *picture;\n/** 会员 */\n@property(nonatomic,assign) BOOL vip;\n \n+(id)statusWithDict:(NSDictionary *)dict;\n-(id)initWithDict:(NSDictionary *)dict;\n \n@end\n\n```\n\nStatus.m中的代码：\n\n```\n#import \"MJStatus.h\"\n \n@implementation MJStatus\n \n+(id)statusWithDict:(NSDictionary *)dict{\n    return [[self alloc] initWithDict:dict];\n}\n-(id)initWithDict:(NSDictionary *)dict{\n    if(self = [super init]){\n        [self setValuesForKeysWithDictionary:dict];\n    }\n    return self;\n}\n \n@end\n\n```\n\n4，StatusFrame.h文件中的代码：\n\n```\n#import <Foundation/Foundation.h>\n@class MJStatus;\n \n@interface MJStatusFrame : NSObject\n \n@property(nonatomic,assign,readonly) CGRect iconFrame;\n@property(nonatomic,assign,readonly) CGRect nameFrame;\n@property(nonatomic,assign,readonly) CGRect vipFrame;\n@property(nonatomic,assign,readonly) CGRect textFrame;\n@property(nonatomic,assign,readonly) CGRect pictureFrame;\n \n@property(nonatomic,assign,readonly) CGFloat cellHeight;\n \n@property(nonatomic,strong) MJStatus *status;\n \n \n@end\n\n```\n\nStatusFrame.m中的代码：\n\n```\n\n#import \"MJStatusFrame.h\"\n#import \"MJStatus.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n \n@implementation MJStatusFrame\n \n-(void)setStatus:(MJStatus *)status{\n    _status = status;\n    CGFloat padding = 10;\n    \n    CGFloat iconX = padding;\n    CGFloat iconY = padding;\n    CGFloat iconW = 30;\n    CGFloat iconH = 30;\n    \n    _iconFrame = CGRectMake(iconX, iconY, iconW, iconH);\n    \n    /** 昵称 */\n    CGFloat nameX = CGRectGetMaxX(_iconFrame) + padding;\n    CGSize nameMaxSize = [self.status.name sizeWithFont:MJNameFont];\n    CGFloat nameW = nameMaxSize.width;\n    CGFloat nameH = nameMaxSize.height;\n    CGFloat nameY = padding + (iconH - nameH) * 0.5;\n    _nameFrame = CGRectMake(nameX, nameY, nameW, nameH);\n    \n    /** 会员头像 */\n    \n    CGFloat vipX = CGRectGetMaxX(_nameFrame) + padding;\n    CGFloat vipY = nameY;\n    CGFloat vipW = 14;\n    CGFloat vipH = 14;\n    \n    _vipFrame = CGRectMake(vipX, vipY, vipW, vipH);\n    \n    /** 正文 */\n    CGFloat textX = iconX;\n    CGFloat textY = CGRectGetMaxY(_iconFrame) + padding;\n    CGFloat textW = 300;\n    CGSize textMaxSize = [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];\n    CGFloat textH = textMaxSize.height;\n    _textFrame = CGRectMake(textX, textY, textW, textH);\n    \n    /** 配图 */\n    CGFloat pictureX = iconX;\n    CGFloat pictureY = CGRectGetMaxY(_textFrame) + padding;\n    CGFloat pictureW = 100;\n    CGFloat pictureH = 100;\n    _pictureFrame = CGRectMake(pictureX, pictureY, pictureW, pictureH);\n    \n    if(self.status.picture){\n        _cellHeight = CGRectGetMaxY(_pictureFrame) + padding;\n    }else{\n        _cellHeight = CGRectGetMaxY(_textFrame) + padding;\n    }\n}\n \n@end\n\n```\n\n虽然贴上了代码，还是要说一下这个过程：\n\n- 1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。\n\n- 2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,\n\n- 3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:\n- 4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。\n\n- 5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：\n\n```\n// 1,创建cell\nMJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n\n// 2,设置cell的数据和控件的frame\t\ncell.statusFrame = self.statusFrames[indexPath.row];\n\nreturn cell;\n```\n\n\n第一行代码，就是创建一个cell,创建cell代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag = @\"status\";\n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n\n    return cell;\n}\n\n```\n\n这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。\n\n\n再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.\n现在贴上赋值的代码：\n\n```\n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n\n    _statusFrame = statusFrame;\n\n    //1,设置数据\n    [self settingData];\n\n    //2，设置frame\n    [self settingFrame];\n\n}\n\n/**\n 设置数据\n */\n-(void)settingData{\n\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n}\n\n/**\n 设置frame\n */\n\n-(void)settingFrame{\n\n    /** 头像 */\n    self.iconImgView.frame = self.statusFrame.iconFrame;\n\n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n\n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n\n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n\n    }\n}\n\n```\n\n通过代码自定义cell(cell的高度不一致)\n\n总结：\n\n- 1，新建一个继承自UITableViewCell类。\n\n- 2，重新这个类的initWithStyle:reuseIdentifier:方法\n\n\t   a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\t\n\t   b,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)\n\n- 3，提供2个模型\n\n\t  a,数据模型：存放文字数据\\图片数据\n\t\n\t  b,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度\n\n- 4，cell拥有一个frame模型（不要直接拥有数据模型）\n\n- 5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame\n\n- 6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）\n","slug":"oc/UITableView/oc-UITableViewCell-sc","published":1,"updated":"2020-09-01T12:58:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602o004jl4s6fuum86ky","content":"<p>先看一下，我们将要做出的效果：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg\" alt></p>\n<p>如上图中，现在分析：</p>\n<ul>\n<li>1，这像是一个表格，而表格的每一个cell高度不定。</li>\n<li>2，头像不一样 </li>\n<li>3，昵称不一样，昵称的字数也不一样 </li>\n<li>4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) </li>\n<li>5，内容不一样，内容的高度不定 </li>\n<li>6，有的有配图，有的没有配图</li>\n</ul>\n<p>如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。</p>\n<p>先看一下我们的plist文件：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg\" alt></p>\n<p>一：文件分类及作用：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg\" alt></p>\n<ul>\n<li>1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 </li>\n<li>2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。</li>\n<li>3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。</li>\n<li>4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。</li>\n</ul>\n<p>二：各个文件的代码：</p>\n<p>1，ViewController.m文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJViewController ()</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong)NSArray *statusFrames;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;** 懒加载（只加载一次） *&#x2F;</span><br><span class=\"line\">-(NSArray *)statusFrames&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(_statusFrames &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;statuses.plist&quot; ofType:nil];</span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\">        NSMutableArray *statusFrameArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\">            MJStatus *status &#x3D; [MJStatus statusWithDict:dict];</span><br><span class=\"line\">            MJStatusFrame *statusFrame &#x3D; [[MJStatusFrame alloc] init];</span><br><span class=\"line\">            statusFrame.status &#x3D; status;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [statusFrameArray addObject:statusFrame];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _statusFrames &#x3D; statusFrameArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _statusFrames;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark - UITableView的数据源方法</span><br><span class=\"line\">&#x2F;** 返回本组数据有多少行 *&#x2F;</span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\">    return self.statusFrames.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark 返回每一组的UITableViewcell</span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 2,设置cell的数据和控件的frame</span><br><span class=\"line\">    cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;** 每一行的高度 *&#x2F;</span><br><span class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    MJStatusFrame *statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return statusFrame.cellHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，StatusCell.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@class MJStatusFrame;</span><br><span class=\"line\">@interface MJStatusCell : UITableViewCell</span><br><span class=\"line\">@property(nonatomic,strong) MJStatusFrame *statusFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusCell.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\">@interface MJStatusCell ()</span><br><span class=\"line\">&#x2F;** </span><br><span class=\"line\"> 头像 </span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *iconImgView;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *nameLbl;</span><br><span class=\"line\">&#x2F;** 会员图标 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *vipImgView;</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *textLbl;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *pictureImgView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusCell</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;头像</span><br><span class=\"line\">        UIImageView *iconImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:iconImgView];</span><br><span class=\"line\">        self.iconImgView &#x3D; iconImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;昵称</span><br><span class=\"line\">        UILabel *nameLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        nameLbl.font &#x3D; MJNameFont;</span><br><span class=\"line\">        [self.contentView addSubview:nameLbl];</span><br><span class=\"line\">        self.nameLbl &#x3D; nameLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;会员头像</span><br><span class=\"line\">        UIImageView *vipImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        vipImgView.image &#x3D; [UIImage imageNamed:@&quot;vip&quot;];</span><br><span class=\"line\">        [self.contentView addSubview:vipImgView];</span><br><span class=\"line\">        self.vipImgView &#x3D; vipImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;正文</span><br><span class=\"line\">        UILabel *textLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        textLbl.numberOfLines &#x3D; 0;</span><br><span class=\"line\">        textLbl.font &#x3D; MJTextFont;</span><br><span class=\"line\">        [self.contentView addSubview:textLbl];</span><br><span class=\"line\">        self.textLbl &#x3D; textLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;配图</span><br><span class=\"line\">        UIImageView *pictureImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:pictureImgView];</span><br><span class=\"line\">        self.pictureImgView &#x3D; pictureImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3, status.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatus : NSObject</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *text;</span><br><span class=\"line\">&#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *name;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *picture;</span><br><span class=\"line\">&#x2F;** 会员 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,assign) BOOL vip;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>Status.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatus</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    if(self &#x3D; [super init])&#123;</span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>4，StatusFrame.h文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">@class MJStatus;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatusFrame : NSObject</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect iconFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect nameFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect vipFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect textFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect pictureFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGFloat cellHeight;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong) MJStatus *status;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusFrame.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusFrame</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatus:(MJStatus *)status&#123;</span><br><span class=\"line\">    _status &#x3D; status;</span><br><span class=\"line\">    CGFloat padding &#x3D; 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat iconX &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconY &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconW &#x3D; 30;</span><br><span class=\"line\">    CGFloat iconH &#x3D; 30;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _iconFrame &#x3D; CGRectMake(iconX, iconY, iconW, iconH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    CGFloat nameX &#x3D; CGRectGetMaxX(_iconFrame) + padding;</span><br><span class=\"line\">    CGSize nameMaxSize &#x3D; [self.status.name sizeWithFont:MJNameFont];</span><br><span class=\"line\">    CGFloat nameW &#x3D; nameMaxSize.width;</span><br><span class=\"line\">    CGFloat nameH &#x3D; nameMaxSize.height;</span><br><span class=\"line\">    CGFloat nameY &#x3D; padding + (iconH - nameH) * 0.5;</span><br><span class=\"line\">    _nameFrame &#x3D; CGRectMake(nameX, nameY, nameW, nameH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat vipX &#x3D; CGRectGetMaxX(_nameFrame) + padding;</span><br><span class=\"line\">    CGFloat vipY &#x3D; nameY;</span><br><span class=\"line\">    CGFloat vipW &#x3D; 14;</span><br><span class=\"line\">    CGFloat vipH &#x3D; 14;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _vipFrame &#x3D; CGRectMake(vipX, vipY, vipW, vipH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    CGFloat textX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat textY &#x3D; CGRectGetMaxY(_iconFrame) + padding;</span><br><span class=\"line\">    CGFloat textW &#x3D; 300;</span><br><span class=\"line\">    CGSize textMaxSize &#x3D; [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];</span><br><span class=\"line\">    CGFloat textH &#x3D; textMaxSize.height;</span><br><span class=\"line\">    _textFrame &#x3D; CGRectMake(textX, textY, textW, textH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    CGFloat pictureX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat pictureY &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    CGFloat pictureW &#x3D; 100;</span><br><span class=\"line\">    CGFloat pictureH &#x3D; 100;</span><br><span class=\"line\">    _pictureFrame &#x3D; CGRectMake(pictureX, pictureY, pictureW, pictureH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(self.status.picture)&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_pictureFrame) + padding;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>虽然贴上了代码，还是要说一下这个过程：</p>\n<ul>\n<li><p>1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。</p>\n</li>\n<li><p>2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,</p>\n</li>\n<li><p>3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:</p>\n</li>\n<li><p>4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。</p>\n</li>\n<li><p>5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2,设置cell的数据和控件的frame\t</span><br><span class=\"line\">cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">return cell;</span><br></pre></td></tr></table></figure>\n\n\n<p>第一行代码，就是创建一个cell,创建cell代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。</p>\n<p>再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.<br>现在贴上赋值的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代码自定义cell(cell的高度不一致)</p>\n<p>总结：</p>\n<ul>\n<li><p>1，新建一个继承自UITableViewCell类。</p>\n</li>\n<li><p>2，重新这个类的initWithStyle:reuseIdentifier:方法</p>\n<pre><code>a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\nb,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)</code></pre></li>\n<li><p>3，提供2个模型</p>\n<pre><code>a,数据模型：存放文字数据\\图片数据\n\nb,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度</code></pre></li>\n<li><p>4，cell拥有一个frame模型（不要直接拥有数据模型）</p>\n</li>\n<li><p>5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame</p>\n</li>\n<li><p>6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>先看一下，我们将要做出的效果：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg\" alt></p>\n<p>如上图中，现在分析：</p>\n<ul>\n<li>1，这像是一个表格，而表格的每一个cell高度不定。</li>\n<li>2，头像不一样 </li>\n<li>3，昵称不一样，昵称的字数也不一样 </li>\n<li>4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) </li>\n<li>5，内容不一样，内容的高度不定 </li>\n<li>6，有的有配图，有的没有配图</li>\n</ul>\n<p>如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。</p>\n<p>先看一下我们的plist文件：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg\" alt></p>\n<p>一：文件分类及作用：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg\" alt></p>\n<ul>\n<li>1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 </li>\n<li>2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。</li>\n<li>3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。</li>\n<li>4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。</li>\n</ul>\n<p>二：各个文件的代码：</p>\n<p>1，ViewController.m文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJViewController ()</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong)NSArray *statusFrames;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;** 懒加载（只加载一次） *&#x2F;</span><br><span class=\"line\">-(NSArray *)statusFrames&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(_statusFrames &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;statuses.plist&quot; ofType:nil];</span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\">        NSMutableArray *statusFrameArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\">            MJStatus *status &#x3D; [MJStatus statusWithDict:dict];</span><br><span class=\"line\">            MJStatusFrame *statusFrame &#x3D; [[MJStatusFrame alloc] init];</span><br><span class=\"line\">            statusFrame.status &#x3D; status;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [statusFrameArray addObject:statusFrame];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _statusFrames &#x3D; statusFrameArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _statusFrames;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark - UITableView的数据源方法</span><br><span class=\"line\">&#x2F;** 返回本组数据有多少行 *&#x2F;</span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\">    return self.statusFrames.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark 返回每一组的UITableViewcell</span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 2,设置cell的数据和控件的frame</span><br><span class=\"line\">    cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;** 每一行的高度 *&#x2F;</span><br><span class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    MJStatusFrame *statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return statusFrame.cellHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，StatusCell.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@class MJStatusFrame;</span><br><span class=\"line\">@interface MJStatusCell : UITableViewCell</span><br><span class=\"line\">@property(nonatomic,strong) MJStatusFrame *statusFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusCell.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\">@interface MJStatusCell ()</span><br><span class=\"line\">&#x2F;** </span><br><span class=\"line\"> 头像 </span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *iconImgView;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *nameLbl;</span><br><span class=\"line\">&#x2F;** 会员图标 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *vipImgView;</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *textLbl;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *pictureImgView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusCell</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;头像</span><br><span class=\"line\">        UIImageView *iconImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:iconImgView];</span><br><span class=\"line\">        self.iconImgView &#x3D; iconImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;昵称</span><br><span class=\"line\">        UILabel *nameLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        nameLbl.font &#x3D; MJNameFont;</span><br><span class=\"line\">        [self.contentView addSubview:nameLbl];</span><br><span class=\"line\">        self.nameLbl &#x3D; nameLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;会员头像</span><br><span class=\"line\">        UIImageView *vipImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        vipImgView.image &#x3D; [UIImage imageNamed:@&quot;vip&quot;];</span><br><span class=\"line\">        [self.contentView addSubview:vipImgView];</span><br><span class=\"line\">        self.vipImgView &#x3D; vipImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;正文</span><br><span class=\"line\">        UILabel *textLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        textLbl.numberOfLines &#x3D; 0;</span><br><span class=\"line\">        textLbl.font &#x3D; MJTextFont;</span><br><span class=\"line\">        [self.contentView addSubview:textLbl];</span><br><span class=\"line\">        self.textLbl &#x3D; textLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;配图</span><br><span class=\"line\">        UIImageView *pictureImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:pictureImgView];</span><br><span class=\"line\">        self.pictureImgView &#x3D; pictureImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3, status.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatus : NSObject</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *text;</span><br><span class=\"line\">&#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *name;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *picture;</span><br><span class=\"line\">&#x2F;** 会员 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,assign) BOOL vip;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>Status.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatus</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    if(self &#x3D; [super init])&#123;</span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>4，StatusFrame.h文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">@class MJStatus;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatusFrame : NSObject</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect iconFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect nameFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect vipFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect textFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect pictureFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGFloat cellHeight;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong) MJStatus *status;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusFrame.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusFrame</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatus:(MJStatus *)status&#123;</span><br><span class=\"line\">    _status &#x3D; status;</span><br><span class=\"line\">    CGFloat padding &#x3D; 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat iconX &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconY &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconW &#x3D; 30;</span><br><span class=\"line\">    CGFloat iconH &#x3D; 30;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _iconFrame &#x3D; CGRectMake(iconX, iconY, iconW, iconH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    CGFloat nameX &#x3D; CGRectGetMaxX(_iconFrame) + padding;</span><br><span class=\"line\">    CGSize nameMaxSize &#x3D; [self.status.name sizeWithFont:MJNameFont];</span><br><span class=\"line\">    CGFloat nameW &#x3D; nameMaxSize.width;</span><br><span class=\"line\">    CGFloat nameH &#x3D; nameMaxSize.height;</span><br><span class=\"line\">    CGFloat nameY &#x3D; padding + (iconH - nameH) * 0.5;</span><br><span class=\"line\">    _nameFrame &#x3D; CGRectMake(nameX, nameY, nameW, nameH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat vipX &#x3D; CGRectGetMaxX(_nameFrame) + padding;</span><br><span class=\"line\">    CGFloat vipY &#x3D; nameY;</span><br><span class=\"line\">    CGFloat vipW &#x3D; 14;</span><br><span class=\"line\">    CGFloat vipH &#x3D; 14;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _vipFrame &#x3D; CGRectMake(vipX, vipY, vipW, vipH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    CGFloat textX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat textY &#x3D; CGRectGetMaxY(_iconFrame) + padding;</span><br><span class=\"line\">    CGFloat textW &#x3D; 300;</span><br><span class=\"line\">    CGSize textMaxSize &#x3D; [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];</span><br><span class=\"line\">    CGFloat textH &#x3D; textMaxSize.height;</span><br><span class=\"line\">    _textFrame &#x3D; CGRectMake(textX, textY, textW, textH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    CGFloat pictureX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat pictureY &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    CGFloat pictureW &#x3D; 100;</span><br><span class=\"line\">    CGFloat pictureH &#x3D; 100;</span><br><span class=\"line\">    _pictureFrame &#x3D; CGRectMake(pictureX, pictureY, pictureW, pictureH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(self.status.picture)&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_pictureFrame) + padding;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>虽然贴上了代码，还是要说一下这个过程：</p>\n<ul>\n<li><p>1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。</p>\n</li>\n<li><p>2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,</p>\n</li>\n<li><p>3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:</p>\n</li>\n<li><p>4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。</p>\n</li>\n<li><p>5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2,设置cell的数据和控件的frame\t</span><br><span class=\"line\">cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">return cell;</span><br></pre></td></tr></table></figure>\n\n\n<p>第一行代码，就是创建一个cell,创建cell代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。</p>\n<p>再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.<br>现在贴上赋值的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代码自定义cell(cell的高度不一致)</p>\n<p>总结：</p>\n<ul>\n<li><p>1，新建一个继承自UITableViewCell类。</p>\n</li>\n<li><p>2，重新这个类的initWithStyle:reuseIdentifier:方法</p>\n<pre><code>a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\nb,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)</code></pre></li>\n<li><p>3，提供2个模型</p>\n<pre><code>a,数据模型：存放文字数据\\图片数据\n\nb,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度</code></pre></li>\n<li><p>4，cell拥有一个frame模型（不要直接拥有数据模型）</p>\n</li>\n<li><p>5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame</p>\n</li>\n<li><p>6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）</p>\n</li>\n</ul>\n"},{"title":"使用xib文件创建UITableViewCell","date":"2020-04-03T09:15:58.000Z","_content":"\n现在我们看一下最终效果： 上部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg)\n\n\n底部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg)\n\n\n如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。\n\n一：代码结构如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg)\n\n代码部分解析：\n\n- 1, 第一部分是控制器\n\n- 2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .\n\n- 3, 第三部分是 尾部的view类和xib\n\n- 4, 第四部分是头部的view类和xib\n\n- 5, 第五部分是模型对象\n\n二：代码部分：\n\n1，ViewController.m文件：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJTg.h\"\n\n#import \"MJTgCell.h\"\n\n#import \"MJTgFooterView.h\"\n\n#import \"MJTgHeaderView.h\"\n\n\n\n@interface MJViewController () <UITableViewDataSource,MJTgFooterViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UITableView *tableView;\n\n@property(nonatomic,strong) NSMutableArray *tgs;\n\n@end\n\n@implementation MJViewController\n\n\n\n- (void)viewDidLoad\n\n{\n\n    [super viewDidLoad];\n\n    //设置每一行的高度\n\nself.tableView.rowHeight = 80;\n\n    \n\n    MJTgFooterView *footerView = [MJTgFooterView tgFooterView];\n\n    footerView.delegate =self;\n\n    self.tableView.tableFooterView = footerView;\n\n    \n\n    self.tableView.tableHeaderView = [MJTgHeaderView tgHeaderView];\n\n    \n\n}\n\n#pragma mark - MJTgFooterViewDelegate的代理方法\n\n/** 加载按钮的更多数据 */\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView{\n\n   \n\n    //加载更多的模型数据\n\n    int count = self.tgs.count;\n\n    NSArray *array = self.tgs;\n\n    for (int i=0; i<count; i++) {\n\n        MJTg *tg = array[i];\n\n        MJTg *tempTg = [[MJTg alloc] init];\n\n        tempTg.title = tg.title;\n\n        tempTg.icon =tg.icon;\n\n        tempTg.price = tg.price;\n\n        tempTg.buyCount = tg.buyCount;\n\n        \n\n        [self.tgs addObject:tempTg];\n\n    }    \n\n    //2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法\n\n    [self.tableView reloadData];\n\n}\n\n\n\n-(NSMutableArray *)tgs{\n\n    if(_tgs == nil){\n\n        // 初始化\n\n        // 1. 获得plist的全路径\n\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"tgs.plist\" ofType:nil];\n\n        //2,健在数组\n\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n\n        \n\n        //3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中\n\n        NSMutableArray *tgArray = [NSMutableArray array];\n\n        for (NSDictionary *dict in dictArray) {\n\n            // 3.1 创建模型对象\n\n            MJTg *tg=[MJTg tgWithDict:dict];\n\n            // 3.2 添加模型对象到数组中\n\n            [tgArray addObject:tg];\n\n        }\n\n        //4,赋值\n\n        _tgs = tgArray;\n\n    }\n\n    return _tgs;\n\n}\n\n#pragma mark - 数据源方法\n\n/** 一共有多少行数据 */\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return self.tgs.count;\n\n}\n\n/** 每一行显示怎么样的cell */\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{ \n\n    MJTgCell *cell =[MJTgCell cellWithTableView:tableView];\n\n    MJTg *tg = self.tgs[indexPath.row];\n\n    cell.tg =tg;\n\n    return cell;\n\n}\n\n@end\n\n```\n\n2，TgCell的xib文件和TgCell.h对应的部分，如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg)\n\nTgCell.h代码如下：\n\n\n```\n#import <Foundation/Foundation.h>\n\n@class MJTg;\n\n@interface MJTgCell : UITableViewCell\n\n\n\n@property (weak, nonatomic) IBOutlet UIImageView *iconView;\n\n\n\n@property (weak, nonatomic) IBOutlet UILabel *titleLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *priceLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;\n\n\n\n/** 团购模型 */\n\n@property(nonatomic,strong) MJTg *tg;\n\n\n\n/**\n\n 通过一个tableView来创建一个cell\n\n */\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView;\n\n\n\n@end\n\n\n\nTgCell.m文件如下：\n\n\n\n#import \"MJTgCell.h\"\n\n#import \"MJTg.h\"\n\n@implementation MJTgCell\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n\n\n\n-(void)setTg:(MJTg *)tg{\n\n    self.iconView.image = [UIImage imageNamed:tg.icon];\n\n    self.titleLbl.text = tg.title;\n\n    self.priceLbl.text = [NSString stringWithFormat:@\"￥%@\",tg.price];\n\n    self.buyCountLbl.text = [NSString stringWithFormat:@\"%@人已购买\",tg.buyCount];\n\n}\n\n\n\n@end\n```\n\n3，TgFooterView的xib文件和TgFooterView.h对象如下：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg)\n\n这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。\n\nTgFooterView.h代码如下：\n\n```\n#import <UIKit/UIKit.h>\n\n@class MJTgFooterView;\n\n@protocol MJTgFooterViewDelegate <NSObject>\n\n\n\n@optional\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;\n\n\n\n@end\n\n\n\n@interface MJTgFooterView : UIView\n\n\n\n@property(nonatomic,weak) id<MJTgFooterViewDelegate> delegate;\n\n\n\n+(id)tgFooterView;\n\n\n\n@end\n\n\n\nTgFooterView.m文件代码：\n\n\n\n#import \"MJTgFooterView.h\"\n\n\n\n@interface MJTgFooterView ()\n\n@property (weak, nonatomic) IBOutlet UIButton *loadBtn;\n\n@property (weak, nonatomic) IBOutlet UIView *loadingView;\n\n- (IBAction)loadBtnClick;\n\n\n\n@end\n\n@implementation MJTgFooterView\n\n\n\n+(id)tgFooterView{\n\n    //创建Nib对象\n\n//    UINib *nib = [UINib nibWithNibName:@\"MJTgFooterView\" bundle:[NSBundle mainBundle]];\n\n//    return [[nib instantiateWithOwner:nil options:nil] lastObject];\n\n    \n\n    return [[NSBundle mainBundle] loadNibNamed:@\"MJTgFooterView\" owner:nil options:nil][0];\n\n}\n\n\n\n- (IBAction)loadBtnClick {\n\n    \n\n    //1,将加载按钮隐藏\n\n    self.loadBtn.hidden = YES;\n\n    \n\n    //2,刷新按钮显示出来\n\n    self.loadingView.hidden = NO;\n\n    \n\n    //3.0秒之后执行block中\n\n    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));\n\n    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n\n        //3,通知代理，按钮被人点击了\n\n        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)]){\n\n            [self.delegate tgFooterViewDidLoadBtnClick:self];\n\n        }\n\n        \n\n        //4,加载按钮显示，刷新按钮隐藏\n\n        self.loadBtn.hidden = NO;\n\n        self.loadingView.hidden = YES;\n\n        \n\n    });\n\n}\n\n@end\n```\n\n3，TgHeaderView的xib和TgHeaderView属性对应部分：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg)\n\nTgHeaderView.h文件的代码：\n\n```\n#import <UIKit/UIKit.h>\n\n\n\n@interface MJTgHeaderView : UIView\n\n\n\n+(id)tgHeaderView;\n\n\n\n@end\n\n\n\nTgHeaderView.m文件代码：\n\n\n\n#import \"MJTgHeaderView.h\"\n\n\n\n#define MJImgCount 5\n\n\n\n@interface MJTgHeaderView () <UIScrollViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;\n\n@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;\n\n\n\n@property(nonatomic,strong) NSTimer *timer;\n\n@end\n\n\n\n@implementation MJTgHeaderView \n\n\n\n\n\n+(id)tgHeaderView{\n\n    \n\n    return [[[NSBundle mainBundle] loadNibNamed:@\"MJTgHeaderView\" owner:nil options:nil] lastObject];\n\n}\n\n\n\n/** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） */\n\n-(void)awakeFromNib{\n\n   \n\n    //1,设置scrollView的代理\n\n    self.scrollView.delegate = self;\n\n    //2,设置scrollView中的image中的参数\n\n    CGFloat imgViewY = 0;\n\n    CGFloat imgViewW = self.scrollView.frame.size.width;\n\n    CGFloat imgViewH = self.scrollView.frame.size.height;\n\n    \n\n    for (int i=0; i<MJImgCount; i++) {\n\n        UIImageView *imgView = [[UIImageView alloc] init];\n\n        UIImage *img = [UIImage imageNamed:[NSString stringWithFormat:@\"ad_0%i\",i]];\n\n        imgView.image = img;\n\n        CGFloat imgViewX = i*imgViewW;\n\n        imgView.frame = CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);\n\n        //3,将image添加到scrollView中\n\n        [self.scrollView addSubview:imgView];\n\n    }\n\n    \n\n    //4,设置scrollView的各项参数\n\n    //4.1,设置scrollView的滚动区域\n\n    self.scrollView.contentSize = CGSizeMake(imgViewW * MJImgCount, 0);\n\n    \n\n    //4.2, 不显示横向滚动条\n\n    self.scrollView.showsHorizontalScrollIndicator = NO;\n\n    //4.3  分页\n\n    self.scrollView.pagingEnabled = YES;\n\n\n\n    //5,设置pageControl的总共页数\n\n    self.pageControl.numberOfPages = MJImgCount;\n\n    \n\n    //6,添加定时器\n\n    [self addTimer];\n\n}\n\n/** 添加定时器 */\n\n-(void)addTimer{\n\n    self.timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];\n\n    //消息循环（设置当前定时器的优先级比较）\n\n    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];\n\n}\n\n\n\n-(void)nextImg{\n\n    //1,增加pageControl的页码\n\n    int currentIndex = self.pageControl.currentPage;\n\n    if(currentIndex == MJImgCount-1){\n\n        currentIndex = 0;\n\n    }else{\n\n        currentIndex += 1;\n\n    }\n\n    self.pageControl.currentPage = currentIndex;\n\n    \n\n    //2,计算scrollView的滚动位置\n\n    CGPoint offset = CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);\n\n    \n\n    //3,有滚动效果\n\n    [self.scrollView setContentOffset:offset animated:YES];\n\n\n\n}\n\n\n\n\n\n\n\n#pragma mark - scrollView的代理方法\n\n/** scrollView正在滚动 */\n\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    CGFloat offsetX = scrollView.contentOffset.x;\n\n    \n\n   \n\n    int index = (offsetX + scrollView.frame.size.width*0.5)/scrollView.frame.size.width;\n\n    \n\n    self.pageControl.currentPage = index;\n\n    \n\n}\n```\n\n\n4，Tg模型部分：\nTg.h文件：\n\n```\n#import <Foundation/Foundation.h>\n\n\n\n@interface MJTg : NSObject\n\n/** 标题 */\n\n@property(nonatomic,copy) NSString *title;\n\n/** 图标 */\n\n@property(nonatomic,copy) NSString *icon;\n\n/** 价格 */\n\n@property(nonatomic,copy) NSString *price;\n\n/** 购买人数 */\n\n@property(nonatomic,copy) NSString *buyCount;\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict;\n\n-(id)initWithDict:(NSDictionary *)dict;\n\n\n\n@end\n\n\n\nTg.m文件代码如下：\n\n\n\n#import \"MJTg.h\"\n\n\n\n@implementation MJTg\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict{\n\n    return [[self alloc] initWithDict:dict];\n\n}\n\n-(id)initWithDict:(NSDictionary *)dict{\n\n    if(self==[super init]){\n\n        [self setValuesForKeysWithDictionary:dict];\n\n    }\n\n    return self;\n\n}\n\n\n\n@end\n```\n\n注意部分：\n\n1，在TgCell.xib文件中，指定类为TgCell。\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg)\n\n2,在创建TgCell对象时，要采用Cell的重用。\n\n重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。\n\n代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n```\n\n3,使用xib封装一个view的步骤：\n\n>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）\n\n>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）\n\n>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）\n\n>4, 将xib中的空间和自定义类的.m文件进行连线\n\n>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)\n\n>6, 提供一个模型属性让外界传递模型数据\n\n>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面","source":"_posts/oc/UITableView/oc-UITableViewCell-xib.md","raw":"---\ntitle: 使用xib文件创建UITableViewCell\ndate: 2020-04-03 17:15:58\ncategories:\n- OC\n- UITableView\ntags: UITableViewCell\n---\n\n现在我们看一下最终效果： 上部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg)\n\n\n底部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg)\n\n\n如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。\n\n一：代码结构如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg)\n\n代码部分解析：\n\n- 1, 第一部分是控制器\n\n- 2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .\n\n- 3, 第三部分是 尾部的view类和xib\n\n- 4, 第四部分是头部的view类和xib\n\n- 5, 第五部分是模型对象\n\n二：代码部分：\n\n1，ViewController.m文件：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJTg.h\"\n\n#import \"MJTgCell.h\"\n\n#import \"MJTgFooterView.h\"\n\n#import \"MJTgHeaderView.h\"\n\n\n\n@interface MJViewController () <UITableViewDataSource,MJTgFooterViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UITableView *tableView;\n\n@property(nonatomic,strong) NSMutableArray *tgs;\n\n@end\n\n@implementation MJViewController\n\n\n\n- (void)viewDidLoad\n\n{\n\n    [super viewDidLoad];\n\n    //设置每一行的高度\n\nself.tableView.rowHeight = 80;\n\n    \n\n    MJTgFooterView *footerView = [MJTgFooterView tgFooterView];\n\n    footerView.delegate =self;\n\n    self.tableView.tableFooterView = footerView;\n\n    \n\n    self.tableView.tableHeaderView = [MJTgHeaderView tgHeaderView];\n\n    \n\n}\n\n#pragma mark - MJTgFooterViewDelegate的代理方法\n\n/** 加载按钮的更多数据 */\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView{\n\n   \n\n    //加载更多的模型数据\n\n    int count = self.tgs.count;\n\n    NSArray *array = self.tgs;\n\n    for (int i=0; i<count; i++) {\n\n        MJTg *tg = array[i];\n\n        MJTg *tempTg = [[MJTg alloc] init];\n\n        tempTg.title = tg.title;\n\n        tempTg.icon =tg.icon;\n\n        tempTg.price = tg.price;\n\n        tempTg.buyCount = tg.buyCount;\n\n        \n\n        [self.tgs addObject:tempTg];\n\n    }    \n\n    //2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法\n\n    [self.tableView reloadData];\n\n}\n\n\n\n-(NSMutableArray *)tgs{\n\n    if(_tgs == nil){\n\n        // 初始化\n\n        // 1. 获得plist的全路径\n\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"tgs.plist\" ofType:nil];\n\n        //2,健在数组\n\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n\n        \n\n        //3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中\n\n        NSMutableArray *tgArray = [NSMutableArray array];\n\n        for (NSDictionary *dict in dictArray) {\n\n            // 3.1 创建模型对象\n\n            MJTg *tg=[MJTg tgWithDict:dict];\n\n            // 3.2 添加模型对象到数组中\n\n            [tgArray addObject:tg];\n\n        }\n\n        //4,赋值\n\n        _tgs = tgArray;\n\n    }\n\n    return _tgs;\n\n}\n\n#pragma mark - 数据源方法\n\n/** 一共有多少行数据 */\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return self.tgs.count;\n\n}\n\n/** 每一行显示怎么样的cell */\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{ \n\n    MJTgCell *cell =[MJTgCell cellWithTableView:tableView];\n\n    MJTg *tg = self.tgs[indexPath.row];\n\n    cell.tg =tg;\n\n    return cell;\n\n}\n\n@end\n\n```\n\n2，TgCell的xib文件和TgCell.h对应的部分，如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg)\n\nTgCell.h代码如下：\n\n\n```\n#import <Foundation/Foundation.h>\n\n@class MJTg;\n\n@interface MJTgCell : UITableViewCell\n\n\n\n@property (weak, nonatomic) IBOutlet UIImageView *iconView;\n\n\n\n@property (weak, nonatomic) IBOutlet UILabel *titleLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *priceLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;\n\n\n\n/** 团购模型 */\n\n@property(nonatomic,strong) MJTg *tg;\n\n\n\n/**\n\n 通过一个tableView来创建一个cell\n\n */\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView;\n\n\n\n@end\n\n\n\nTgCell.m文件如下：\n\n\n\n#import \"MJTgCell.h\"\n\n#import \"MJTg.h\"\n\n@implementation MJTgCell\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n\n\n\n-(void)setTg:(MJTg *)tg{\n\n    self.iconView.image = [UIImage imageNamed:tg.icon];\n\n    self.titleLbl.text = tg.title;\n\n    self.priceLbl.text = [NSString stringWithFormat:@\"￥%@\",tg.price];\n\n    self.buyCountLbl.text = [NSString stringWithFormat:@\"%@人已购买\",tg.buyCount];\n\n}\n\n\n\n@end\n```\n\n3，TgFooterView的xib文件和TgFooterView.h对象如下：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg)\n\n这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。\n\nTgFooterView.h代码如下：\n\n```\n#import <UIKit/UIKit.h>\n\n@class MJTgFooterView;\n\n@protocol MJTgFooterViewDelegate <NSObject>\n\n\n\n@optional\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;\n\n\n\n@end\n\n\n\n@interface MJTgFooterView : UIView\n\n\n\n@property(nonatomic,weak) id<MJTgFooterViewDelegate> delegate;\n\n\n\n+(id)tgFooterView;\n\n\n\n@end\n\n\n\nTgFooterView.m文件代码：\n\n\n\n#import \"MJTgFooterView.h\"\n\n\n\n@interface MJTgFooterView ()\n\n@property (weak, nonatomic) IBOutlet UIButton *loadBtn;\n\n@property (weak, nonatomic) IBOutlet UIView *loadingView;\n\n- (IBAction)loadBtnClick;\n\n\n\n@end\n\n@implementation MJTgFooterView\n\n\n\n+(id)tgFooterView{\n\n    //创建Nib对象\n\n//    UINib *nib = [UINib nibWithNibName:@\"MJTgFooterView\" bundle:[NSBundle mainBundle]];\n\n//    return [[nib instantiateWithOwner:nil options:nil] lastObject];\n\n    \n\n    return [[NSBundle mainBundle] loadNibNamed:@\"MJTgFooterView\" owner:nil options:nil][0];\n\n}\n\n\n\n- (IBAction)loadBtnClick {\n\n    \n\n    //1,将加载按钮隐藏\n\n    self.loadBtn.hidden = YES;\n\n    \n\n    //2,刷新按钮显示出来\n\n    self.loadingView.hidden = NO;\n\n    \n\n    //3.0秒之后执行block中\n\n    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));\n\n    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n\n        //3,通知代理，按钮被人点击了\n\n        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)]){\n\n            [self.delegate tgFooterViewDidLoadBtnClick:self];\n\n        }\n\n        \n\n        //4,加载按钮显示，刷新按钮隐藏\n\n        self.loadBtn.hidden = NO;\n\n        self.loadingView.hidden = YES;\n\n        \n\n    });\n\n}\n\n@end\n```\n\n3，TgHeaderView的xib和TgHeaderView属性对应部分：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg)\n\nTgHeaderView.h文件的代码：\n\n```\n#import <UIKit/UIKit.h>\n\n\n\n@interface MJTgHeaderView : UIView\n\n\n\n+(id)tgHeaderView;\n\n\n\n@end\n\n\n\nTgHeaderView.m文件代码：\n\n\n\n#import \"MJTgHeaderView.h\"\n\n\n\n#define MJImgCount 5\n\n\n\n@interface MJTgHeaderView () <UIScrollViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;\n\n@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;\n\n\n\n@property(nonatomic,strong) NSTimer *timer;\n\n@end\n\n\n\n@implementation MJTgHeaderView \n\n\n\n\n\n+(id)tgHeaderView{\n\n    \n\n    return [[[NSBundle mainBundle] loadNibNamed:@\"MJTgHeaderView\" owner:nil options:nil] lastObject];\n\n}\n\n\n\n/** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） */\n\n-(void)awakeFromNib{\n\n   \n\n    //1,设置scrollView的代理\n\n    self.scrollView.delegate = self;\n\n    //2,设置scrollView中的image中的参数\n\n    CGFloat imgViewY = 0;\n\n    CGFloat imgViewW = self.scrollView.frame.size.width;\n\n    CGFloat imgViewH = self.scrollView.frame.size.height;\n\n    \n\n    for (int i=0; i<MJImgCount; i++) {\n\n        UIImageView *imgView = [[UIImageView alloc] init];\n\n        UIImage *img = [UIImage imageNamed:[NSString stringWithFormat:@\"ad_0%i\",i]];\n\n        imgView.image = img;\n\n        CGFloat imgViewX = i*imgViewW;\n\n        imgView.frame = CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);\n\n        //3,将image添加到scrollView中\n\n        [self.scrollView addSubview:imgView];\n\n    }\n\n    \n\n    //4,设置scrollView的各项参数\n\n    //4.1,设置scrollView的滚动区域\n\n    self.scrollView.contentSize = CGSizeMake(imgViewW * MJImgCount, 0);\n\n    \n\n    //4.2, 不显示横向滚动条\n\n    self.scrollView.showsHorizontalScrollIndicator = NO;\n\n    //4.3  分页\n\n    self.scrollView.pagingEnabled = YES;\n\n\n\n    //5,设置pageControl的总共页数\n\n    self.pageControl.numberOfPages = MJImgCount;\n\n    \n\n    //6,添加定时器\n\n    [self addTimer];\n\n}\n\n/** 添加定时器 */\n\n-(void)addTimer{\n\n    self.timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];\n\n    //消息循环（设置当前定时器的优先级比较）\n\n    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];\n\n}\n\n\n\n-(void)nextImg{\n\n    //1,增加pageControl的页码\n\n    int currentIndex = self.pageControl.currentPage;\n\n    if(currentIndex == MJImgCount-1){\n\n        currentIndex = 0;\n\n    }else{\n\n        currentIndex += 1;\n\n    }\n\n    self.pageControl.currentPage = currentIndex;\n\n    \n\n    //2,计算scrollView的滚动位置\n\n    CGPoint offset = CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);\n\n    \n\n    //3,有滚动效果\n\n    [self.scrollView setContentOffset:offset animated:YES];\n\n\n\n}\n\n\n\n\n\n\n\n#pragma mark - scrollView的代理方法\n\n/** scrollView正在滚动 */\n\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    CGFloat offsetX = scrollView.contentOffset.x;\n\n    \n\n   \n\n    int index = (offsetX + scrollView.frame.size.width*0.5)/scrollView.frame.size.width;\n\n    \n\n    self.pageControl.currentPage = index;\n\n    \n\n}\n```\n\n\n4，Tg模型部分：\nTg.h文件：\n\n```\n#import <Foundation/Foundation.h>\n\n\n\n@interface MJTg : NSObject\n\n/** 标题 */\n\n@property(nonatomic,copy) NSString *title;\n\n/** 图标 */\n\n@property(nonatomic,copy) NSString *icon;\n\n/** 价格 */\n\n@property(nonatomic,copy) NSString *price;\n\n/** 购买人数 */\n\n@property(nonatomic,copy) NSString *buyCount;\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict;\n\n-(id)initWithDict:(NSDictionary *)dict;\n\n\n\n@end\n\n\n\nTg.m文件代码如下：\n\n\n\n#import \"MJTg.h\"\n\n\n\n@implementation MJTg\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict{\n\n    return [[self alloc] initWithDict:dict];\n\n}\n\n-(id)initWithDict:(NSDictionary *)dict{\n\n    if(self==[super init]){\n\n        [self setValuesForKeysWithDictionary:dict];\n\n    }\n\n    return self;\n\n}\n\n\n\n@end\n```\n\n注意部分：\n\n1，在TgCell.xib文件中，指定类为TgCell。\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg)\n\n2,在创建TgCell对象时，要采用Cell的重用。\n\n重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。\n\n代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n```\n\n3,使用xib封装一个view的步骤：\n\n>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）\n\n>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）\n\n>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）\n\n>4, 将xib中的空间和自定义类的.m文件进行连线\n\n>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)\n\n>6, 提供一个模型属性让外界传递模型数据\n\n>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面","slug":"oc/UITableView/oc-UITableViewCell-xib","published":1,"updated":"2020-09-01T12:58:03.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602p004ml4s62zr6bl8r","content":"<p>现在我们看一下最终效果： 上部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg\" alt></p>\n<p>底部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg\" alt></p>\n<p>如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。</p>\n<p>一：代码结构如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg\" alt></p>\n<p>代码部分解析：</p>\n<ul>\n<li><p>1, 第一部分是控制器</p>\n</li>\n<li><p>2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .</p>\n</li>\n<li><p>3, 第三部分是 尾部的view类和xib</p>\n</li>\n<li><p>4, 第四部分是头部的view类和xib</p>\n</li>\n<li><p>5, 第五部分是模型对象</p>\n</li>\n</ul>\n<p>二：代码部分：</p>\n<p>1，ViewController.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJViewController () &lt;UITableViewDataSource,MJTgFooterViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITableView *tableView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSMutableArray *tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置每一行的高度</span><br><span class=\"line\"></span><br><span class=\"line\">self.tableView.rowHeight &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgFooterView *footerView &#x3D; [MJTgFooterView tgFooterView];</span><br><span class=\"line\"></span><br><span class=\"line\">    footerView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableFooterView &#x3D; footerView;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableHeaderView &#x3D; [MJTgHeaderView tgHeaderView];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - MJTgFooterViewDelegate的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 加载按钮的更多数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;加载更多的模型数据</span><br><span class=\"line\"></span><br><span class=\"line\">    int count &#x3D; self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSArray *array &#x3D; self.tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tg &#x3D; array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tempTg &#x3D; [[MJTg alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.title &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.icon &#x3D;tg.icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.price &#x3D; tg.price;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.buyCount &#x3D; tg.buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        [self.tgs addObject:tempTg];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView reloadData];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)tgs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(_tgs &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 初始化</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 1. 获得plist的全路径</span><br><span class=\"line\"></span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;tgs.plist&quot; ofType:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;2,健在数组</span><br><span class=\"line\"></span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中</span><br><span class=\"line\"></span><br><span class=\"line\">        NSMutableArray *tgArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\"></span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.1 创建模型对象</span><br><span class=\"line\"></span><br><span class=\"line\">            MJTg *tg&#x3D;[MJTg tgWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.2 添加模型对象到数组中</span><br><span class=\"line\"></span><br><span class=\"line\">            [tgArray addObject:tg];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,赋值</span><br><span class=\"line\"></span><br><span class=\"line\">        _tgs &#x3D; tgArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 一共有多少行数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 每一行显示怎么样的cell *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D;[MJTgCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">    MJTg *tg &#x3D; self.tgs[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.tg &#x3D;tg;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，TgCell的xib文件和TgCell.h对应的部分，如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg\" alt></p>\n<p>TgCell.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTg;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgCell : UITableViewCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *iconView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *titleLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *priceLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 团购模型 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) MJTg *tg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> 通过一个tableView来创建一个cell</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgCell.m文件如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setTg:(MJTg *)tg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.iconView.image &#x3D; [UIImage imageNamed:tg.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.titleLbl.text &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.priceLbl.text &#x3D; [NSString stringWithFormat:@&quot;￥%@&quot;,tg.price];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.buyCountLbl.text &#x3D; [NSString stringWithFormat:@&quot;%@人已购买&quot;,tg.buyCount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgFooterView的xib文件和TgFooterView.h对象如下：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg\" alt></p>\n<p>这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。</p>\n<p>TgFooterView.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol MJTgFooterViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;MJTgFooterViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgFooterView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIButton *loadBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIView *loadingView;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgFooterView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;创建Nib对象</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    UINib *nib &#x3D; [UINib nibWithNibName:@&quot;MJTgFooterView&quot; bundle:[NSBundle mainBundle]];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    return [[nib instantiateWithOwner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgFooterView&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,将加载按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadBtn.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新按钮显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadingView.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3.0秒之后执行block中</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_time_t popTime &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,通知代理，按钮被人点击了</span><br><span class=\"line\"></span><br><span class=\"line\">        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            [self.delegate tgFooterViewDidLoadBtnClick:self];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,加载按钮显示，刷新按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadBtn.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadingView.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgHeaderView的xib和TgHeaderView属性对应部分：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg\" alt></p>\n<p>TgHeaderView.h文件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgHeaderView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define MJImgCount 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView () &lt;UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSTimer *timer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgHeaderView </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[[NSBundle mainBundle] loadNibNamed:@&quot;MJTgHeaderView&quot; owner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)awakeFromNib&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置scrollView的代理</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.delegate &#x3D; self;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,设置scrollView中的image中的参数</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewY &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewW &#x3D; self.scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewH &#x3D; self.scrollView.frame.size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;MJImgCount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImageView *imgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImage *img &#x3D; [UIImage imageNamed:[NSString stringWithFormat:@&quot;ad_0%i&quot;,i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.image &#x3D; img;</span><br><span class=\"line\"></span><br><span class=\"line\">        CGFloat imgViewX &#x3D; i*imgViewW;</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.frame &#x3D; CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将image添加到scrollView中</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.scrollView addSubview:imgView];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4,设置scrollView的各项参数</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.1,设置scrollView的滚动区域</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.contentSize &#x3D; CGSizeMake(imgViewW * MJImgCount, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.2, 不显示横向滚动条</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.showsHorizontalScrollIndicator &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.3  分页</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.pagingEnabled &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;5,设置pageControl的总共页数</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.numberOfPages &#x3D; MJImgCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;6,添加定时器</span><br><span class=\"line\"></span><br><span class=\"line\">    [self addTimer];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 添加定时器 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addTimer&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.timer &#x3D; [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;消息循环（设置当前定时器的优先级比较）</span><br><span class=\"line\"></span><br><span class=\"line\">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)nextImg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,增加pageControl的页码</span><br><span class=\"line\"></span><br><span class=\"line\">    int currentIndex &#x3D; self.pageControl.currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(currentIndex &#x3D;&#x3D; MJImgCount-1)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex +&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; currentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,计算scrollView的滚动位置</span><br><span class=\"line\"></span><br><span class=\"line\">    CGPoint offset &#x3D; CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3,有滚动效果</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.scrollView setContentOffset:offset animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - scrollView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** scrollView正在滚动 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat offsetX &#x3D; scrollView.contentOffset.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    int index &#x3D; (offsetX + scrollView.frame.size.width*0.5)&#x2F;scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; index;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>4，Tg模型部分：<br>Tg.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTg : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 标题 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 图标 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 价格 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *price;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 购买人数 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tg.m文件代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(self&#x3D;&#x3D;[super init])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>注意部分：</p>\n<p>1，在TgCell.xib文件中，指定类为TgCell。</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg\" alt></p>\n<p>2,在创建TgCell对象时，要采用Cell的重用。</p>\n<p>重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3,使用xib封装一个view的步骤：</p>\n<blockquote>\n<p>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）</p>\n</blockquote>\n<blockquote>\n<p>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）</p>\n</blockquote>\n<blockquote>\n<p>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）</p>\n</blockquote>\n<blockquote>\n<p>4, 将xib中的空间和自定义类的.m文件进行连线</p>\n</blockquote>\n<blockquote>\n<p>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)</p>\n</blockquote>\n<blockquote>\n<p>6, 提供一个模型属性让外界传递模型数据</p>\n</blockquote>\n<blockquote>\n<p>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>现在我们看一下最终效果： 上部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg\" alt></p>\n<p>底部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg\" alt></p>\n<p>如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。</p>\n<p>一：代码结构如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg\" alt></p>\n<p>代码部分解析：</p>\n<ul>\n<li><p>1, 第一部分是控制器</p>\n</li>\n<li><p>2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .</p>\n</li>\n<li><p>3, 第三部分是 尾部的view类和xib</p>\n</li>\n<li><p>4, 第四部分是头部的view类和xib</p>\n</li>\n<li><p>5, 第五部分是模型对象</p>\n</li>\n</ul>\n<p>二：代码部分：</p>\n<p>1，ViewController.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJViewController () &lt;UITableViewDataSource,MJTgFooterViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITableView *tableView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSMutableArray *tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置每一行的高度</span><br><span class=\"line\"></span><br><span class=\"line\">self.tableView.rowHeight &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgFooterView *footerView &#x3D; [MJTgFooterView tgFooterView];</span><br><span class=\"line\"></span><br><span class=\"line\">    footerView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableFooterView &#x3D; footerView;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableHeaderView &#x3D; [MJTgHeaderView tgHeaderView];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - MJTgFooterViewDelegate的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 加载按钮的更多数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;加载更多的模型数据</span><br><span class=\"line\"></span><br><span class=\"line\">    int count &#x3D; self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSArray *array &#x3D; self.tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tg &#x3D; array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tempTg &#x3D; [[MJTg alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.title &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.icon &#x3D;tg.icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.price &#x3D; tg.price;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.buyCount &#x3D; tg.buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        [self.tgs addObject:tempTg];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView reloadData];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)tgs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(_tgs &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 初始化</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 1. 获得plist的全路径</span><br><span class=\"line\"></span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;tgs.plist&quot; ofType:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;2,健在数组</span><br><span class=\"line\"></span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中</span><br><span class=\"line\"></span><br><span class=\"line\">        NSMutableArray *tgArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\"></span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.1 创建模型对象</span><br><span class=\"line\"></span><br><span class=\"line\">            MJTg *tg&#x3D;[MJTg tgWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.2 添加模型对象到数组中</span><br><span class=\"line\"></span><br><span class=\"line\">            [tgArray addObject:tg];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,赋值</span><br><span class=\"line\"></span><br><span class=\"line\">        _tgs &#x3D; tgArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 一共有多少行数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 每一行显示怎么样的cell *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D;[MJTgCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">    MJTg *tg &#x3D; self.tgs[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.tg &#x3D;tg;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，TgCell的xib文件和TgCell.h对应的部分，如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg\" alt></p>\n<p>TgCell.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTg;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgCell : UITableViewCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *iconView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *titleLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *priceLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 团购模型 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) MJTg *tg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> 通过一个tableView来创建一个cell</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgCell.m文件如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setTg:(MJTg *)tg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.iconView.image &#x3D; [UIImage imageNamed:tg.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.titleLbl.text &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.priceLbl.text &#x3D; [NSString stringWithFormat:@&quot;￥%@&quot;,tg.price];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.buyCountLbl.text &#x3D; [NSString stringWithFormat:@&quot;%@人已购买&quot;,tg.buyCount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgFooterView的xib文件和TgFooterView.h对象如下：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg\" alt></p>\n<p>这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。</p>\n<p>TgFooterView.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol MJTgFooterViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;MJTgFooterViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgFooterView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIButton *loadBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIView *loadingView;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgFooterView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;创建Nib对象</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    UINib *nib &#x3D; [UINib nibWithNibName:@&quot;MJTgFooterView&quot; bundle:[NSBundle mainBundle]];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    return [[nib instantiateWithOwner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgFooterView&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,将加载按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadBtn.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新按钮显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadingView.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3.0秒之后执行block中</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_time_t popTime &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,通知代理，按钮被人点击了</span><br><span class=\"line\"></span><br><span class=\"line\">        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            [self.delegate tgFooterViewDidLoadBtnClick:self];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,加载按钮显示，刷新按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadBtn.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadingView.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgHeaderView的xib和TgHeaderView属性对应部分：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg\" alt></p>\n<p>TgHeaderView.h文件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgHeaderView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define MJImgCount 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView () &lt;UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSTimer *timer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgHeaderView </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[[NSBundle mainBundle] loadNibNamed:@&quot;MJTgHeaderView&quot; owner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)awakeFromNib&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置scrollView的代理</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.delegate &#x3D; self;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,设置scrollView中的image中的参数</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewY &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewW &#x3D; self.scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewH &#x3D; self.scrollView.frame.size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;MJImgCount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImageView *imgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImage *img &#x3D; [UIImage imageNamed:[NSString stringWithFormat:@&quot;ad_0%i&quot;,i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.image &#x3D; img;</span><br><span class=\"line\"></span><br><span class=\"line\">        CGFloat imgViewX &#x3D; i*imgViewW;</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.frame &#x3D; CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将image添加到scrollView中</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.scrollView addSubview:imgView];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4,设置scrollView的各项参数</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.1,设置scrollView的滚动区域</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.contentSize &#x3D; CGSizeMake(imgViewW * MJImgCount, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.2, 不显示横向滚动条</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.showsHorizontalScrollIndicator &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.3  分页</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.pagingEnabled &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;5,设置pageControl的总共页数</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.numberOfPages &#x3D; MJImgCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;6,添加定时器</span><br><span class=\"line\"></span><br><span class=\"line\">    [self addTimer];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 添加定时器 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addTimer&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.timer &#x3D; [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;消息循环（设置当前定时器的优先级比较）</span><br><span class=\"line\"></span><br><span class=\"line\">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)nextImg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,增加pageControl的页码</span><br><span class=\"line\"></span><br><span class=\"line\">    int currentIndex &#x3D; self.pageControl.currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(currentIndex &#x3D;&#x3D; MJImgCount-1)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex +&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; currentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,计算scrollView的滚动位置</span><br><span class=\"line\"></span><br><span class=\"line\">    CGPoint offset &#x3D; CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3,有滚动效果</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.scrollView setContentOffset:offset animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - scrollView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** scrollView正在滚动 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat offsetX &#x3D; scrollView.contentOffset.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    int index &#x3D; (offsetX + scrollView.frame.size.width*0.5)&#x2F;scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; index;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>4，Tg模型部分：<br>Tg.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTg : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 标题 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 图标 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 价格 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *price;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 购买人数 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tg.m文件代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(self&#x3D;&#x3D;[super init])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>注意部分：</p>\n<p>1，在TgCell.xib文件中，指定类为TgCell。</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg\" alt></p>\n<p>2,在创建TgCell对象时，要采用Cell的重用。</p>\n<p>重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3,使用xib封装一个view的步骤：</p>\n<blockquote>\n<p>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）</p>\n</blockquote>\n<blockquote>\n<p>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）</p>\n</blockquote>\n<blockquote>\n<p>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）</p>\n</blockquote>\n<blockquote>\n<p>4, 将xib中的空间和自定义类的.m文件进行连线</p>\n</blockquote>\n<blockquote>\n<p>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)</p>\n</blockquote>\n<blockquote>\n<p>6, 提供一个模型属性让外界传递模型数据</p>\n</blockquote>\n<blockquote>\n<p>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面</p>\n</blockquote>\n"},{"title":"ios原生API文件上传(NSURLSession)","date":"2020-04-03T11:06:04.000Z","_content":"\n\n## 一、 简介\n\n以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。\n\nNSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。\n\n## 二、使用 \n\n### 1、引入框架和定义编码宏\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]\n```\n\n### 2、编写上传方法\n\n```\n-(void)upload:(NSString *)filePath params:(NSDictionary *)params{\n    NSURL *url = [NSURL URLWithString:@\"http://192.168.1.103:9088/up/upload\"];\n    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n    [request setHTTPMethod:@\"POST\"];\n    \n    //分隔符\n    NSString *boundary = [self generateBoundaryString];\n    \n    //设置ContentType\n    NSString *contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", boundary];\n    [request setValue:contentType forHTTPHeaderField: @\"Content-Type\"];\n    \n    //获取body体数据\n    NSString *fieldName = @\"CustomFile\";\n    NSData *bodyData = [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];\n    \n    NSURLSessionTask *task = [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if (error) {\n            NSLog(@\"error : %@\", error);\n            return;\n        }\n        NSString *result = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n        NSLog(@\"上传返回结果 : %@\", result);\n    }];\n    \n    [task resume];\n}\n\n```\n\n### 3、body体拼接\n```\n- (NSData *)createBodyWithBoundary:(NSString *)boundary\n                        parameters:(NSDictionary *)parameters\n                          filePath:(NSString *)filePath\n                         fieldName:(NSString *)fieldName {\n    //创建可变Data\n    NSMutableData *bodyData = [NSMutableData data];\n    \n    //文本参数\n    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) {\n        //开始\n        NSString *startStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n        [bodyData appendData:GMEncode(startStr)];\n        \n        //描述\n        NSString *dispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key];\n        [bodyData appendData:GMEncode(dispositionStr)];\n        \n        //值\n        NSString *valueStr = [NSString stringWithFormat:@\"%@\\r\\n\", obj];\n        [bodyData appendData:GMEncode(valueStr)];\n    }];\n    \n    //文件\n    NSString *fileName  = [filePath lastPathComponent];\n    NSData   *data      = [NSData dataWithContentsOfFile:filePath];\n    NSString *mimetype  = [self mimeTypeForPath:filePath];\n    \n    //文件分割\n    NSString *fileBoundaryStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(fileBoundaryStr)];\n    \n    //文件描述\n    NSString *fileDispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fieldName, fileName];\n    [bodyData appendData:GMEncode(fileDispositionStr)];\n    \n    //类型\n    NSString *contentTypeStr = [NSString stringWithFormat:@\"Content-Type: %@\\r\\n\\r\\n\", mimetype];\n    [bodyData appendData:GMEncode(contentTypeStr)];\n    \n    //文件NSData\n    [bodyData appendData:data];\n    \n    //换行\n    [bodyData appendData:GMEncode(@\"\\r\\n\")];\n    \n    //结尾\n    NSString *endStr = [NSString stringWithFormat:@\"--%@--\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(endStr)];\n\n    return bodyData;\n}\n```\n\n### 4、获取mimeType\n```\n///根据文件路径获取mimeType\n- (NSString *)mimeTypeForPath:(NSString *)path {\n    CFStringRef extension = (__bridge CFStringRef)[path pathExtension];\n    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);\n    NSString *mimetype = CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));\n    \n    CFRelease(UTI);\n    \n    return mimetype;\n}\n```\n\n### 5、生成分隔符字符串\n\n```\n- (NSString *)generateBoundaryString {\n    return [NSString stringWithFormat:@\"Boundary-%@\", [[NSUUID UUID] UUIDString]];\n}\n```","source":"_posts/oc/Upload/oc-Upload-nativeUpload.md","raw":"---\ntitle: ios原生API文件上传(NSURLSession)\ndate: 2020-04-03 19:06:04\ncategories:\n- OC\n- 上传\ntags: 上传\n---\n\n\n## 一、 简介\n\n以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。\n\nNSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。\n\n## 二、使用 \n\n### 1、引入框架和定义编码宏\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]\n```\n\n### 2、编写上传方法\n\n```\n-(void)upload:(NSString *)filePath params:(NSDictionary *)params{\n    NSURL *url = [NSURL URLWithString:@\"http://192.168.1.103:9088/up/upload\"];\n    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n    [request setHTTPMethod:@\"POST\"];\n    \n    //分隔符\n    NSString *boundary = [self generateBoundaryString];\n    \n    //设置ContentType\n    NSString *contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", boundary];\n    [request setValue:contentType forHTTPHeaderField: @\"Content-Type\"];\n    \n    //获取body体数据\n    NSString *fieldName = @\"CustomFile\";\n    NSData *bodyData = [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];\n    \n    NSURLSessionTask *task = [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if (error) {\n            NSLog(@\"error : %@\", error);\n            return;\n        }\n        NSString *result = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n        NSLog(@\"上传返回结果 : %@\", result);\n    }];\n    \n    [task resume];\n}\n\n```\n\n### 3、body体拼接\n```\n- (NSData *)createBodyWithBoundary:(NSString *)boundary\n                        parameters:(NSDictionary *)parameters\n                          filePath:(NSString *)filePath\n                         fieldName:(NSString *)fieldName {\n    //创建可变Data\n    NSMutableData *bodyData = [NSMutableData data];\n    \n    //文本参数\n    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) {\n        //开始\n        NSString *startStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n        [bodyData appendData:GMEncode(startStr)];\n        \n        //描述\n        NSString *dispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key];\n        [bodyData appendData:GMEncode(dispositionStr)];\n        \n        //值\n        NSString *valueStr = [NSString stringWithFormat:@\"%@\\r\\n\", obj];\n        [bodyData appendData:GMEncode(valueStr)];\n    }];\n    \n    //文件\n    NSString *fileName  = [filePath lastPathComponent];\n    NSData   *data      = [NSData dataWithContentsOfFile:filePath];\n    NSString *mimetype  = [self mimeTypeForPath:filePath];\n    \n    //文件分割\n    NSString *fileBoundaryStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(fileBoundaryStr)];\n    \n    //文件描述\n    NSString *fileDispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fieldName, fileName];\n    [bodyData appendData:GMEncode(fileDispositionStr)];\n    \n    //类型\n    NSString *contentTypeStr = [NSString stringWithFormat:@\"Content-Type: %@\\r\\n\\r\\n\", mimetype];\n    [bodyData appendData:GMEncode(contentTypeStr)];\n    \n    //文件NSData\n    [bodyData appendData:data];\n    \n    //换行\n    [bodyData appendData:GMEncode(@\"\\r\\n\")];\n    \n    //结尾\n    NSString *endStr = [NSString stringWithFormat:@\"--%@--\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(endStr)];\n\n    return bodyData;\n}\n```\n\n### 4、获取mimeType\n```\n///根据文件路径获取mimeType\n- (NSString *)mimeTypeForPath:(NSString *)path {\n    CFStringRef extension = (__bridge CFStringRef)[path pathExtension];\n    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);\n    NSString *mimetype = CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));\n    \n    CFRelease(UTI);\n    \n    return mimetype;\n}\n```\n\n### 5、生成分隔符字符串\n\n```\n- (NSString *)generateBoundaryString {\n    return [NSString stringWithFormat:@\"Boundary-%@\", [[NSUUID UUID] UUIDString]];\n}\n```","slug":"oc/Upload/oc-Upload-nativeUpload","published":1,"updated":"2020-09-01T12:58:07.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602q004ql4s681ozfmio","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。</p>\n<p>NSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。</p>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1、引入框架和定义编码宏\"><a href=\"#1、引入框架和定义编码宏\" class=\"headerlink\" title=\"1、引入框架和定义编码宏\"></a>1、引入框架和定义编码宏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices&#x2F;MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、编写上传方法\"><a href=\"#2、编写上传方法\" class=\"headerlink\" title=\"2、编写上传方法\"></a>2、编写上传方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)upload:(NSString *)filePath params:(NSDictionary *)params&#123;</span><br><span class=\"line\">    NSURL *url &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;192.168.1.103:9088&#x2F;up&#x2F;upload&quot;];</span><br><span class=\"line\">    NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:url];</span><br><span class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;分隔符</span><br><span class=\"line\">    NSString *boundary &#x3D; [self generateBoundaryString];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;设置ContentType</span><br><span class=\"line\">    NSString *contentType &#x3D; [NSString stringWithFormat:@&quot;multipart&#x2F;form-data; boundary&#x3D;%@&quot;, boundary];</span><br><span class=\"line\">    [request setValue:contentType forHTTPHeaderField: @&quot;Content-Type&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;获取body体数据</span><br><span class=\"line\">    NSString *fieldName &#x3D; @&quot;CustomFile&quot;;</span><br><span class=\"line\">    NSData *bodyData &#x3D; [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSURLSessionTask *task &#x3D; [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            NSLog(@&quot;error : %@&quot;, error);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NSString *result &#x3D; [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        NSLog(@&quot;上传返回结果 : %@&quot;, result);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [task resume];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、body体拼接\"><a href=\"#3、body体拼接\" class=\"headerlink\" title=\"3、body体拼接\"></a>3、body体拼接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSData *)createBodyWithBoundary:(NSString *)boundary</span><br><span class=\"line\">                        parameters:(NSDictionary *)parameters</span><br><span class=\"line\">                          filePath:(NSString *)filePath</span><br><span class=\"line\">                         fieldName:(NSString *)fieldName &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;创建可变Data</span><br><span class=\"line\">    NSMutableData *bodyData &#x3D; [NSMutableData data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文本参数</span><br><span class=\"line\">    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;开始</span><br><span class=\"line\">        NSString *startStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(startStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;描述</span><br><span class=\"line\">        NSString *dispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;, key];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(dispositionStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;值</span><br><span class=\"line\">        NSString *valueStr &#x3D; [NSString stringWithFormat:@&quot;%@\\r\\n&quot;, obj];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(valueStr)];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件</span><br><span class=\"line\">    NSString *fileName  &#x3D; [filePath lastPathComponent];</span><br><span class=\"line\">    NSData   *data      &#x3D; [NSData dataWithContentsOfFile:filePath];</span><br><span class=\"line\">    NSString *mimetype  &#x3D; [self mimeTypeForPath:filePath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件分割</span><br><span class=\"line\">    NSString *fileBoundaryStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileBoundaryStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件描述</span><br><span class=\"line\">    NSString *fileDispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;; filename&#x3D;\\&quot;%@\\&quot;\\r\\n&quot;, fieldName, fileName];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileDispositionStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;类型</span><br><span class=\"line\">    NSString *contentTypeStr &#x3D; [NSString stringWithFormat:@&quot;Content-Type: %@\\r\\n\\r\\n&quot;, mimetype];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(contentTypeStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件NSData</span><br><span class=\"line\">    [bodyData appendData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;换行</span><br><span class=\"line\">    [bodyData appendData:GMEncode(@&quot;\\r\\n&quot;)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;结尾</span><br><span class=\"line\">    NSString *endStr &#x3D; [NSString stringWithFormat:@&quot;--%@--\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(endStr)];</span><br><span class=\"line\"></span><br><span class=\"line\">    return bodyData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、获取mimeType\"><a href=\"#4、获取mimeType\" class=\"headerlink\" title=\"4、获取mimeType\"></a>4、获取mimeType</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文件路径获取mimeType</span><br><span class=\"line\">- (NSString *)mimeTypeForPath:(NSString *)path &#123;</span><br><span class=\"line\">    CFStringRef extension &#x3D; (__bridge CFStringRef)[path pathExtension];</span><br><span class=\"line\">    CFStringRef UTI &#x3D; UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);</span><br><span class=\"line\">    NSString *mimetype &#x3D; CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(UTI);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return mimetype;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、生成分隔符字符串\"><a href=\"#5、生成分隔符字符串\" class=\"headerlink\" title=\"5、生成分隔符字符串\"></a>5、生成分隔符字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)generateBoundaryString &#123;</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;Boundary-%@&quot;, [[NSUUID UUID] UUIDString]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。</p>\n<p>NSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。</p>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1、引入框架和定义编码宏\"><a href=\"#1、引入框架和定义编码宏\" class=\"headerlink\" title=\"1、引入框架和定义编码宏\"></a>1、引入框架和定义编码宏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices&#x2F;MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、编写上传方法\"><a href=\"#2、编写上传方法\" class=\"headerlink\" title=\"2、编写上传方法\"></a>2、编写上传方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)upload:(NSString *)filePath params:(NSDictionary *)params&#123;</span><br><span class=\"line\">    NSURL *url &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;192.168.1.103:9088&#x2F;up&#x2F;upload&quot;];</span><br><span class=\"line\">    NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:url];</span><br><span class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;分隔符</span><br><span class=\"line\">    NSString *boundary &#x3D; [self generateBoundaryString];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;设置ContentType</span><br><span class=\"line\">    NSString *contentType &#x3D; [NSString stringWithFormat:@&quot;multipart&#x2F;form-data; boundary&#x3D;%@&quot;, boundary];</span><br><span class=\"line\">    [request setValue:contentType forHTTPHeaderField: @&quot;Content-Type&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;获取body体数据</span><br><span class=\"line\">    NSString *fieldName &#x3D; @&quot;CustomFile&quot;;</span><br><span class=\"line\">    NSData *bodyData &#x3D; [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSURLSessionTask *task &#x3D; [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            NSLog(@&quot;error : %@&quot;, error);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NSString *result &#x3D; [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        NSLog(@&quot;上传返回结果 : %@&quot;, result);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [task resume];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、body体拼接\"><a href=\"#3、body体拼接\" class=\"headerlink\" title=\"3、body体拼接\"></a>3、body体拼接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSData *)createBodyWithBoundary:(NSString *)boundary</span><br><span class=\"line\">                        parameters:(NSDictionary *)parameters</span><br><span class=\"line\">                          filePath:(NSString *)filePath</span><br><span class=\"line\">                         fieldName:(NSString *)fieldName &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;创建可变Data</span><br><span class=\"line\">    NSMutableData *bodyData &#x3D; [NSMutableData data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文本参数</span><br><span class=\"line\">    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;开始</span><br><span class=\"line\">        NSString *startStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(startStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;描述</span><br><span class=\"line\">        NSString *dispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;, key];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(dispositionStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;值</span><br><span class=\"line\">        NSString *valueStr &#x3D; [NSString stringWithFormat:@&quot;%@\\r\\n&quot;, obj];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(valueStr)];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件</span><br><span class=\"line\">    NSString *fileName  &#x3D; [filePath lastPathComponent];</span><br><span class=\"line\">    NSData   *data      &#x3D; [NSData dataWithContentsOfFile:filePath];</span><br><span class=\"line\">    NSString *mimetype  &#x3D; [self mimeTypeForPath:filePath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件分割</span><br><span class=\"line\">    NSString *fileBoundaryStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileBoundaryStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件描述</span><br><span class=\"line\">    NSString *fileDispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;; filename&#x3D;\\&quot;%@\\&quot;\\r\\n&quot;, fieldName, fileName];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileDispositionStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;类型</span><br><span class=\"line\">    NSString *contentTypeStr &#x3D; [NSString stringWithFormat:@&quot;Content-Type: %@\\r\\n\\r\\n&quot;, mimetype];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(contentTypeStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件NSData</span><br><span class=\"line\">    [bodyData appendData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;换行</span><br><span class=\"line\">    [bodyData appendData:GMEncode(@&quot;\\r\\n&quot;)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;结尾</span><br><span class=\"line\">    NSString *endStr &#x3D; [NSString stringWithFormat:@&quot;--%@--\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(endStr)];</span><br><span class=\"line\"></span><br><span class=\"line\">    return bodyData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、获取mimeType\"><a href=\"#4、获取mimeType\" class=\"headerlink\" title=\"4、获取mimeType\"></a>4、获取mimeType</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文件路径获取mimeType</span><br><span class=\"line\">- (NSString *)mimeTypeForPath:(NSString *)path &#123;</span><br><span class=\"line\">    CFStringRef extension &#x3D; (__bridge CFStringRef)[path pathExtension];</span><br><span class=\"line\">    CFStringRef UTI &#x3D; UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);</span><br><span class=\"line\">    NSString *mimetype &#x3D; CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(UTI);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return mimetype;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、生成分隔符字符串\"><a href=\"#5、生成分隔符字符串\" class=\"headerlink\" title=\"5、生成分隔符字符串\"></a>5、生成分隔符字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)generateBoundaryString &#123;</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;Boundary-%@&quot;, [[NSUUID UUID] UUIDString]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IOS文件上传PUT和POST","date":"2020-04-03T10:55:42.000Z","_content":"\n## 一、 简介\n\n### 1、简单介绍\n\n1. 在HTTP协议请求中，有8种方法：\n\n-  GET：请求指定的页面信息，并返回实体主体。\n-  HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头\n-  POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。\n-  PUT：从客户端向服务器传送的数据取代指定的文档的内容。\n-  DELETE：请求服务器删除指定的页面。\n-  CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。\n-  OPTIONS：允许客户端查看服务器的性能。\n-  TRACE：回显服务器收到的请求，主要用于测试或诊断。\n-  PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。\n\n### 2、区别\n本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:\n\n1. PUT方法的特点：传输的实体部分是一个无结构的二进制数据。\n2. POST方法的特点：倾向于结构化的数据。\n\n上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。\n\n那为什么现在都流行使用post上传文件呢？\n\n因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。\n\n\n备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。\n\n## 二、HTML文件上传  \n这里为什么要写html的方式上传文件呢？ \n\n因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。\n\n### 1、post上传文件：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>post上传文件</title>\n</head>\n<body>\n   <form action=\"***这里是上传url***\" method=\"post\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"fileUpload\" />\n       <input type=\"submit\" value=\"上传文件\" />\n   </form>\n</body>\n</html>\n\n```\n\n### 2、put上传文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>XMLHttpRequest上传文件进度实现</title>\n    <script type=\"text/javascript\">\n        var xhr;\n        var ot;//\n        var oloaded;\n        //上传文件方法\n        function UpladFile() {\n            var file = document.getElementById(\"file\").files[0];\n            var reader = new FileReader();\n            //将文件以二进制形式读入页面\n            reader.readAsArrayBuffer(file);\n            reader.onload=function(f){\n                var rawData = reader.result;\n                var url = \"***上传路径***\"; // 接收上传文件的后台地址\n                xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\n                xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\n                xhr.setRequestHeader(\"Content-Type\", \"video/mp4\");\n                xhr.setRequestHeader(\"x-content-range\", \"bytes 0-298327/298328\"); //这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。\n                xhr.setRequestHeader(\"content-length\", \"298328\");   //这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件\n                xhr.onload = uploadComplete; //请求完成\n                xhr.onerror =  uploadFailed; //请求失败\n                xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\n                xhr.upload.onloadstart = function(){//上传开始执行方法\n                    ot = new Date().getTime();   //设置上传开始时间\n                    oloaded = 0;//设置上传开始时，以上传的文件大小为0\n                };\n                xhr.send(rawData); //开始上传\n            }\n            \n        }\n        //上传进度实现方法，上传过程中会频繁调用该方法\n        function progressFunction(evt) {\n            \n             var progressBar = document.getElementById(\"progressBar\");\n             var percentageDiv = document.getElementById(\"percentage\");\n             // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\n             if (evt.lengthComputable) {//\n                 progressBar.max = evt.total;\n                 progressBar.value = evt.loaded;\n                 percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\n             }\n            \n            var time = document.getElementById(\"time\");\n            var nt = new Date().getTime();//获取当前时间\n            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\n            ot = new Date().getTime(); //重新赋值时间，用于下次计算\n            \n            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\n            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\n        \n            //上传速度计算\n            var speed = perload/pertime;//单位b/s\n            var bspeed = speed;\n            var units = 'b/s';//单位名称\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'k/s';\n            }\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'M/s';\n            }\n            speed = speed.toFixed(1);\n            //剩余时间\n            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\n            time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\n               if(bspeed==0)\n                time.innerHTML = '上传已取消';\n        }\n        //上传成功响应\n        function uploadComplete(evt) {\n         //服务断接收完文件返回的结果\n         //    alert(evt.target.responseText);\n             alert(\"上传成功！\");\n        }\n        //上传失败\n        function uploadFailed(evt) {\n            alert(\"上传失败！\");\n        }\n          //取消上传\n        function cancleUploadFile(){\n            xhr.abort();\n        }\n    </script>\n</head>\n<body>\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width: 300px;\"></progress>\n    <span id=\"percentage\"></span><span id=\"time\"></span>\n    <br /><br />\n    <input type=\"file\" id=\"file\" name=\"myfile\" />\n    <input type=\"button\" onclick=\"UpladFile()\" value=\"上传\" />\n    <input type=\"button\" onclick=\"cancleUploadFile()\" value=\"取消\" />\n</body>\n</html>\n\n```\n\n## 三、 IOS上传文件\n以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)\n### 1、post方法上传\n\n```\nNSString *urlString = @\"\";\nAFHTTPRequestOperationManager *mgr = [AFHTTPRequestOperationManager manager];\n//普通参数\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\n[params setObject:@\"张三\" forKey:@\"username\"];\n[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n    NSData *imageData = UIImagePNGRepresentation([UIImage imageNamed:@\"\"]);   \n     /**\n     拼接文件参数\n     @fileData : 要上传的文件数据\n     @name : 后台定义文件的参数名\n     @fileName ： 上传到服务器的文件名称\n     @mimeType : 上传的文件类型\n   */\n    [formData appendPartWithFileData:imageData name:@\"file\" fileName:@\"text.png\" mimeType:@\"image/png\"];\n} success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n}];\n```\n\n```\n/**\n 获取文件的MIMEType\n @param url 文件路径\n @return 文件MIMEType\n */\n- (NSString *)MIMEType:(NSURL *)url{\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    NSURLResponse *response = nil;\n    [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:nil];\n    return response.MIMEType;\n}\n```\n\n### 2、put方法上传\n\n```\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"请求路径url\"]];\n//设置header参数\n[request setValue:@\"这是自定义头参数\" forHTTPHeaderField:@\"x-content-length\"];\n    \n//获取需要上传的Data， 将其保存到沙盒中\n_needUploadData = [self getNeedUploadData];\nNSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [docPath stringByAppendingPathComponent:@\"test\"];\n[_needUploadData writeToFile:filePath atomically:YES];\n    \nNSURL *url = [NSURL URLWithString:filePath];\n\nAFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n_uploadTask = [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) {\n    NSLog(@\"uploadProgress：%@\",uploadProgress);\n    float progress =  1.0 * uploadProgress.completedUnitCount/uploadProgress.totalUnitCount;\n    NSLog(@\"上传视频进度%f\",progress);\n} completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {\n    NSLog(@\"上传结果%@\",responseObject);\n}];\n    \n[_uploadTask resume];\n```\n\n注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。\n\n ![URI结构图](/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png)\n\n\n### 3、文件操作\n在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。\n\n*  NSFileHandle： 主要是对文件内容进行读取和写入操作\n\n*  NSFileManager： 主要是对文件进行的操作以及文件信息的获取\n\n在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法\n\n```\n//获取需要上传的数据\n-(NSData *)getNeedUploadData{\n    //使用传递过来的文件上传\n    NSFileHandle *fileHandle = [NSFileHandle fileHandleForReadingAtPath:_filePath];\n    [fileHandle seekToFileOffset:_startUploadLoaction];\n\n    NSInteger uploadLength = GMOTPosterAdd_uploadVideoSizeForEveryOne;\n    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) > _fileTotalSize){\n        uploadLength = _fileTotalSize - _startUploadLoaction;\n    }\n    NSData *data = [fileHandle readDataOfLength:uploadLength];\n\n    return data;\n}\n\n```\n\n## 四、 Content-Type类型介绍\n\nMediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。\n\n```\n类型格式：type/subtype(;parameter)? type  \n主类型，任意的字符串，如text，如果是*号代表所有；   \nsubtype 子类型，任意的字符串，如html，如果是*号代表所有；   \nparameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。   \n```\n\n常见的媒体格式类型如下：\n\n-   text/html ： HTML格式\n-   text/plain ：纯文本格式     \n-   text/xml ：  XML格式\n-   image/gif ：gif图片格式    \n-   image/jpeg ：jpg图片格式 \n-   image/png：png图片格式\n\n以application开头的媒体格式类型：\n\n-   application/xhtml+xml ：XHTML格式\n-   application/xml     ： XML数据格式\n-   application/atom+xml  ：Atom XML聚合格式  \n-   application/json    ： JSON数据格式\n-   application/pdf       ：pdf格式  \n-   application/msword  ： Word文档格式\n-   application/octet-stream ： 二进制流数据（如常见的文件下载）\n-   application/x-www-form-urlencoded ：  ( <form encType=\"\">)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）\n-    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。\n\n在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。\n\n\n### 1、application/x-www-form-urlencoded\n最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&key2=val2的方式进行编码，key和val都进行了URL转码。\n在ios中，如果请求参数为：\n\n```\nNSDictionary *params = @{\n        @\"body\":@{@\"reqType\":@\"0\"},\n        @\"sn\":@\"0cec3723ca95c7066a2d56e4ef110989ea7865cf\"\n        };\n```\n被转码以后：\n\n```\nbody=%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&sn=0cec3723ca95c7066a2d56e4ef110989ea7865cf\n```\n\n### 2、multipart/form-data\n\nMultipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.\n\n请求的头部信息如下:\n\n//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符\nContent-Type: multipart/form-data; boundary=xxxxx\n下面我们来看一下一个我的Multipart/form-data请求体:\n\n```\nPOST /uploadFile HTTP/1.1\nHost: 上传文件后台地址\nContent-Type: multipart/form-data; boundary=xxxxx\nConnection: keep-alive\nAccept: /\nUser-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0\nContent-Length: 32175\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\n\n--xxxxx\nContent-Disposition: form-data;name=\"file\"\n\nimg.jpeg\n--xxxxx\nContent-Disposition: form-data;name=\"businessType\"\n\nCC_USER_CENTER\n--xxxxx\nContent-Disposition: form-data;name=\"fileType\"\n\nimage\n--xxxxx\nContent-Disposition:form-data;name=\"file\";filename=\"img1.jpeg\"\nContent-Type:image/png\n\n这里是图片数据****************，比较长\n\n--xxxxx--\n\n\n```\n备注：\n>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。\n\n>2，可以上传多个文件。\n\n>3，比较常见的上传文件方式\n\n### 3、application/octet-stream\n这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。\n\n备注：\n>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。\n>\n>2,   只能上传单个文件，不常见。\n","source":"_posts/oc/Upload/oc-Upload-putAndPost.md","raw":"---\ntitle: IOS文件上传PUT和POST\ndate: 2020-04-03 18:55:42\ncategories:\n- OC\n- 上传\ntags: 上传\n---\n\n## 一、 简介\n\n### 1、简单介绍\n\n1. 在HTTP协议请求中，有8种方法：\n\n-  GET：请求指定的页面信息，并返回实体主体。\n-  HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头\n-  POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。\n-  PUT：从客户端向服务器传送的数据取代指定的文档的内容。\n-  DELETE：请求服务器删除指定的页面。\n-  CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。\n-  OPTIONS：允许客户端查看服务器的性能。\n-  TRACE：回显服务器收到的请求，主要用于测试或诊断。\n-  PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。\n\n### 2、区别\n本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:\n\n1. PUT方法的特点：传输的实体部分是一个无结构的二进制数据。\n2. POST方法的特点：倾向于结构化的数据。\n\n上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。\n\n那为什么现在都流行使用post上传文件呢？\n\n因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。\n\n\n备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。\n\n## 二、HTML文件上传  \n这里为什么要写html的方式上传文件呢？ \n\n因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。\n\n### 1、post上传文件：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>post上传文件</title>\n</head>\n<body>\n   <form action=\"***这里是上传url***\" method=\"post\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"fileUpload\" />\n       <input type=\"submit\" value=\"上传文件\" />\n   </form>\n</body>\n</html>\n\n```\n\n### 2、put上传文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>XMLHttpRequest上传文件进度实现</title>\n    <script type=\"text/javascript\">\n        var xhr;\n        var ot;//\n        var oloaded;\n        //上传文件方法\n        function UpladFile() {\n            var file = document.getElementById(\"file\").files[0];\n            var reader = new FileReader();\n            //将文件以二进制形式读入页面\n            reader.readAsArrayBuffer(file);\n            reader.onload=function(f){\n                var rawData = reader.result;\n                var url = \"***上传路径***\"; // 接收上传文件的后台地址\n                xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\n                xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\n                xhr.setRequestHeader(\"Content-Type\", \"video/mp4\");\n                xhr.setRequestHeader(\"x-content-range\", \"bytes 0-298327/298328\"); //这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。\n                xhr.setRequestHeader(\"content-length\", \"298328\");   //这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件\n                xhr.onload = uploadComplete; //请求完成\n                xhr.onerror =  uploadFailed; //请求失败\n                xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\n                xhr.upload.onloadstart = function(){//上传开始执行方法\n                    ot = new Date().getTime();   //设置上传开始时间\n                    oloaded = 0;//设置上传开始时，以上传的文件大小为0\n                };\n                xhr.send(rawData); //开始上传\n            }\n            \n        }\n        //上传进度实现方法，上传过程中会频繁调用该方法\n        function progressFunction(evt) {\n            \n             var progressBar = document.getElementById(\"progressBar\");\n             var percentageDiv = document.getElementById(\"percentage\");\n             // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\n             if (evt.lengthComputable) {//\n                 progressBar.max = evt.total;\n                 progressBar.value = evt.loaded;\n                 percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\n             }\n            \n            var time = document.getElementById(\"time\");\n            var nt = new Date().getTime();//获取当前时间\n            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\n            ot = new Date().getTime(); //重新赋值时间，用于下次计算\n            \n            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\n            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\n        \n            //上传速度计算\n            var speed = perload/pertime;//单位b/s\n            var bspeed = speed;\n            var units = 'b/s';//单位名称\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'k/s';\n            }\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'M/s';\n            }\n            speed = speed.toFixed(1);\n            //剩余时间\n            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\n            time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\n               if(bspeed==0)\n                time.innerHTML = '上传已取消';\n        }\n        //上传成功响应\n        function uploadComplete(evt) {\n         //服务断接收完文件返回的结果\n         //    alert(evt.target.responseText);\n             alert(\"上传成功！\");\n        }\n        //上传失败\n        function uploadFailed(evt) {\n            alert(\"上传失败！\");\n        }\n          //取消上传\n        function cancleUploadFile(){\n            xhr.abort();\n        }\n    </script>\n</head>\n<body>\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width: 300px;\"></progress>\n    <span id=\"percentage\"></span><span id=\"time\"></span>\n    <br /><br />\n    <input type=\"file\" id=\"file\" name=\"myfile\" />\n    <input type=\"button\" onclick=\"UpladFile()\" value=\"上传\" />\n    <input type=\"button\" onclick=\"cancleUploadFile()\" value=\"取消\" />\n</body>\n</html>\n\n```\n\n## 三、 IOS上传文件\n以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)\n### 1、post方法上传\n\n```\nNSString *urlString = @\"\";\nAFHTTPRequestOperationManager *mgr = [AFHTTPRequestOperationManager manager];\n//普通参数\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\n[params setObject:@\"张三\" forKey:@\"username\"];\n[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n    NSData *imageData = UIImagePNGRepresentation([UIImage imageNamed:@\"\"]);   \n     /**\n     拼接文件参数\n     @fileData : 要上传的文件数据\n     @name : 后台定义文件的参数名\n     @fileName ： 上传到服务器的文件名称\n     @mimeType : 上传的文件类型\n   */\n    [formData appendPartWithFileData:imageData name:@\"file\" fileName:@\"text.png\" mimeType:@\"image/png\"];\n} success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n}];\n```\n\n```\n/**\n 获取文件的MIMEType\n @param url 文件路径\n @return 文件MIMEType\n */\n- (NSString *)MIMEType:(NSURL *)url{\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    NSURLResponse *response = nil;\n    [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:nil];\n    return response.MIMEType;\n}\n```\n\n### 2、put方法上传\n\n```\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"请求路径url\"]];\n//设置header参数\n[request setValue:@\"这是自定义头参数\" forHTTPHeaderField:@\"x-content-length\"];\n    \n//获取需要上传的Data， 将其保存到沙盒中\n_needUploadData = [self getNeedUploadData];\nNSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [docPath stringByAppendingPathComponent:@\"test\"];\n[_needUploadData writeToFile:filePath atomically:YES];\n    \nNSURL *url = [NSURL URLWithString:filePath];\n\nAFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n_uploadTask = [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) {\n    NSLog(@\"uploadProgress：%@\",uploadProgress);\n    float progress =  1.0 * uploadProgress.completedUnitCount/uploadProgress.totalUnitCount;\n    NSLog(@\"上传视频进度%f\",progress);\n} completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {\n    NSLog(@\"上传结果%@\",responseObject);\n}];\n    \n[_uploadTask resume];\n```\n\n注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。\n\n ![URI结构图](/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png)\n\n\n### 3、文件操作\n在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。\n\n*  NSFileHandle： 主要是对文件内容进行读取和写入操作\n\n*  NSFileManager： 主要是对文件进行的操作以及文件信息的获取\n\n在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法\n\n```\n//获取需要上传的数据\n-(NSData *)getNeedUploadData{\n    //使用传递过来的文件上传\n    NSFileHandle *fileHandle = [NSFileHandle fileHandleForReadingAtPath:_filePath];\n    [fileHandle seekToFileOffset:_startUploadLoaction];\n\n    NSInteger uploadLength = GMOTPosterAdd_uploadVideoSizeForEveryOne;\n    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) > _fileTotalSize){\n        uploadLength = _fileTotalSize - _startUploadLoaction;\n    }\n    NSData *data = [fileHandle readDataOfLength:uploadLength];\n\n    return data;\n}\n\n```\n\n## 四、 Content-Type类型介绍\n\nMediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。\n\n```\n类型格式：type/subtype(;parameter)? type  \n主类型，任意的字符串，如text，如果是*号代表所有；   \nsubtype 子类型，任意的字符串，如html，如果是*号代表所有；   \nparameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。   \n```\n\n常见的媒体格式类型如下：\n\n-   text/html ： HTML格式\n-   text/plain ：纯文本格式     \n-   text/xml ：  XML格式\n-   image/gif ：gif图片格式    \n-   image/jpeg ：jpg图片格式 \n-   image/png：png图片格式\n\n以application开头的媒体格式类型：\n\n-   application/xhtml+xml ：XHTML格式\n-   application/xml     ： XML数据格式\n-   application/atom+xml  ：Atom XML聚合格式  \n-   application/json    ： JSON数据格式\n-   application/pdf       ：pdf格式  \n-   application/msword  ： Word文档格式\n-   application/octet-stream ： 二进制流数据（如常见的文件下载）\n-   application/x-www-form-urlencoded ：  ( <form encType=\"\">)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）\n-    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。\n\n在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。\n\n\n### 1、application/x-www-form-urlencoded\n最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&key2=val2的方式进行编码，key和val都进行了URL转码。\n在ios中，如果请求参数为：\n\n```\nNSDictionary *params = @{\n        @\"body\":@{@\"reqType\":@\"0\"},\n        @\"sn\":@\"0cec3723ca95c7066a2d56e4ef110989ea7865cf\"\n        };\n```\n被转码以后：\n\n```\nbody=%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&sn=0cec3723ca95c7066a2d56e4ef110989ea7865cf\n```\n\n### 2、multipart/form-data\n\nMultipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.\n\n请求的头部信息如下:\n\n//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符\nContent-Type: multipart/form-data; boundary=xxxxx\n下面我们来看一下一个我的Multipart/form-data请求体:\n\n```\nPOST /uploadFile HTTP/1.1\nHost: 上传文件后台地址\nContent-Type: multipart/form-data; boundary=xxxxx\nConnection: keep-alive\nAccept: /\nUser-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0\nContent-Length: 32175\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\n\n--xxxxx\nContent-Disposition: form-data;name=\"file\"\n\nimg.jpeg\n--xxxxx\nContent-Disposition: form-data;name=\"businessType\"\n\nCC_USER_CENTER\n--xxxxx\nContent-Disposition: form-data;name=\"fileType\"\n\nimage\n--xxxxx\nContent-Disposition:form-data;name=\"file\";filename=\"img1.jpeg\"\nContent-Type:image/png\n\n这里是图片数据****************，比较长\n\n--xxxxx--\n\n\n```\n备注：\n>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。\n\n>2，可以上传多个文件。\n\n>3，比较常见的上传文件方式\n\n### 3、application/octet-stream\n这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。\n\n备注：\n>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。\n>\n>2,   只能上传单个文件，不常见。\n","slug":"oc/Upload/oc-Upload-putAndPost","published":1,"updated":"2020-09-01T12:58:10.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602r004tl4s6h5r60pse","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><h3 id=\"1、简单介绍\"><a href=\"#1、简单介绍\" class=\"headerlink\" title=\"1、简单介绍\"></a>1、简单介绍</h3><ol>\n<li>在HTTP协议请求中，有8种方法：</li>\n</ol>\n<ul>\n<li>GET：请求指定的页面信息，并返回实体主体。</li>\n<li>HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</li>\n<li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</li>\n<li>PUT：从客户端向服务器传送的数据取代指定的文档的内容。</li>\n<li>DELETE：请求服务器删除指定的页面。</li>\n<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li>OPTIONS：允许客户端查看服务器的性能。</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>\n<li>PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。</li>\n</ul>\n<h3 id=\"2、区别\"><a href=\"#2、区别\" class=\"headerlink\" title=\"2、区别\"></a>2、区别</h3><p>本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:</p>\n<ol>\n<li>PUT方法的特点：传输的实体部分是一个无结构的二进制数据。</li>\n<li>POST方法的特点：倾向于结构化的数据。</li>\n</ol>\n<p>上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。</p>\n<p>那为什么现在都流行使用post上传文件呢？</p>\n<p>因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。</p>\n<p>备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。</p>\n<h2 id=\"二、HTML文件上传\"><a href=\"#二、HTML文件上传\" class=\"headerlink\" title=\"二、HTML文件上传\"></a>二、HTML文件上传</h2><p>这里为什么要写html的方式上传文件呢？ </p>\n<p>因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。</p>\n<h3 id=\"1、post上传文件：\"><a href=\"#1、post上传文件：\" class=\"headerlink\" title=\"1、post上传文件：\"></a>1、post上传文件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;post上传文件&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;form action&#x3D;&quot;***这里是上传url***&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; &#x2F;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot; &#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put上传文件\"><a href=\"#2、put上传文件\" class=\"headerlink\" title=\"2、put上传文件\"></a>2、put上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;XMLHttpRequest上传文件进度实现&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">        var xhr;</span><br><span class=\"line\">        var ot;&#x2F;&#x2F;</span><br><span class=\"line\">        var oloaded;</span><br><span class=\"line\">        &#x2F;&#x2F;上传文件方法</span><br><span class=\"line\">        function UpladFile() &#123;</span><br><span class=\"line\">            var file &#x3D; document.getElementById(&quot;file&quot;).files[0];</span><br><span class=\"line\">            var reader &#x3D; new FileReader();</span><br><span class=\"line\">            &#x2F;&#x2F;将文件以二进制形式读入页面</span><br><span class=\"line\">            reader.readAsArrayBuffer(file);</span><br><span class=\"line\">            reader.onload&#x3D;function(f)&#123;</span><br><span class=\"line\">                var rawData &#x3D; reader.result;</span><br><span class=\"line\">                var url &#x3D; &quot;***上传路径***&quot;; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class=\"line\">                xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class=\"line\">                xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;video&#x2F;mp4&quot;);</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;x-content-range&quot;, &quot;bytes 0-298327&#x2F;298328&quot;); &#x2F;&#x2F;这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;content-length&quot;, &quot;298328&quot;);   &#x2F;&#x2F;这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件</span><br><span class=\"line\">                xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class=\"line\">                xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class=\"line\">                xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class=\"line\">                xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class=\"line\">                    ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class=\"line\">                    oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                xhr.send(rawData); &#x2F;&#x2F;开始上传</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class=\"line\">        function progressFunction(evt) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class=\"line\">             var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class=\"line\">             &#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class=\"line\">             if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class=\"line\">                 progressBar.max &#x3D; evt.total;</span><br><span class=\"line\">                 progressBar.value &#x3D; evt.loaded;</span><br><span class=\"line\">                 percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class=\"line\">            var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class=\"line\">            var pertime &#x3D; (nt-ot)&#x2F;1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class=\"line\">            ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class=\"line\">            </span><br><span class=\"line\">            var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class=\"line\">            oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#x2F;&#x2F;上传速度计算</span><br><span class=\"line\">            var speed &#x3D; perload&#x2F;pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class=\"line\">            var bspeed &#x3D; speed;</span><br><span class=\"line\">            var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            speed &#x3D; speed.toFixed(1);</span><br><span class=\"line\">            &#x2F;&#x2F;剩余时间</span><br><span class=\"line\">            var resttime &#x3D; ((evt.total-evt.loaded)&#x2F;bspeed).toFixed(1);</span><br><span class=\"line\">            time.innerHTML &#x3D; &#39;，速度：&#39;+speed+units+&#39;，剩余时间：&#39;+resttime+&#39;s&#39;;</span><br><span class=\"line\">               if(bspeed&#x3D;&#x3D;0)</span><br><span class=\"line\">                time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传成功响应</span><br><span class=\"line\">        function uploadComplete(evt) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class=\"line\">         &#x2F;&#x2F;    alert(evt.target.responseText);</span><br><span class=\"line\">             alert(&quot;上传成功！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传失败</span><br><span class=\"line\">        function uploadFailed(evt) &#123;</span><br><span class=\"line\">            alert(&quot;上传失败！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">          &#x2F;&#x2F;取消上传</span><br><span class=\"line\">        function cancleUploadFile()&#123;</span><br><span class=\"line\">            xhr.abort();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;progress id&#x3D;&quot;progressBar&quot; value&#x3D;&quot;0&quot; max&#x3D;&quot;100&quot; style&#x3D;&quot;width: 300px;&quot;&gt;&lt;&#x2F;progress&gt;</span><br><span class=\"line\">    &lt;span id&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;time&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;UpladFile()&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;cancleUploadFile()&quot; value&#x3D;&quot;取消&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、-IOS上传文件\"><a href=\"#三、-IOS上传文件\" class=\"headerlink\" title=\"三、 IOS上传文件\"></a>三、 IOS上传文件</h2><p>以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)</p>\n<h3 id=\"1、post方法上传\"><a href=\"#1、post方法上传\" class=\"headerlink\" title=\"1、post方法上传\"></a>1、post方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *urlString &#x3D; @&quot;&quot;;</span><br><span class=\"line\">AFHTTPRequestOperationManager *mgr &#x3D; [AFHTTPRequestOperationManager manager];</span><br><span class=\"line\">&#x2F;&#x2F;普通参数</span><br><span class=\"line\">NSMutableDictionary *params &#x3D; [NSMutableDictionary dictionary];</span><br><span class=\"line\">[params setObject:@&quot;张三&quot; forKey:@&quot;username&quot;];</span><br><span class=\"line\">[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) &#123;</span><br><span class=\"line\">    NSData *imageData &#x3D; UIImagePNGRepresentation([UIImage imageNamed:@&quot;&quot;]);   </span><br><span class=\"line\">     &#x2F;**</span><br><span class=\"line\">     拼接文件参数</span><br><span class=\"line\">     @fileData : 要上传的文件数据</span><br><span class=\"line\">     @name : 后台定义文件的参数名</span><br><span class=\"line\">     @fileName ： 上传到服务器的文件名称</span><br><span class=\"line\">     @mimeType : 上传的文件类型</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">    [formData appendPartWithFileData:imageData name:@&quot;file&quot; fileName:@&quot;text.png&quot; mimeType:@&quot;image&#x2F;png&quot;];</span><br><span class=\"line\">&#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 获取文件的MIMEType</span><br><span class=\"line\"> @param url 文件路径</span><br><span class=\"line\"> @return 文件MIMEType</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">- (NSString *)MIMEType:(NSURL *)url&#123;</span><br><span class=\"line\">    NSURLRequest *request &#x3D; [NSURLRequest requestWithURL:url];</span><br><span class=\"line\">    NSURLResponse *response &#x3D; nil;</span><br><span class=\"line\">    [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:nil];</span><br><span class=\"line\">    return response.MIMEType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put方法上传\"><a href=\"#2、put方法上传\" class=\"headerlink\" title=\"2、put方法上传\"></a>2、put方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@&quot;请求路径url&quot;]];</span><br><span class=\"line\">&#x2F;&#x2F;设置header参数</span><br><span class=\"line\">[request setValue:@&quot;这是自定义头参数&quot; forHTTPHeaderField:@&quot;x-content-length&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;获取需要上传的Data， 将其保存到沙盒中</span><br><span class=\"line\">_needUploadData &#x3D; [self getNeedUploadData];</span><br><span class=\"line\">NSString *docPath &#x3D; [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath &#x3D; [docPath stringByAppendingPathComponent:@&quot;test&quot;];</span><br><span class=\"line\">[_needUploadData writeToFile:filePath atomically:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSURL *url &#x3D; [NSURL URLWithString:filePath];</span><br><span class=\"line\"></span><br><span class=\"line\">AFHTTPSessionManager *manager &#x3D; [AFHTTPSessionManager manager];</span><br><span class=\"line\">_uploadTask &#x3D; [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class=\"line\">    NSLog(@&quot;uploadProgress：%@&quot;,uploadProgress);</span><br><span class=\"line\">    float progress &#x3D;  1.0 * uploadProgress.completedUnitCount&#x2F;uploadProgress.totalUnitCount;</span><br><span class=\"line\">    NSLog(@&quot;上传视频进度%f&quot;,progress);</span><br><span class=\"line\">&#125; completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;上传结果%@&quot;,responseObject);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[_uploadTask resume];</span><br></pre></td></tr></table></figure>\n\n<p>注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。</p>\n<p> <img src=\"/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png\" alt=\"URI结构图\"></p>\n<h3 id=\"3、文件操作\"><a href=\"#3、文件操作\" class=\"headerlink\" title=\"3、文件操作\"></a>3、文件操作</h3><p>在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。</p>\n<ul>\n<li><p>NSFileHandle： 主要是对文件内容进行读取和写入操作</p>\n</li>\n<li><p>NSFileManager： 主要是对文件进行的操作以及文件信息的获取</p>\n</li>\n</ul>\n<p>在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;获取需要上传的数据</span><br><span class=\"line\">-(NSData *)getNeedUploadData&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;使用传递过来的文件上传</span><br><span class=\"line\">    NSFileHandle *fileHandle &#x3D; [NSFileHandle fileHandleForReadingAtPath:_filePath];</span><br><span class=\"line\">    [fileHandle seekToFileOffset:_startUploadLoaction];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSInteger uploadLength &#x3D; GMOTPosterAdd_uploadVideoSizeForEveryOne;</span><br><span class=\"line\">    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) &gt; _fileTotalSize)&#123;</span><br><span class=\"line\">        uploadLength &#x3D; _fileTotalSize - _startUploadLoaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSData *data &#x3D; [fileHandle readDataOfLength:uploadLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-Content-Type类型介绍\"><a href=\"#四、-Content-Type类型介绍\" class=\"headerlink\" title=\"四、 Content-Type类型介绍\"></a>四、 Content-Type类型介绍</h2><p>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型格式：type&#x2F;subtype(;parameter)? type  </span><br><span class=\"line\">主类型，任意的字符串，如text，如果是*号代表所有；   </span><br><span class=\"line\">subtype 子类型，任意的字符串，如html，如果是*号代表所有；   </span><br><span class=\"line\">parameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。</span><br></pre></td></tr></table></figure>\n\n<p>常见的媒体格式类型如下：</p>\n<ul>\n<li>text/html ： HTML格式</li>\n<li>text/plain ：纯文本格式     </li>\n<li>text/xml ：  XML格式</li>\n<li>image/gif ：gif图片格式    </li>\n<li>image/jpeg ：jpg图片格式 </li>\n<li>image/png：png图片格式</li>\n</ul>\n<p>以application开头的媒体格式类型：</p>\n<ul>\n<li>application/xhtml+xml ：XHTML格式</li>\n<li>application/xml     ： XML数据格式</li>\n<li>application/atom+xml  ：Atom XML聚合格式  </li>\n<li>application/json    ： JSON数据格式</li>\n<li>application/pdf       ：pdf格式  </li>\n<li>application/msword  ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ：  ( <form enctype>)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</form></li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。</li>\n</ul>\n<p>在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。</p>\n<h3 id=\"1、application-x-www-form-urlencoded\"><a href=\"#1、application-x-www-form-urlencoded\" class=\"headerlink\" title=\"1、application/x-www-form-urlencoded\"></a>1、application/x-www-form-urlencoded</h3><p>最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&amp;key2=val2的方式进行编码，key和val都进行了URL转码。<br>在ios中，如果请求参数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *params &#x3D; @&#123;</span><br><span class=\"line\">        @&quot;body&quot;:@&#123;@&quot;reqType&quot;:@&quot;0&quot;&#125;,</span><br><span class=\"line\">        @&quot;sn&quot;:@&quot;0cec3723ca95c7066a2d56e4ef110989ea7865cf&quot;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>被转码以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#x3D;%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&amp;sn&#x3D;0cec3723ca95c7066a2d56e4ef110989ea7865cf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、multipart-form-data\"><a href=\"#2、multipart-form-data\" class=\"headerlink\" title=\"2、multipart/form-data\"></a>2、multipart/form-data</h3><p>Multipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.</p>\n<p>请求的头部信息如下:</p>\n<p>//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符<br>Content-Type: multipart/form-data; boundary=xxxxx<br>下面我们来看一下一个我的Multipart/form-data请求体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;uploadFile HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 上传文件后台地址</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;xxxxx</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Accept: &#x2F;</span><br><span class=\"line\">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB&#x2F;1 CFNetwork&#x2F;808.2.16 Darwin&#x2F;15.6.0</span><br><span class=\"line\">Content-Length: 32175</span><br><span class=\"line\">Accept-Language: en-us</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;file&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">img.jpeg</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;businessType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CC_USER_CENTER</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;fileType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">image</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition:form-data;name&#x3D;&quot;file&quot;;filename&#x3D;&quot;img1.jpeg&quot;</span><br><span class=\"line\">Content-Type:image&#x2F;png</span><br><span class=\"line\"></span><br><span class=\"line\">这里是图片数据****************，比较长</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx--</span><br></pre></td></tr></table></figure>\n<p>备注：</p>\n<blockquote>\n<p>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。</p>\n</blockquote>\n<blockquote>\n<p>2，可以上传多个文件。</p>\n</blockquote>\n<blockquote>\n<p>3，比较常见的上传文件方式</p>\n</blockquote>\n<h3 id=\"3、application-octet-stream\"><a href=\"#3、application-octet-stream\" class=\"headerlink\" title=\"3、application/octet-stream\"></a>3、application/octet-stream</h3><p>这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。</p>\n<p>备注：</p>\n<blockquote>\n<p>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。</p>\n<p>2,   只能上传单个文件，不常见。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><h3 id=\"1、简单介绍\"><a href=\"#1、简单介绍\" class=\"headerlink\" title=\"1、简单介绍\"></a>1、简单介绍</h3><ol>\n<li>在HTTP协议请求中，有8种方法：</li>\n</ol>\n<ul>\n<li>GET：请求指定的页面信息，并返回实体主体。</li>\n<li>HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</li>\n<li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</li>\n<li>PUT：从客户端向服务器传送的数据取代指定的文档的内容。</li>\n<li>DELETE：请求服务器删除指定的页面。</li>\n<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li>OPTIONS：允许客户端查看服务器的性能。</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>\n<li>PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。</li>\n</ul>\n<h3 id=\"2、区别\"><a href=\"#2、区别\" class=\"headerlink\" title=\"2、区别\"></a>2、区别</h3><p>本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:</p>\n<ol>\n<li>PUT方法的特点：传输的实体部分是一个无结构的二进制数据。</li>\n<li>POST方法的特点：倾向于结构化的数据。</li>\n</ol>\n<p>上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。</p>\n<p>那为什么现在都流行使用post上传文件呢？</p>\n<p>因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。</p>\n<p>备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。</p>\n<h2 id=\"二、HTML文件上传\"><a href=\"#二、HTML文件上传\" class=\"headerlink\" title=\"二、HTML文件上传\"></a>二、HTML文件上传</h2><p>这里为什么要写html的方式上传文件呢？ </p>\n<p>因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。</p>\n<h3 id=\"1、post上传文件：\"><a href=\"#1、post上传文件：\" class=\"headerlink\" title=\"1、post上传文件：\"></a>1、post上传文件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;post上传文件&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;form action&#x3D;&quot;***这里是上传url***&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; &#x2F;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot; &#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put上传文件\"><a href=\"#2、put上传文件\" class=\"headerlink\" title=\"2、put上传文件\"></a>2、put上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;XMLHttpRequest上传文件进度实现&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">        var xhr;</span><br><span class=\"line\">        var ot;&#x2F;&#x2F;</span><br><span class=\"line\">        var oloaded;</span><br><span class=\"line\">        &#x2F;&#x2F;上传文件方法</span><br><span class=\"line\">        function UpladFile() &#123;</span><br><span class=\"line\">            var file &#x3D; document.getElementById(&quot;file&quot;).files[0];</span><br><span class=\"line\">            var reader &#x3D; new FileReader();</span><br><span class=\"line\">            &#x2F;&#x2F;将文件以二进制形式读入页面</span><br><span class=\"line\">            reader.readAsArrayBuffer(file);</span><br><span class=\"line\">            reader.onload&#x3D;function(f)&#123;</span><br><span class=\"line\">                var rawData &#x3D; reader.result;</span><br><span class=\"line\">                var url &#x3D; &quot;***上传路径***&quot;; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class=\"line\">                xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class=\"line\">                xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;video&#x2F;mp4&quot;);</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;x-content-range&quot;, &quot;bytes 0-298327&#x2F;298328&quot;); &#x2F;&#x2F;这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;content-length&quot;, &quot;298328&quot;);   &#x2F;&#x2F;这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件</span><br><span class=\"line\">                xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class=\"line\">                xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class=\"line\">                xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class=\"line\">                xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class=\"line\">                    ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class=\"line\">                    oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                xhr.send(rawData); &#x2F;&#x2F;开始上传</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class=\"line\">        function progressFunction(evt) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class=\"line\">             var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class=\"line\">             &#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class=\"line\">             if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class=\"line\">                 progressBar.max &#x3D; evt.total;</span><br><span class=\"line\">                 progressBar.value &#x3D; evt.loaded;</span><br><span class=\"line\">                 percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class=\"line\">            var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class=\"line\">            var pertime &#x3D; (nt-ot)&#x2F;1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class=\"line\">            ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class=\"line\">            </span><br><span class=\"line\">            var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class=\"line\">            oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#x2F;&#x2F;上传速度计算</span><br><span class=\"line\">            var speed &#x3D; perload&#x2F;pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class=\"line\">            var bspeed &#x3D; speed;</span><br><span class=\"line\">            var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            speed &#x3D; speed.toFixed(1);</span><br><span class=\"line\">            &#x2F;&#x2F;剩余时间</span><br><span class=\"line\">            var resttime &#x3D; ((evt.total-evt.loaded)&#x2F;bspeed).toFixed(1);</span><br><span class=\"line\">            time.innerHTML &#x3D; &#39;，速度：&#39;+speed+units+&#39;，剩余时间：&#39;+resttime+&#39;s&#39;;</span><br><span class=\"line\">               if(bspeed&#x3D;&#x3D;0)</span><br><span class=\"line\">                time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传成功响应</span><br><span class=\"line\">        function uploadComplete(evt) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class=\"line\">         &#x2F;&#x2F;    alert(evt.target.responseText);</span><br><span class=\"line\">             alert(&quot;上传成功！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传失败</span><br><span class=\"line\">        function uploadFailed(evt) &#123;</span><br><span class=\"line\">            alert(&quot;上传失败！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">          &#x2F;&#x2F;取消上传</span><br><span class=\"line\">        function cancleUploadFile()&#123;</span><br><span class=\"line\">            xhr.abort();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;progress id&#x3D;&quot;progressBar&quot; value&#x3D;&quot;0&quot; max&#x3D;&quot;100&quot; style&#x3D;&quot;width: 300px;&quot;&gt;&lt;&#x2F;progress&gt;</span><br><span class=\"line\">    &lt;span id&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;time&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;UpladFile()&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;cancleUploadFile()&quot; value&#x3D;&quot;取消&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、-IOS上传文件\"><a href=\"#三、-IOS上传文件\" class=\"headerlink\" title=\"三、 IOS上传文件\"></a>三、 IOS上传文件</h2><p>以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)</p>\n<h3 id=\"1、post方法上传\"><a href=\"#1、post方法上传\" class=\"headerlink\" title=\"1、post方法上传\"></a>1、post方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *urlString &#x3D; @&quot;&quot;;</span><br><span class=\"line\">AFHTTPRequestOperationManager *mgr &#x3D; [AFHTTPRequestOperationManager manager];</span><br><span class=\"line\">&#x2F;&#x2F;普通参数</span><br><span class=\"line\">NSMutableDictionary *params &#x3D; [NSMutableDictionary dictionary];</span><br><span class=\"line\">[params setObject:@&quot;张三&quot; forKey:@&quot;username&quot;];</span><br><span class=\"line\">[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) &#123;</span><br><span class=\"line\">    NSData *imageData &#x3D; UIImagePNGRepresentation([UIImage imageNamed:@&quot;&quot;]);   </span><br><span class=\"line\">     &#x2F;**</span><br><span class=\"line\">     拼接文件参数</span><br><span class=\"line\">     @fileData : 要上传的文件数据</span><br><span class=\"line\">     @name : 后台定义文件的参数名</span><br><span class=\"line\">     @fileName ： 上传到服务器的文件名称</span><br><span class=\"line\">     @mimeType : 上传的文件类型</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">    [formData appendPartWithFileData:imageData name:@&quot;file&quot; fileName:@&quot;text.png&quot; mimeType:@&quot;image&#x2F;png&quot;];</span><br><span class=\"line\">&#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 获取文件的MIMEType</span><br><span class=\"line\"> @param url 文件路径</span><br><span class=\"line\"> @return 文件MIMEType</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">- (NSString *)MIMEType:(NSURL *)url&#123;</span><br><span class=\"line\">    NSURLRequest *request &#x3D; [NSURLRequest requestWithURL:url];</span><br><span class=\"line\">    NSURLResponse *response &#x3D; nil;</span><br><span class=\"line\">    [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:nil];</span><br><span class=\"line\">    return response.MIMEType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put方法上传\"><a href=\"#2、put方法上传\" class=\"headerlink\" title=\"2、put方法上传\"></a>2、put方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@&quot;请求路径url&quot;]];</span><br><span class=\"line\">&#x2F;&#x2F;设置header参数</span><br><span class=\"line\">[request setValue:@&quot;这是自定义头参数&quot; forHTTPHeaderField:@&quot;x-content-length&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;获取需要上传的Data， 将其保存到沙盒中</span><br><span class=\"line\">_needUploadData &#x3D; [self getNeedUploadData];</span><br><span class=\"line\">NSString *docPath &#x3D; [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath &#x3D; [docPath stringByAppendingPathComponent:@&quot;test&quot;];</span><br><span class=\"line\">[_needUploadData writeToFile:filePath atomically:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSURL *url &#x3D; [NSURL URLWithString:filePath];</span><br><span class=\"line\"></span><br><span class=\"line\">AFHTTPSessionManager *manager &#x3D; [AFHTTPSessionManager manager];</span><br><span class=\"line\">_uploadTask &#x3D; [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class=\"line\">    NSLog(@&quot;uploadProgress：%@&quot;,uploadProgress);</span><br><span class=\"line\">    float progress &#x3D;  1.0 * uploadProgress.completedUnitCount&#x2F;uploadProgress.totalUnitCount;</span><br><span class=\"line\">    NSLog(@&quot;上传视频进度%f&quot;,progress);</span><br><span class=\"line\">&#125; completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;上传结果%@&quot;,responseObject);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[_uploadTask resume];</span><br></pre></td></tr></table></figure>\n\n<p>注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。</p>\n<p> <img src=\"/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png\" alt=\"URI结构图\"></p>\n<h3 id=\"3、文件操作\"><a href=\"#3、文件操作\" class=\"headerlink\" title=\"3、文件操作\"></a>3、文件操作</h3><p>在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。</p>\n<ul>\n<li><p>NSFileHandle： 主要是对文件内容进行读取和写入操作</p>\n</li>\n<li><p>NSFileManager： 主要是对文件进行的操作以及文件信息的获取</p>\n</li>\n</ul>\n<p>在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;获取需要上传的数据</span><br><span class=\"line\">-(NSData *)getNeedUploadData&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;使用传递过来的文件上传</span><br><span class=\"line\">    NSFileHandle *fileHandle &#x3D; [NSFileHandle fileHandleForReadingAtPath:_filePath];</span><br><span class=\"line\">    [fileHandle seekToFileOffset:_startUploadLoaction];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSInteger uploadLength &#x3D; GMOTPosterAdd_uploadVideoSizeForEveryOne;</span><br><span class=\"line\">    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) &gt; _fileTotalSize)&#123;</span><br><span class=\"line\">        uploadLength &#x3D; _fileTotalSize - _startUploadLoaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSData *data &#x3D; [fileHandle readDataOfLength:uploadLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-Content-Type类型介绍\"><a href=\"#四、-Content-Type类型介绍\" class=\"headerlink\" title=\"四、 Content-Type类型介绍\"></a>四、 Content-Type类型介绍</h2><p>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型格式：type&#x2F;subtype(;parameter)? type  </span><br><span class=\"line\">主类型，任意的字符串，如text，如果是*号代表所有；   </span><br><span class=\"line\">subtype 子类型，任意的字符串，如html，如果是*号代表所有；   </span><br><span class=\"line\">parameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。</span><br></pre></td></tr></table></figure>\n\n<p>常见的媒体格式类型如下：</p>\n<ul>\n<li>text/html ： HTML格式</li>\n<li>text/plain ：纯文本格式     </li>\n<li>text/xml ：  XML格式</li>\n<li>image/gif ：gif图片格式    </li>\n<li>image/jpeg ：jpg图片格式 </li>\n<li>image/png：png图片格式</li>\n</ul>\n<p>以application开头的媒体格式类型：</p>\n<ul>\n<li>application/xhtml+xml ：XHTML格式</li>\n<li>application/xml     ： XML数据格式</li>\n<li>application/atom+xml  ：Atom XML聚合格式  </li>\n<li>application/json    ： JSON数据格式</li>\n<li>application/pdf       ：pdf格式  </li>\n<li>application/msword  ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ：  ( <form enctype>)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</form></li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。</li>\n</ul>\n<p>在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。</p>\n<h3 id=\"1、application-x-www-form-urlencoded\"><a href=\"#1、application-x-www-form-urlencoded\" class=\"headerlink\" title=\"1、application/x-www-form-urlencoded\"></a>1、application/x-www-form-urlencoded</h3><p>最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&amp;key2=val2的方式进行编码，key和val都进行了URL转码。<br>在ios中，如果请求参数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *params &#x3D; @&#123;</span><br><span class=\"line\">        @&quot;body&quot;:@&#123;@&quot;reqType&quot;:@&quot;0&quot;&#125;,</span><br><span class=\"line\">        @&quot;sn&quot;:@&quot;0cec3723ca95c7066a2d56e4ef110989ea7865cf&quot;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>被转码以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#x3D;%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&amp;sn&#x3D;0cec3723ca95c7066a2d56e4ef110989ea7865cf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、multipart-form-data\"><a href=\"#2、multipart-form-data\" class=\"headerlink\" title=\"2、multipart/form-data\"></a>2、multipart/form-data</h3><p>Multipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.</p>\n<p>请求的头部信息如下:</p>\n<p>//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符<br>Content-Type: multipart/form-data; boundary=xxxxx<br>下面我们来看一下一个我的Multipart/form-data请求体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;uploadFile HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 上传文件后台地址</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;xxxxx</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Accept: &#x2F;</span><br><span class=\"line\">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB&#x2F;1 CFNetwork&#x2F;808.2.16 Darwin&#x2F;15.6.0</span><br><span class=\"line\">Content-Length: 32175</span><br><span class=\"line\">Accept-Language: en-us</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;file&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">img.jpeg</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;businessType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CC_USER_CENTER</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;fileType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">image</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition:form-data;name&#x3D;&quot;file&quot;;filename&#x3D;&quot;img1.jpeg&quot;</span><br><span class=\"line\">Content-Type:image&#x2F;png</span><br><span class=\"line\"></span><br><span class=\"line\">这里是图片数据****************，比较长</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx--</span><br></pre></td></tr></table></figure>\n<p>备注：</p>\n<blockquote>\n<p>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。</p>\n</blockquote>\n<blockquote>\n<p>2，可以上传多个文件。</p>\n</blockquote>\n<blockquote>\n<p>3，比较常见的上传文件方式</p>\n</blockquote>\n<h3 id=\"3、application-octet-stream\"><a href=\"#3、application-octet-stream\" class=\"headerlink\" title=\"3、application/octet-stream\"></a>3、application/octet-stream</h3><p>这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。</p>\n<p>备注：</p>\n<blockquote>\n<p>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。</p>\n<p>2,   只能上传单个文件，不常见。</p>\n</blockquote>\n"},{"title":"水印","date":"2020-04-15T09:38:27.000Z","_content":"\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-wk/oc-WaterMark-wk-1.png)\n\n2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。\n\n第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。\n\n上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。\n\n## 二、 代码\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    self.view.backgroundColor = [UIColor whiteColor];\n\n    CGSize screenSize = [UIScreen mainScreen].bounds.size;\n    CGFloat screenW = screenSize.width;\n    CGFloat screenH = screenSize.height;\n\n    //水印图片\n    UIImage *img = [self generateWaterMark:@\"这是水印啦啦啦\"];\n\n    UIImageView *waterMarkImgv = [[UIImageView alloc] init];\n    \n    \n    waterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n    \n    //让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。\n    waterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\n    waterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\n    waterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n    [self.view addSubview:waterMarkImgv];\n}\n\n\n- (UIImage *)generateWaterMark:(NSString *)hint{\n    \n    UIColor *textColor = [UIColor colorWithRed:202.0/255.0\n                                         green:204.0/255.0\n                                          blue:207.0/255.0\n                                         alpha:0.4];\n    \n    UIFont *font = [UIFont systemFontOfSize:13];\n    \n    CGSize textSize = [self textSize:hint font:font];\n    \n    UIView *subv = [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];\n    \n    UILabel *m1 = [[UILabel alloc] init];\n    m1.frame = CGRectMake(0, 0, textSize.width, textSize.height);\n    m1.textColor = textColor;\n    m1.textAlignment = NSTextAlignmentCenter;\n    m1.font = font;\n    m1.text = hint;\n    \n    [subv addSubview:m1];\n    \n    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    [subv.layer renderInContext:currentContext];\n    UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return screenshot;\n}\n\n- (CGSize)textSize:(NSString *)text font:(UIFont *)font {\n    if (!text) return CGSizeZero;\n    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)\n                              options:NSStringDrawingUsesLineFragmentOrigin\n                           attributes:@{NSFontAttributeName : font}\n                              context:nil].size;\n}\n```\n\n- 1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 \n\n```\n//主要代码\nwaterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n```\n\n- 2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。\n\n```\nwaterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\nwaterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\nwaterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n```","source":"_posts/oc/WaterMark/oc-WaterMark-wk.md","raw":"---\ntitle: 水印\ndate: 2020-04-15 17:38:27\ncategories:\n- OC\n- 水印\ntags: [动画,水印]\n---\n\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-wk/oc-WaterMark-wk-1.png)\n\n2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。\n\n第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。\n\n上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。\n\n## 二、 代码\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    self.view.backgroundColor = [UIColor whiteColor];\n\n    CGSize screenSize = [UIScreen mainScreen].bounds.size;\n    CGFloat screenW = screenSize.width;\n    CGFloat screenH = screenSize.height;\n\n    //水印图片\n    UIImage *img = [self generateWaterMark:@\"这是水印啦啦啦\"];\n\n    UIImageView *waterMarkImgv = [[UIImageView alloc] init];\n    \n    \n    waterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n    \n    //让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。\n    waterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\n    waterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\n    waterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n    [self.view addSubview:waterMarkImgv];\n}\n\n\n- (UIImage *)generateWaterMark:(NSString *)hint{\n    \n    UIColor *textColor = [UIColor colorWithRed:202.0/255.0\n                                         green:204.0/255.0\n                                          blue:207.0/255.0\n                                         alpha:0.4];\n    \n    UIFont *font = [UIFont systemFontOfSize:13];\n    \n    CGSize textSize = [self textSize:hint font:font];\n    \n    UIView *subv = [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];\n    \n    UILabel *m1 = [[UILabel alloc] init];\n    m1.frame = CGRectMake(0, 0, textSize.width, textSize.height);\n    m1.textColor = textColor;\n    m1.textAlignment = NSTextAlignmentCenter;\n    m1.font = font;\n    m1.text = hint;\n    \n    [subv addSubview:m1];\n    \n    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    [subv.layer renderInContext:currentContext];\n    UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return screenshot;\n}\n\n- (CGSize)textSize:(NSString *)text font:(UIFont *)font {\n    if (!text) return CGSizeZero;\n    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)\n                              options:NSStringDrawingUsesLineFragmentOrigin\n                           attributes:@{NSFontAttributeName : font}\n                              context:nil].size;\n}\n```\n\n- 1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 \n\n```\n//主要代码\nwaterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n```\n\n- 2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。\n\n```\nwaterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\nwaterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\nwaterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n```","slug":"oc/WaterMark/oc-WaterMark-wk","published":1,"updated":"2020-09-01T12:58:24.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602s004xl4s60pxy6q13","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png\" alt=\"图1\"></p>\n<p>2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。</p>\n<p>第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。</p>\n<p>上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。</p>\n<h2 id=\"二、-代码\"><a href=\"#二、-代码\" class=\"headerlink\" title=\"二、 代码\"></a>二、 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.view.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\"></span><br><span class=\"line\">    CGSize screenSize &#x3D; [UIScreen mainScreen].bounds.size;</span><br><span class=\"line\">    CGFloat screenW &#x3D; screenSize.width;</span><br><span class=\"line\">    CGFloat screenH &#x3D; screenSize.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;水印图片</span><br><span class=\"line\">    UIImage *img &#x3D; [self generateWaterMark:@&quot;这是水印啦啦啦&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *waterMarkImgv &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。</span><br><span class=\"line\">    waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br><span class=\"line\">    [self.view addSubview:waterMarkImgv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (UIImage *)generateWaterMark:(NSString *)hint&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIColor *textColor &#x3D; [UIColor colorWithRed:202.0&#x2F;255.0</span><br><span class=\"line\">                                         green:204.0&#x2F;255.0</span><br><span class=\"line\">                                          blue:207.0&#x2F;255.0</span><br><span class=\"line\">                                         alpha:0.4];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIFont *font &#x3D; [UIFont systemFontOfSize:13];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGSize textSize &#x3D; [self textSize:hint font:font];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIView *subv &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *m1 &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">    m1.frame &#x3D; CGRectMake(0, 0, textSize.width, textSize.height);</span><br><span class=\"line\">    m1.textColor &#x3D; textColor;</span><br><span class=\"line\">    m1.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    m1.font &#x3D; font;</span><br><span class=\"line\">    m1.text &#x3D; hint;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [subv addSubview:m1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);</span><br><span class=\"line\">    CGContextRef currentContext &#x3D; UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    [subv.layer renderInContext:currentContext];</span><br><span class=\"line\">    UIImage *screenshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">    return screenshot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)textSize:(NSString *)text font:(UIFont *)font &#123;</span><br><span class=\"line\">    if (!text) return CGSizeZero;</span><br><span class=\"line\">    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)</span><br><span class=\"line\">                              options:NSStringDrawingUsesLineFragmentOrigin</span><br><span class=\"line\">                           attributes:@&#123;NSFontAttributeName : font&#125;</span><br><span class=\"line\">                              context:nil].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;主要代码</span><br><span class=\"line\">waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png\" alt=\"图1\"></p>\n<p>2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。</p>\n<p>第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。</p>\n<p>上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。</p>\n<h2 id=\"二、-代码\"><a href=\"#二、-代码\" class=\"headerlink\" title=\"二、 代码\"></a>二、 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.view.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\"></span><br><span class=\"line\">    CGSize screenSize &#x3D; [UIScreen mainScreen].bounds.size;</span><br><span class=\"line\">    CGFloat screenW &#x3D; screenSize.width;</span><br><span class=\"line\">    CGFloat screenH &#x3D; screenSize.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;水印图片</span><br><span class=\"line\">    UIImage *img &#x3D; [self generateWaterMark:@&quot;这是水印啦啦啦&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *waterMarkImgv &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。</span><br><span class=\"line\">    waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br><span class=\"line\">    [self.view addSubview:waterMarkImgv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (UIImage *)generateWaterMark:(NSString *)hint&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIColor *textColor &#x3D; [UIColor colorWithRed:202.0&#x2F;255.0</span><br><span class=\"line\">                                         green:204.0&#x2F;255.0</span><br><span class=\"line\">                                          blue:207.0&#x2F;255.0</span><br><span class=\"line\">                                         alpha:0.4];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIFont *font &#x3D; [UIFont systemFontOfSize:13];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGSize textSize &#x3D; [self textSize:hint font:font];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIView *subv &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *m1 &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">    m1.frame &#x3D; CGRectMake(0, 0, textSize.width, textSize.height);</span><br><span class=\"line\">    m1.textColor &#x3D; textColor;</span><br><span class=\"line\">    m1.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    m1.font &#x3D; font;</span><br><span class=\"line\">    m1.text &#x3D; hint;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [subv addSubview:m1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);</span><br><span class=\"line\">    CGContextRef currentContext &#x3D; UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    [subv.layer renderInContext:currentContext];</span><br><span class=\"line\">    UIImage *screenshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">    return screenshot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)textSize:(NSString *)text font:(UIFont *)font &#123;</span><br><span class=\"line\">    if (!text) return CGSizeZero;</span><br><span class=\"line\">    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)</span><br><span class=\"line\">                              options:NSStringDrawingUsesLineFragmentOrigin</span><br><span class=\"line\">                           attributes:@&#123;NSFontAttributeName : font&#125;</span><br><span class=\"line\">                              context:nil].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;主要代码</span><br><span class=\"line\">waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br></pre></td></tr></table></figure>"},{"title":"旋转UILabel","date":"2020-04-15T09:16:51.000Z","_content":"\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png)\n\n![图2](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg)\n\n就是上图中的 “剩余3天” 和 \"延期\" 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？\n\n2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ \n\n经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。\n\n## 二、 实现代码 \n\n\n```\n///根据文字，获取倾斜的图片\n- (UIImage *)imageWithText:(NSString *)text{\n    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];\n    view.backgroundColor = [UIColor clearColor];\n    \n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];\n    label.backgroundColor = RGBAllColor(0xFF2C68);\n    label.textColor = [UIColor whiteColor];\n    label.text = text;\n    label.font = FONT_QuanJiao(10.f);\n    label.textAlignment = NSTextAlignmentCenter;\n    label.transform = CGAffineTransformMakeRotation(M_PI / 4.0);\n    [view addSubview:label];\n    \n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image=UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n\n\n","source":"_posts/oc/WaterMark/oc-WaterMark-rotateLabel.md","raw":"---\ntitle: 旋转UILabel\ndate: 2020-04-15 17:16:51\ncategories:\n- OC\n- 水印\ntags: [动画,水印]\n---\n\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png)\n\n![图2](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg)\n\n就是上图中的 “剩余3天” 和 \"延期\" 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？\n\n2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ \n\n经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。\n\n## 二、 实现代码 \n\n\n```\n///根据文字，获取倾斜的图片\n- (UIImage *)imageWithText:(NSString *)text{\n    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];\n    view.backgroundColor = [UIColor clearColor];\n    \n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];\n    label.backgroundColor = RGBAllColor(0xFF2C68);\n    label.textColor = [UIColor whiteColor];\n    label.text = text;\n    label.font = FONT_QuanJiao(10.f);\n    label.textAlignment = NSTextAlignmentCenter;\n    label.transform = CGAffineTransformMakeRotation(M_PI / 4.0);\n    [view addSubview:label];\n    \n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image=UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n\n\n","slug":"oc/WaterMark/oc-WaterMark-rotateLabel","published":1,"updated":"2020-09-01T12:58:14.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckelg602t0050l4s6a5uqfl8v","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg\" alt=\"图2\"></p>\n<p>就是上图中的 “剩余3天” 和 “延期” 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？</p>\n<p>2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ </p>\n<p>经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。</p>\n<h2 id=\"二、-实现代码\"><a href=\"#二、-实现代码\" class=\"headerlink\" title=\"二、 实现代码\"></a>二、 实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文字，获取倾斜的图片</span><br><span class=\"line\">- (UIImage *)imageWithText:(NSString *)text&#123;</span><br><span class=\"line\">    UIView *view &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</span><br><span class=\"line\">    view.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *label &#x3D; [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];</span><br><span class=\"line\">    label.backgroundColor &#x3D; RGBAllColor(0xFF2C68);</span><br><span class=\"line\">    label.textColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\">    label.text &#x3D; text;</span><br><span class=\"line\">    label.font &#x3D; FONT_QuanJiao(10.f);</span><br><span class=\"line\">    label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    label.transform &#x3D; CGAffineTransformMakeRotation(M_PI &#x2F; 4.0);</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    [view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">    UIImage *image&#x3D;UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    return image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg\" alt=\"图2\"></p>\n<p>就是上图中的 “剩余3天” 和 “延期” 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？</p>\n<p>2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ </p>\n<p>经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。</p>\n<h2 id=\"二、-实现代码\"><a href=\"#二、-实现代码\" class=\"headerlink\" title=\"二、 实现代码\"></a>二、 实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文字，获取倾斜的图片</span><br><span class=\"line\">- (UIImage *)imageWithText:(NSString *)text&#123;</span><br><span class=\"line\">    UIView *view &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</span><br><span class=\"line\">    view.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *label &#x3D; [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];</span><br><span class=\"line\">    label.backgroundColor &#x3D; RGBAllColor(0xFF2C68);</span><br><span class=\"line\">    label.textColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\">    label.text &#x3D; text;</span><br><span class=\"line\">    label.font &#x3D; FONT_QuanJiao(10.f);</span><br><span class=\"line\">    label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    label.transform &#x3D; CGAffineTransformMakeRotation(M_PI &#x2F; 4.0);</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    [view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">    UIImage *image&#x3D;UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    return image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_002.png","slug":"01_002.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_003.png","slug":"01_003.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_008.png","slug":"01_008.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_007.png","slug":"01_007.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_009.png","slug":"01_009.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_012.png","slug":"01_012.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_006.png","slug":"01_006.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userVerification.png","slug":"userVerification.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/startFingerPrint.png","slug":"startFingerPrint.png","post":"ckelg602l0048l4s6hfe67s0k","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/fingerLogin.png","slug":"fingerLogin.png","post":"ckelg602l0048l4s6hfe67s0k","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_001.png","slug":"01_001.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_005.png","slug":"01_005.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","slug":"ios_akey_flowChart.png","post":"ckelg602j0042l4s693ndftu4","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_004.png","slug":"01_004.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_010.png","slug":"01_010.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_011.png","slug":"01_011.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_013.png","slug":"01_013.png","post":"ckelg600x001pl4s6d7ljdiv1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","slug":"oc-Ani-customProgressCircle-1.png","post":"ckelg602d003tl4s60hsy2031","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","slug":"ios_qrcode_login.jpeg","post":"ckelg602m004cl4s67jfdhvh9","modified":0,"renderable":0},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","slug":"oc-screenSize-detail-1.png","post":"ckelg602n004fl4s66q2nfppl","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","slug":"oc-WaterMark-wk-1.png","post":"ckelg602s004xl4s60pxy6q13","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","slug":"oc-foundation-strFile-1.jpeg","post":"ckelg6022003il4s60mwlbkks","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","slug":"oc-foundation-strFile-2.jpeg","post":"ckelg6022003il4s60mwlbkks","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","slug":"oc-WaterMark-rotateLabel-1.png","post":"ckelg602t0050l4s6a5uqfl8v","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","slug":"oc-WaterMark-rotateLabel-2.jpg","post":"ckelg602t0050l4s6a5uqfl8v","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","slug":"oc-Ani-TableViewHeader-1.jpeg","post":"ckelg602i003yl4s69qdy3zk9","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","slug":"oc-Ani-TableViewHeader-2.jpeg","post":"ckelg602i003yl4s69qdy3zk9","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","slug":"oc-Ani-TableViewHeader-3.jpeg","post":"ckelg602i003yl4s69qdy3zk9","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/dataStuct.png","slug":"dataStuct.png","post":"ckelg602l0048l4s6hfe67s0k","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","slug":"oc-Ani-rotatingMenu-1.jpeg","post":"ckelg602l0046l4s6hvz43p3c","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","slug":"oc-Ani-rotatingMenu-2.jpeg","post":"ckelg602l0046l4s6hvz43p3c","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","slug":"oc-Ani-rotatingMenu-3.jpeg","post":"ckelg602l0046l4s6hvz43p3c","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","slug":"oc-UITableViewCell-sc-1.jpeg","post":"ckelg602o004jl4s6fuum86ky","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","slug":"oc-UITableViewCell-sc-2.jpeg","post":"ckelg602o004jl4s6fuum86ky","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","slug":"oc-UITableViewCell-sc-3.jpeg","post":"ckelg602o004jl4s6fuum86ky","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_1.jpeg","slug":"category_1.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_2.jpeg","slug":"category_2.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_3.jpeg","slug":"category_3.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_4.jpeg","slug":"category_4.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_5.jpeg","slug":"category_5.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_6.jpeg","slug":"category_6.jpeg","post":"ckelg602c003rl4s6fr1w5zjx","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_1.jpeg","slug":"class_init_1.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_2.jpeg","slug":"class_init_2.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_3.jpeg","slug":"class_init_3.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_4.jpeg","slug":"class_init_4.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_5.jpeg","slug":"class_init_5.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_6.jpeg","slug":"class_init_6.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_7.jpeg","slug":"class_init_7.jpeg","post":"ckelg602b003nl4s602r51z7l","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","slug":"oc-UITableViewCell-xib-1.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","slug":"oc-UITableViewCell-xib-2.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","slug":"oc-UITableViewCell-xib-3.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","slug":"oc-UITableViewCell-xib-4.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","slug":"oc-UITableViewCell-xib-5.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","slug":"oc-UITableViewCell-xib-6.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","slug":"oc-UITableViewCell-xib-7.jpeg","post":"ckelg602p004ml4s62zr6bl8r","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","slug":"backgroundSetup.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","slug":"identityTokenDataStruct.jpg","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","slug":"identityTokenVerityProcess.jpg","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/joinSteps.png","slug":"joinSteps.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","slug":"jwtDataStruct.jpg","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","slug":"loginBtnStyle.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","slug":"signVerityProcess.jpg","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/styleLocalize.png","slug":"styleLocalize.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userLogin.png","slug":"userLogin.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","slug":"xcodeSetup.png","post":"ckelg602k0043l4s643ue6jvf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckelg5zxv0008l4s63xha519z","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy1000gl4s674na43om"},{"post_id":"ckelg5zxq0003l4s68rwidmv3","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy2000ll4s68j0kgewx"},{"post_id":"ckelg5zxx0009l4s6a7nqha5y","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy3000nl4s64owrcfdj"},{"post_id":"ckelg5zxs0004l4s61wircrzn","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy3000ql4s6gz5v02i3"},{"post_id":"ckelg5zy0000fl4s62dek9l76","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy3000sl4s63n037ifz"},{"post_id":"ckelg5zxv0007l4s66tho61q0","category_id":"ckelg5zxt0005l4s6hosz1ke5","_id":"ckelg5zy3000tl4s69e5l1ixt"},{"post_id":"ckelg5zxz000dl4s67aeh3v5a","category_id":"ckelg5zy3000ol4s6gpea7zex","_id":"ckelg5zy3000ul4s6h9p04as6"},{"post_id":"ckelg600h0018l4s66cnx0wg5","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg600o001dl4s69tbcbitp"},{"post_id":"ckelg600h0018l4s66cnx0wg5","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg600r001gl4s634kxbszf"},{"post_id":"ckelg6005000zl4s6c61n044e","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg600t001il4s6bdtwf2ux"},{"post_id":"ckelg6005000zl4s6c61n044e","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg600w001ll4s64coebcsa"},{"post_id":"ckelg600j0019l4s6fsf11kb3","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg600x001nl4s6fs0uf29b"},{"post_id":"ckelg600j0019l4s6fsf11kb3","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg600y001ql4s64d604hq6"},{"post_id":"ckelg600l001bl4s6a0u71un3","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg6012001sl4s6d80p8gob"},{"post_id":"ckelg600l001bl4s6a0u71un3","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg6016001vl4s60yxi21kq"},{"post_id":"ckelg6002000vl4s60x95g8q7","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601b001xl4s6gn0h4pg4"},{"post_id":"ckelg6002000vl4s60x95g8q7","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601e0020l4s6hhsjc394"},{"post_id":"ckelg600n001cl4s68wzf2uqy","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601i0022l4s6094ub75p"},{"post_id":"ckelg600n001cl4s68wzf2uqy","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601l0025l4s641lqagff"},{"post_id":"ckelg600q001fl4s63bpi6gep","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601m0026l4s63fsfd8zd"},{"post_id":"ckelg600q001fl4s63bpi6gep","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601m0028l4s6287a57n9"},{"post_id":"ckelg60060010l4s6dspiebty","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601m0029l4s651oy6qq3"},{"post_id":"ckelg60060010l4s6dspiebty","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601m002bl4s61aipa5do"},{"post_id":"ckelg60080012l4s67dh91w09","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601n002cl4s65lu3h0cu"},{"post_id":"ckelg60080012l4s67dh91w09","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601n002el4s6adx6dos5"},{"post_id":"ckelg6002000wl4s6aaspb61x","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601n002fl4s6fr66gg8d"},{"post_id":"ckelg6002000wl4s6aaspb61x","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601n002hl4s62wx3d4vp"},{"post_id":"ckelg600a0013l4s67c1s88oq","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601n002il4s6f13z1zbe"},{"post_id":"ckelg600a0013l4s67c1s88oq","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601o002kl4s6bxzu4o2i"},{"post_id":"ckelg600c0015l4s67jp75wx8","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601o002ll4s62lw47bps"},{"post_id":"ckelg600c0015l4s67jp75wx8","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601o002nl4s69f10e5lw"},{"post_id":"ckelg6003000yl4s6b10t9oxu","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601o002ol4s6dgvh8xe8"},{"post_id":"ckelg6003000yl4s6b10t9oxu","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601p002ql4s69jcf45vs"},{"post_id":"ckelg600e0016l4s6hjke3lej","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601p002rl4s6ghukefq3"},{"post_id":"ckelg600e0016l4s6hjke3lej","category_id":"ckelg600f0017l4s61xsyhqa8","_id":"ckelg601p002tl4s65onwbmox"},{"post_id":"ckelg600t001hl4s63xjugthr","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601p002ul4s67deb0xri"},{"post_id":"ckelg600t001hl4s63xjugthr","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601q002wl4s66efudj4c"},{"post_id":"ckelg600u001kl4s6brfq20mj","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601q002xl4s680ie4tdw"},{"post_id":"ckelg600u001kl4s6brfq20mj","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601q002zl4s631vu5mzt"},{"post_id":"ckelg600w001ml4s65fqd135y","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601q0030l4s673t28bdc"},{"post_id":"ckelg600w001ml4s65fqd135y","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601q0032l4s6hvy18u3u"},{"post_id":"ckelg600x001pl4s6d7ljdiv1","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601q0033l4s6fjszdekc"},{"post_id":"ckelg600x001pl4s6d7ljdiv1","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r0034l4s69avn7d0o"},{"post_id":"ckelg6011001rl4s69r4oh83d","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r0035l4s60h3v5nak"},{"post_id":"ckelg6011001rl4s69r4oh83d","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r0036l4s6dmzqf0nr"},{"post_id":"ckelg6015001ul4s6evly7p1z","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r0037l4s61x2n2fr7"},{"post_id":"ckelg6015001ul4s6evly7p1z","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r0038l4s64u677pnw"},{"post_id":"ckelg601a001wl4s6apy1e6on","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r0039l4s6ee1ialub"},{"post_id":"ckelg601a001wl4s6apy1e6on","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r003al4s6cktah3h0"},{"post_id":"ckelg601e001zl4s68r0yaufs","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r003bl4s6334fgkmj"},{"post_id":"ckelg601e001zl4s68r0yaufs","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r003cl4s64n6e5o2z"},{"post_id":"ckelg601h0021l4s6clss77et","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r003dl4s66gdbblos"},{"post_id":"ckelg601h0021l4s6clss77et","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r003el4s64l5k42fl"},{"post_id":"ckelg601l0024l4s6bxkt5ke9","category_id":"ckelg6003000xl4s61pjxauom","_id":"ckelg601r003fl4s6bkrwfaqt"},{"post_id":"ckelg601l0024l4s6bxkt5ke9","category_id":"ckelg601m002al4s6bxsdeoz8","_id":"ckelg601r003gl4s6al16bx84"},{"post_id":"ckelg6028003ml4s62r2g17o1","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602m004al4s6hho5cr0q"},{"post_id":"ckelg6028003ml4s62r2g17o1","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602n004el4s61jltdv4k"},{"post_id":"ckelg6021003hl4s616yvfdqu","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602o004hl4s604l5ebzv"},{"post_id":"ckelg6021003hl4s616yvfdqu","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602p004kl4s6gq6od1bn"},{"post_id":"ckelg602b003nl4s602r51z7l","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602q004ol4s62sts20ic"},{"post_id":"ckelg602b003nl4s602r51z7l","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602r004rl4s638uk3tgx"},{"post_id":"ckelg602c003rl4s6fr1w5zjx","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602s004vl4s688hdbdjf"},{"post_id":"ckelg602c003rl4s6fr1w5zjx","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602s004yl4s6ghuzhhgn"},{"post_id":"ckelg6022003il4s60mwlbkks","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602u0051l4s65a4sazal"},{"post_id":"ckelg6022003il4s60mwlbkks","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602v0054l4s690u8efen"},{"post_id":"ckelg602d003tl4s60hsy2031","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602v0057l4s6by9f71ts"},{"post_id":"ckelg602d003tl4s60hsy2031","category_id":"ckelg602r004ul4s664ed22jd","_id":"ckelg602w0059l4s65oy9837n"},{"post_id":"ckelg602e003xl4s662vsby26","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602w005cl4s66jk07tei"},{"post_id":"ckelg602e003xl4s662vsby26","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602w005el4s6bbvpc2n4"},{"post_id":"ckelg6024003ll4s695ks4x7b","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602x005hl4s6fwpp4797"},{"post_id":"ckelg6024003ll4s695ks4x7b","category_id":"ckelg602i003zl4s6ft86d6bz","_id":"ckelg602x005jl4s6anhi04sa"},{"post_id":"ckelg602i003yl4s69qdy3zk9","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602x005ll4s6f94fgy6l"},{"post_id":"ckelg602i003yl4s69qdy3zk9","category_id":"ckelg602r004ul4s664ed22jd","_id":"ckelg602y005ol4s6gejjef58"},{"post_id":"ckelg602j0042l4s693ndftu4","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602y005rl4s65pz80tul"},{"post_id":"ckelg602j0042l4s693ndftu4","category_id":"ckelg602w005gl4s65z88hzxk","_id":"ckelg602y005tl4s6bv934eg3"},{"post_id":"ckelg602k0043l4s643ue6jvf","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602z005wl4s63y1tegq0"},{"post_id":"ckelg602k0043l4s643ue6jvf","category_id":"ckelg602w005gl4s65z88hzxk","_id":"ckelg602z005yl4s6hcythawe"},{"post_id":"ckelg602l0046l4s6hvz43p3c","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg602z0061l4s6gc6o4y10"},{"post_id":"ckelg602l0046l4s6hvz43p3c","category_id":"ckelg602r004ul4s664ed22jd","_id":"ckelg60300063l4s6awrzesjr"},{"post_id":"ckelg602l0048l4s6hfe67s0k","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg60300066l4s64cgydnlk"},{"post_id":"ckelg602l0048l4s6hfe67s0k","category_id":"ckelg602w005gl4s65z88hzxk","_id":"ckelg60300068l4s6e5g6ccys"},{"post_id":"ckelg602m004cl4s67jfdhvh9","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6031006al4s64hckds7r"},{"post_id":"ckelg602m004cl4s67jfdhvh9","category_id":"ckelg602w005gl4s65z88hzxk","_id":"ckelg6031006dl4s6fcxsfufj"},{"post_id":"ckelg602n004fl4s66q2nfppl","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6031006fl4s6fkivgwzd"},{"post_id":"ckelg602n004fl4s66q2nfppl","category_id":"ckelg60300065l4s61pla5kx2","_id":"ckelg6032006il4s69m6bgzp8"},{"post_id":"ckelg602o004jl4s6fuum86ky","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6032006kl4s6ek7p2a3i"},{"post_id":"ckelg602o004jl4s6fuum86ky","category_id":"ckelg6031006bl4s6c73w8ojp","_id":"ckelg6032006ml4s60ot4durb"},{"post_id":"ckelg602p004ml4s62zr6bl8r","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6033006ol4s6f708h9fr"},{"post_id":"ckelg602p004ml4s62zr6bl8r","category_id":"ckelg6031006bl4s6c73w8ojp","_id":"ckelg6033006sl4s6gmalepqi"},{"post_id":"ckelg602q004ql4s681ozfmio","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6034006ul4s6ermh4rg3"},{"post_id":"ckelg602q004ql4s681ozfmio","category_id":"ckelg6032006jl4s656jwdrvv","_id":"ckelg6034006vl4s6hae3h7fp"},{"post_id":"ckelg602r004tl4s6h5r60pse","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg6034006xl4s67igv4xge"},{"post_id":"ckelg602r004tl4s6h5r60pse","category_id":"ckelg6032006jl4s656jwdrvv","_id":"ckelg60340070l4s65czx5u0h"},{"post_id":"ckelg602s004xl4s60pxy6q13","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg60340071l4s64wlxcx0z"},{"post_id":"ckelg602s004xl4s60pxy6q13","category_id":"ckelg6033006tl4s6bv6q5byq","_id":"ckelg60340072l4s63k8794ba"},{"post_id":"ckelg602t0050l4s6a5uqfl8v","category_id":"ckelg6024003jl4s6dx1u1oxn","_id":"ckelg60340073l4s68ww6botb"},{"post_id":"ckelg602t0050l4s6a5uqfl8v","category_id":"ckelg6033006tl4s6bv6q5byq","_id":"ckelg60340074l4s6cpyk38g2"}],"PostTag":[{"post_id":"ckelg5zxv0008l4s63xha519z","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zxz000cl4s6dsivh482"},{"post_id":"ckelg5zxq0003l4s68rwidmv3","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zy0000el4s64e1t2crm"},{"post_id":"ckelg5zxx0009l4s6a7nqha5y","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zy1000jl4s67gpwbrmc"},{"post_id":"ckelg5zxs0004l4s61wircrzn","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zy2000ml4s60twd3meg"},{"post_id":"ckelg5zy0000fl4s62dek9l76","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zy3000pl4s6bvzl8ho6"},{"post_id":"ckelg5zxv0007l4s66tho61q0","tag_id":"ckelg5zxu0006l4s616r5euks","_id":"ckelg5zy3000rl4s62mkwcbzc"},{"post_id":"ckelg6028003ml4s62r2g17o1","tag_id":"ckelg6024003kl4s67bsvgmro","_id":"ckelg602c003ql4s66yzhenbg"},{"post_id":"ckelg6021003hl4s616yvfdqu","tag_id":"ckelg6024003kl4s67bsvgmro","_id":"ckelg602d003sl4s656grdgjs"},{"post_id":"ckelg6022003il4s60mwlbkks","tag_id":"ckelg6024003kl4s67bsvgmro","_id":"ckelg602e003wl4s68ivee34z"},{"post_id":"ckelg6024003ll4s695ks4x7b","tag_id":"ckelg6024003kl4s67bsvgmro","_id":"ckelg602j0041l4s6cu5f8n0f"},{"post_id":"ckelg602b003nl4s602r51z7l","tag_id":"ckelg602j0040l4s6baxl30yh","_id":"ckelg602l0047l4s6azm7fdld"},{"post_id":"ckelg602c003rl4s6fr1w5zjx","tag_id":"ckelg602j0040l4s6baxl30yh","_id":"ckelg602n004dl4s68s5b5i8v"},{"post_id":"ckelg602d003tl4s60hsy2031","tag_id":"ckelg602m004bl4s6e4at54ed","_id":"ckelg602p004ll4s6add66tw7"},{"post_id":"ckelg602e003xl4s662vsby26","tag_id":"ckelg602j0040l4s6baxl30yh","_id":"ckelg602r004sl4s69gnogb5p"},{"post_id":"ckelg602i003yl4s69qdy3zk9","tag_id":"ckelg602m004bl4s6e4at54ed","_id":"ckelg602s004zl4s68oya7c7a"},{"post_id":"ckelg602j0042l4s693ndftu4","tag_id":"ckelg602s004wl4s6db3f2g7k","_id":"ckelg602v0055l4s6aozxcv9y"},{"post_id":"ckelg602k0043l4s643ue6jvf","tag_id":"ckelg602s004wl4s6db3f2g7k","_id":"ckelg602w005al4s6bewqc5n1"},{"post_id":"ckelg602l0046l4s6hvz43p3c","tag_id":"ckelg602m004bl4s6e4at54ed","_id":"ckelg602w005fl4s63fq0h85e"},{"post_id":"ckelg602l0048l4s6hfe67s0k","tag_id":"ckelg602s004wl4s6db3f2g7k","_id":"ckelg602x005kl4s6hoube4so"},{"post_id":"ckelg602m004cl4s67jfdhvh9","tag_id":"ckelg602s004wl4s6db3f2g7k","_id":"ckelg602y005pl4s600dlhyby"},{"post_id":"ckelg602n004fl4s66q2nfppl","tag_id":"ckelg602x005nl4s6e8u9603n","_id":"ckelg602y005ul4s634te0078"},{"post_id":"ckelg602o004jl4s6fuum86ky","tag_id":"ckelg602y005sl4s6a9qkd115","_id":"ckelg602z005zl4s673jp59od"},{"post_id":"ckelg602p004ml4s62zr6bl8r","tag_id":"ckelg602y005sl4s6a9qkd115","_id":"ckelg60300064l4s61v6la1rt"},{"post_id":"ckelg602q004ql4s681ozfmio","tag_id":"ckelg60300062l4s6cunj8hur","_id":"ckelg60310069l4s6c9cq8st2"},{"post_id":"ckelg602r004tl4s6h5r60pse","tag_id":"ckelg60300062l4s6cunj8hur","_id":"ckelg6031006el4s63uxs9768"},{"post_id":"ckelg602s004xl4s60pxy6q13","tag_id":"ckelg6031006cl4s62fmlfvoy","_id":"ckelg6033006nl4s6bblt43pw"},{"post_id":"ckelg602s004xl4s60pxy6q13","tag_id":"ckelg6032006hl4s6hdbqc4jc","_id":"ckelg6033006ql4s6fxob6gyk"},{"post_id":"ckelg602t0050l4s6a5uqfl8v","tag_id":"ckelg6031006cl4s62fmlfvoy","_id":"ckelg6034006wl4s65dl13nwq"},{"post_id":"ckelg602t0050l4s6a5uqfl8v","tag_id":"ckelg6032006hl4s6hdbqc4jc","_id":"ckelg6034006zl4s6apdq0ymr"}],"Tag":[{"name":"C","_id":"ckelg5zxu0006l4s616r5euks"},{"name":"Foundation","_id":"ckelg6024003kl4s67bsvgmro"},{"name":"OC","_id":"ckelg602j0040l4s6baxl30yh"},{"name":"OC动画","_id":"ckelg602m004bl4s6e4at54ed"},{"name":"登录","_id":"ckelg602s004wl4s6db3f2g7k"},{"name":"屏幕","_id":"ckelg602x005nl4s6e8u9603n"},{"name":"UITableViewCell","_id":"ckelg602y005sl4s6a9qkd115"},{"name":"上传","_id":"ckelg60300062l4s6cunj8hur"},{"name":"动画","_id":"ckelg6031006cl4s62fmlfvoy"},{"name":"水印","_id":"ckelg6032006hl4s6hdbqc4jc"}]}}