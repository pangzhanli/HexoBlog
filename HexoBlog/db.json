{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/SitePreview.png","path":"images/SitePreview.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","path":"libs/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9ca46cf824d65bbdd2ce4982671ec03f00e08ae1","modified":1598967202860},{"_id":"source/CNAME","hash":"9c934ecdbda0ea2f0988afb3eb8d15bf5fb22867","modified":1598962363650},{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1598963544829},{"_id":"themes/Wikitten/.DS_Store","hash":"0881553c082b7f95b91ee382d8965ef03424d68b","modified":1601300731082},{"_id":"themes/Wikitten/.gitignore","hash":"08dd24e37b9695df6a47a01059aed60f83ff5de7","modified":1598963516594},{"_id":"themes/Wikitten/LICENSE","hash":"feadcd728a8e828cfc507b4586d7a7ab94b66fe8","modified":1598963516594},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"8a4e600ff1f75007df8facf15a9c127aafec5e18","modified":1598963516594},{"_id":"themes/Wikitten/README.md","hash":"618e7ed6cf45deb7ebf5d809d8d4b861f156fbdf","modified":1601300542980},{"_id":"themes/Wikitten/_config.yml.example","hash":"e8d451b59680232c5fb3b5f41b64ad248d1ba6e1","modified":1598963516594},{"_id":"themes/Wikitten/package.json","hash":"9944acee34c3d029c73def53593577cc23d54a1e","modified":1598963516606},{"_id":"themes/Wikitten/_config.yml","hash":"553a86612eb7ae06b21aa11e92cf4e947d1fd7bb","modified":1598963863608},{"_id":"source/_posts/.DS_Store","hash":"e392bfc1206c2e3c58d7719b966ad28ee7f4d272","modified":1601019300021},{"_id":"source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1598963544828},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1598963544828},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1598963544829},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"0830c3a5b134fbd21a6ddeda141a4de8345cabb1","modified":1598963516595},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"af892af6f7dafdd617c5aa17ee91e9e445d20fa4","modified":1598963516595},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1598963516595},{"_id":"themes/Wikitten/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1598963516596},{"_id":"themes/Wikitten/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1598963516596},{"_id":"themes/Wikitten/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1598963516596},{"_id":"themes/Wikitten/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1598963516596},{"_id":"themes/Wikitten/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1598963516596},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1598963516596},{"_id":"themes/Wikitten/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1598963516596},{"_id":"themes/Wikitten/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1598963516597},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1598963516597},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"34180dcc26b8fcc59f8644ce506aadf7db5f07e5","modified":1598963516597},{"_id":"themes/Wikitten/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1598963516597},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1598963516597},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1598963516597},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1598963516598},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1598963516602},{"_id":"themes/Wikitten/layout/index.ejs","hash":"0980482c3b37acffd1b724ebc51240ca6967be5c","modified":1598963516602},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"61c0dad38893fb9fe4eba7fe2afaf7464310b925","modified":1598963516602},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1598963516602},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1598963516603},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1598963516605},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1598963516605},{"_id":"themes/Wikitten/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1598963516607},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1598963516607},{"_id":"source/_posts/flutter/.DS_Store","hash":"31a964d2b72c82f1030a1ed4ec257d5de52ac0fe","modified":1601019289371},{"_id":"source/_posts/c/c-enum-desc.md","hash":"303aefd1825b879bfef79057bfb83e73a29ef607","modified":1598962363650},{"_id":"source/_posts/c/c-maopaopaixu.md","hash":"a0a501d98616450d330e1dd82ccc0af657a7db82","modified":1598962363650},{"_id":"source/_posts/c/c-pointer-desc.md","hash":"b6710cedbb8fc822602507cbaae20e3fe46cbcf8","modified":1598962363650},{"_id":"source/_posts/c/c语言中的字符串的定义及初始化和输出.md","hash":"10aefde91386843d72d74da572649adf13c56bd6","modified":1598962363650},{"_id":"source/_posts/c/c语言基本数据类型简单介绍.md","hash":"2e231517b445e60518a3503f7f320a0edef122c2","modified":1598962363651},{"_id":"source/_posts/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符.md","hash":"76a0039b2e43abea377a9fbb0a49d4132039df7e","modified":1598962363651},{"_id":"source/_posts/hexo/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1598962363651},{"_id":"source/_posts/hexo/hello-hexo.md","hash":"a2c0ba694a27513751f2a5759c5f034451273172","modified":1600827654720},{"_id":"source/_posts/oc/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1598964842591},{"_id":"themes/Wikitten/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1598963516595},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1598963516595},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1598963516595},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1598963516599},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"f0f00cce7a5c37f00dbc4acf49529bdd6a6bdc5d","modified":1598963516598},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"595a086a42a156dd44d30ee7f9e7189ca370bcf1","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"c666216877453d67db8637e8de7a7f2c1b92d9cb","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"5f2df8713f0ef723b3bfc79ae580fe8707ea2036","modified":1598963516599},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"c3a8e71e1660d58b6ed106a045c6829e77e65881","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1598963516602},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1598963516602},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1598963516603},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"6e410c120dabac0dccbd8b0c312f261c9566cacb","modified":1598963516603},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1598963516603},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1598963516604},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1598963516604},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1598963516604},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1598963516605},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1598963516604},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1598963516605},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1598963516605},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"91a4675876990c12bd252f00e13894e0e7e5e50a","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"d09317d5e328a9c6ff8fded93604ebe04764cc4c","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"0f58cafed5156488f550df6d560814f835a46854","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"5d70b1bf3b1fc977135e458f9a50cb65cff91f17","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"dc83051ae67cfae0db0a6d9790c923ff2883ee25","modified":1598963516606},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"73638a7c91c6d6433e766b35199508719bf27d19","modified":1598963516606},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1598963516607},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"2eba1250b39115da9f32e8a70d271e04186419c0","modified":1598963516624},{"_id":"themes/Wikitten/source/css/style.styl","hash":"d37d6c7754805c60564c0d9a50b7b058e7f830c9","modified":1598963516625},{"_id":"themes/Wikitten/source/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1598963516629},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1598963516628},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1598963516629},{"_id":"themes/Wikitten/source/js/main.js","hash":"ea6def87b1338185a6afb7c18fbf43564660876d","modified":1598963516629},{"_id":"source/_posts/flutter/Dart/01-Dart环境搭建.md","hash":"4a7a88ecc08c5efbda774c4a122f5c87c13312f0","modified":1598967385516},{"_id":"source/_posts/flutter/Dart/02-入口，注释，变量，常量，命名规则.md","hash":"6e4467f1d0e61a7e4db0bea2c2bebbdf83c491f4","modified":1598967274055},{"_id":"source/_posts/flutter/Dart/03-数据类型.md","hash":"2c48265e021aac60f743fc9561ac9cb7bd50cb28","modified":1598967277728},{"_id":"source/_posts/flutter/Dart/04-Dart运算符.md","hash":"92fbee2db0114ae030d48d710cd416c66d2c7f75","modified":1598967280451},{"_id":"source/_posts/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪.md","hash":"abbcecc2eb466a10083036266f0407cd60e6c7f9","modified":1598967283352},{"_id":"source/_posts/flutter/Dart/07-方法参数.md","hash":"17824d7d9dde5b94ba1940d0be514d0fe95f4d37","modified":1598967290230},{"_id":"source/_posts/flutter/Dart/06-Dart集合类型，-List-Set-Map.md","hash":"59fad2c6e9f2b6b10d6751976f19b78219940e43","modified":1598967286502},{"_id":"source/_posts/flutter/Dart/09-面向对象.md","hash":"53ab5ac21afe98596ff68db0077fdd34c248d1f7","modified":1598967295447},{"_id":"source/_posts/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包.md","hash":"abf4078f66f8009da049a98a007bece6f0a3d97f","modified":1598967292781},{"_id":"source/_posts/flutter/Dart/11-Dart中抽象类.md","hash":"7c811c34afd4e832bbda392d2cb3c5a7da769685","modified":1598967301117},{"_id":"source/_posts/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承.md","hash":"8a96aab395857cf4cbf7f7fadac293e61d31db3c","modified":1598967298169},{"_id":"source/_posts/flutter/Dart/12-Dart中的mixins.md","hash":"3685c5410c9bcc8f4264a12c390f1a59a6602ce2","modified":1598967303874},{"_id":"source/_posts/flutter/Dart/13-泛型方法，泛型类，泛型接口.md","hash":"70478c515ecd529eb0c340c6a81bd8096148988b","modified":1598967306629},{"_id":"source/_posts/flutter/Dart/14-Dart中自定义库，系统库，第三方库.md","hash":"7998c6c9d04da03c571b89395ef260387c911862","modified":1598967309388},{"_id":"source/_posts/flutter/flutter框架一/.DS_Store","hash":"a2f841f0337e482878efb61f4479517df7c7841c","modified":1602208658209},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始.md","hash":"f0179b0138aca632b738bf4eb3bc8642eedf1de1","modified":1599563778978},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建.md","hash":"63f820fe496f3b4dfda522bbd2f754948cd87fd7","modified":1599651468570},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter.md","hash":"f7d6729116bd4ee6a2302e00a2f0f005950af921","modified":1599740314492},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式.md","hash":"8f0dc090bfdc1ea589734b05f2e9c997f6e97a3d","modified":1599740882323},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一.md","hash":"0b83e58d64b8056507969fdc8075f2ab3ffc0c4e","modified":1600433577057},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二.md","hash":"af7ac4c90644b4ac89056b207c1145fa4c0f26af","modified":1600436480628},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget.md","hash":"095b90258ac6efb4d0512ec4899f41b8a9a928c2","modified":1600437554288},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置.md","hash":"94e6a3afb1816806e3ce289260714aeef9acc6b7","modified":1600437850336},{"_id":"source/_posts/flutter/flutter框架一/09-StatefulWidget生命周期.md","hash":"c311e0977626e997c614ac1af944c376691ea788","modified":1600438031004},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片.md","hash":"89c471a9f222211d06d004c22172b0b9f8d0a152","modified":1600438258014},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用.md","hash":"18077cdae2123089160531ca9d6ddb00505d556b","modified":1600438790261},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用.md","hash":"0b3b37631e6eca1097912e38512a467b8d937b9d","modified":1600439023801},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步.md","hash":"6d02f1432eba357cd031130527a57e0d4226a1a1","modified":1600913020790},{"_id":"source/_posts/flutter/flutter框架一/14-虚线和星星评分.md","hash":"49eacf861c836c45be631d0623643edaf942f1b1","modified":1600944610830},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现.md","hash":"237c85aa53822b52a510df2cb99baee223feab48","modified":1600944876695},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject.md","hash":"561285cbdfb3fbe4a60ec6f0234c321cd11c61e5","modified":1600946600136},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理.md","hash":"dc1dd1b08ee6aa99711c90194a1436d0496b2c69","modified":1600947613406},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听.md","hash":"e0157e0fa96ae1791254ea124967e03fcb728c4f","modified":1601301342784},{"_id":"source/_posts/flutter/flutter框架一/20-Flutter动画.md","hash":"a4f878a7f182fdc047035cbb9202d681d1acc702","modified":1600946627761},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航.md","hash":"fed02c2cea2c41d4e3a0bc349bb7add704bbf943","modified":1602589442446},{"_id":"source/_posts/flutter/flutter框架一/21-Flutter主题风格.md","hash":"f5a0faf9292161eb403644186cb021f302732e49","modified":1600946633858},{"_id":"source/_posts/flutter/flutter框架一/23-Flutter应用信息.md","hash":"12970a114af57038a7ce5d0efa1f386a9f4e7dbd","modified":1600946704184},{"_id":"source/_posts/flutter/demo/.DS_Store","hash":"dfb93903c421e8f09a3d307f881a408105e90e78","modified":1601020036701},{"_id":"source/_posts/flutter/flutter框架一/22-Flutter屏幕适配.md","hash":"dbead45a40e72e3703408411af72d4118a1d3109","modified":1600946658351},{"_id":"source/_posts/flutter/demo/01-九宫格手势解锁.md","hash":"e18c3c757619be5614431873976b7e8b5d1a2a21","modified":1601019569489},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader.md","hash":"cfe2b558cc616cd6622f405f20e12d230adc32e8","modified":1598965038850},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle.md","hash":"734428655fda81f02a030efed3db8fb77138f99a","modified":1598964554512},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu.md","hash":"42a28dc7abf032d3bc20f2dccabf213db3d60566","modified":1598965035889},{"_id":"source/_posts/oc/Foundation/.DS_Store","hash":"5d8df3d244548597b05ed088eba9114241dac9bf","modified":1598964837583},{"_id":"source/_posts/oc/Foundation/oc-foundation-mulString.md","hash":"05dc146cee5fb1503999588460c1c78022da5609","modified":1598965054326},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile.md","hash":"e0cec012722720473d2ea0cdc49386fab5b91e90","modified":1598965058435},{"_id":"source/_posts/oc/Foundation/oc-foundation-string.md","hash":"fa1b76b00eb323121cd12268ed26881da7293b08","modified":1598965061567},{"_id":"source/_posts/oc/Foundation/oc-foundation-struct.md","hash":"0e251fd3487496d2aada7d26f12ed6407bd77f70","modified":1598965064229},{"_id":"source/_posts/oc/Foundation/oc_block_desc.md","hash":"a864ac52139402bbd08ce8ded930dcc10edfe5de","modified":1598965642602},{"_id":"source/_posts/oc/Foundation/oc_category_desc.md","hash":"db0a718aa4bd448b217221989fb9debc97c64229","modified":1598965047906},{"_id":"source/_posts/oc/Foundation/oc_class_init.md","hash":"71a65c45818311a449728290cc9c9ec261bc0597","modified":1598965012262},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin.md","hash":"8160e26996a39c9cb25851901aff7f92870ceb02","modified":1598964334156},{"_id":"source/_posts/oc/Login/oc-Login-QRCode.md","hash":"16fb5f399d5ab7ce6a80111db9561c6d4d0437ad","modified":1598964532185},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin.md","hash":"c5e480a6d2d4f26b0c8702f921c52952055b479b","modified":1598964528510},{"_id":"source/_posts/oc/Login/oc-Login-TouchID.md","hash":"1817728776ccb2ee06f6d8e329b1feb108f8beef","modified":1598964535489},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail.md","hash":"a2864a3845712d21ddca2580ed32f95233f5b3c5","modified":1598965075385},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc.md","hash":"098c446da24f5354026fbe383e45894584910ae9","modified":1598965080475},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib.md","hash":"cae645f159ecc521698de89619e42d7b27c03217","modified":1598965083028},{"_id":"source/_posts/oc/Upload/oc-Upload-nativeUpload.md","hash":"eaa1de95e6cc3add0d600732fe67a3424a8e6629","modified":1598965087450},{"_id":"source/_posts/oc/Upload/oc-Upload-putAndPost.md","hash":"40f1dfa0693b7bd5603018c5dba041c49a6ddcfa","modified":1598965090125},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk.md","hash":"c107b2cb9a7f7ca81b2f218d5480134dca078659","modified":1598965104479},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel.md","hash":"3025558a53d28a0c0261c6a5cb847aaa954f8ca6","modified":1599617107101},{"_id":"source/_posts/python/base/01-python基础.md","hash":"67efd0733bf096666cf1ef01eda1a0467d2f2dcf","modified":1600827654721},{"_id":"source/_posts/python/base/03-高级数据类型.md","hash":"204d5e57b368f21312175abba6d9280081907d31","modified":1600827654722},{"_id":"source/_posts/python/base/02-python流程控制.md","hash":"e808ee51857cb82a40553724fb4a07e7b960834a","modified":1600827654722},{"_id":"source/_posts/python/base/04-函数.md","hash":"e3140f8ca33a8c9bd6e32e2b9e07d0fabfbb18c1","modified":1600827654723},{"_id":"source/_posts/python/base/05-面向对象.md","hash":"f473feb08a30e1db6646ed2ae38966fd4c71dad2","modified":1600827654724},{"_id":"source/_posts/python/base/06-模块.md","hash":"8c96901d5eed9618dd64153a2f8934e46e2b3271","modified":1600827654725},{"_id":"source/_posts/python/base/07-植物大战僵尸.md","hash":"f6a63bda21c2cd8f3800e127906c5249844aa23d","modified":1600827654730},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1598963516600},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1598963516601},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1598963516601},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1598963516608},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1598963516609},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1598963516610},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1598963516611},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1598963516612},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1598963516613},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1598963516614},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1598963516615},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1598963516616},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1598963516617},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1598963516618},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1598963516619},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1598963516620},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1598963516624},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"146b5a86d6f602232d86e246ea20620ec923cccc","modified":1598963516621},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"85db02a6f51d81ac317a7f0727fa16b7ce7d5e9e","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1598963516624},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"154fcfe17c4a9833903b3a91efb1ddf315e7fcba","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1598963516622},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"d3195723c373a68a05b76d430f8aeb2d2dd1957f","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"2ecc48d48ad8769556036f19f2769c84c428cbc6","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"4a11aace0de3aeafdd88caef7cd238543ce1cd95","modified":1598963516623},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"4ea679287d49f91634dd32ad812746cccc1e6281","modified":1598963516623},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1598963516625},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1598963516625},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1598963516625},{"_id":"themes/Wikitten/source/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1598963516627},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1598963516642},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1598963516644},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1598963516645},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1598963516644},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1598963516668},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1598963516669},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_011.png","hash":"c69ec507c6183d69028c3dd11cd256bc79f2e65c","modified":1599052814104},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_006.png","hash":"453a81562507c8b82bc556f7d9fae4f7fc0376f0","modified":1599740412135},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_001.png","hash":"11748526e2adf4cf2d06de9d4e248699efa308e7","modified":1600433926319},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_003.png","hash":"d6e2fa28078ff5651ed1c978886a91d399de34ce","modified":1600433953032},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_002.png","hash":"1e98c55dcbb8e9c79d9d3e112a6ae3be864a1f88","modified":1600433943786},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_007.png","hash":"be292625abb8f8e480649d284e1ead3fc78a88e0","modified":1600433989947},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_006.png","hash":"173a65963379fdf39874917ad66139c6d19b5880","modified":1600433980992},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_009.png","hash":"e577a5160e118ad578a9ff02e0cd4f2cb21a4353","modified":1600434012415},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_010.png","hash":"1ec48956b5851b16f1794140fa7bb50396c31dd3","modified":1600434022533},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_011.png","hash":"51715e50a166908e6d691c241716669f0d98b28d","modified":1600434031568},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_013.png","hash":"92343568cb00624c33c25e6fe7ae789d3fbf7bda","modified":1600434052332},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_015.png","hash":"c0968410a44c113504250f904f0e11abb06b6408","modified":1600434070829},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_012.png","hash":"84b6fefc69d1761a053f1896b7021e46161deded","modified":1600434043258},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_018.png","hash":"706a0a894528813b7fd2c3eb4acb595c1d8dffd9","modified":1600434098959},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_017.png","hash":"affb60f8a3931ff6a12d44674d75dd70ded8dc56","modified":1600434091405},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_019.png","hash":"12181a08df3a86bee30867061a0a28ef3d891e1a","modified":1600434109302},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_016.png","hash":"d97057c1de6df031cadab19109c31aaaf41649ec","modified":1600434081813},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_022.png","hash":"f63091bda954c68838f3958571611786830d378d","modified":1600434162712},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_023.png","hash":"7da6081bd8c386afe2093fe32585da64462778a3","modified":1600434170869},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_026.png","hash":"33914ce1048854da9653fd91297c0570f5ac65cc","modified":1600434198232},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_029.png","hash":"433c065a0b8bcfb7586dd8058c328aec8846107c","modified":1600434226705},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_030.png","hash":"763d5a4ee73ea4eceda7061830d16b80558a72b6","modified":1600434234147},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_033.png","hash":"619543614b3ec5cba5364b1f5b40db3a7528d153","modified":1600434262485},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_037.png","hash":"2d4d1fa352f44e97fecf4cf7b989fa631fbad237","modified":1600434306567},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_036.png","hash":"8e38a1653c3a5b34d6980c69f72ed32fa98b1e31","modified":1600434296182},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_038.png","hash":"4c1b2b48eb54751bc8c619aafaeaccd76bc897dc","modified":1600434314910},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_039.png","hash":"3879940f56d684ded4649a0fa4567dcb1509fa63","modified":1600434323617},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_040.png","hash":"ecad869ff2a845a68c5c978455fc50c7597579ad","modified":1600434331640},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_041.png","hash":"65792fc940236eba31ef4681312b6049b54241af","modified":1600434343826},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_042.png","hash":"f9b4e19be53cd240f939f3ea16246c78156a5f77","modified":1600434351866},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_043.png","hash":"e8dad9dad403e0f98112e534455c4ea8a76f99a0","modified":1600434382715},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_045.png","hash":"af16a0b9d6e607b5adffd0b7ec2652f2142d60d9","modified":1600434400948},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_046.png","hash":"c3d3bb603283432557d8561058792a54ff0b492a","modified":1600434424243},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_047.png","hash":"b601e954df232072c77d06ad008510d9afa6f229","modified":1600434433164},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_050.png","hash":"ac564a74b0d0c1b84194d0e4b8a7beb6d78e2574","modified":1600434461316},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_051.png","hash":"bfbe141fe983b5b774bb5a4dbcc6894d0e9531da","modified":1600434551328},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_048.png","hash":"a0d987e5a835c3e361a6b762b02a330714c9f4e1","modified":1600434441134},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_052.png","hash":"c05f8dfa7c6b48cf92438c0ca4743eadb34848bd","modified":1600434559819},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_053.png","hash":"21cd0cdbcc027fb1ee4e6d7d443bc37c75108ca9","modified":1600434570633},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_002.png","hash":"2cc372a09d675de3c489b654b13f14572d9be85e","modified":1599741041379},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_003.png","hash":"526aa4cd1e77c2e9fb9ec4ba2525b133caeb09c3","modified":1599741049903},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1600433870498},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_004.png","hash":"44cae75026549d0ecad110dd8d80e2340dc9688e","modified":1599741057947},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_008.png","hash":"8fb56b1d3b5ea914bad517d121bfe408a0941d3e","modified":1599741101341},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_007.png","hash":"c995dd1e17895ac3262359fef0bc09c03c28a8ee","modified":1599741089592},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_006.png","hash":"62a4b0ddc692472925865320c3ea068c2c30e511","modified":1599741078454},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_009.png","hash":"2ca7bea96c904215a5c5403ef8771311a5d39330","modified":1599741109822},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_010.png","hash":"18694ecb90ad072a3dc9321cdf147c2548766a86","modified":1599741121393},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_013.png","hash":"46eb7021d792ab8469f3a948d176989f4fb612c3","modified":1599741149951},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_011.png","hash":"df20b41610cc197f26683fd623cee6cf56017a5a","modified":1599741131060},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_016.png","hash":"efea77684a1fec56f429ca7d020675b4b4b1fd10","modified":1599741183252},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_015.png","hash":"328be0e0160402e3b2eac372ad675f780af9ed7b","modified":1599741170787},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_017.png","hash":"ef78c74bdd05e01d678850d5c9bbd71f603d1921","modified":1599741191569},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_018.png","hash":"feeee40fd0cf036ef27769b77cdc9656f264cf5c","modified":1599741200884},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_021.png","hash":"53482198b519ac728db544612202de7a4053cb0a","modified":1599741229748},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_022.png","hash":"0ccfca6851e74d15486b6a1cab1bb51ceaa09771","modified":1599741237397},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_027.png","hash":"06bee3548926fb4b11dc16e912038a3b42ce9748","modified":1599741297556},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_025.png","hash":"5a8b999bd5aea07e841026b5e45a1e918f5e0723","modified":1599741273603},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_010.png","hash":"52e1c17edbb28c043133754730d996824067b874","modified":1600436735465},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_014.png","hash":"727bc1b32a806a33f5f584df331e2c21e71171af","modified":1600436773919},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_001.png","hash":"4bb968eea9c33ee7f53b2c9a72b461df94914c33","modified":1600437610134},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_002.png","hash":"0dac60d0a77441541b7dc318f3078f97aa568f29","modified":1600437630359},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_004.png","hash":"8a3924a7686449e9b00b15368030ed6376e29623","modified":1600437646461},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_005.png","hash":"c521520c6395b5bf9dd1eb13b6c2a7f8e819c1d3","modified":1600437653381},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_007.png","hash":"8daeeed2207fc291be55c9219609e2cb0668f522","modified":1600437672641},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_001.png","hash":"eb1f60a55b6d9a3de1b6f7d9d2b6a7c344e07b24","modified":1600438079629},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_002.png","hash":"567f319b70ce225eaad7e40d08f3dae0a89dec1c","modified":1600438097817},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_001.png","hash":"e1daecddfbc89b9fd31c72eb71a94940c12b3929","modified":1600438445973},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_003.png","hash":"f73bb43cf83cd2cef246d7e0bdb535dd3ef51976","modified":1600438481029},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_004.png","hash":"0f625fecf4efad429aba43449a606e81eb843a5d","modified":1600438489167},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_005.png","hash":"ec684e434bc3764f9ef0cec192b22d084c092cea","modified":1600438500402},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_006.png","hash":"f3f4dc4d4e829b47dc65ea11e66112e8080c27f7","modified":1600438511381},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_007.png","hash":"0973f66ab43c2246c815b00310940f2af46eb7cc","modified":1600438520101},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_001.png","hash":"deb2accd43f5305179b271605cca37eaef40ba0c","modified":1600438809939},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_004.png","hash":"1781e4e1e46cc90cbb46a3d19da760d40c04dda2","modified":1600860430073},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_007.png","hash":"7691deea8eb1d59fbecba45cb644e7c4b3c4272f","modified":1600860457519},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_009.png","hash":"843fbbdbb5d4ab567ca91fa93461e22048b57b6e","modified":1600860473980},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_011.png","hash":"9427ff3a4ed41b6933baedb0f75aabe9dd5150a9","modified":1600860489231},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_013.png","hash":"603f2506cc366742e119de0a190ad33ec4fcc976","modified":1600860507345},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_016.png","hash":"7b8d09bcf610714ac1cd7c6c76c30ac4f670a5de","modified":1600860539672},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_019.png","hash":"49f796b664dc452758ce8dfcf549504efe2dfe72","modified":1600860563048},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_018.png","hash":"17a12813e13ab2d7873316fe9cae04a8d5a78176","modified":1600860554745},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_020.png","hash":"41241d09cc4f50799570da6dd896053f082a9620","modified":1600860574797},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_017.png","hash":"231a047903c345d97638e631d39749bcf558cd1d","modified":1600860547712},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_021.png","hash":"dfebfcf9d89fd27adf4978838ea1ae7569622eda","modified":1600860581858},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_023.png","hash":"30f8ffac9985c8b8d3a067acb3df68442f672ac9","modified":1600860601295},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_025.png","hash":"fc0cd93f1e78888fabacc20cdc170caad337dfa3","modified":1600860618227},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_026.png","hash":"40d0b79e7683516e1986cb1a0b72e6423073e8e8","modified":1600860625412},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_028.png","hash":"82ed8ebe94db6ccf499f83a4c0cdc8e96f2eb2a4","modified":1600860642640},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_030.png","hash":"8fd9b2a57b95c3d2b7a9602e0181dcdb2ffea6fe","modified":1600860682602},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_031.png","hash":"94d6685bb8f07e580fbdd410205bcbb680590255","modified":1600860698982},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_033.png","hash":"bb9522bf19a106ecb12caf2f921ab2f69e32d6e4","modified":1600860714981},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_005.png","hash":"88e3a8e8ad374eb3cfd978f5d9a2876b8fb1a41e","modified":1600945065935},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_004.png","hash":"469460c5864d19a6974f7b405610ec8f6a9777e2","modified":1600945057848},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_006.png","hash":"525bff26f26b508959f85d590c468d0c2945f4f2","modified":1600945073306},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_007.png","hash":"d89f564b896fc35a5ceda3b7f6d838f7c28fe0b9","modified":1600945082243},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_013.png","hash":"b4dab2ceb6b8f6bba83f398ae7bdb3da052c44ed","modified":1600945134694},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_012.png","hash":"3a4b0c3f6d3349143a545ad01314298a2d0a3658","modified":1600945127744},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_014.png","hash":"5c0e73bb187f6c6171e7f4b1900f492f84a210e0","modified":1600945145593},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_011.png","hash":"53f3569fa01a3b25d64ddad52293e8802fd91069","modified":1600945120410},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_015.png","hash":"d60791dc9fcb0949f5a7edfe647679c96df38c29","modified":1600945153721},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_022.png","hash":"eb7cbbf998c1fbc329cd17cf2359ca14ceaaeaaa","modified":1600945221611},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_024.png","hash":"c78ab03aa3f37cfd95faf4e601d3b9159f466675","modified":1600945241949},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_023.png","hash":"24d6ef7daae59c56506781b185e8f5b4b75f9818","modified":1600945231944},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_026.png","hash":"5151c7c3906c7e1ca5069772c7b3dbf1018df770","modified":1600945262131},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_008.png","hash":"82fa39861668f2b8047d0fb8ba3b1a3cac9a7236","modified":1600947018396},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_010.png","hash":"780ce10551aea213ceb719a6778456cab95a9dea","modified":1600947036594},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_009.png","hash":"51c9940a75f23dfd3e571c8381a818ba79e385ed","modified":1600947026353},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_015.png","hash":"874abd9451096a6d1fb1af8806ba20853ab1d2f7","modified":1600947081464},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_017.png","hash":"f793072a9126ae9d5c0cad8e85b15a778fb6baea","modified":1600947096152},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_023.png","hash":"9d151c1abefe063d190809fe6a8f798eb004a909","modified":1600947159813},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_024.png","hash":"34b1747ac29a70a989a054bf0ca34a86b96700f2","modified":1600947169564},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_005.png","hash":"e8e7fef7fd7027abc4e1b4022b865061270d22ea","modified":1601300844069},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_003_0.png","hash":"d93f81673e243b95f3b4d68c99039b24102de734","modified":1601301084445},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_006.png","hash":"12a99969da373cab7e350d0214c77c70f7ce0e1e","modified":1601300852822},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_001.png","hash":"dce2063b12417ce3c3ca7b5cd3a76fd9d18a6e50","modified":1601301415188},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_002.png","hash":"883a8a9c17a70ead7e9ad3f052b015b950cd75f2","modified":1601301428619},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_003.png","hash":"6523d45da9049c8d83ed97bf090ee885935a4ce4","modified":1601301436843},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_007.png","hash":"c68d0facbae552400ebfa6ca433fb9321564d024","modified":1601300860771},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_010.png","hash":"eb1386b9e7babbeabf5be3f2ee9a73a1983a627e","modified":1601301496168},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_011.png","hash":"19aa952b517853f14a4f82c18337fbabfcc4c21d","modified":1601301505516},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_014.png","hash":"c8b5e18499288174b4ed7e9af20ecbaa93430528","modified":1601301530333},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_017.png","hash":"2639848afa9abf32eafec4e006b25b97b3fe9948","modified":1601301557745},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_015.png","hash":"e03c0cdd626145330bb86a07f2fb1bf978aa6d8a","modified":1601301539474},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_018.png","hash":"6ca71c70c69732830e82821cae01cdeb1c1a2b85","modified":1601301564804},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_016.png","hash":"81b67ea78f7b6d5871c2db9a2102d695341ad00a","modified":1601301547512},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_019.png","hash":"8874052daeac1d84e82360cc309894a63a52a09c","modified":1601301572557},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_021.png","hash":"c5b9432765f9e0e003cf3ee306e24d6749306dbd","modified":1601301588766},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_023.png","hash":"f662247c97f52b5f1ea511b3166f19525ca65a9c","modified":1601301602962},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","hash":"f06815da9d39db93d195ac892bb24bc8074625b5","modified":1598962363652},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_025.png","hash":"fa17a8da2d2fbb07a5897fee3ad5a0fff105fba9","modified":1601301618149},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","hash":"22943d631426f8101d4786156ae4cb413838f7b2","modified":1598962363652},{"_id":"source/_posts/flutter/demo/01-九宫格手势解锁/01_001.png","hash":"3ca34bbdf377203ab5b369d8c33c30d3e05cfcc3","modified":1601019490320},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","hash":"df3e2bd3a9c14d2a559a16340e668cedad0b3ec4","modified":1598962363654},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","hash":"d73093cbcfbc465c1c03e11d95f0d2d36550872e","modified":1598962363653},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","hash":"2cd5474cfa817eb6ba7434a7a487ea5c7fb3c071","modified":1598962363654},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","hash":"3e01fef29cc679f63b3e96e80404b88654f41004","modified":1598962363655},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","hash":"75a7aa4f1543ab9d0d820ad27ce169225dfc6b5b","modified":1598962363656},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","hash":"25baa3d4034bed5cacf98f208c09f9478e14705a","modified":1598962363657},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","hash":"15a736ac1231e1f4848f640afec6fe60468971f4","modified":1598962363657},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_3.jpeg","hash":"e54a0521f0f9080335de03cfdeabbc133348cf93","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_2.jpeg","hash":"e937b540912e15f41fb1f5615bd5302d68be0f3a","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_4.jpeg","hash":"9f6afc9b9fba4b0e5e0a3dcfe42a71d361a252be","modified":1598962363674},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_5.jpeg","hash":"7de04a69c065064133e6d2315e50076b8ac91ba7","modified":1598962363675},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_6.jpeg","hash":"aac2b4c4c60b20e947b675667fcfae7ba4708b91","modified":1598962363675},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_1.jpeg","hash":"cbec0cfc87a8ee2950f0adc9f1128b6622e6d6e5","modified":1598962363676},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_3.jpeg","hash":"19fc9b624ba89ebcd80f7c75864044062c91c252","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_5.jpeg","hash":"94bff061fcafb6b68c48ae0a2269ff01bea61543","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_4.jpeg","hash":"2828da94d04b2002fb3fb89b9b26fffd7a49f6a9","modified":1598962363677},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_6.jpeg","hash":"dd4520a3ef3e8130061be453937181b3f1c3d5ca","modified":1598962363678},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_7.jpeg","hash":"ed49334a419a8b5d9ae59038bde6c69fea2c569c","modified":1598962363678},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","hash":"3c04edc6d9c2799b9dccaecd0dce9db56f65661f","modified":1598962363660},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","hash":"19756b5c17253aac9c414d904611ca1716a7a93b","modified":1598962363660},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","hash":"4a49d95fbc0cca1a8d393c70694e68b44afdaa71","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/styleLocalize.png","hash":"c85691dc2b95ecc5d7809a3748cb2e99d7a8be47","modified":1598962363663},{"_id":"source/_posts/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","hash":"1c26567abec83eb90e5c5715366582089eba20af","modified":1598962363668},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","hash":"8e68292c6629493d941fe21b1993354f966066ba","modified":1598962363683},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","hash":"2bdc3e3b8b7d9bcfc96cc123e3fa37113162adbe","modified":1598962363683},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","hash":"3f20cf31a6ba9b7abf0d445ca49879b3a6d4fa0b","modified":1598962363684},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","hash":"35d2ac4c6558a9aafb669b74bb156ccfd5e89516","modified":1598962363684},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","hash":"140795cdc9735be8edfa2e71e2d6ca48da6d2fcb","modified":1598962363685},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","hash":"578380de0f2086bbe5c92e6951b754e0b8d215bc","modified":1598962363688},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","hash":"3ccd49e6e13fe414dc2db451d21fc5277566b636","modified":1598962363689},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","hash":"c05214352e755efe5ab80e98a3065553fdd5c52e","modified":1598962363690},{"_id":"source/_posts/python/base/06-模块/06_003.png","hash":"dd5b46ee5dbd7ef273d0b7886b08a168a6474c01","modified":1600827654730},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1598963516643},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_010.png","hash":"d0f973a85de89e22bcc7150a153eb151d5373b45","modified":1599052805039},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_013.png","hash":"0a4c1a5b141f85d56b23c9be7b38de0e7fc771c0","modified":1599052836611},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_002.png","hash":"d4a2a41528a0925351811621a27f17be72a010a4","modified":1599563934753},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_006.png","hash":"80d021797a738cfc714f26fff86946b01e7483d0","modified":1599563972816},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_015.png","hash":"853bddc7b5453aa3bbfffb8cf4cc511d0f66d02d","modified":1599564049944},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_006.png","hash":"d17078fecc2ef3123b497beeb712aac00b6f555c","modified":1599738688597},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_001.png","hash":"a2b6f04e8bbafa0572b8d0b87d3597fddf1b440c","modified":1599740344859},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_003.png","hash":"69f7988c4aeed1471e28de95a0be5c7bd075cd57","modified":1599740382909},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_004.png","hash":"d598b5335bee2eeea8cd9e17e919475f0bdb1e2d","modified":1600433961963},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_008.png","hash":"a70ae9f11a273c2930aadc792ce33f0c2d9f93cd","modified":1600434000821},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_014.png","hash":"d51905e9282360980f45af578c647f2d49486f21","modified":1600434061452},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_020.png","hash":"10a53970ba43dd3d67d487dffd4c00d7201ff731","modified":1600434119254},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_021.png","hash":"9199fc27fb7419e38a69ece32b5300730adafcd2","modified":1600434151476},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_025.png","hash":"4974354c38aff1e6f8b8df4311ad63f0d10e89e6","modified":1600434188442},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_024.png","hash":"c123a5a147da5bcc4aad363e289f4f66753753d4","modified":1600434178981},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_027.png","hash":"18019f3659447a644c2ec5dee123b14e06c940ca","modified":1600434207648},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_028.png","hash":"5b1ff8d1b6ff2814c79c44947c71637e552ca6e2","modified":1600434215644},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_031.png","hash":"9142e526292012044b30a3904412ad0210c0df7f","modified":1600434245919},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_032.png","hash":"51ae5b4e048b3dba4d3fb8bff38d11e5dcae4fe0","modified":1600434253146},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_034.png","hash":"33ae745f043d5ceb79616918bc5d1ef4951322f8","modified":1600434274509},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_035.png","hash":"ba629cecc4df3c5b4549eced988e384e01630851","modified":1600434288709},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_044.png","hash":"b0265b2e8c420b905bacf6c05a22352e7d5092cf","modified":1600434391188},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_012.png","hash":"1a39891ac867a8df0a81c78dffb700a39b9c34e1","modified":1599741142098},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_014.png","hash":"291b47e1479752257960ad968b3a01db155a781f","modified":1599741157965},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_019.png","hash":"b270e8ffcdbfe896a3db1d46c829e8c66872e41f","modified":1599741213660},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_020.png","hash":"191c27d68b2213f118e40004cac89db4a3ec213d","modified":1599741221589},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_024.png","hash":"b168d1c868a07cfe848d565c18f2586a4ebbd12f","modified":1600433487390},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_026.png","hash":"e4f4ea4e2d31ab431f820174d038067797e97dff","modified":1599741285653},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_001.png","hash":"94c43cb098c5bc5ceb1a8afc1d55a2bc0c9528ae","modified":1600436643167},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_003.png","hash":"1cd275b4cf7c18453c3da885c11c40c523dc9739","modified":1600436673224},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_007.png","hash":"599eb3c67be1b7a8baaf4d2bc964b078d83b0147","modified":1600436709575},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_009.png","hash":"88ba47ea2dfc9b2e407c22b4d65705fbcf8efd2f","modified":1600436726673},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_011.png","hash":"690b6afa26f2f45f141c7847120b5a4ae3ebd09a","modified":1600436743578},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_012.png","hash":"3cb3a925008792e9a3fd54a4dc0c6a20b1f9562e","modified":1600436753508},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_016.png","hash":"3eb2bc21e4a0b6f6605968665ef7980e4cf63010","modified":1600436790712},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_017.png","hash":"86aa92f7a03dc93cccf311a8ccd91062ac1c8eae","modified":1600436799975},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_019.png","hash":"c703413460950f04e3afeb9d452278725b309d9f","modified":1600436827045},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_021.png","hash":"975aed06f376321f4d49078b730d7fb560e46e2a","modified":1600436849806},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_006.png","hash":"882530a6c474695c4ee5817e9aaf03bd9941c7bb","modified":1600437662299},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_003.png","hash":"fed35155720332e4e98bc7fcec075b27346a3a1b","modified":1600438842643},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_002.png","hash":"a5c8e39294df7ac0ac5af2805d1b875db471e29d","modified":1600860412050},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_003.png","hash":"71a4da368826957e9e9c5ae855b1888f29e01738","modified":1600860420921},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_005.png","hash":"11cd93724bb3e9e50396e0c69c9c0cbd699acbfc","modified":1600860440371},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_008.png","hash":"967ef6cc98cdc89a79b5c9ec02ec69b82ca5d6a6","modified":1600860465697},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_006.png","hash":"8b2d9d6f92133933f129c4b50eea2d6a4f45c718","modified":1600860448676},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_010.png","hash":"e300357a28adf7729adf56c4fb708493a4cd0dd0","modified":1600860481853},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_015.png","hash":"3dea74204635970438911c079978b0acf5051654","modified":1600860530570},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_014.png","hash":"64aeea20aecd1c7ac80cbfb3ef35ad984e267aa0","modified":1600860522519},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_012.png","hash":"7039f9459f4c78e41e3389a6a4c18259641d725b","modified":1600860498290},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_022.png","hash":"1cc9c7d22f5fcd56dcb35472e9e7ed8aff7e4c85","modified":1600860591037},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_024.png","hash":"728c82c11b5224eb26479a28f178bc0e322afc6c","modified":1600860609214},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_027.png","hash":"b7f6d18a3fe81dc8a951262bc58fb96fe0735a73","modified":1600860635015},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_029.png","hash":"a84ce13fe64a6e6c9f0bfd59de0434018bf2f8c9","modified":1600860672950},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_032.png","hash":"e19c7bb31461804ce4caf29a0a9530fee439724d","modified":1600860706945},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_002.png","hash":"4feffd90322845c015213235596327fe5e9971dd","modified":1600945035740},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_003.png","hash":"5e3b1a93e5aba77297bf2a266124abc28bbe595a","modified":1600945042681},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_009.png","hash":"ae1ebf7d19058dd3a226241e36c2ca2942e2e945","modified":1600945097042},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_010.png","hash":"2bacf16b10cd722addae2d6b94764c2548ac4a87","modified":1600945106246},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_018.png","hash":"a97d04e8549f401cebe4a459ed1e547d174854f9","modified":1600945177885},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_020.png","hash":"4b4d5dcba5567951d5b4c72a0c6c5915ec8928e7","modified":1600945207151},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_001.png","hash":"64f6fde7c14fafd339f7fb37625da2a781d1bb96","modified":1600946956673},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_003.png","hash":"d46279560c826f07af3a87bcca89f6a96432d5d7","modified":1600946978306},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_005.png","hash":"b3d465b8059c737f442f988c433ec129dfc04cd5","modified":1600946993409},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_007.png","hash":"3008e3a7bf4e51dc8d80deea8b4c1643cd10124c","modified":1600947011186},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_013.png","hash":"fa876763a09a5518fec7f6497e2dc727444cd9ce","modified":1600947065172},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_019.png","hash":"1110806e7bb8d3f3f79990f91d8686d871c96342","modified":1600947111065},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_021.png","hash":"11a4b3d9d144811e6ae14aa64f5dad9fe6b87c8a","modified":1600947142486},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_022.png","hash":"11a4b3d9d144811e6ae14aa64f5dad9fe6b87c8a","modified":1600947149553},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_001.png","hash":"8302ee407cb1131785bf622ed2a77d2388609257","modified":1601300795366},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_004.png","hash":"c0ce8fda7ee6f0f28a0774e288e8451044b1072c","modified":1601301444372},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_006.png","hash":"e0d97b6ba25321f96a5fb93d1c443d613ebb085f","modified":1601301460805},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_007.png","hash":"68cc8bccda64420f81a4b60f423d63763d088942","modified":1601301468973},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_009.png","hash":"417fdabb9597dccbfb7cba7610183551bf35ae24","modified":1601301485984},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_013.png","hash":"b218179fbc45c384068673be2887716adc8b5eed","modified":1601301523223},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_008.png","hash":"a0ce6a3cb1383b90d21f1fb1a7bdf99cfef90a6a","modified":1601300868663},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_020.png","hash":"28c1b3a34b9712a9183793679dd73794b2f055eb","modified":1601301579979},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_024.png","hash":"faa8d013dd69ccfaf90aaec20f397e5dda2d77b3","modified":1601301611098},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_1.jpeg","hash":"1b3af87d2fd6ee952983ee7999a4b5c320b640fb","modified":1598962363673},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_2.jpeg","hash":"2cab785accd23c03c4bbe322eca15abaeb95dd2a","modified":1598962363676},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","hash":"ebfff5fefe8bbc0472eaaa89fe0b7a7577c48f66","modified":1598962363661},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/joinSteps.png","hash":"a8f0d989b5d52104939e265a426ca523201b1dfb","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","hash":"105d1b9a7fd881dde76a4ae7fd95fceab2a9547a","modified":1598962363662},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","hash":"abc959b96273cd27e0ac64cb59b7b05565660963","modified":1598962363663},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","hash":"c2d7afb1f53fe68465eec2638cc9a56a23da8cbb","modified":1598962363667},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/dataStuct.png","hash":"d613f8a2c4b11b680b054446a285f6dd0f83f4f7","modified":1598962363669},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","hash":"e478ca499d74e12f95a5f634e786f5a9d43990ab","modified":1598962363682},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","hash":"76a35a8983b4579c473fbf8332460b7697fc0e1e","modified":1598962363686},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","hash":"609e0946dab07531af36e7b309402039ec0e7178","modified":1598962363687},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","hash":"b959b3be0035561ecb2cc930f2389f895a7f7921","modified":1598962363691},{"_id":"source/_posts/python/base/06-模块/06_002.png","hash":"6b5b2a31220918c763f8ce78fb9ee37493762742","modified":1600827654728},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1598963516630},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598963516631},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1598963516649},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1598963516650},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1598963516651},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1598963516652},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1598963516652},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1598963516653},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1598963516653},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1598963516654},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1598963516655},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1598963516656},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1598963516657},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1598963516658},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1598963516660},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1598963516659},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1598963516660},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1598963516661},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1598963516661},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1598963516662},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1598963516663},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1598963516664},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1598963516665},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1598963516666},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1598963516667},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1598963516668},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1598963516669},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1598963516668},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_002.png","hash":"8011867aa2c1bc81effb6b252b4141e90dbb03d2","modified":1599052710066},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_003.png","hash":"ec04c33fd32cb3b621fb8bc3245579b378c1d8ae","modified":1599052723734},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_008.png","hash":"dadf5c97fd08a3913fa66610b8420e092ec5e4d9","modified":1599052786401},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_007.png","hash":"559f56f75bcadf4ccff83652da50fe3413b99e9a","modified":1599052775924},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_009.png","hash":"ef0283083f072648614a21505c2b8b1c9e403d4d","modified":1599052796795},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_012.png","hash":"6936877ff71996716caf77c5910bc51ceb4c2bc0","modified":1599052825823},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_005.png","hash":"cabdb1ccea8ff2ffc444413d05117c8e4e778ced","modified":1599563962509},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_003.png","hash":"c029bc5626e87d696d7c67aa5113463581dcdc5e","modified":1599738662092},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_002.png","hash":"fac4b9c8e06b020ad1b5b689072267b8948bff20","modified":1599740370657},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_007.png","hash":"89a338daef990781700ed49bfea46f173d74523c","modified":1599740421069},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_005.png","hash":"b6595f745dc23c1f1b096c58028b04529cf268bc","modified":1600433970903},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_005.png","hash":"c0b163bf27273459cbfd32c06630292612261ee9","modified":1599741065810},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_023.png","hash":"efb64fa8b216b62c72328796a610a92f4803b466","modified":1599741247876},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_005.png","hash":"a98c23ef4433a06dd2676dab6d3eac4299c42766","modified":1600436692272},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_003.png","hash":"cbed64825c0531a75256e48d2d2c38fbf697e8b7","modified":1600437638024},{"_id":"source/_posts/flutter/flutter框架一/14-虚线和星星评分/14_001.png","hash":"8ca34324d7fe440da16d9389473d7082aef6b0e9","modified":1600944494219},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_017.png","hash":"15667d89304f335b901f94b74f4ca1b8053fdd8f","modified":1600945169045},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_004.png","hash":"d25b88825f2d2ac888ff7b4686c80e6520c737e4","modified":1600946985293},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_006.png","hash":"e5789f01eb8a36ae374f45626d545309218184b9","modified":1600947001495},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_011.png","hash":"95dbae4aab189d2d82d3d99b959e9fb1c4bc828e","modified":1600947047836},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_016.png","hash":"1baef5753bc4c4fa1095242b253d27c4c4c991c6","modified":1600947089124},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_003.png","hash":"55e932c82e08e23228682de1ab827fad7136be37","modified":1601300823499},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_012.png","hash":"17b5e72d218812eba5c2de92a81c8e69297c433d","modified":1601301515249},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_009.png","hash":"41109e1d1e72a4cffb46b101b57458ed137dd73e","modified":1601300880229},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userLogin.png","hash":"2ffcdfdc6614890c8a29691f2694df36ab795de4","modified":1598962363664},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","hash":"05e1d41d896b0667dbe0876d3746acbdf9c3b5bb","modified":1598962363685},{"_id":"source/_posts/python/base/06-模块/06_001.png","hash":"5d3b751ac11175f524c1701af0446367b8d3a887","modified":1600827654727},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598963516641},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598963516641},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1598963516647},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_006.png","hash":"013e3af85ed43c35436bfd2650019d0036bfbe7b","modified":1599052764960},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_001.png","hash":"d94070d0ad92d7275dcae0dc73bd72a5cc6076a4","modified":1599563882957},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_003.png","hash":"52a5448412c7b8f14ea16919d83eb3c309ae140c","modified":1599563945130},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_008.png","hash":"3a27cd6e3d9acd5fe098b440cde0d4a66b937a81","modified":1599563991089},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_009.png","hash":"dbd40f6d1bd82a9cd33168ed64ab9b1cf0a72b0c","modified":1599563999397},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_013.png","hash":"e0d1b69acade1256f0ca83ae3a98e6d207fc26bd","modified":1599564032572},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_005.png","hash":"06a3a9153b7e28c1fc2af5d7da2f39b218f5f2b5","modified":1599740402300},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_001.png","hash":"a981e0ec49757e56ef02348675efdcb0b641eac6","modified":1599741011871},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_003.png","hash":"20b1c167d34f0deb01813fc245f6c556f7f81fcf","modified":1600944655663},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_004.png","hash":"179f2d4e81639ec319b4618edfcf10d8282df481","modified":1600944668275},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_002.png","hash":"a91ef9964a6a5ce976de9c46b179250c680d4678","modified":1600946970159},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_022.png","hash":"ed28730924b8af67b73f7bfbbf6e1f913202a4b7","modified":1601301595453},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userVerification.png","hash":"e7f8642528c2717f56da3387c82e854f0c19308b","modified":1598962363666},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/fingerLogin.png","hash":"8dd699b5adc6feb90201f9bdca267066f0a5efe6","modified":1598962363670},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/startFingerPrint.png","hash":"cd60ab5e41e9ce4dfb42227240e3db1b9fa9cfb1","modified":1598962363672},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598963516634},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1598963516633},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1598963516640},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_001.png","hash":"a24f8af4850879d29ee91aa6f19cb116a9904344","modified":1599052684056},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_005.png","hash":"b85d41399e8bee72b0697434a027ed0d382d63fa","modified":1599052750738},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_011.png","hash":"62df981318532300168fc77461ec95933764ee5e","modified":1599564015537},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_010.png","hash":"311ef06ec89dc5ccd5a4ebbe4688580fd7118fde","modified":1599564007480},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_014.png","hash":"81e635e3f9c7d51cd53da9407fe7e1ca3fa507da","modified":1599564041377},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_001.png","hash":"74769e588733c418c0060551c8526e796085e402","modified":1599738626431},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_004.png","hash":"647d294b213aedeb99d4dfae2d120c7a1ed7ab52","modified":1599740392862},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_001.png","hash":"f734071df48c33ceaa1e63413b3e5e494ca30564","modified":1600945023247},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_008.png","hash":"80d83b880c934d6b22ba3bc189c41133e6b4dd4c","modified":1600945089386},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_018.png","hash":"41e60616ac4a56fad1f4d4bfc137b3996cc17a8a","modified":1600947102960},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","hash":"4f027a7c44445cb3e7d963148281cffa9aca706f","modified":1598962363659},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_007.png","hash":"f83a1cc9ed06ac8c207b6e91caabbf4cc29bcf9d","modified":1599563981185},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_012.png","hash":"741d916389f05b4f6b18c821d6ea468da6d3e5f8","modified":1599564023606},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_003.png","hash":"fa3dc2542c0a056cd2ae772f740acf3949edf485","modified":1600438108814},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_002.png","hash":"c682870e238ebb84105c60383aba60fef944a069","modified":1600944648115},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_019.png","hash":"1327cdcb826bcbe3eadfec9815a5bf1d6015629f","modified":1600945196443},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_021.png","hash":"9c09a0c1939899595062e58586366315fb9f4a94","modified":1600945214297},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_025.png","hash":"b25d920b3437913737cdc83defb5c9a0e289d5cb","modified":1600945252872},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_027.png","hash":"02da7042abb00280fbddf2688262692af55f151b","modified":1600945269076},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_012.png","hash":"65ebcf452380adb739ed846b8a439f556efd493a","modified":1600947057777},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_020.png","hash":"82f7cc283e9abdbd0f0fe6f43dd86614ca328e32","modified":1600947128260},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_004.png","hash":"7766283bc7682c8e9765fdafeb611f1a77a9a917","modified":1601300831803},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_005.png","hash":"0e73fb1a45d70a3b90aa150c95452a0b65f4e669","modified":1601301451756},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_008.png","hash":"96ed4871f555a75646f90e0507136ac0aa37bcda","modified":1601301478210},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","hash":"eb4189fc4cf128edd8df6ebdb760447550d68442","modified":1598962363680},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_002.png","hash":"ce6a0ffb5cc678f68f46e94e07c843e98e312d98","modified":1599738651899},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_005.png","hash":"9bb69427245889862eb7a0492cac433de9271c80","modified":1599738679990},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_007.png","hash":"0f17689ef4bf62e1d8847c52ff3b55a9d1d801de","modified":1599738695960},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_049.png","hash":"70e3d6622b9b0d35de0cb879a6675d7f88fe82cf","modified":1600434449547},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1598963516648},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_001.png","hash":"acc9b9bacec2af31df977f5bed6568d671c064f8","modified":1600944630243},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_016.png","hash":"be8efc1caede1e454259b2d76e48c54657e4cb40","modified":1600945161110},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_014.png","hash":"658540a988ae2f0582b6c8aa180976def23a01b0","modified":1600947073335},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_002.png","hash":"4b2c08ad313d4e6746d2769480d555663c5ad777","modified":1601300814286},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_004.png","hash":"a0547092ff846402d4c27d61668529e08f10a12c","modified":1599052735666},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_004.png","hash":"24f14748753535a447e7c7b52e4ec90afee6005c","modified":1599738670835},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1598963516638},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_004.png","hash":"2528105c6dca77ffe1726b49d668656dd3c90d30","modified":1599563954065},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_004.png","hash":"c2b07994422afa7184e831af8b794280598e322b","modified":1600436681442},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_002.png","hash":"d8c8bc914b954a14159762645bb8edfc53869993","modified":1600436664394},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_008.png","hash":"eff0089db16b0a79272f21ebfc9ad1e8a3af73fa","modified":1600436718262},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_006.png","hash":"a7ccfeff37e2ef8c41ec0278f0be37d90a6bcf34","modified":1600436701551},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_018.png","hash":"97c9de33553bc1f09935ad7ee8f2a2a408fb5e15","modified":1600436819061},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_020.png","hash":"4f9665899fe54950a39d5f0a35c5f3cc08bb7e4b","modified":1600436841268},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_022.png","hash":"9c2387774fe8aca0ebdbe0cb98ca6ae30079b530","modified":1600436858741},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_002.png","hash":"703ac1afdd3f8085e0719337f42a055d227f4924","modified":1600438472346},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_013.png","hash":"a80183133bf11c1bd6c3b2b0cba26b55ab4ac16b","modified":1600436761035},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_015.png","hash":"f8ab7fa49d994087a8938c3f358d9eddb99b544e","modified":1600436781725},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_001.png","hash":"ea5d5f51da9652639c93bc7684f4f344cb83bbdc","modified":1600860393936},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_008.png","hash":"e1eb408d2fa6156f9f4385d93dfe469c22763e8c","modified":1600438529491},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_002.png","hash":"06ef9cbcb0bae17088e177a09f9c14a59346b285","modified":1600438832631},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_008.png","hash":"b165787d8f992cc5e7c6bd4d86e454ebf04975f8","modified":1599740431469},{"_id":"source/_posts/python/base/07-植物大战僵尸/07_001.gif","hash":"e3b5b0424162c4944c02c95904481dfad487e8e8","modified":1600827654787},{"_id":"public/about/index.html","hash":"0ccc80e82c4aa6bf4bb385b45a91f8fbecb87b7b","modified":1602589492862},{"_id":"public/categories/index.html","hash":"0cf3c707742c0a6e90ae59af2c497823c295bcc7","modified":1602589492862},{"_id":"public/tags/index.html","hash":"440ff24d02af4a7fc4ada8e73a1e4b2e76536611","modified":1602589492862},{"_id":"public/2020/09/25/flutter/demo/01-九宫格手势解锁/index.html","hash":"99c320ca7deffff6ece7aeb5479d6cac000b6f36","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/23-Flutter应用信息/index.html","hash":"dbe1299b5f8e4eb1bdf31a841020bee2192f4d6a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/22-Flutter屏幕适配/index.html","hash":"730103321f69b68fa2e997d52b287c217785e16b","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/21-Flutter主题风格/index.html","hash":"32c74c1d3473e5abfccb937dd696bf4fe9b647a4","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/20-Flutter动画/index.html","hash":"b198b723571106038ed203098b533db4dee4512c","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/index.html","hash":"9c9dcc7961ba64f947a4c6a787a31ccda928a6c8","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/index.html","hash":"3ad5c083f96fb44f4d2c3d53a8929801bbfb0ade","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/index.html","hash":"56b71389dbe885ec2fe35605f6ddc9c51df0dd79","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/index.html","hash":"aa9b9150e8d5b766802feac83fcab09b9e2c0ef0","modified":1602589492862},{"_id":"public/2020/09/22/python/base/07-植物大战僵尸/index.html","hash":"e4fab2350240fb29f58d6b3a7db4f98c7bd80bba","modified":1602589492862},{"_id":"public/2020/09/22/python/base/06-模块/index.html","hash":"db53b0a8aa156202d82c6c248ef53def94e0bdfd","modified":1602589492862},{"_id":"public/2020/09/22/python/base/05-面向对象/index.html","hash":"65b9bfc035f3e5541ac3f6cf4fa5f796b107d631","modified":1602589492862},{"_id":"public/2020/09/22/python/base/04-函数/index.html","hash":"ce738321b2ff6fc07dd6e7e7d696dfe3d364b5c2","modified":1602589492862},{"_id":"public/2020/09/22/python/base/03-高级数据类型/index.html","hash":"c4ffd258e039604c46ce82274a8b0851ae574528","modified":1602589492862},{"_id":"public/2020/09/22/python/base/02-python流程控制/index.html","hash":"eeaf722f4f3961045abcd3274f298dfa6bd243c5","modified":1602589492862},{"_id":"public/2020/09/22/python/base/01-python基础/index.html","hash":"17b971ad11dd515a871f461ce2972b08007a8462","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/15-豆瓣首页的实现/index.html","hash":"9a99fb2bc09365a00a19a30480c84bf366443964","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/14-虚线和星星评分/index.html","hash":"3df7e47193cf4e3e360aeddef50e739967a78429","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/index.html","hash":"18dbf45f590bdff6925e5147e77dd45975e52380","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/12-滚动组件的使用/index.html","hash":"f5b2263a9bc791c07bd08be2be334e161d491de7","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/index.html","hash":"54104035876667012db32308037e852eb193a2e6","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/10-图文混排，按钮，图片/index.html","hash":"f2787860661e05e1f481523a3d4eb8dc6ae82f6e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/09-StatefulWidget生命周期/index.html","hash":"a7521b3ee914a33a6695c17ffb35ab9e0cd72c12","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/index.html","hash":"adac35da66e160817944b517713809e26518def5","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/index.html","hash":"f2a19451d427dff05d1275c836389205563e4bf3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/index.html","hash":"0eae1e263ef7ef5a8e933c64dd8433661ebfcc2c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/index.html","hash":"86700f23954f5aaca32aa79a2c5f99e2dad48bd8","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/index.html","hash":"7869b9e1e75626f27d9a37e480ac5532aca1eb5d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/index.html","hash":"09ed5f0d45f8193d8e66d3c5a0956f9b9ce81f73","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/index.html","hash":"b87e3f35dc095fbf5e244aac0cde7a80c759297e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/index.html","hash":"027db6f3beeba3a23984a5839396574231203b43","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/14-Dart中自定义库，系统库，第三方库/index.html","hash":"8042a2a34032013a5b403690b7ceeb27f8b5caa6","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/13-泛型方法，泛型类，泛型接口/index.html","hash":"3de3856923269bd9246127c2dfad9ec94b4f8d44","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/12-Dart中的mixins/index.html","hash":"3c00e4d72088340976a883de15e79c3650bb35da","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/11-Dart中抽象类/index.html","hash":"9a78da05be6349a1a5d8f392a44c6faabf8d2c24","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承/index.html","hash":"7ad5eb603082971660f4d6bf53f446d5b6ecee83","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包/index.html","hash":"801dec7bb76b174fec95f026ac7d678991e6cfe8","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/07-方法参数/index.html","hash":"7c18f363bb0d7bcc3b1a42d890bf6c85ee955754","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/09-面向对象/index.html","hash":"c234a8908fed7baa83a176f6cdb1df846a2deccf","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/06-Dart集合类型，-List-Set-Map/index.html","hash":"86625a29fe1267221cef5e89e07e341789e69db2","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪/index.html","hash":"34ccfef7af5f43e3d7a0e3c0be76f4dc88e9a64c","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/04-Dart运算符/index.html","hash":"8e91ba8aba18d33b06acd16360edab926a6b421e","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/03-数据类型/index.html","hash":"2affe5442f11e2e7d34f5a89fcdf0b6ad5944358","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/02-入口，注释，变量，常量，命名规则/index.html","hash":"f11148e2f42e63487bef5a01d7a19d110b24586f","modified":1602589492862},{"_id":"public/2020/09/01/flutter/Dart/01-Dart环境搭建/index.html","hash":"7a81ea03a840e9be6a8ce559a745aedba3c8b400","modified":1602589492862},{"_id":"public/2020/09/01/hexo/hello-world/index.html","hash":"eb32b8047bee8214987a7aea7003b525b2a04d97","modified":1602589492862},{"_id":"public/2020/04/24/oc/Screen/oc-screenSize-detail/index.html","hash":"bddebeb29e65cea662a778d8dcc16050754f04b5","modified":1602589492862},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-wk/index.html","hash":"38ecd0b155289b9c38b56f3ffe419510e7b741cc","modified":1602589492862},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/index.html","hash":"2b12459d7c207c1674720e07abd3650b0387095c","modified":1602589492862},{"_id":"public/2020/04/08/oc/Login/oc-Login-QRCode/index.html","hash":"847efa4ca736f597ac92a351c1a379b49cd95ec9","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-AKeyLogin/index.html","hash":"da66c1701a2a2e09e0c08256d9b7a93bab1ccb3d","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/index.html","hash":"cf8cd3bf61c70c92ddbdf217bf45a7f1f23f8944","modified":1602589492862},{"_id":"public/2020/04/03/oc/Upload/oc-Upload-nativeUpload/index.html","hash":"7cc21c7b894f8d5f6be14ff6de0671f60ad2b09a","modified":1602589492862},{"_id":"public/2020/04/03/oc/Upload/oc-Upload-putAndPost/index.html","hash":"b46cc47a7bce643cd88ffc1a2225faa368002b01","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/index.html","hash":"71a21a76be78d82cfc899ebee7ea827bb931ee31","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/index.html","hash":"d809933a999554927573d6aed8ab153ca8688571","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/index.html","hash":"484b7e50d6e698bb395dfb02597a0baeb9e450fa","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/index.html","hash":"70a2f5f4ae9fd423a0eca2f9c4916080a12335a7","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/index.html","hash":"343ae2e926abbfab33bf1f7c5c286af8c68d2ce9","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/index.html","hash":"456d95ea6ccc4d25e5d9736396ff94c470794e4e","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/index.html","hash":"ab99d58f47a67df53168021a2a5cb864546205db","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-mulString/index.html","hash":"07ba83c26ac20dfd7d9b09dcfb58a1365e57efed","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-string/index.html","hash":"0a05dd8430458f8df843b694ecad3542a6979917","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-struct/index.html","hash":"0419cf7e6c0f159cd5c92d867363e1abb9f5e0d8","modified":1602589492862},{"_id":"public/2020/04/03/c/c-enum-desc/index.html","hash":"e9faebf050c1baf3075669cfa99c0527276f6d67","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/index.html","hash":"6b9f8e1ef8ca386599f6fcaac0cffce85d5612cf","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_block_desc/index.html","hash":"8183eff8d9562918b4a1ea65ad48890048720cc8","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/index.html","hash":"88b8dc79611f7aad661187917f73db2eeaf796d3","modified":1602589492862},{"_id":"public/2020/04/03/c/c-pointer-desc/index.html","hash":"a9af96f67d7734f6a5bf61799c408af16e6e3c68","modified":1602589492862},{"_id":"public/2020/04/03/c/c-maopaopaixu/index.html","hash":"bfdb7e61fa8e817e1343a782b68bf46e8508795f","modified":1602589492862},{"_id":"public/2020/04/02/c/c语言中的字符串的定义及初始化和输出/index.html","hash":"733b24c4f80eb601f2c29f2c5454cf9e31249cda","modified":1602589492862},{"_id":"public/2020/04/02/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符/index.html","hash":"7c4b95d8bbc9c29c18602ef8503926e73a6bca93","modified":1602589492862},{"_id":"public/2020/04/02/c/c语言基本数据类型简单介绍/index.html","hash":"accc6649ac12b53b62bb56af16b923a8a564fa02","modified":1602589492862},{"_id":"public/2020/04/02/hexo/hello-hexo/index.html","hash":"4b1018e1b8a79d7edbd7bb6c1ceb89da97be0402","modified":1602589492862},{"_id":"public/archives/index.html","hash":"22fdf132f22e5c3fe537663572005007a5e2efe3","modified":1602589492862},{"_id":"public/archives/page/2/index.html","hash":"c193bcf1ebdc0cfe6bec4bea776a2c887200e49b","modified":1602589492862},{"_id":"public/archives/page/3/index.html","hash":"6f3d1123da004f0a5568b7a4c6ffb61ff3389583","modified":1602589492862},{"_id":"public/archives/page/4/index.html","hash":"ccbaae9b228c2b40f69290439fedd1a42321a588","modified":1602589492862},{"_id":"public/archives/page/5/index.html","hash":"b394b344949c99c667a715ecbec52660830ae456","modified":1602589492862},{"_id":"public/archives/page/6/index.html","hash":"f69d5ed84cc3813323a9ffd070afeb7a78ab2889","modified":1602589492862},{"_id":"public/archives/page/7/index.html","hash":"db429fc3ba24e8f7f7be5172af122b6533580a4f","modified":1602589492862},{"_id":"public/archives/page/8/index.html","hash":"290003c059822870b75c66b6cd90187a8937c52e","modified":1602589492862},{"_id":"public/archives/2020/index.html","hash":"c5dfc3c2456b77b5dbd9adac40be500aee66f154","modified":1602589492862},{"_id":"public/archives/2020/page/2/index.html","hash":"646efd10b2775b9c728e87458fff981bd6600126","modified":1602589492862},{"_id":"public/archives/2020/page/3/index.html","hash":"7839c6c6d1b9f827fbfc874f58c43afb074a4d23","modified":1602589492862},{"_id":"public/archives/2020/page/4/index.html","hash":"363d0384074a6f846ddc6cdb06cbd45a1d8955a6","modified":1602589492862},{"_id":"public/archives/2020/page/5/index.html","hash":"73d0e0f7bd6dfb30fe57511b03ac44249ec98d19","modified":1602589492862},{"_id":"public/archives/2020/page/6/index.html","hash":"65457cd413780ba8af14eeb40086537cf695e3d6","modified":1602589492862},{"_id":"public/archives/2020/page/7/index.html","hash":"a3f744001a6722bf001b1a219568e26c8d0aad64","modified":1602589492862},{"_id":"public/archives/2020/page/8/index.html","hash":"e616cd280158d41742dde28e75284dca81233fbc","modified":1602589492862},{"_id":"public/archives/2020/04/index.html","hash":"853c64529e21ba916075274515f3accc6d48370c","modified":1602589492862},{"_id":"public/archives/2020/04/page/2/index.html","hash":"b95204f3ae2bb1d53feafa6ec18fab92828c9fe6","modified":1602589492862},{"_id":"public/archives/2020/04/page/3/index.html","hash":"b133efafcff48f69254f78e4f29e1e6d0b95b443","modified":1602589492862},{"_id":"public/archives/2020/09/index.html","hash":"b3fd06c0654802177dee1ce5de74094c48319b09","modified":1602589492862},{"_id":"public/archives/2020/09/page/2/index.html","hash":"f0f0b76d70bb09dd36b5d63677d55bee205a7c13","modified":1602589492862},{"_id":"public/archives/2020/09/page/3/index.html","hash":"185f9e48eea117be03d6ba4d32b9527505137910","modified":1602589492862},{"_id":"public/archives/2020/09/page/4/index.html","hash":"1ea1992ed4d75aa4c9971c0ca4b385e5adc6e1c7","modified":1602589492862},{"_id":"public/archives/2020/09/page/5/index.html","hash":"237aafd6090b1d79e49c7ef015b3d4178ceab553","modified":1602589492862},{"_id":"public/index.html","hash":"4218a0bf2ac667eb1215566f6d9b5d27377271e2","modified":1602589492862},{"_id":"public/page/2/index.html","hash":"59573bf52e4798c57497c6529bb4cf8a92adb120","modified":1602589492862},{"_id":"public/page/3/index.html","hash":"930139d1d811a6dd9c043f2f79351213b76aa4ff","modified":1602589492862},{"_id":"public/page/4/index.html","hash":"fefff6df2e168246b9b4cc72cd0cf0c582037843","modified":1602589492862},{"_id":"public/page/5/index.html","hash":"3e22f9cb458d733011fcfa52fc9946815460f2e3","modified":1602589492862},{"_id":"public/page/6/index.html","hash":"773e79f6eda401cee11f154a089dca1a5d782212","modified":1602589492862},{"_id":"public/page/7/index.html","hash":"333a87653c8d2b0b6de50aa85c95ac23982b5163","modified":1602589492862},{"_id":"public/page/8/index.html","hash":"2205c1534befbcbc357d3a71c0550665b9b0151e","modified":1602589492862},{"_id":"public/categories/C语言/index.html","hash":"3ab86218b7d957211fe1db418f364d1fa8c10503","modified":1602589492862},{"_id":"public/categories/Hexo/index.html","hash":"b042a7ad00187990740d304987710538e949bca9","modified":1602589492862},{"_id":"public/categories/flutter/index.html","hash":"9cd9beff2d2b29754a39842e2e5af84e7b5c495c","modified":1602589492862},{"_id":"public/categories/flutter/page/2/index.html","hash":"4ca82f876d332e469d69483a3e357f5e11571cdb","modified":1602589492862},{"_id":"public/categories/flutter/page/3/index.html","hash":"4baeb63b9ab6574b24748fd06eebcec1094c3027","modified":1602589492862},{"_id":"public/categories/flutter/page/4/index.html","hash":"acc4900010fd3df59de57df1c87cc28b396f025a","modified":1602589492862},{"_id":"public/categories/flutter/Dart语法/index.html","hash":"5fa1d7ddb5ea04a926abe4f49e7d52be975a5208","modified":1602589492862},{"_id":"public/categories/flutter/Dart语法/page/2/index.html","hash":"e3d02f4c221b1bc465b128de7eb4ed9071718bcf","modified":1602589492862},{"_id":"public/categories/flutter/flutter框架一/index.html","hash":"42840eba776e3dbada572d0e3044418b11b2fd7f","modified":1602589492862},{"_id":"public/categories/flutter/flutter框架一/page/2/index.html","hash":"163fe71b5f437ae6de054d928d8c596d3381b641","modified":1602589492862},{"_id":"public/categories/flutter/flutter框架一/page/3/index.html","hash":"9e167514667c8249ff734f82805ac1eab846fba9","modified":1602589492862},{"_id":"public/categories/flutter/demo/index.html","hash":"5577ddbfe2fc547bdaa49966b5759d2ab390d44b","modified":1602589492862},{"_id":"public/categories/OC/index.html","hash":"9797f85e5186e7dcc7a66951e4d8cddcb1a29c90","modified":1602589492862},{"_id":"public/categories/OC/page/2/index.html","hash":"5229af1d098b0d27d352b19fca56bc5c52dec04e","modified":1602589492862},{"_id":"public/categories/OC/page/3/index.html","hash":"282fdafd9624b873cb0e68a9c1cad2516496d7d9","modified":1602589492862},{"_id":"public/categories/OC/上传/index.html","hash":"7c6cf6f55d5cd6bb1cb8256354b5f2283baf8e29","modified":1602589492862},{"_id":"public/categories/OC/OC动画/index.html","hash":"0c1655f16fe402ff71ebc3b0f2c6a8dd20b39f96","modified":1602589492862},{"_id":"public/categories/OC/水印/index.html","hash":"398f078c34492c5b5565140665c4db21e22ca23f","modified":1602589492862},{"_id":"public/categories/OC/登录/index.html","hash":"5737e55151a091fc8536af57fa4f0c61641dedf9","modified":1602589492862},{"_id":"public/categories/OC/Foundation/index.html","hash":"d39868997b62a3789ff2066b600dbff1c7463af0","modified":1602589492862},{"_id":"public/categories/OC/Screen/index.html","hash":"0d3887240da0ab7510c4116a08441470ae96d8bd","modified":1602589492862},{"_id":"public/categories/python/index.html","hash":"44444b73bc27e5c52a0b95f54e55f2a85bcf9825","modified":1602589492862},{"_id":"public/categories/OC/UITableView/index.html","hash":"862e49abd407962b462b163c2e792dc8bdff7344","modified":1602589492862},{"_id":"public/categories/python/python基础/index.html","hash":"08241c993641234c948bc8802d3a7b6bd429b8a6","modified":1602589492862},{"_id":"public/tags/C/index.html","hash":"7b55a77ee1f99bf82d8e653a6476de42c5f0e9e2","modified":1602589492862},{"_id":"public/tags/OC动画/index.html","hash":"21a33147b236088d84955886ae514b7a2b99ae92","modified":1602589492862},{"_id":"public/tags/Foundation/index.html","hash":"e502e3898d273e48707849325968fc80b8ade8f2","modified":1602589492862},{"_id":"public/tags/OC/index.html","hash":"bd9d869e0cf46b9cb3aa61cf367facb2aa5b92af","modified":1602589492862},{"_id":"public/tags/登录/index.html","hash":"ec52f66cc15da0b9c50145252d48263f42fdaf63","modified":1602589492862},{"_id":"public/tags/屏幕/index.html","hash":"10ab89441eb4c86d69b02ec19db03461b9a2f6d0","modified":1602589492862},{"_id":"public/tags/UITableViewCell/index.html","hash":"69941245ab5ccfc002b6f5f073f52f86fa973988","modified":1602589492862},{"_id":"public/tags/上传/index.html","hash":"97dde74852c60caf82bb98f3dad1734934716fc7","modified":1602589492862},{"_id":"public/tags/动画/index.html","hash":"0ef1700f861dec7f63f621154c2066ebb5e621c9","modified":1602589492862},{"_id":"public/tags/水印/index.html","hash":"1d52d098bc3c67a9c50877f9a2d28daee2af508c","modified":1602589492862},{"_id":"public/CNAME","hash":"9c934ecdbda0ea2f0988afb3eb8d15bf5fb22867","modified":1602589492862},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1602589492862},{"_id":"public/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1602589492862},{"_id":"public/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1602589492862},{"_id":"public/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1602589492862},{"_id":"public/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1602589492862},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1602589492862},{"_id":"public/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1602589492862},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1602589492862},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1602589492862},{"_id":"public/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1602589492862},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1602589492862},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1602589492862},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1602589492862},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1602589492862},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1602589492862},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1602589492862},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1602589492862},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1602589492862},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1602589492862},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1602589492862},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","hash":"df3e2bd3a9c14d2a559a16340e668cedad0b3ec4","modified":1602589492862},{"_id":"public/2020/09/25/flutter/demo/01-九宫格手势解锁/01_001.png","hash":"3ca34bbdf377203ab5b369d8c33c30d3e05cfcc3","modified":1602589492862},{"_id":"public/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","hash":"1c26567abec83eb90e5c5715366582089eba20af","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","hash":"25baa3d4034bed5cacf98f208c09f9478e14705a","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","hash":"15a736ac1231e1f4848f640afec6fe60468971f4","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/10-图文混排，按钮，图片/10_001.png","hash":"eb1f60a55b6d9a3de1b6f7d9d2b6a7c344e07b24","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/10-图文混排，按钮，图片/10_002.png","hash":"567f319b70ce225eaad7e40d08f3dae0a89dec1c","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/12-滚动组件的使用/12_001.png","hash":"deb2accd43f5305179b271605cca37eaef40ba0c","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","hash":"22943d631426f8101d4786156ae4cb413838f7b2","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","hash":"f06815da9d39db93d195ac892bb24bc8074625b5","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","hash":"d73093cbcfbc465c1c03e11d95f0d2d36550872e","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","hash":"75a7aa4f1543ab9d0d820ad27ce169225dfc6b5b","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","hash":"2cd5474cfa817eb6ba7434a7a487ea5c7fb3c071","modified":1602589492862},{"_id":"public/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","hash":"3e01fef29cc679f63b3e96e80404b88654f41004","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","hash":"8e68292c6629493d941fe21b1993354f966066ba","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","hash":"2bdc3e3b8b7d9bcfc96cc123e3fa37113162adbe","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg","hash":"e54a0521f0f9080335de03cfdeabbc133348cf93","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg","hash":"e937b540912e15f41fb1f5615bd5302d68be0f3a","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg","hash":"9f6afc9b9fba4b0e5e0a3dcfe42a71d361a252be","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg","hash":"7de04a69c065064133e6d2315e50076b8ac91ba7","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg","hash":"aac2b4c4c60b20e947b675667fcfae7ba4708b91","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_001.png","hash":"4bb968eea9c33ee7f53b2c9a72b461df94914c33","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_004.png","hash":"8a3924a7686449e9b00b15368030ed6376e29623","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_002.png","hash":"0dac60d0a77441541b7dc318f3078f97aa568f29","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_007.png","hash":"8daeeed2207fc291be55c9219609e2cb0668f522","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_005.png","hash":"c521520c6395b5bf9dd1eb13b6c2a7f8e819c1d3","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg","hash":"cbec0cfc87a8ee2950f0adc9f1128b6622e6d6e5","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg","hash":"2828da94d04b2002fb3fb89b9b26fffd7a49f6a9","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg","hash":"94bff061fcafb6b68c48ae0a2269ff01bea61543","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg","hash":"19fc9b624ba89ebcd80f7c75864044062c91c252","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg","hash":"dd4520a3ef3e8130061be453937181b3f1c3d5ca","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg","hash":"ed49334a419a8b5d9ae59038bde6c69fea2c569c","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","hash":"3f20cf31a6ba9b7abf0d445ca49879b3a6d4fa0b","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","hash":"35d2ac4c6558a9aafb669b74bb156ccfd5e89516","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","hash":"140795cdc9735be8edfa2e71e2d6ca48da6d2fcb","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_006.png","hash":"453a81562507c8b82bc556f7d9fae4f7fc0376f0","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","hash":"578380de0f2086bbe5c92e6951b754e0b8d215bc","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_003.png","hash":"f73bb43cf83cd2cef246d7e0bdb535dd3ef51976","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_001.png","hash":"e1daecddfbc89b9fd31c72eb71a94940c12b3929","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_004.png","hash":"0f625fecf4efad429aba43449a606e81eb843a5d","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_007.png","hash":"0973f66ab43c2246c815b00310940f2af46eb7cc","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_006.png","hash":"f3f4dc4d4e829b47dc65ea11e66112e8080c27f7","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_005.png","hash":"ec684e434bc3764f9ef0cec192b22d084c092cea","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_003_0.png","hash":"d93f81673e243b95f3b4d68c99039b24102de734","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_005.png","hash":"e8e7fef7fd7027abc4e1b4022b865061270d22ea","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_006.png","hash":"12a99969da373cab7e350d0214c77c70f7ce0e1e","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_007.png","hash":"c68d0facbae552400ebfa6ca433fb9321564d024","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","hash":"3c04edc6d9c2799b9dccaecd0dce9db56f65661f","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","hash":"19756b5c17253aac9c414d904611ca1716a7a93b","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","hash":"4a49d95fbc0cca1a8d393c70694e68b44afdaa71","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png","hash":"c85691dc2b95ecc5d7809a3748cb2e99d7a8be47","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_011.png","hash":"c69ec507c6183d69028c3dd11cd256bc79f2e65c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_010.png","hash":"52e1c17edbb28c043133754730d996824067b874","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_014.png","hash":"727bc1b32a806a33f5f584df331e2c21e71171af","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_008.png","hash":"82fa39861668f2b8047d0fb8ba3b1a3cac9a7236","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_010.png","hash":"780ce10551aea213ceb719a6778456cab95a9dea","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_009.png","hash":"51c9940a75f23dfd3e571c8381a818ba79e385ed","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_015.png","hash":"874abd9451096a6d1fb1af8806ba20853ab1d2f7","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_017.png","hash":"f793072a9126ae9d5c0cad8e85b15a778fb6baea","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_023.png","hash":"9d151c1abefe063d190809fe6a8f798eb004a909","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_001.png","hash":"dce2063b12417ce3c3ca7b5cd3a76fd9d18a6e50","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_024.png","hash":"34b1747ac29a70a989a054bf0ca34a86b96700f2","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_003.png","hash":"6523d45da9049c8d83ed97bf090ee885935a4ce4","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_002.png","hash":"883a8a9c17a70ead7e9ad3f052b015b950cd75f2","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_010.png","hash":"eb1386b9e7babbeabf5be3f2ee9a73a1983a627e","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_011.png","hash":"19aa952b517853f14a4f82c18337fbabfcc4c21d","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_014.png","hash":"c8b5e18499288174b4ed7e9af20ecbaa93430528","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_016.png","hash":"81b67ea78f7b6d5871c2db9a2102d695341ad00a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_015.png","hash":"e03c0cdd626145330bb86a07f2fb1bf978aa6d8a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_017.png","hash":"2639848afa9abf32eafec4e006b25b97b3fe9948","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_018.png","hash":"6ca71c70c69732830e82821cae01cdeb1c1a2b85","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_019.png","hash":"8874052daeac1d84e82360cc309894a63a52a09c","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_021.png","hash":"c5b9432765f9e0e003cf3ee306e24d6749306dbd","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_023.png","hash":"f662247c97f52b5f1ea511b3166f19525ca65a9c","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_025.png","hash":"fa17a8da2d2fbb07a5897fee3ad5a0fff105fba9","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_002.png","hash":"2cc372a09d675de3c489b654b13f14572d9be85e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_006.png","hash":"62a4b0ddc692472925865320c3ea068c2c30e511","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_004.png","hash":"44cae75026549d0ecad110dd8d80e2340dc9688e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_007.png","hash":"c995dd1e17895ac3262359fef0bc09c03c28a8ee","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_008.png","hash":"8fb56b1d3b5ea914bad517d121bfe408a0941d3e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_003.png","hash":"526aa4cd1e77c2e9fb9ec4ba2525b133caeb09c3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_009.png","hash":"2ca7bea96c904215a5c5403ef8771311a5d39330","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_010.png","hash":"18694ecb90ad072a3dc9321cdf147c2548766a86","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_011.png","hash":"df20b41610cc197f26683fd623cee6cf56017a5a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_013.png","hash":"46eb7021d792ab8469f3a948d176989f4fb612c3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_015.png","hash":"328be0e0160402e3b2eac372ad675f780af9ed7b","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_016.png","hash":"efea77684a1fec56f429ca7d020675b4b4b1fd10","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_017.png","hash":"ef78c74bdd05e01d678850d5c9bbd71f603d1921","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_018.png","hash":"feeee40fd0cf036ef27769b77cdc9656f264cf5c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_022.png","hash":"0ccfca6851e74d15486b6a1cab1bb51ceaa09771","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_021.png","hash":"53482198b519ac728db544612202de7a4053cb0a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_025.png","hash":"5a8b999bd5aea07e841026b5e45a1e918f5e0723","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_027.png","hash":"06bee3548926fb4b11dc16e912038a3b42ce9748","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_005.png","hash":"88e3a8e8ad374eb3cfd978f5d9a2876b8fb1a41e","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_004.png","hash":"469460c5864d19a6974f7b405610ec8f6a9777e2","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_007.png","hash":"d89f564b896fc35a5ceda3b7f6d838f7c28fe0b9","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_006.png","hash":"525bff26f26b508959f85d590c468d0c2945f4f2","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_011.png","hash":"53f3569fa01a3b25d64ddad52293e8802fd91069","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_013.png","hash":"b4dab2ceb6b8f6bba83f398ae7bdb3da052c44ed","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_014.png","hash":"5c0e73bb187f6c6171e7f4b1900f492f84a210e0","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_012.png","hash":"3a4b0c3f6d3349143a545ad01314298a2d0a3658","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_015.png","hash":"d60791dc9fcb0949f5a7edfe647679c96df38c29","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_022.png","hash":"eb7cbbf998c1fbc329cd17cf2359ca14ceaaeaaa","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_023.png","hash":"24d6ef7daae59c56506781b185e8f5b4b75f9818","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_026.png","hash":"5151c7c3906c7e1ca5069772c7b3dbf1018df770","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_024.png","hash":"c78ab03aa3f37cfd95faf4e601d3b9159f466675","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_004.png","hash":"1781e4e1e46cc90cbb46a3d19da760d40c04dda2","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_007.png","hash":"7691deea8eb1d59fbecba45cb644e7c4b3c4272f","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_009.png","hash":"843fbbdbb5d4ab567ca91fa93461e22048b57b6e","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_011.png","hash":"9427ff3a4ed41b6933baedb0f75aabe9dd5150a9","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_013.png","hash":"603f2506cc366742e119de0a190ad33ec4fcc976","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_016.png","hash":"7b8d09bcf610714ac1cd7c6c76c30ac4f670a5de","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_018.png","hash":"17a12813e13ab2d7873316fe9cae04a8d5a78176","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_017.png","hash":"231a047903c345d97638e631d39749bcf558cd1d","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_020.png","hash":"41241d09cc4f50799570da6dd896053f082a9620","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_019.png","hash":"49f796b664dc452758ce8dfcf549504efe2dfe72","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_021.png","hash":"dfebfcf9d89fd27adf4978838ea1ae7569622eda","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_023.png","hash":"30f8ffac9985c8b8d3a067acb3df68442f672ac9","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_025.png","hash":"fc0cd93f1e78888fabacc20cdc170caad337dfa3","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_026.png","hash":"40d0b79e7683516e1986cb1a0b72e6423073e8e8","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_028.png","hash":"82ed8ebe94db6ccf499f83a4c0cdc8e96f2eb2a4","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_030.png","hash":"8fd9b2a57b95c3d2b7a9602e0181dcdb2ffea6fe","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_031.png","hash":"94d6685bb8f07e580fbdd410205bcbb680590255","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_033.png","hash":"bb9522bf19a106ecb12caf2f921ab2f69e32d6e4","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_001.png","hash":"11748526e2adf4cf2d06de9d4e248699efa308e7","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_003.png","hash":"d6e2fa28078ff5651ed1c978886a91d399de34ce","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_002.png","hash":"1e98c55dcbb8e9c79d9d3e112a6ae3be864a1f88","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_006.png","hash":"173a65963379fdf39874917ad66139c6d19b5880","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_007.png","hash":"be292625abb8f8e480649d284e1ead3fc78a88e0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_009.png","hash":"e577a5160e118ad578a9ff02e0cd4f2cb21a4353","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_010.png","hash":"1ec48956b5851b16f1794140fa7bb50396c31dd3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_011.png","hash":"51715e50a166908e6d691c241716669f0d98b28d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_013.png","hash":"92343568cb00624c33c25e6fe7ae789d3fbf7bda","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_012.png","hash":"84b6fefc69d1761a053f1896b7021e46161deded","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_015.png","hash":"c0968410a44c113504250f904f0e11abb06b6408","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_017.png","hash":"affb60f8a3931ff6a12d44674d75dd70ded8dc56","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_016.png","hash":"d97057c1de6df031cadab19109c31aaaf41649ec","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_018.png","hash":"706a0a894528813b7fd2c3eb4acb595c1d8dffd9","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_019.png","hash":"12181a08df3a86bee30867061a0a28ef3d891e1a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_023.png","hash":"7da6081bd8c386afe2093fe32585da64462778a3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_022.png","hash":"f63091bda954c68838f3958571611786830d378d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_026.png","hash":"33914ce1048854da9653fd91297c0570f5ac65cc","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_029.png","hash":"433c065a0b8bcfb7586dd8058c328aec8846107c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_030.png","hash":"763d5a4ee73ea4eceda7061830d16b80558a72b6","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_033.png","hash":"619543614b3ec5cba5364b1f5b40db3a7528d153","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_037.png","hash":"2d4d1fa352f44e97fecf4cf7b989fa631fbad237","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_036.png","hash":"8e38a1653c3a5b34d6980c69f72ed32fa98b1e31","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_038.png","hash":"4c1b2b48eb54751bc8c619aafaeaccd76bc897dc","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_039.png","hash":"3879940f56d684ded4649a0fa4567dcb1509fa63","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_040.png","hash":"ecad869ff2a845a68c5c978455fc50c7597579ad","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_041.png","hash":"65792fc940236eba31ef4681312b6049b54241af","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_043.png","hash":"e8dad9dad403e0f98112e534455c4ea8a76f99a0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_042.png","hash":"f9b4e19be53cd240f939f3ea16246c78156a5f77","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_045.png","hash":"af16a0b9d6e607b5adffd0b7ec2652f2142d60d9","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_046.png","hash":"c3d3bb603283432557d8561058792a54ff0b492a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_047.png","hash":"b601e954df232072c77d06ad008510d9afa6f229","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_048.png","hash":"a0d987e5a835c3e361a6b762b02a330714c9f4e1","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_050.png","hash":"ac564a74b0d0c1b84194d0e4b8a7beb6d78e2574","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_051.png","hash":"bfbe141fe983b5b774bb5a4dbcc6894d0e9531da","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_052.png","hash":"c05f8dfa7c6b48cf92438c0ca4743eadb34848bd","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_053.png","hash":"21cd0cdbcc027fb1ee4e6d7d443bc37c75108ca9","modified":1602589492862},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","hash":"3ccd49e6e13fe414dc2db451d21fc5277566b636","modified":1602589492862},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","hash":"c05214352e755efe5ab80e98a3065553fdd5c52e","modified":1602589492862},{"_id":"public/2020/09/22/python/base/06-模块/06_003.png","hash":"dd5b46ee5dbd7ef273d0b7886b08a168a6474c01","modified":1602589492862},{"_id":"public/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1602589492862},{"_id":"public/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","hash":"b959b3be0035561ecb2cc930f2389f895a7f7921","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/12-滚动组件的使用/12_003.png","hash":"fed35155720332e4e98bc7fcec075b27346a3a1b","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png","hash":"d613f8a2c4b11b680b054446a285f6dd0f83f4f7","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","hash":"e478ca499d74e12f95a5f634e786f5a9d43990ab","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg","hash":"1b3af87d2fd6ee952983ee7999a4b5c320b640fb","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_006.png","hash":"d17078fecc2ef3123b497beeb712aac00b6f555c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_006.png","hash":"882530a6c474695c4ee5817e9aaf03bd9941c7bb","modified":1602589492862},{"_id":"public/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg","hash":"2cab785accd23c03c4bbe322eca15abaeb95dd2a","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","hash":"76a35a8983b4579c473fbf8332460b7697fc0e1e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_001.png","hash":"a2b6f04e8bbafa0572b8d0b87d3597fddf1b440c","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","hash":"609e0946dab07531af36e7b309402039ec0e7178","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_003.png","hash":"69f7988c4aeed1471e28de95a0be5c7bd075cd57","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_001.png","hash":"8302ee407cb1131785bf622ed2a77d2388609257","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_008.png","hash":"a0ce6a3cb1383b90d21f1fb1a7bdf99cfef90a6a","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","hash":"ebfff5fefe8bbc0472eaaa89fe0b7a7577c48f66","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png","hash":"a8f0d989b5d52104939e265a426ca523201b1dfb","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","hash":"105d1b9a7fd881dde76a4ae7fd95fceab2a9547a","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","hash":"abc959b96273cd27e0ac64cb59b7b05565660963","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","hash":"c2d7afb1f53fe68465eec2638cc9a56a23da8cbb","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_013.png","hash":"0a4c1a5b141f85d56b23c9be7b38de0e7fc771c0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_010.png","hash":"d0f973a85de89e22bcc7150a153eb151d5373b45","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_002.png","hash":"d4a2a41528a0925351811621a27f17be72a010a4","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_006.png","hash":"80d021797a738cfc714f26fff86946b01e7483d0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_001.png","hash":"94c43cb098c5bc5ceb1a8afc1d55a2bc0c9528ae","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_003.png","hash":"1cd275b4cf7c18453c3da885c11c40c523dc9739","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_015.png","hash":"853bddc7b5453aa3bbfffb8cf4cc511d0f66d02d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_007.png","hash":"599eb3c67be1b7a8baaf4d2bc964b078d83b0147","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_009.png","hash":"88ba47ea2dfc9b2e407c22b4d65705fbcf8efd2f","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_011.png","hash":"690b6afa26f2f45f141c7847120b5a4ae3ebd09a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_012.png","hash":"3cb3a925008792e9a3fd54a4dc0c6a20b1f9562e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_017.png","hash":"86aa92f7a03dc93cccf311a8ccd91062ac1c8eae","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_016.png","hash":"3eb2bc21e4a0b6f6605968665ef7980e4cf63010","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_021.png","hash":"975aed06f376321f4d49078b730d7fb560e46e2a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_019.png","hash":"c703413460950f04e3afeb9d452278725b309d9f","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_003.png","hash":"d46279560c826f07af3a87bcca89f6a96432d5d7","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_001.png","hash":"64f6fde7c14fafd339f7fb37625da2a781d1bb96","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_005.png","hash":"b3d465b8059c737f442f988c433ec129dfc04cd5","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_007.png","hash":"3008e3a7bf4e51dc8d80deea8b4c1643cd10124c","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_013.png","hash":"fa876763a09a5518fec7f6497e2dc727444cd9ce","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_019.png","hash":"1110806e7bb8d3f3f79990f91d8686d871c96342","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_021.png","hash":"11a4b3d9d144811e6ae14aa64f5dad9fe6b87c8a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_022.png","hash":"11a4b3d9d144811e6ae14aa64f5dad9fe6b87c8a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_004.png","hash":"c0ce8fda7ee6f0f28a0774e288e8451044b1072c","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_006.png","hash":"e0d97b6ba25321f96a5fb93d1c443d613ebb085f","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_007.png","hash":"68cc8bccda64420f81a4b60f423d63763d088942","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_009.png","hash":"417fdabb9597dccbfb7cba7610183551bf35ae24","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_013.png","hash":"b218179fbc45c384068673be2887716adc8b5eed","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_020.png","hash":"28c1b3a34b9712a9183793679dd73794b2f055eb","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_024.png","hash":"faa8d013dd69ccfaf90aaec20f397e5dda2d77b3","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_012.png","hash":"1a39891ac867a8df0a81c78dffb700a39b9c34e1","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_014.png","hash":"291b47e1479752257960ad968b3a01db155a781f","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_020.png","hash":"191c27d68b2213f118e40004cac89db4a3ec213d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_019.png","hash":"b270e8ffcdbfe896a3db1d46c829e8c66872e41f","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_024.png","hash":"b168d1c868a07cfe848d565c18f2586a4ebbd12f","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_026.png","hash":"e4f4ea4e2d31ab431f820174d038067797e97dff","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_002.png","hash":"4feffd90322845c015213235596327fe5e9971dd","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_003.png","hash":"5e3b1a93e5aba77297bf2a266124abc28bbe595a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_010.png","hash":"2bacf16b10cd722addae2d6b94764c2548ac4a87","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_009.png","hash":"ae1ebf7d19058dd3a226241e36c2ca2942e2e945","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_020.png","hash":"4b4d5dcba5567951d5b4c72a0c6c5915ec8928e7","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_018.png","hash":"a97d04e8549f401cebe4a459ed1e547d174854f9","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_002.png","hash":"a5c8e39294df7ac0ac5af2805d1b875db471e29d","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_003.png","hash":"71a4da368826957e9e9c5ae855b1888f29e01738","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_005.png","hash":"11cd93724bb3e9e50396e0c69c9c0cbd699acbfc","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_006.png","hash":"8b2d9d6f92133933f129c4b50eea2d6a4f45c718","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_008.png","hash":"967ef6cc98cdc89a79b5c9ec02ec69b82ca5d6a6","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_010.png","hash":"e300357a28adf7729adf56c4fb708493a4cd0dd0","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_012.png","hash":"7039f9459f4c78e41e3389a6a4c18259641d725b","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_014.png","hash":"64aeea20aecd1c7ac80cbfb3ef35ad984e267aa0","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_015.png","hash":"3dea74204635970438911c079978b0acf5051654","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_022.png","hash":"1cc9c7d22f5fcd56dcb35472e9e7ed8aff7e4c85","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_024.png","hash":"728c82c11b5224eb26479a28f178bc0e322afc6c","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_027.png","hash":"b7f6d18a3fe81dc8a951262bc58fb96fe0735a73","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_029.png","hash":"a84ce13fe64a6e6c9f0bfd59de0434018bf2f8c9","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_032.png","hash":"e19c7bb31461804ce4caf29a0a9530fee439724d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_004.png","hash":"d598b5335bee2eeea8cd9e17e919475f0bdb1e2d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_008.png","hash":"a70ae9f11a273c2930aadc792ce33f0c2d9f93cd","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_014.png","hash":"d51905e9282360980f45af578c647f2d49486f21","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_020.png","hash":"10a53970ba43dd3d67d487dffd4c00d7201ff731","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_021.png","hash":"9199fc27fb7419e38a69ece32b5300730adafcd2","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_024.png","hash":"c123a5a147da5bcc4aad363e289f4f66753753d4","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_025.png","hash":"4974354c38aff1e6f8b8df4311ad63f0d10e89e6","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_027.png","hash":"18019f3659447a644c2ec5dee123b14e06c940ca","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_028.png","hash":"5b1ff8d1b6ff2814c79c44947c71637e552ca6e2","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_031.png","hash":"9142e526292012044b30a3904412ad0210c0df7f","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_032.png","hash":"51ae5b4e048b3dba4d3fb8bff38d11e5dcae4fe0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_034.png","hash":"33ae745f043d5ceb79616918bc5d1ef4951322f8","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_035.png","hash":"ba629cecc4df3c5b4549eced988e384e01630851","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_044.png","hash":"b0265b2e8c420b905bacf6c05a22352e7d5092cf","modified":1602589492862},{"_id":"public/2020/09/22/python/base/06-模块/06_002.png","hash":"6b5b2a31220918c763f8ce78fb9ee37493762742","modified":1602589492862},{"_id":"public/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1602589492862},{"_id":"public/js/main.js","hash":"ea6def87b1338185a6afb7c18fbf43564660876d","modified":1602589492862},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1602589492862},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1602589492862},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1602589492862},{"_id":"public/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1602589492862},{"_id":"public/css/style.css","hash":"31cb7c1002327724788bb36c57f7f8a2ab0cc901","modified":1602589492862},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1602589492862},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1602589492862},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1602589492862},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1602589492862},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1602589492862},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1602589492862},{"_id":"public/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_002.png","hash":"8011867aa2c1bc81effb6b252b4141e90dbb03d2","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_003.png","hash":"ec04c33fd32cb3b621fb8bc3245579b378c1d8ae","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_008.png","hash":"dadf5c97fd08a3913fa66610b8420e092ec5e4d9","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_009.png","hash":"ef0283083f072648614a21505c2b8b1c9e403d4d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_007.png","hash":"559f56f75bcadf4ccff83652da50fe3413b99e9a","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_012.png","hash":"6936877ff71996716caf77c5910bc51ceb4c2bc0","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_005.png","hash":"cabdb1ccea8ff2ffc444413d05117c8e4e778ced","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_003.png","hash":"c029bc5626e87d696d7c67aa5113463581dcdc5e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_002.png","hash":"fac4b9c8e06b020ad1b5b689072267b8948bff20","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_007.png","hash":"89a338daef990781700ed49bfea46f173d74523c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_005.png","hash":"b6595f745dc23c1f1b096c58028b04529cf268bc","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_005.png","hash":"c0b163bf27273459cbfd32c06630292612261ee9","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_023.png","hash":"efb64fa8b216b62c72328796a610a92f4803b466","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_005.png","hash":"a98c23ef4433a06dd2676dab6d3eac4299c42766","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/08-按钮变小设置/08_003.png","hash":"cbed64825c0531a75256e48d2d2c38fbf697e8b7","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/14-虚线和星星评分/14_001.png","hash":"8ca34324d7fe440da16d9389473d7082aef6b0e9","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_017.png","hash":"15667d89304f335b901f94b74f4ca1b8053fdd8f","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_004.png","hash":"d25b88825f2d2ac888ff7b4686c80e6520c737e4","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_006.png","hash":"e5789f01eb8a36ae374f45626d545309218184b9","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_011.png","hash":"95dbae4aab189d2d82d3d99b959e9fb1c4bc828e","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_016.png","hash":"1baef5753bc4c4fa1095242b253d27c4c4c991c6","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_003.png","hash":"55e932c82e08e23228682de1ab827fad7136be37","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_012.png","hash":"17b5e72d218812eba5c2de92a81c8e69297c433d","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_009.png","hash":"41109e1d1e72a4cffb46b101b57458ed137dd73e","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png","hash":"2ffcdfdc6614890c8a29691f2694df36ab795de4","modified":1602589492862},{"_id":"public/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","hash":"05e1d41d896b0667dbe0876d3746acbdf9c3b5bb","modified":1602589492862},{"_id":"public/2020/09/22/python/base/06-模块/06_001.png","hash":"5d3b751ac11175f524c1701af0446367b8d3a887","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_006.png","hash":"013e3af85ed43c35436bfd2650019d0036bfbe7b","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_001.png","hash":"d94070d0ad92d7275dcae0dc73bd72a5cc6076a4","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_003.png","hash":"52a5448412c7b8f14ea16919d83eb3c309ae140c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_008.png","hash":"3a27cd6e3d9acd5fe098b440cde0d4a66b937a81","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_009.png","hash":"dbd40f6d1bd82a9cd33168ed64ab9b1cf0a72b0c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_013.png","hash":"e0d1b69acade1256f0ca83ae3a98e6d207fc26bd","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_005.png","hash":"06a3a9153b7e28c1fc2af5d7da2f39b218f5f2b5","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/05-Dart-一/05_001.png","hash":"a981e0ec49757e56ef02348675efdcb0b641eac6","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_002.png","hash":"a91ef9964a6a5ce976de9c46b179250c680d4678","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/15-豆瓣首页的实现/15_004.png","hash":"179f2d4e81639ec319b4618edfcf10d8282df481","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/15-豆瓣首页的实现/15_003.png","hash":"20b1c167d34f0deb01813fc245f6c556f7f81fcf","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_022.png","hash":"ed28730924b8af67b73f7bfbbf6e1f913202a4b7","modified":1602589492862},{"_id":"public/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png","hash":"e7f8642528c2717f56da3387c82e854f0c19308b","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png","hash":"8dd699b5adc6feb90201f9bdca267066f0a5efe6","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png","hash":"cd60ab5e41e9ce4dfb42227240e3db1b9fa9cfb1","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_001.png","hash":"a24f8af4850879d29ee91aa6f19cb116a9904344","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_005.png","hash":"b85d41399e8bee72b0697434a027ed0d382d63fa","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_011.png","hash":"62df981318532300168fc77461ec95933764ee5e","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_010.png","hash":"311ef06ec89dc5ccd5a4ebbe4688580fd7118fde","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_001.png","hash":"74769e588733c418c0060551c8526e796085e402","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_014.png","hash":"81e635e3f9c7d51cd53da9407fe7e1ca3fa507da","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_004.png","hash":"647d294b213aedeb99d4dfae2d120c7a1ed7ab52","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_001.png","hash":"f734071df48c33ceaa1e63413b3e5e494ca30564","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_008.png","hash":"80d83b880c934d6b22ba3bc189c41133e6b4dd4c","modified":1602589492862},{"_id":"public/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","hash":"4f027a7c44445cb3e7d963148281cffa9aca706f","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_018.png","hash":"41e60616ac4a56fad1f4d4bfc137b3996cc17a8a","modified":1602589492862},{"_id":"public/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","hash":"eb4189fc4cf128edd8df6ebdb760447550d68442","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/10-图文混排，按钮，图片/10_003.png","hash":"fa3dc2542c0a056cd2ae772f740acf3949edf485","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/15-豆瓣首页的实现/15_002.png","hash":"c682870e238ebb84105c60383aba60fef944a069","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_004.png","hash":"7766283bc7682c8e9765fdafeb611f1a77a9a917","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_007.png","hash":"f83a1cc9ed06ac8c207b6e91caabbf4cc29bcf9d","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_012.png","hash":"741d916389f05b4f6b18c821d6ea468da6d3e5f8","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_012.png","hash":"65ebcf452380adb739ed846b8a439f556efd493a","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_020.png","hash":"82f7cc283e9abdbd0f0fe6f43dd86614ca328e32","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_005.png","hash":"0e73fb1a45d70a3b90aa150c95452a0b65f4e669","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/19-Flutter路由导航/19_008.png","hash":"96ed4871f555a75646f90e0507136ac0aa37bcda","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_019.png","hash":"1327cdcb826bcbe3eadfec9815a5bf1d6015629f","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_021.png","hash":"9c09a0c1939899595062e58586366315fb9f4a94","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_025.png","hash":"b25d920b3437913737cdc83defb5c9a0e289d5cb","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_027.png","hash":"02da7042abb00280fbddf2688262692af55f151b","modified":1602589492862},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/15-豆瓣首页的实现/15_001.png","hash":"acc9b9bacec2af31df977f5bed6568d671c064f8","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_002.png","hash":"ce6a0ffb5cc678f68f46e94e07c843e98e312d98","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_005.png","hash":"9bb69427245889862eb7a0492cac433de9271c80","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_007.png","hash":"0f17689ef4bf62e1d8847c52ff3b55a9d1d801de","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/18-Flutter事件监听/18_002.png","hash":"4b2c08ad313d4e6746d2769480d555663c5ad777","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/17-Flutter状态管理/17_014.png","hash":"658540a988ae2f0582b6c8aa180976def23a01b0","modified":1602589492862},{"_id":"public/2020/09/24/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_016.png","hash":"be8efc1caede1e454259b2d76e48c54657e4cb40","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/06-Dart-二/06_049.png","hash":"70e3d6622b9b0d35de0cb879a6675d7f88fe82cf","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/03-Hello-Flutter/03_004.png","hash":"24f14748753535a447e7c7b52e4ec90afee6005c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/01-flutter学习开始/01_004.png","hash":"a0547092ff846402d4c27d61668529e08f10a12c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/02-flutter之环境搭建/02_004.png","hash":"2528105c6dca77ffe1726b49d668656dd3c90d30","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_002.png","hash":"d8c8bc914b954a14159762645bb8edfc53869993","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_004.png","hash":"c2b07994422afa7184e831af8b794280598e322b","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_008.png","hash":"eff0089db16b0a79272f21ebfc9ad1e8a3af73fa","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_006.png","hash":"a7ccfeff37e2ef8c41ec0278f0be37d90a6bcf34","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_018.png","hash":"97c9de33553bc1f09935ad7ee8f2a2a408fb5e15","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_020.png","hash":"4f9665899fe54950a39d5f0a35c5f3cc08bb7e4b","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_022.png","hash":"9c2387774fe8aca0ebdbe0cb98ca6ae30079b530","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_002.png","hash":"703ac1afdd3f8085e0719337f42a055d227f4924","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_013.png","hash":"a80183133bf11c1bd6c3b2b0cba26b55ab4ac16b","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/07-Flutter的基础Widget/07_015.png","hash":"f8ab7fa49d994087a8938c3f358d9eddb99b544e","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/13-Dart中的异步/13_001.png","hash":"ea5d5f51da9652639c93bc7684f4f344cb83bbdc","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/12-滚动组件的使用/12_002.png","hash":"06ef9cbcb0bae17088e177a09f9c14a59346b285","modified":1602589492862},{"_id":"public/2020/09/18/flutter/flutter框架一/11-基础组件的使用/11_008.png","hash":"e1eb408d2fa6156f9f4385d93dfe469c22763e8c","modified":1602589492862},{"_id":"public/2020/09/02/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_008.png","hash":"b165787d8f992cc5e7c6bd4d86e454ebf04975f8","modified":1602589492862},{"_id":"public/2020/09/22/python/base/07-植物大战僵尸/07_001.gif","hash":"e3b5b0424162c4944c02c95904481dfad487e8e8","modified":1602589492862}],"Category":[{"name":"C语言","_id":"ckg7wen8k0005u3s69gz50xlr"},{"name":"Hexo","_id":"ckg7wen8t000ou3s65q59anbc"},{"name":"flutter","_id":"ckg7wenfu000xu3s6ecpn5dvx"},{"name":"Dart语法","parent":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7weng00017u3s6fvpf5tnc"},{"name":"flutter框架一","parent":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengj002du3s6g5oc0cdy"},{"name":"demo","parent":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh7004iu3s6cm386j2u"},{"name":"OC","_id":"ckg7wenh9004pu3s6478x81tp"},{"name":"上传","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlg006zu3s6g5xg7yq8"},{"name":"OC动画","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlg0070u3s68w0aelk8"},{"name":"水印","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlh0072u3s6eara2t96"},{"name":"Foundation","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenli007au3s67szr7sga"},{"name":"登录","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlk007vu3s67p3xe7fa"},{"name":"Screen","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlm0087u3s65yx0aae6"},{"name":"UITableView","parent":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenln008bu3s65v3kdm14"},{"name":"python","_id":"ckg7wenm4008ru3s693pd3jfc"},{"name":"python基础","parent":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenmn0091u3s62hkn7pxn"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n","date":"2020-09-01T12:32:24.828Z","updated":"2020-09-01T12:32:24.828Z","path":"about/index.html","comments":1,"_id":"ckg7wen750000u3s62mynfcot","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2020-09-01T12:32:24.829Z","updated":"2020-09-01T12:32:24.828Z","path":"categories/index.html","comments":1,"_id":"ckg7wen790001u3s62gova0n0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2020-09-01T12:32:24.829Z","updated":"2020-09-01T12:32:24.829Z","path":"tags/index.html","comments":1,"_id":"ckg7wen790002u3s64gbxddat","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C语言中枚举的简单介绍","date":"2020-04-03T06:26:49.000Z","_content":"\n1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。\n\n2,定义形式：\n\nenum 枚举名称 {元素1，元素2，元素3，...};\n\n例如： enum Season {spring,summer,autumn,winter};\n\n3,枚举变量的定义有3种方式\n\na,先定义枚举类型，再定义枚举变量\n\nenum Season {spring,summer,autumn,winter};\n\nenum Season s;\n\nb,定义枚举类型的同时定义枚举变量\n\nenum Season {spring,summer,autumn,winter}  s;\n\nc,省略枚举名称，直接定义枚举变量\n\nenum {spring,summer,autumn,winter} s;\n\n使用以上3中方式中的任何一种方式都是可以的。\n\n4，基本操作\n\na,赋值操作\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\ns = spring; // 等价于 s = 0;\n\ns = 3;//等价于 s = winter;\n\nb,遍历\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\n// 遍历枚举元素\n\nfor (s = spring; s <= winter; s++) {\n\n    printf(\"枚举元素：%d \\n\", s);\n\n}\n\n输出结果 ， 0 ，1，2，3\n","source":"_posts/c/c-enum-desc.md","raw":"---\ntitle: C语言中枚举的简单介绍\ndate: 2020-04-03 14:26:49\ncategories: C语言\ntags: C\n---\n\n1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。\n\n2,定义形式：\n\nenum 枚举名称 {元素1，元素2，元素3，...};\n\n例如： enum Season {spring,summer,autumn,winter};\n\n3,枚举变量的定义有3种方式\n\na,先定义枚举类型，再定义枚举变量\n\nenum Season {spring,summer,autumn,winter};\n\nenum Season s;\n\nb,定义枚举类型的同时定义枚举变量\n\nenum Season {spring,summer,autumn,winter}  s;\n\nc,省略枚举名称，直接定义枚举变量\n\nenum {spring,summer,autumn,winter} s;\n\n使用以上3中方式中的任何一种方式都是可以的。\n\n4，基本操作\n\na,赋值操作\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\ns = spring; // 等价于 s = 0;\n\ns = 3;//等价于 s = winter;\n\nb,遍历\n\n\n\nenum Season {spring, summer, autumn, winter} s;\n\n// 遍历枚举元素\n\nfor (s = spring; s <= winter; s++) {\n\n    printf(\"枚举元素：%d \\n\", s);\n\n}\n\n输出结果 ， 0 ，1，2，3\n","slug":"c/c-enum-desc","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8f0003u3s62mx4hrg0","content":"<p>1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。</p>\n<p>2,定义形式：</p>\n<p>enum 枚举名称 {元素1，元素2，元素3，…};</p>\n<p>例如： enum Season {spring,summer,autumn,winter};</p>\n<p>3,枚举变量的定义有3种方式</p>\n<p>a,先定义枚举类型，再定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter};</p>\n<p>enum Season s;</p>\n<p>b,定义枚举类型的同时定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter}  s;</p>\n<p>c,省略枚举名称，直接定义枚举变量</p>\n<p>enum {spring,summer,autumn,winter} s;</p>\n<p>使用以上3中方式中的任何一种方式都是可以的。</p>\n<p>4，基本操作</p>\n<p>a,赋值操作</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>s = spring; // 等价于 s = 0;</p>\n<p>s = 3;//等价于 s = winter;</p>\n<p>b,遍历</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>// 遍历枚举元素</p>\n<p>for (s = spring; s &lt;= winter; s++) {</p>\n<pre><code>printf(&quot;枚举元素：%d \\n&quot;, s);</code></pre><p>}</p>\n<p>输出结果 ， 0 ，1，2，3</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1,枚举是C语言中一种基本数据类型，可以用于声明一组常数。当一个变量有几个固定的可能取值时，可以将这个变量定义为枚举类型。比如可以用枚举来表示季节，春天，夏天，秋天，冬天。</p>\n<p>2,定义形式：</p>\n<p>enum 枚举名称 {元素1，元素2，元素3，…};</p>\n<p>例如： enum Season {spring,summer,autumn,winter};</p>\n<p>3,枚举变量的定义有3种方式</p>\n<p>a,先定义枚举类型，再定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter};</p>\n<p>enum Season s;</p>\n<p>b,定义枚举类型的同时定义枚举变量</p>\n<p>enum Season {spring,summer,autumn,winter}  s;</p>\n<p>c,省略枚举名称，直接定义枚举变量</p>\n<p>enum {spring,summer,autumn,winter} s;</p>\n<p>使用以上3中方式中的任何一种方式都是可以的。</p>\n<p>4，基本操作</p>\n<p>a,赋值操作</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>s = spring; // 等价于 s = 0;</p>\n<p>s = 3;//等价于 s = winter;</p>\n<p>b,遍历</p>\n<p>enum Season {spring, summer, autumn, winter} s;</p>\n<p>// 遍历枚举元素</p>\n<p>for (s = spring; s &lt;= winter; s++) {</p>\n<pre><code>printf(&quot;枚举元素：%d \\n&quot;, s);</code></pre><p>}</p>\n<p>输出结果 ， 0 ，1，2，3</p>\n"},{"title":"C语言中的冒泡排序简单介绍","date":"2020-04-03T02:55:10.000Z","_content":"\n\n简介：\n\n冒泡排序是一种比较简单地排序算法。\n\n它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。\n\n这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。\n\n\n\n排序的代码结构：\n\n\n``` \nvoid nums_sort(int nums[],int count){\n\n\tint i,j,temp;\n\tfor(i=0;i<count-1;i++){\n\t\tfor(j=0;j<count-1-j;j++){\n\t\t\tif(nums[j]>nuns[j+1]){\n\n\t\t\t  \ttemp=nums[j];\t\t\t\n\t\t\t\tnums[j]=nums[j+1];\n\t\t\t\tnums[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n``` ","source":"_posts/c/c-maopaopaixu.md","raw":"---\ntitle: C语言中的冒泡排序简单介绍\ndate: 2020-04-03 10:55:10\ncategories: C语言\ntags: C\n---\n\n\n简介：\n\n冒泡排序是一种比较简单地排序算法。\n\n它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。\n\n这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。\n\n\n\n排序的代码结构：\n\n\n``` \nvoid nums_sort(int nums[],int count){\n\n\tint i,j,temp;\n\tfor(i=0;i<count-1;i++){\n\t\tfor(j=0;j<count-1-j;j++){\n\t\t\tif(nums[j]>nuns[j+1]){\n\n\t\t\t  \ttemp=nums[j];\t\t\t\n\t\t\t\tnums[j]=nums[j+1];\n\t\t\t\tnums[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n``` ","slug":"c/c-maopaopaixu","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8i0004u3s68d0bgavv","content":"<p>简介：</p>\n<p>冒泡排序是一种比较简单地排序算法。</p>\n<p>它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。</p>\n<p>这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。</p>\n<p>排序的代码结构：</p>\n<pre><code>void nums_sort(int nums[],int count){\n\n    int i,j,temp;\n    for(i=0;i&lt;count-1;i++){\n        for(j=0;j&lt;count-1-j;j++){\n            if(nums[j]&gt;nuns[j+1]){\n\n                  temp=nums[j];            \n                nums[j]=nums[j+1];\n                nums[j+1]=temp;\n            }\n        }\n    }\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>简介：</p>\n<p>冒泡排序是一种比较简单地排序算法。</p>\n<p>它重复走过要排序的数列，一次比较两个元素，如果他们的值不一样，就把它们交换过来。直到没有数据需要进行交换，数列中的数据已经排序完成。</p>\n<p>这种算法的名字因为越大的元素会经由交换慢慢浮到数列的前端，故名“冒泡排序”。</p>\n<p>排序的代码结构：</p>\n<pre><code>void nums_sort(int nums[],int count){\n\n    int i,j,temp;\n    for(i=0;i&lt;count-1;i++){\n        for(j=0;j&lt;count-1-j;j++){\n            if(nums[j]&gt;nuns[j+1]){\n\n                  temp=nums[j];            \n                nums[j]=nums[j+1];\n                nums[j+1]=temp;\n            }\n        }\n    }\n}</code></pre>"},{"title":"C语言中指针的简单介绍","date":"2020-04-03T02:58:59.000Z","_content":"\n一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。\n\n二：指针定义：\n\n类名标示符  *指针变量名\n\n例如：\n\nint *a;\n\nint *b;\n\nfloat *c;\n\n*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。\n\n\n\n三：指针的初始化\n\n有两种方式，\n\n1，先定义后初始化\n\nint i=10;\n\nint *p;\n\np=&； \n\n\n\n2，在定义的同时就初始化\n\nint i=10;\n\nint *p=&；\n\n\n\n四：使用方法\n\n1，赋值\n\nint a=5;\n\nint *p=&a;\n\n*p=6;\n\nprintf(\"a的值是%d\",a);   //a=6\n\n2, 取值\n\nint a=5;\n\nint *p=&a;\n\nint b=*p;\n\nprintf(\"b的值为%d\",b);  //b=5\n\n3,注意事项\n\n在指针变量未指向地址之前，不要对它所指的内容赋值。\n\nint *p;\n\n//这是错误做法\n\n*p=5;\n","source":"_posts/c/c-pointer-desc.md","raw":"---\ntitle: C语言中指针的简单介绍\ndate: 2020-04-03 10:58:59\ncategories: C语言\ntags: C\n---\n\n一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。\n\n二：指针定义：\n\n类名标示符  *指针变量名\n\n例如：\n\nint *a;\n\nint *b;\n\nfloat *c;\n\n*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。\n\n\n\n三：指针的初始化\n\n有两种方式，\n\n1，先定义后初始化\n\nint i=10;\n\nint *p;\n\np=&； \n\n\n\n2，在定义的同时就初始化\n\nint i=10;\n\nint *p=&；\n\n\n\n四：使用方法\n\n1，赋值\n\nint a=5;\n\nint *p=&a;\n\n*p=6;\n\nprintf(\"a的值是%d\",a);   //a=6\n\n2, 取值\n\nint a=5;\n\nint *p=&a;\n\nint b=*p;\n\nprintf(\"b的值为%d\",b);  //b=5\n\n3,注意事项\n\n在指针变量未指向地址之前，不要对它所指的内容赋值。\n\nint *p;\n\n//这是错误做法\n\n*p=5;\n","slug":"c/c-pointer-desc","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8l0007u3s64q263vfx","content":"<p>一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。</p>\n<p>二：指针定义：</p>\n<p>类名标示符  *指针变量名</p>\n<p>例如：</p>\n<p>int *a;</p>\n<p>int *b;</p>\n<p>float *c;</p>\n<p>*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。</p>\n<p>三：指针的初始化</p>\n<p>有两种方式，</p>\n<p>1，先定义后初始化</p>\n<p>int i=10;</p>\n<p>int *p;</p>\n<p>p=&amp;； </p>\n<p>2，在定义的同时就初始化</p>\n<p>int i=10;</p>\n<p>int *p=&amp;；</p>\n<p>四：使用方法</p>\n<p>1，赋值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>*p=6;</p>\n<p>printf(“a的值是%d”,a);   //a=6</p>\n<p>2, 取值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>int b=*p;</p>\n<p>printf(“b的值为%d”,b);  //b=5</p>\n<p>3,注意事项</p>\n<p>在指针变量未指向地址之前，不要对它所指的内容赋值。</p>\n<p>int *p;</p>\n<p>//这是错误做法</p>\n<p>*p=5;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一： c语言中指针是一种间接引用的方式。将变量的地址存放在另一个变量中，通过含有变量地址的变量来间接读写值，这就是间接引用。</p>\n<p>二：指针定义：</p>\n<p>类名标示符  *指针变量名</p>\n<p>例如：</p>\n<p>int *a;</p>\n<p>int *b;</p>\n<p>float *c;</p>\n<p>*用来标明这个变量是指针变量，不能缺少，它属于变量的类型，不属于变量名称。</p>\n<p>三：指针的初始化</p>\n<p>有两种方式，</p>\n<p>1，先定义后初始化</p>\n<p>int i=10;</p>\n<p>int *p;</p>\n<p>p=&amp;； </p>\n<p>2，在定义的同时就初始化</p>\n<p>int i=10;</p>\n<p>int *p=&amp;；</p>\n<p>四：使用方法</p>\n<p>1，赋值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>*p=6;</p>\n<p>printf(“a的值是%d”,a);   //a=6</p>\n<p>2, 取值</p>\n<p>int a=5;</p>\n<p>int *p=&a;</p>\n<p>int b=*p;</p>\n<p>printf(“b的值为%d”,b);  //b=5</p>\n<p>3,注意事项</p>\n<p>在指针变量未指向地址之前，不要对它所指的内容赋值。</p>\n<p>int *p;</p>\n<p>//这是错误做法</p>\n<p>*p=5;</p>\n"},{"title":"C语言中的字符串的定义及初始化和输出","date":"2020-04-02T11:44:45.000Z","_content":"\n简介：\n\nc语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。\n\n字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。\n\n\n\n字符串的初始化：\n\n例如：\n\nchar a[4]={'p','z','l','\\0'}；\n\n\n\nchar c[2];\n\nc[0]='a';\n\nc[1]='b';\n\nc[2]='\\0';\n\n\n\n字符串的输出：\n\n1,用printf函数输出  \n\nchar a[4]={'p','z','l','\\0'};\n\nprinft(\"%s\",a);\n\n输出结果：pzl\n\n2,puts函数\n\n用法： 例如：\n\nputs(“pzl”);   \n\n输出结果：pzl\n\nputs函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。\n\n同时输出多个字符串：printf(“%s - %s”,\"pzl\",“pzl”);","source":"_posts/c/c语言中的字符串的定义及初始化和输出.md","raw":"---\ntitle: C语言中的字符串的定义及初始化和输出\ndate: 2020-04-02 19:44:45\ncategories: C语言\ntags: C\n---\n\n简介：\n\nc语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。\n\n字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。\n\n\n\n字符串的初始化：\n\n例如：\n\nchar a[4]={'p','z','l','\\0'}；\n\n\n\nchar c[2];\n\nc[0]='a';\n\nc[1]='b';\n\nc[2]='\\0';\n\n\n\n字符串的输出：\n\n1,用printf函数输出  \n\nchar a[4]={'p','z','l','\\0'};\n\nprinft(\"%s\",a);\n\n输出结果：pzl\n\n2,puts函数\n\n用法： 例如：\n\nputs(“pzl”);   \n\n输出结果：pzl\n\nputs函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。\n\n同时输出多个字符串：printf(“%s - %s”,\"pzl\",“pzl”);","slug":"c/c语言中的字符串的定义及初始化和输出","published":1,"updated":"2020-09-01T12:12:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8m0008u3s61sfg4jst","content":"<p>简介：</p>\n<p>c语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。</p>\n<p>字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。</p>\n<p>字符串的初始化：</p>\n<p>例如：</p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’}；</p>\n<p>char c[2];</p>\n<p>c[0]=’a’;</p>\n<p>c[1]=’b’;</p>\n<p>c[2]=’\\0’;</p>\n<p>字符串的输出：</p>\n<p>1,用printf函数输出  </p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’};</p>\n<p>prinft(“%s”,a);</p>\n<p>输出结果：pzl</p>\n<p>2,puts函数</p>\n<p>用法： 例如：</p>\n<p>puts(“pzl”);   </p>\n<p>输出结果：pzl</p>\n<p>puts函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。</p>\n<p>同时输出多个字符串：printf(“%s - %s”,”pzl”,“pzl”);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简介：</p>\n<p>c语言中的字符串没有像java中那样，用String来存储字符串。从字符串上分析，字符串其实是由多个字符祖闯，所以在C语言中，可以用字符数组来存储字符串。</p>\n<p>字符串数组可以看成一个特殊的字符串数组，一般情况下，在字符串的末尾加上一个结束标志\\0 。\\0是一个空操作符号，表示什么都不作。所以，采用字符数组存储字符串时，末尾应该包含结束标志\\0。</p>\n<p>字符串的初始化：</p>\n<p>例如：</p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’}；</p>\n<p>char c[2];</p>\n<p>c[0]=’a’;</p>\n<p>c[1]=’b’;</p>\n<p>c[2]=’\\0’;</p>\n<p>字符串的输出：</p>\n<p>1,用printf函数输出  </p>\n<p>char a[4]={‘p’,’z’,’l’,’\\0’};</p>\n<p>prinft(“%s”,a);</p>\n<p>输出结果：pzl</p>\n<p>2,puts函数</p>\n<p>用法： 例如：</p>\n<p>puts(“pzl”);   </p>\n<p>输出结果：pzl</p>\n<p>puts函数一次只能输出一个字符串，但printf函数则可以同时输出多个字符串。</p>\n<p>同时输出多个字符串：printf(“%s - %s”,”pzl”,“pzl”);</p>\n"},{"title":"C语言基本数据类型简单介绍","date":"2020-04-02T11:39:11.000Z","_content":"\n\nc语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。\n\n基本数据类型包括int ,float, double, char这四种。\n\nint类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。\n\n\n\n在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如\n\n\n\n\n\n这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。\n\n\n\n如果int类型的变量是全局变量，系统会默认赋值为0。例如：\n\n\n\nchar类型只能存储一个字符，例如：\n\nchar a1='A';\n\nchar a2='b';\n\n\n\n其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1='A';","source":"_posts/c/c语言基本数据类型简单介绍.md","raw":"---\ntitle: C语言基本数据类型简单介绍\ndate: 2020-04-02 19:39:11\ncategories: C语言\ntags: C\n---\n\n\nc语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。\n\n基本数据类型包括int ,float, double, char这四种。\n\nint类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。\n\n\n\n在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如\n\n\n\n\n\n这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。\n\n\n\n如果int类型的变量是全局变量，系统会默认赋值为0。例如：\n\n\n\nchar类型只能存储一个字符，例如：\n\nchar a1='A';\n\nchar a2='b';\n\n\n\n其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1='A';","slug":"c/c语言基本数据类型简单介绍","published":1,"updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8n0009u3s65chscif0","content":"<p>c语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。</p>\n<p>基本数据类型包括int ,float, double, char这四种。</p>\n<p>int类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。</p>\n<p>在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如</p>\n<p>这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。</p>\n<p>如果int类型的变量是全局变量，系统会默认赋值为0。例如：</p>\n<p>char类型只能存储一个字符，例如：</p>\n<p>char a1=’A’;</p>\n<p>char a2=’b’;</p>\n<p>其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1=’A’;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>c语言有丰富的数据类型，大致上包括四种，基本数据类型,构造类型，指针类型，空类型。</p>\n<p>基本数据类型包括int ,float, double, char这四种。</p>\n<p>int类型的变量用来存储整型数据，float类型的变量用来存储单精度浮点型，double类型的变量用来存储用来存储双精度浮点型，char类型的变量用来存储字符。</p>\n<p>在c语言中，如果声明了一个局部变量，没有经过初始化是可以使用，例如</p>\n<p>这样是可以的，但是很危险。b的值是系统随意分配的，是垃圾数据。所以，在用的时候，一定要赋值之后再使用。</p>\n<p>如果int类型的变量是全局变量，系统会默认赋值为0。例如：</p>\n<p>char类型只能存储一个字符，例如：</p>\n<p>char a1=’A’;</p>\n<p>char a2=’b’;</p>\n<p>其实，char b1=65;这种写法也是可以的。像65就是ASCII码值，也就是相当于char b1=’A’;</p>\n"},{"title":"C语言基本运算中的自增运算符和自减运算符以及三目运算符","date":"2020-04-02T11:42:20.000Z","_content":"\n\n一：简介\n\n自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。\n\n自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。\n\n自增和自减用于变量，不能用于常量。\n\n\n\n二： a++和++a的区别\n\na++ 是先赋值，后计算。\n\n++a 是先计算，后赋值。\n\n例如：  \n\nint a=5;\n\nint b=a++;\n\n程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算\n\n但是，比如下面这种情况：\n\nint a=5;\n\nint b=++a;\n\n程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b","source":"_posts/c/c语言基本运算中的自增运算符和自减运算符以及三目运算符.md","raw":"---\ntitle: C语言基本运算中的自增运算符和自减运算符以及三目运算符\ndate: 2020-04-02 19:42:20\ncategories: C语言\ntags: C\n---\n\n\n一：简介\n\n自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。\n\n自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。\n\n自增和自减用于变量，不能用于常量。\n\n\n\n二： a++和++a的区别\n\na++ 是先赋值，后计算。\n\n++a 是先计算，后赋值。\n\n例如：  \n\nint a=5;\n\nint b=a++;\n\n程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算\n\n但是，比如下面这种情况：\n\nint a=5;\n\nint b=++a;\n\n程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b","slug":"c/c语言基本运算中的自增运算符和自减运算符以及三目运算符","published":1,"updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8p000du3s68rax6nzy","content":"<p>一：简介</p>\n<p>自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。</p>\n<p>自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。</p>\n<p>自增和自减用于变量，不能用于常量。</p>\n<p>二： a++和++a的区别</p>\n<p>a++ 是先赋值，后计算。</p>\n<p>++a 是先计算，后赋值。</p>\n<p>例如：  </p>\n<p>int a=5;</p>\n<p>int b=a++;</p>\n<p>程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算</p>\n<p>但是，比如下面这种情况：</p>\n<p>int a=5;</p>\n<p>int b=++a;</p>\n<p>程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：简介</p>\n<p>自增运算符   ++     例如：a++，b++, c++ , ++a, ++b,++c  它们都是自增运算。</p>\n<p>自减运算符   - -      例如：a- - ,  b - -,  c- - ，- -a，- -b， - -c 它们都是自减运算。</p>\n<p>自增和自减用于变量，不能用于常量。</p>\n<p>二： a++和++a的区别</p>\n<p>a++ 是先赋值，后计算。</p>\n<p>++a 是先计算，后赋值。</p>\n<p>例如：  </p>\n<p>int a=5;</p>\n<p>int b=a++;</p>\n<p>程序运行之后，a=6,b=5 ， a++是先把a的值赋给b,然后，在进行自身加1运算</p>\n<p>但是，比如下面这种情况：</p>\n<p>int a=5;</p>\n<p>int b=++a;</p>\n<p>程序运行之后，a=6,b=6,   ++a是先进行+1的运算，然后，再将运算之后的值赋给变量b</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo/hello-world","published":1,"date":"2020-09-01T12:12:43.651Z","updated":"2020-09-01T12:12:43.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8q000fu3s6184ae8fx","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Hexo简单介绍","date":"2020-04-02T08:52:27.000Z","_content":"\n## 一、hexo简介\n\n#### 1, hexo是什么\n> hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.\n\n#### 2, 安装\n\n``` \nHexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n\n可以使用 node -v 命令查询当前系统是否安装过nodejs\n``` \n\n使用apt-get安装 nodejs.\n\n``` \n$ sudo apt-get install -y nodejs\n``` \n\n#### 3, 安装npm\n\n``` \n可以使用 npm -v 命令查询当前系统是否安装过npm\n``` \n\n安装npm 命令\n\n``` \n$ sudo apt-get install npm\n``` \n\n#### 4, 安装hexo\n\n现在我们使用npm安装hexo.\n\n``` \n$ sudo npm install hexo-cli -g\n``` \n\n## 二、创建Blog\n\n现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.\n\n#### 1, 创建一个叫blog网站\n\n``` \n$ hexo init blog\n``` \n\n> 注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.\n\n\n#### 2, 我们进入创建的blog目录里. 并运行该服务.\n\n``` \n$ cd blog\n$ npm install\n$ hexo server\n``` \n\n#### 3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\n\n#### 4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\n\n``` \ndeploy:\n  type: 'git'\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master\n``` \n\n>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.\n\n#### 5, 安装部署使用到的git插件.\n\n在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署\n\n``` \n$ npm install hexo-deployer-git --save\n``` \n\n#### 6, 进行生成网站\n当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.\n\n``` \n$ cd blog\n$ hexo g\n``` \n\n#### 7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\n``` \n$ hexo d\n``` \n\n如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件\n\n``` \nERROR Deployer not found: git\n``` \n\n\n## 三、hexo常用命令\n\n#### 1, 安装，升级，初始化\n\n``` \nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n``` \n\n#### 2, 简写：\n\n``` \nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n``` \n\n#### 3, 服务器：\n\n``` \nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n``` \n\n#### 4, 监视文件变动：\n\n``` \nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n``` \n\n完成后部署：\n\n- 两个命令的作用是相同的\n- hexo generate --deploy\n- hexo deploy --generate\n\n``` \nhexo deploy -g\nhexo server -g\n``` \n\n#### 5, 草稿\n\n``` \nhexo publish [layout] <title>\n``` \n\n#### 6, 模版\n\n``` \nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n``` \n\n| 变量 | 描述 |\n| --- | --- | \n| layout | 布局 |\n| title | 标题 |\n| date | 文件建立日期 |\n\n``` \ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n``` \n","source":"_posts/hexo/hello-hexo.md","raw":"---\ntitle: 'Hexo简单介绍'\ndate: 2020-04-02 16:52:27\ncategories: Hexo\ntags:\n---\n\n## 一、hexo简介\n\n#### 1, hexo是什么\n> hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.\n\n#### 2, 安装\n\n``` \nHexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n\n可以使用 node -v 命令查询当前系统是否安装过nodejs\n``` \n\n使用apt-get安装 nodejs.\n\n``` \n$ sudo apt-get install -y nodejs\n``` \n\n#### 3, 安装npm\n\n``` \n可以使用 npm -v 命令查询当前系统是否安装过npm\n``` \n\n安装npm 命令\n\n``` \n$ sudo apt-get install npm\n``` \n\n#### 4, 安装hexo\n\n现在我们使用npm安装hexo.\n\n``` \n$ sudo npm install hexo-cli -g\n``` \n\n## 二、创建Blog\n\n现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.\n\n#### 1, 创建一个叫blog网站\n\n``` \n$ hexo init blog\n``` \n\n> 注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.\n\n\n#### 2, 我们进入创建的blog目录里. 并运行该服务.\n\n``` \n$ cd blog\n$ npm install\n$ hexo server\n``` \n\n#### 3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\n\n#### 4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\n\n``` \ndeploy:\n  type: 'git'\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master\n``` \n\n>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.\n\n#### 5, 安装部署使用到的git插件.\n\n在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署\n\n``` \n$ npm install hexo-deployer-git --save\n``` \n\n#### 6, 进行生成网站\n当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.\n\n``` \n$ cd blog\n$ hexo g\n``` \n\n#### 7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\n``` \n$ hexo d\n``` \n\n如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件\n\n``` \nERROR Deployer not found: git\n``` \n\n\n## 三、hexo常用命令\n\n#### 1, 安装，升级，初始化\n\n``` \nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n``` \n\n#### 2, 简写：\n\n``` \nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n``` \n\n#### 3, 服务器：\n\n``` \nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n``` \n\n#### 4, 监视文件变动：\n\n``` \nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n``` \n\n完成后部署：\n\n- 两个命令的作用是相同的\n- hexo generate --deploy\n- hexo deploy --generate\n\n``` \nhexo deploy -g\nhexo server -g\n``` \n\n#### 5, 草稿\n\n``` \nhexo publish [layout] <title>\n``` \n\n#### 6, 模版\n\n``` \nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n``` \n\n| 变量 | 描述 |\n| --- | --- | \n| layout | 布局 |\n| title | 标题 |\n| date | 文件建立日期 |\n\n``` \ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n``` \n","slug":"hexo/hello-hexo","published":1,"updated":"2020-09-23T02:20:54.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wen8r000ku3s6eg03a1qi","content":"<h2 id=\"一、hexo简介\"><a href=\"#一、hexo简介\" class=\"headerlink\" title=\"一、hexo简介\"></a>一、hexo简介</h2><h4 id=\"1-hexo是什么\"><a href=\"#1-hexo是什么\" class=\"headerlink\" title=\"1, hexo是什么\"></a>1, hexo是什么</h4><blockquote>\n<p>hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p>\n</blockquote>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2, 安装\"></a>2, 安装</h4><pre><code>Hexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n\n可以使用 node -v 命令查询当前系统是否安装过nodejs</code></pre><p>使用apt-get安装 nodejs.</p>\n<pre><code>$ sudo apt-get install -y nodejs</code></pre><h4 id=\"3-安装npm\"><a href=\"#3-安装npm\" class=\"headerlink\" title=\"3, 安装npm\"></a>3, 安装npm</h4><pre><code>可以使用 npm -v 命令查询当前系统是否安装过npm</code></pre><p>安装npm 命令</p>\n<pre><code>$ sudo apt-get install npm</code></pre><h4 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4, 安装hexo\"></a>4, 安装hexo</h4><p>现在我们使用npm安装hexo.</p>\n<pre><code>$ sudo npm install hexo-cli -g</code></pre><h2 id=\"二、创建Blog\"><a href=\"#二、创建Blog\" class=\"headerlink\" title=\"二、创建Blog\"></a>二、创建Blog</h2><p>现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.</p>\n<h4 id=\"1-创建一个叫blog网站\"><a href=\"#1-创建一个叫blog网站\" class=\"headerlink\" title=\"1, 创建一个叫blog网站\"></a>1, 创建一个叫blog网站</h4><pre><code>$ hexo init blog</code></pre><blockquote>\n<p>注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.</p>\n</blockquote>\n<h4 id=\"2-我们进入创建的blog目录里-并运行该服务\"><a href=\"#2-我们进入创建的blog目录里-并运行该服务\" class=\"headerlink\" title=\"2, 我们进入创建的blog目录里. 并运行该服务.\"></a>2, 我们进入创建的blog目录里. 并运行该服务.</h4><pre><code>$ cd blog\n$ npm install\n$ hexo server</code></pre><h4 id=\"3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\"><a href=\"#3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\" class=\"headerlink\" title=\"3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\"></a>3, 打开浏览器, 在地址栏输入<a href=\"http://localhost:4000/可以看到我们刚刚创建的blog首页\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以看到我们刚刚创建的blog首页</a>.</h4><h4 id=\"4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\"><a href=\"#4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\" class=\"headerlink\" title=\"4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\"></a>4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.</h4><pre><code>deploy:\n  type: &apos;git&apos;\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master</code></pre><blockquote>\n<p>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.</p>\n</blockquote>\n<h4 id=\"5-安装部署使用到的git插件\"><a href=\"#5-安装部署使用到的git插件\" class=\"headerlink\" title=\"5, 安装部署使用到的git插件.\"></a>5, 安装部署使用到的git插件.</h4><p>在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署</p>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h4 id=\"6-进行生成网站\"><a href=\"#6-进行生成网站\" class=\"headerlink\" title=\"6, 进行生成网站\"></a>6, 进行生成网站</h4><p>当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.</p>\n<pre><code>$ cd blog\n$ hexo g</code></pre><h4 id=\"7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\"><a href=\"#7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\" class=\"headerlink\" title=\"7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\"></a>7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.</h4><pre><code>$ hexo d</code></pre><p>如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件</p>\n<pre><code>ERROR Deployer not found: git</code></pre><h2 id=\"三、hexo常用命令\"><a href=\"#三、hexo常用命令\" class=\"headerlink\" title=\"三、hexo常用命令\"></a>三、hexo常用命令</h2><h4 id=\"1-安装，升级，初始化\"><a href=\"#1-安装，升级，初始化\" class=\"headerlink\" title=\"1, 安装，升级，初始化\"></a>1, 安装，升级，初始化</h4><pre><code>npm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化</code></pre><h4 id=\"2-简写：\"><a href=\"#2-简写：\" class=\"headerlink\" title=\"2, 简写：\"></a>2, 简写：</h4><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署</code></pre><h4 id=\"3-服务器：\"><a href=\"#3-服务器：\" class=\"headerlink\" title=\"3, 服务器：\"></a>3, 服务器：</h4><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署</code></pre><h4 id=\"4-监视文件变动：\"><a href=\"#4-监视文件变动：\" class=\"headerlink\" title=\"4, 监视文件变动：\"></a>4, 监视文件变动：</h4><pre><code>hexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动</code></pre><p>完成后部署：</p>\n<ul>\n<li>两个命令的作用是相同的</li>\n<li>hexo generate –deploy</li>\n<li>hexo deploy –generate</li>\n</ul>\n<pre><code>hexo deploy -g\nhexo server -g</code></pre><h4 id=\"5-草稿\"><a href=\"#5-草稿\" class=\"headerlink\" title=\"5, 草稿\"></a>5, 草稿</h4><pre><code>hexo publish [layout] &lt;title&gt;</code></pre><h4 id=\"6-模版\"><a href=\"#6-模版\" class=\"headerlink\" title=\"6, 模版\"></a>6, 模版</h4><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] &lt;title&gt;\nhexo new photo &quot;My Gallery&quot;\nhexo new &quot;Hello World&quot; --lang tw</code></pre><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody></table>\n<pre><code>title: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、hexo简介\"><a href=\"#一、hexo简介\" class=\"headerlink\" title=\"一、hexo简介\"></a>一、hexo简介</h2><h4 id=\"1-hexo是什么\"><a href=\"#1-hexo是什么\" class=\"headerlink\" title=\"1, hexo是什么\"></a>1, hexo是什么</h4><blockquote>\n<p>hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p>\n</blockquote>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2, 安装\"></a>2, 安装</h4><pre><code>Hexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js.\n\n可以使用 node -v 命令查询当前系统是否安装过nodejs</code></pre><p>使用apt-get安装 nodejs.</p>\n<pre><code>$ sudo apt-get install -y nodejs</code></pre><h4 id=\"3-安装npm\"><a href=\"#3-安装npm\" class=\"headerlink\" title=\"3, 安装npm\"></a>3, 安装npm</h4><pre><code>可以使用 npm -v 命令查询当前系统是否安装过npm</code></pre><p>安装npm 命令</p>\n<pre><code>$ sudo apt-get install npm</code></pre><h4 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4, 安装hexo\"></a>4, 安装hexo</h4><p>现在我们使用npm安装hexo.</p>\n<pre><code>$ sudo npm install hexo-cli -g</code></pre><h2 id=\"二、创建Blog\"><a href=\"#二、创建Blog\" class=\"headerlink\" title=\"二、创建Blog\"></a>二、创建Blog</h2><p>现在我们已经完成hexo的安装, 那么现在我们来创建一个Blog.</p>\n<h4 id=\"1-创建一个叫blog网站\"><a href=\"#1-创建一个叫blog网站\" class=\"headerlink\" title=\"1, 创建一个叫blog网站\"></a>1, 创建一个叫blog网站</h4><pre><code>$ hexo init blog</code></pre><blockquote>\n<p>注: 如果不写blog, 就会在当前目录进行初始化. 如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名.</p>\n</blockquote>\n<h4 id=\"2-我们进入创建的blog目录里-并运行该服务\"><a href=\"#2-我们进入创建的blog目录里-并运行该服务\" class=\"headerlink\" title=\"2, 我们进入创建的blog目录里. 并运行该服务.\"></a>2, 我们进入创建的blog目录里. 并运行该服务.</h4><pre><code>$ cd blog\n$ npm install\n$ hexo server</code></pre><h4 id=\"3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\"><a href=\"#3-打开浏览器-在地址栏输入http-localhost-4000-可以看到我们刚刚创建的blog首页\" class=\"headerlink\" title=\"3, 打开浏览器, 在地址栏输入http://localhost:4000/可以看到我们刚刚创建的blog首页.\"></a>3, 打开浏览器, 在地址栏输入<a href=\"http://localhost:4000/可以看到我们刚刚创建的blog首页\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/可以看到我们刚刚创建的blog首页</a>.</h4><h4 id=\"4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\"><a href=\"#4-修改blog目录下的-config-yml配置文件将网站自部署到Github上\" class=\"headerlink\" title=\"4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.\"></a>4, 修改blog目录下的_config.yml配置文件将网站自部署到Github上.</h4><pre><code>deploy:\n  type: &apos;git&apos;\n  repository: https://github.com/pangzhanli/pangzhanli.github.io.git\n  branch: master</code></pre><blockquote>\n<p>注意在type前面需要增加两个空格, 在type的冒号后面需要增加一个空格. 请保持代码风格一致. 否则会出现错误或是不正确的问题.</p>\n</blockquote>\n<h4 id=\"5-安装部署使用到的git插件\"><a href=\"#5-安装部署使用到的git插件\" class=\"headerlink\" title=\"5, 安装部署使用到的git插件.\"></a>5, 安装部署使用到的git插件.</h4><p>在这里我们使用的是git源码管理工具, 所以, 我需要安装git包进行部署, 安装这个插件才能使用git进行自动部署</p>\n<pre><code>$ npm install hexo-deployer-git --save</code></pre><h4 id=\"6-进行生成网站\"><a href=\"#6-进行生成网站\" class=\"headerlink\" title=\"6, 进行生成网站\"></a>6, 进行生成网站</h4><p>当我们部署网站前, 需要先生成静态网站. 它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里.</p>\n<pre><code>$ cd blog\n$ hexo g</code></pre><h4 id=\"7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\"><a href=\"#7-进行自动部署网站-注意部署前需要重新生成网站-每一次修改后都需要重新生成网站并进行部署-生成网站前第6步\" class=\"headerlink\" title=\"7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.\"></a>7, 进行自动部署网站, 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署, 生成网站前第6步.</h4><pre><code>$ hexo d</code></pre><p>如果在部署出现错误信息如果下: 请参考第5步, 需要安装git插件</p>\n<pre><code>ERROR Deployer not found: git</code></pre><h2 id=\"三、hexo常用命令\"><a href=\"#三、hexo常用命令\" class=\"headerlink\" title=\"三、hexo常用命令\"></a>三、hexo常用命令</h2><h4 id=\"1-安装，升级，初始化\"><a href=\"#1-安装，升级，初始化\" class=\"headerlink\" title=\"1, 安装，升级，初始化\"></a>1, 安装，升级，初始化</h4><pre><code>npm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化</code></pre><h4 id=\"2-简写：\"><a href=\"#2-简写：\" class=\"headerlink\" title=\"2, 简写：\"></a>2, 简写：</h4><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署</code></pre><h4 id=\"3-服务器：\"><a href=\"#3-服务器：\" class=\"headerlink\" title=\"3, 服务器：\"></a>3, 服务器：</h4><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署</code></pre><h4 id=\"4-监视文件变动：\"><a href=\"#4-监视文件变动：\" class=\"headerlink\" title=\"4, 监视文件变动：\"></a>4, 监视文件变动：</h4><pre><code>hexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动</code></pre><p>完成后部署：</p>\n<ul>\n<li>两个命令的作用是相同的</li>\n<li>hexo generate –deploy</li>\n<li>hexo deploy –generate</li>\n</ul>\n<pre><code>hexo deploy -g\nhexo server -g</code></pre><h4 id=\"5-草稿\"><a href=\"#5-草稿\" class=\"headerlink\" title=\"5, 草稿\"></a>5, 草稿</h4><pre><code>hexo publish [layout] &lt;title&gt;</code></pre><h4 id=\"6-模版\"><a href=\"#6-模版\" class=\"headerlink\" title=\"6, 模版\"></a>6, 模版</h4><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n\nhexo new [layout] &lt;title&gt;\nhexo new photo &quot;My Gallery&quot;\nhexo new &quot;Hello World&quot; --lang tw</code></pre><table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody></table>\n<pre><code>title: 使用Hexo搭建个人博客\nlayout: post\ndate: 2014-03-03 19:07:43\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</code></pre>"},{"title":"02-入口，注释，变量，常量，命名规则","toc":true,"date":"2020-09-01T13:11:59.000Z","_content":"\n1,  入口方法有两种：\nmain(){\n}\nvoid main(){\n}\n\n2,  注释有3中，\n双斜杠 //    三个斜杠 ///\n多行注释\n/**\n这是多行注释\n*/\n\n3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。\nvar  str = \"this is a var\";\n\n4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。\n区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。\n\nconst PI = 3.14159;\n\nfinal str = new DateTime.now();\n\nfinal str1 = \"张三\";\n\n公共点： 都不能修改。\n\n5, Dart的命名规则：\n    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。\n    2， 注意：标示符开头不能使数字。\n    3，标识符不能是保留字和关键字。\n    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。\n    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/02-入口，注释，变量，常量，命名规则.md","raw":"---\ntitle: 02-入口，注释，变量，常量，命名规则\ntoc: true\ndate: 2020-09-01 21:11:59\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1,  入口方法有两种：\nmain(){\n}\nvoid main(){\n}\n\n2,  注释有3中，\n双斜杠 //    三个斜杠 ///\n多行注释\n/**\n这是多行注释\n*/\n\n3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。\nvar  str = \"this is a var\";\n\n4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。\n区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。\n\nconst PI = 3.14159;\n\nfinal str = new DateTime.now();\n\nfinal str1 = \"张三\";\n\n公共点： 都不能修改。\n\n5, Dart的命名规则：\n    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。\n    2， 注意：标示符开头不能使数字。\n    3，标识符不能是保留字和关键字。\n    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。\n    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/02-入口，注释，变量，常量，命名规则","published":1,"updated":"2020-09-01T13:34:34.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfs000vu3s6hp3n94i7","content":"<p>1,  入口方法有两种：<br>main(){<br>}<br>void main(){<br>}</p>\n<p>2,  注释有3中，<br>双斜杠 //    三个斜杠 ///<br>多行注释<br>/**<br>这是多行注释<br>*/</p>\n<p>3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。<br>var  str = “this is a var”;</p>\n<p>4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。<br>区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。</p>\n<p>const PI = 3.14159;</p>\n<p>final str = new DateTime.now();</p>\n<p>final str1 = “张三”;</p>\n<p>公共点： 都不能修改。</p>\n<p>5, Dart的命名规则：<br>    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。<br>    2， 注意：标示符开头不能使数字。<br>    3，标识符不能是保留字和关键字。<br>    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。<br>    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1,  入口方法有两种：<br>main(){<br>}<br>void main(){<br>}</p>\n<p>2,  注释有3中，<br>双斜杠 //    三个斜杠 ///<br>多行注释<br>/**<br>这是多行注释<br>*/</p>\n<p>3,   变量的使用，跟其他语言一样。只不过多了一个var 类型，可以不预先定义变量类型，自动会类型推倒。<br>var  str = “this is a var”;</p>\n<p>4,  常量的修饰，有 const 和 final  ，赋值之后，不能修改。<br>区别：final 可以开始不赋值， 只能赋值一次，而final 不近有 const的编译时常量的特性，最重要的它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化。</p>\n<p>const PI = 3.14159;</p>\n<p>final str = new DateTime.now();</p>\n<p>final str1 = “张三”;</p>\n<p>公共点： 都不能修改。</p>\n<p>5, Dart的命名规则：<br>    1， 变量名称必须由数字，字母， 下划线 和 美元符号($) 组成。<br>    2， 注意：标示符开头不能使数字。<br>    3，标识符不能是保留字和关键字。<br>    4，变量的名字是区分大小写的如: age 和 Age 是不同的变量。<br>    5， 标识符(变量名称) 一定要见名思意，变量名称建议用名字， 方法建议用动词。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"01-Dart环境搭建","toc":true,"date":"2020-09-01T13:09:28.000Z","_content":"\n\nDart 介绍：\n\nDart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。\n\nDart环境搭建：\n1，要在本地开发Dart程序，首先要安装Dart sdk\n\n官网文档：  https://dart.dev/get-dart\n\nwindowns:\thttps://gekorm.com/dart-windows/\n\nmac:  如果电脑没有安装brew这个工具， 首先得安装它， https://brew.sh\n\n安装dart命令：\nbrew tap dart-lang/dart\nbrew install dart\n\n2, Dart开发工具：\nDart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。\n\n这里我们使用 在VS Code 中配置Dart\n\n1,  找到 VS Code 插件 安装 Dart\n2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/01-Dart环境搭建.md","raw":"---\ntitle: 01-Dart环境搭建\ntoc: true\ndate: 2020-09-01 21:09:28\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\nDart 介绍：\n\nDart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。\n\nDart环境搭建：\n1，要在本地开发Dart程序，首先要安装Dart sdk\n\n官网文档：  https://dart.dev/get-dart\n\nwindowns:\thttps://gekorm.com/dart-windows/\n\nmac:  如果电脑没有安装brew这个工具， 首先得安装它， https://brew.sh\n\n安装dart命令：\nbrew tap dart-lang/dart\nbrew install dart\n\n2, Dart开发工具：\nDart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。\n\n这里我们使用 在VS Code 中配置Dart\n\n1,  找到 VS Code 插件 安装 Dart\n2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/01-Dart环境搭建","published":1,"updated":"2020-09-01T13:36:25.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenft000wu3s6govahslb","content":"<p>Dart 介绍：</p>\n<p>Dart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。</p>\n<p>Dart环境搭建：<br>1，要在本地开发Dart程序，首先要安装Dart sdk</p>\n<p>官网文档：  <a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">https://dart.dev/get-dart</a></p>\n<p>windowns:    <a href=\"https://gekorm.com/dart-windows/\" target=\"_blank\" rel=\"noopener\">https://gekorm.com/dart-windows/</a></p>\n<p>mac:  如果电脑没有安装brew这个工具， 首先得安装它， <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">https://brew.sh</a></p>\n<p>安装dart命令：<br>brew tap dart-lang/dart<br>brew install dart</p>\n<p>2, Dart开发工具：<br>Dart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。</p>\n<p>这里我们使用 在VS Code 中配置Dart</p>\n<p>1,  找到 VS Code 插件 安装 Dart<br>2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Dart 介绍：</p>\n<p>Dart是由谷歌开发的计算机编程语言， 它可以被用于web, 服务器， 移动应用 和 物联网等领域的开发。</p>\n<p>Dart环境搭建：<br>1，要在本地开发Dart程序，首先要安装Dart sdk</p>\n<p>官网文档：  <a href=\"https://dart.dev/get-dart\" target=\"_blank\" rel=\"noopener\">https://dart.dev/get-dart</a></p>\n<p>windowns:    <a href=\"https://gekorm.com/dart-windows/\" target=\"_blank\" rel=\"noopener\">https://gekorm.com/dart-windows/</a></p>\n<p>mac:  如果电脑没有安装brew这个工具， 首先得安装它， <a href=\"https://brew.sh\" target=\"_blank\" rel=\"noopener\">https://brew.sh</a></p>\n<p>安装dart命令：<br>brew tap dart-lang/dart<br>brew install dart</p>\n<p>2, Dart开发工具：<br>Dart开发工具很多， 有 IntelliJ IDEA,  WebStorm,  Atom,  VS Code等。</p>\n<p>这里我们使用 在VS Code 中配置Dart</p>\n<p>1,  找到 VS Code 插件 安装 Dart<br>2, 找到 VS Code 插件 安装 Code Runner, 它主要运行我们的dart文件。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"03-数据类型","toc":true,"date":"2020-09-01T13:16:43.000Z","_content":"\n/**\n  Dart 中支持以下数据类型:\n  常用数据类型:\n      Numbers（数值）:\n        int \n        doubule\n      Strings (字符串）\n        String\n      Boolean(布尔):\n        bool\n\n      List(数组):\n        在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n      \n      Maps(字典)：\n        通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。\n */\n\n/**\n    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。\n */\n\n1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。\n\n//多行字符串修饰，  三个单引号或者双引号修饰\n  var str = '''   \n    这是第一行\n    第二行\n    。。。\n最后一行\n  ''';\n  print(str);\n\n  var str1 = \"\"\"\n这是双引号修饰1\n\n双引号修饰2\n  \"\"\";\nprint(str1);\n\n2， List类型：\n  //1. 第一种定义List的方式\n  // var l1 = [\"aaa\",\"bbb\",\"ccc\"]; \n  // print(l1);\n\n  // print(l1[0]);\n  // print(l1[1]);\n\n  // print(l1.length);\n\n  //2.第二种定义List的方式\n  // var l2 = new List();\n\n  // l2.add(\"张三\");\n  // l2.add(\"李四\");\n  // l2.add(\"王五\");\n\n  // print(l2);\n  // print(l2.length);\n\n  // l2.removeLast();\n  // print(l2);\n\n  // //3.定义List指定类型\n  // var l3 = new List<String>();\n  // l3.add(\"aa\");\n  // l3.add(\"bb\");\n\n  // print(l3.length);\n  // print(l3);\n\n3， Map类型:\n  //第一种定义 Map的方式\n  // var person = {\n  //   \"name\":\"张三\",\n  //   \"age\":20,\n  //   \"work\":[\"程序员\",\"外卖员\"]\n  // };\n\n  // print(person);\n  // print(person[\"name\"]);\n  // print(person[\"age\"]);\n\n  //第二种定义Mpa的方式\n  // var p = new Map();\n\n  // p[\"name\"] = \"张三\";\n  // p[\"age\"] = 30;\n  // p[\"work\"] = [\"程序员\",\"外卖员\"];\n\n  // print(p);\n\n4, 判断类型\n  //Dart 判断数据类型 is 关键词 来判断。\n\n  // var str = \"1234\";\n  // var str = 11;\n\n  // if(str is String){\n  //   print(\"是字符串类型\");\n  // }else if(str is int){\n  //   print(\"是int类型\");\n  // }else{\n  //   print(\"其他类型\");\n  // }\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/03-数据类型.md","raw":"---\ntitle: 03-数据类型\ntoc: true\ndate: 2020-09-01 21:16:43\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n/**\n  Dart 中支持以下数据类型:\n  常用数据类型:\n      Numbers（数值）:\n        int \n        doubule\n      Strings (字符串）\n        String\n      Boolean(布尔):\n        bool\n\n      List(数组):\n        在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n      \n      Maps(字典)：\n        通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。\n */\n\n/**\n    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。\n */\n\n1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。\n\n//多行字符串修饰，  三个单引号或者双引号修饰\n  var str = '''   \n    这是第一行\n    第二行\n    。。。\n最后一行\n  ''';\n  print(str);\n\n  var str1 = \"\"\"\n这是双引号修饰1\n\n双引号修饰2\n  \"\"\";\nprint(str1);\n\n2， List类型：\n  //1. 第一种定义List的方式\n  // var l1 = [\"aaa\",\"bbb\",\"ccc\"]; \n  // print(l1);\n\n  // print(l1[0]);\n  // print(l1[1]);\n\n  // print(l1.length);\n\n  //2.第二种定义List的方式\n  // var l2 = new List();\n\n  // l2.add(\"张三\");\n  // l2.add(\"李四\");\n  // l2.add(\"王五\");\n\n  // print(l2);\n  // print(l2.length);\n\n  // l2.removeLast();\n  // print(l2);\n\n  // //3.定义List指定类型\n  // var l3 = new List<String>();\n  // l3.add(\"aa\");\n  // l3.add(\"bb\");\n\n  // print(l3.length);\n  // print(l3);\n\n3， Map类型:\n  //第一种定义 Map的方式\n  // var person = {\n  //   \"name\":\"张三\",\n  //   \"age\":20,\n  //   \"work\":[\"程序员\",\"外卖员\"]\n  // };\n\n  // print(person);\n  // print(person[\"name\"]);\n  // print(person[\"age\"]);\n\n  //第二种定义Mpa的方式\n  // var p = new Map();\n\n  // p[\"name\"] = \"张三\";\n  // p[\"age\"] = 30;\n  // p[\"work\"] = [\"程序员\",\"外卖员\"];\n\n  // print(p);\n\n4, 判断类型\n  //Dart 判断数据类型 is 关键词 来判断。\n\n  // var str = \"1234\";\n  // var str = 11;\n\n  // if(str is String){\n  //   print(\"是字符串类型\");\n  // }else if(str is int){\n  //   print(\"是int类型\");\n  // }else{\n  //   print(\"其他类型\");\n  // }\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/03-数据类型","published":1,"updated":"2020-09-01T13:34:37.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfu000yu3s6cn222r0d","content":"<p>/**<br>  Dart 中支持以下数据类型:<br>  常用数据类型:<br>      Numbers（数值）:<br>        int<br>        doubule<br>      Strings (字符串）<br>        String<br>      Boolean(布尔):<br>        bool</p>\n<pre><code>List(数组):\n  在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n\nMaps(字典)：\n  通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。</code></pre><p> */</p>\n<p>/**<br>    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。<br> */</p>\n<p>1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。</p>\n<p>//多行字符串修饰，  三个单引号或者双引号修饰<br>  var str = ‘’’<br>    这是第一行<br>    第二行<br>    。。。<br>最后一行<br>  ‘’’;<br>  print(str);</p>\n<p>  var str1 = “””<br>这是双引号修饰1</p>\n<p>双引号修饰2<br>  “””;<br>print(str1);</p>\n<p>2， List类型：<br>  //1. 第一种定义List的方式<br>  // var l1 = [“aaa”,”bbb”,”ccc”];<br>  // print(l1);</p>\n<p>  // print(l1[0]);<br>  // print(l1[1]);</p>\n<p>  // print(l1.length);</p>\n<p>  //2.第二种定义List的方式<br>  // var l2 = new List();</p>\n<p>  // l2.add(“张三”);<br>  // l2.add(“李四”);<br>  // l2.add(“王五”);</p>\n<p>  // print(l2);<br>  // print(l2.length);</p>\n<p>  // l2.removeLast();<br>  // print(l2);</p>\n<p>  // //3.定义List指定类型<br>  // var l3 = new List<String>();<br>  // l3.add(“aa”);<br>  // l3.add(“bb”);</String></p>\n<p>  // print(l3.length);<br>  // print(l3);</p>\n<p>3， Map类型:<br>  //第一种定义 Map的方式<br>  // var person = {<br>  //   “name”:”张三”,<br>  //   “age”:20,<br>  //   “work”:[“程序员”,”外卖员”]<br>  // };</p>\n<p>  // print(person);<br>  // print(person[“name”]);<br>  // print(person[“age”]);</p>\n<p>  //第二种定义Mpa的方式<br>  // var p = new Map();</p>\n<p>  // p[“name”] = “张三”;<br>  // p[“age”] = 30;<br>  // p[“work”] = [“程序员”,”外卖员”];</p>\n<p>  // print(p);</p>\n<p>4, 判断类型<br>  //Dart 判断数据类型 is 关键词 来判断。</p>\n<p>  // var str = “1234”;<br>  // var str = 11;</p>\n<p>  // if(str is String){<br>  //   print(“是字符串类型”);<br>  // }else if(str is int){<br>  //   print(“是int类型”);<br>  // }else{<br>  //   print(“其他类型”);<br>  // }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>/**<br>  Dart 中支持以下数据类型:<br>  常用数据类型:<br>      Numbers（数值）:<br>        int<br>        doubule<br>      Strings (字符串）<br>        String<br>      Boolean(布尔):<br>        bool</p>\n<pre><code>List(数组):\n  在Dart中，数组是列表对象，所以大多数人只是称他们为列表。\n\nMaps(字典)：\n  通常来说， Map 是一个键值对相关的对象， 键和值是任何类型的对象。</code></pre><p> */</p>\n<p>/**<br>    int,double, String, bool（true，false）, 跟其他语言一样，这里就不写了。<br> */</p>\n<p>1,  字符串有单引号 和 双引号修饰，必须成对出现。 这里有一个特殊的地方，就是 三个单引号 或者三个双引号修饰的。</p>\n<p>//多行字符串修饰，  三个单引号或者双引号修饰<br>  var str = ‘’’<br>    这是第一行<br>    第二行<br>    。。。<br>最后一行<br>  ‘’’;<br>  print(str);</p>\n<p>  var str1 = “””<br>这是双引号修饰1</p>\n<p>双引号修饰2<br>  “””;<br>print(str1);</p>\n<p>2， List类型：<br>  //1. 第一种定义List的方式<br>  // var l1 = [“aaa”,”bbb”,”ccc”];<br>  // print(l1);</p>\n<p>  // print(l1[0]);<br>  // print(l1[1]);</p>\n<p>  // print(l1.length);</p>\n<p>  //2.第二种定义List的方式<br>  // var l2 = new List();</p>\n<p>  // l2.add(“张三”);<br>  // l2.add(“李四”);<br>  // l2.add(“王五”);</p>\n<p>  // print(l2);<br>  // print(l2.length);</p>\n<p>  // l2.removeLast();<br>  // print(l2);</p>\n<p>  // //3.定义List指定类型<br>  // var l3 = new List<String>();<br>  // l3.add(“aa”);<br>  // l3.add(“bb”);</String></p>\n<p>  // print(l3.length);<br>  // print(l3);</p>\n<p>3， Map类型:<br>  //第一种定义 Map的方式<br>  // var person = {<br>  //   “name”:”张三”,<br>  //   “age”:20,<br>  //   “work”:[“程序员”,”外卖员”]<br>  // };</p>\n<p>  // print(person);<br>  // print(person[“name”]);<br>  // print(person[“age”]);</p>\n<p>  //第二种定义Mpa的方式<br>  // var p = new Map();</p>\n<p>  // p[“name”] = “张三”;<br>  // p[“age”] = 30;<br>  // p[“work”] = [“程序员”,”外卖员”];</p>\n<p>  // print(p);</p>\n<p>4, 判断类型<br>  //Dart 判断数据类型 is 关键词 来判断。</p>\n<p>  // var str = “1234”;<br>  // var str = 11;</p>\n<p>  // if(str is String){<br>  //   print(“是字符串类型”);<br>  // }else if(str is int){<br>  //   print(“是int类型”);<br>  // }else{<br>  //   print(“其他类型”);<br>  // }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"04-Dart运算符","toc":true,"date":"2020-09-01T13:20:13.000Z","_content":"\n注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符， \n另外，这里还有 条件表达式， 类型判断。\n\n1，算数运算符：  + - *  / (加减乘除),   ~/ （取整），  %（取余）\n这里的 ~/ 取整运算符，  例如：  14~/10 = 2;\n\n2, 关系运算符：  == ,  !=,   >,   <,   >=,   <=\n3, 逻辑运算符:   !（取反）    &&    ||\n4, 赋值运算符:\n基础赋值运算符，   = ,      ??=\n复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)\n这里讲一下  ??= 这个运算符\n\nvar a = \"111\";\na??=\"222\";\n\n它的意思是：  如果a 为空，那么就会将222赋值给a。\n\n5，条件表达式   \nif else,    switch case， 跟其他语言一样，不再讲解。\n\n三目运算符:\nbool flat = true;\nString str = flag ? \"我是true\":\"我是false\";\nprint(str);\n\n?? 运算符:(如果为空，就直接赋值)\n  var a;\n  var b = a ?? 10;\n  print(b);   // b=10, 已经被赋值\n\n  var c = 20;\n  var d = c ?? 30;  \n  print(d);   //d=20, 因为c不等于空，有值\n\n6, 类型转换，Number 与 String 之间的转换\nNumber类型转换成String类型：  toString()\nString类型转换成Number类型：  int.parse() , double,parse()\n\n其他类型转换成 boolean类型：\nisEmpty 判断是否为空;\n  var str;\n  if(str == null){\n    print(\"str is null\");\n  }else if(str.isEmpty){\n    print(\"str 是 空\");\n  }else{\n    print(\"str 非 空\");\n  }\n\n\n  //NaN 类型\n  var myNum = 0/0;\n  print(myNum);\n\n  if(myNum.isNaN){\n    print(\"是 NaN 类型\");\n  }\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/04-Dart运算符.md","raw":"---\ntitle: 04-Dart运算符\ntoc: true\ndate: 2020-09-01 21:20:13\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符， \n另外，这里还有 条件表达式， 类型判断。\n\n1，算数运算符：  + - *  / (加减乘除),   ~/ （取整），  %（取余）\n这里的 ~/ 取整运算符，  例如：  14~/10 = 2;\n\n2, 关系运算符：  == ,  !=,   >,   <,   >=,   <=\n3, 逻辑运算符:   !（取反）    &&    ||\n4, 赋值运算符:\n基础赋值运算符，   = ,      ??=\n复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)\n这里讲一下  ??= 这个运算符\n\nvar a = \"111\";\na??=\"222\";\n\n它的意思是：  如果a 为空，那么就会将222赋值给a。\n\n5，条件表达式   \nif else,    switch case， 跟其他语言一样，不再讲解。\n\n三目运算符:\nbool flat = true;\nString str = flag ? \"我是true\":\"我是false\";\nprint(str);\n\n?? 运算符:(如果为空，就直接赋值)\n  var a;\n  var b = a ?? 10;\n  print(b);   // b=10, 已经被赋值\n\n  var c = 20;\n  var d = c ?? 30;  \n  print(d);   //d=20, 因为c不等于空，有值\n\n6, 类型转换，Number 与 String 之间的转换\nNumber类型转换成String类型：  toString()\nString类型转换成Number类型：  int.parse() , double,parse()\n\n其他类型转换成 boolean类型：\nisEmpty 判断是否为空;\n  var str;\n  if(str == null){\n    print(\"str is null\");\n  }else if(str.isEmpty){\n    print(\"str 是 空\");\n  }else{\n    print(\"str 非 空\");\n  }\n\n\n  //NaN 类型\n  var myNum = 0/0;\n  print(myNum);\n\n  if(myNum.isNaN){\n    print(\"是 NaN 类型\");\n  }\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/04-Dart运算符","published":1,"updated":"2020-09-01T13:34:40.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfv000zu3s671xdfiw8","content":"<p>注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符，<br>另外，这里还有 条件表达式， 类型判断。</p>\n<p>1，算数运算符：  + - *  / (加减乘除),   <del>/ （取整），  %（取余）<br>这里的 ~/ 取整运算符，  例如：  14</del>/10 = 2;</p>\n<p>2, 关系运算符：  == ,  !=,   &gt;,   &lt;,   &gt;=,   &lt;=<br>3, 逻辑运算符:   !（取反）    &amp;&amp;    ||<br>4, 赋值运算符:<br>基础赋值运算符，   = ,      ??=<br>复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)<br>这里讲一下  ??= 这个运算符</p>\n<p>var a = “111”;<br>a??=”222”;</p>\n<p>它的意思是：  如果a 为空，那么就会将222赋值给a。</p>\n<p>5，条件表达式<br>if else,    switch case， 跟其他语言一样，不再讲解。</p>\n<p>三目运算符:<br>bool flat = true;<br>String str = flag ? “我是true”:”我是false”;<br>print(str);</p>\n<p>?? 运算符:(如果为空，就直接赋值)<br>  var a;<br>  var b = a ?? 10;<br>  print(b);   // b=10, 已经被赋值</p>\n<p>  var c = 20;<br>  var d = c ?? 30;<br>  print(d);   //d=20, 因为c不等于空，有值</p>\n<p>6, 类型转换，Number 与 String 之间的转换<br>Number类型转换成String类型：  toString()<br>String类型转换成Number类型：  int.parse() , double,parse()</p>\n<p>其他类型转换成 boolean类型：<br>isEmpty 判断是否为空;<br>  var str;<br>  if(str == null){<br>    print(“str is null”);<br>  }else if(str.isEmpty){<br>    print(“str 是 空”);<br>  }else{<br>    print(“str 非 空”);<br>  }</p>\n<p>  //NaN 类型<br>  var myNum = 0/0;<br>  print(myNum);</p>\n<p>  if(myNum.isNaN){<br>    print(“是 NaN 类型”);<br>  }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>注： Dart 运算符有： 算数运算符， 关系运算符， 逻辑运算符， 赋值运算符，<br>另外，这里还有 条件表达式， 类型判断。</p>\n<p>1，算数运算符：  + - *  / (加减乘除),   <del>/ （取整），  %（取余）<br>这里的 ~/ 取整运算符，  例如：  14</del>/10 = 2;</p>\n<p>2, 关系运算符：  == ,  !=,   &gt;,   &lt;,   &gt;=,   &lt;=<br>3, 逻辑运算符:   !（取反）    &amp;&amp;    ||<br>4, 赋值运算符:<br>基础赋值运算符，   = ,      ??=<br>复合赋值运算符：  +=，  -=，  *=，  /=,   %=,    ~/=(取整等)<br>这里讲一下  ??= 这个运算符</p>\n<p>var a = “111”;<br>a??=”222”;</p>\n<p>它的意思是：  如果a 为空，那么就会将222赋值给a。</p>\n<p>5，条件表达式<br>if else,    switch case， 跟其他语言一样，不再讲解。</p>\n<p>三目运算符:<br>bool flat = true;<br>String str = flag ? “我是true”:”我是false”;<br>print(str);</p>\n<p>?? 运算符:(如果为空，就直接赋值)<br>  var a;<br>  var b = a ?? 10;<br>  print(b);   // b=10, 已经被赋值</p>\n<p>  var c = 20;<br>  var d = c ?? 30;<br>  print(d);   //d=20, 因为c不等于空，有值</p>\n<p>6, 类型转换，Number 与 String 之间的转换<br>Number类型转换成String类型：  toString()<br>String类型转换成Number类型：  int.parse() , double,parse()</p>\n<p>其他类型转换成 boolean类型：<br>isEmpty 判断是否为空;<br>  var str;<br>  if(str == null){<br>    print(“str is null”);<br>  }else if(str.isEmpty){<br>    print(“str 是 空”);<br>  }else{<br>    print(“str 非 空”);<br>  }</p>\n<p>  //NaN 类型<br>  var myNum = 0/0;<br>  print(myNum);</p>\n<p>  if(myNum.isNaN){<br>    print(“是 NaN 类型”);<br>  }</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"05-图片组件，网络图片以及本地图片，图片裁剪","toc":true,"date":"2020-09-01T13:21:00.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪.md","raw":"---\ntitle: 05-图片组件，网络图片以及本地图片，图片裁剪\ntoc: true\ndate: 2020-09-01 21:21:00\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/05-图片组件，网络图片以及本地图片，图片裁剪","published":1,"updated":"2020-09-01T13:34:43.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfw0010u3s60n0l6epo","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"07-方法参数","toc":true,"date":"2020-09-01T13:21:41.000Z","_content":"\n\n1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。\nDart语言方法中是可以嵌套方法的。\n例如：\nvoid main(){\n    void neiBuFn(){\n        print(\"这是内部方法\");\n    }\n}\n\n2,  可选参数\n//方法:可选参数, 注意是中括号[]\nString printUserInfo2(String userName, [int age]){\n  if(age != null){\n    return \"姓名:$userName --- 年龄:$age\";\n  }\n  return \"姓名:$userName --- 年龄保密\";\n}\n\n3,  默认参数\n// 默认参数\nString printUserInfo3(String userName, [String sex = \"男\", int age]){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n4,  命名参数的方法\n//命名参数的方法, 注意是大括号{}\nString printUserInfo4(String userName,{int age, String sex = \"男\"}){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n调用：  \nprint(printUserInfo4(\"小王\",age:20, sex:\"女\"));  //姓名:小王 ---性别：女  --- 年龄:20\n\n\n5，把方法当作参数传进去\n\n例子1：\n  // //把方法当作参数传进去\n  // fn1(){\n  //   print(\"fn1\");\n  // }\n\n  // fn2(fn){\n  //   fn();\n  // }\n\n  // fn2(fn1);\n\n\n例子2：\n  var fn = (){\n    print(\"这是一个匿名方法\");\n  };\n  fn3(tmpFn){\n    tmpFn();\n  };\n  //方法调用\n  fn3(fn);\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/07-方法参数.md","raw":"---\ntitle: 07-方法参数\ntoc: true\ndate: 2020-09-01 21:21:41\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。\nDart语言方法中是可以嵌套方法的。\n例如：\nvoid main(){\n    void neiBuFn(){\n        print(\"这是内部方法\");\n    }\n}\n\n2,  可选参数\n//方法:可选参数, 注意是中括号[]\nString printUserInfo2(String userName, [int age]){\n  if(age != null){\n    return \"姓名:$userName --- 年龄:$age\";\n  }\n  return \"姓名:$userName --- 年龄保密\";\n}\n\n3,  默认参数\n// 默认参数\nString printUserInfo3(String userName, [String sex = \"男\", int age]){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n4,  命名参数的方法\n//命名参数的方法, 注意是大括号{}\nString printUserInfo4(String userName,{int age, String sex = \"男\"}){\n  if(age != null){\n    return \"姓名:$userName ---性别：$sex  --- 年龄:$age\";\n  }\n  return \"姓名:$userName ---性别：$sex --- 年龄保密\";\n}\n\n调用：  \nprint(printUserInfo4(\"小王\",age:20, sex:\"女\"));  //姓名:小王 ---性别：女  --- 年龄:20\n\n\n5，把方法当作参数传进去\n\n例子1：\n  // //把方法当作参数传进去\n  // fn1(){\n  //   print(\"fn1\");\n  // }\n\n  // fn2(fn){\n  //   fn();\n  // }\n\n  // fn2(fn1);\n\n\n例子2：\n  var fn = (){\n    print(\"这是一个匿名方法\");\n  };\n  fn3(tmpFn){\n    tmpFn();\n  };\n  //方法调用\n  fn3(fn);\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/07-方法参数","published":1,"updated":"2020-09-01T13:34:50.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfx0012u3s61y61bn0e","content":"<p>1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。<br>Dart语言方法中是可以嵌套方法的。<br>例如：<br>void main(){<br>    void neiBuFn(){<br>        print(“这是内部方法”);<br>    }<br>}</p>\n<p>2,  可选参数<br>//方法:可选参数, 注意是中括号[]<br>String printUserInfo2(String userName, [int age]){<br>  if(age != null){<br>    return “姓名:$userName — 年龄:$age”;<br>  }<br>  return “姓名:$userName — 年龄保密”;<br>}</p>\n<p>3,  默认参数<br>// 默认参数<br>String printUserInfo3(String userName, [String sex = “男”, int age]){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>4,  命名参数的方法<br>//命名参数的方法, 注意是大括号{}<br>String printUserInfo4(String userName,{int age, String sex = “男”}){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>调用：<br>print(printUserInfo4(“小王”,age:20, sex:”女”));  //姓名:小王 —性别：女  — 年龄:20</p>\n<p>5，把方法当作参数传进去</p>\n<p>例子1：<br>  // //把方法当作参数传进去<br>  // fn1(){<br>  //   print(“fn1”);<br>  // }</p>\n<p>  // fn2(fn){<br>  //   fn();<br>  // }</p>\n<p>  // fn2(fn1);</p>\n<p>例子2：<br>  var fn = (){<br>    print(“这是一个匿名方法”);<br>  };<br>  fn3(tmpFn){<br>    tmpFn();<br>  };<br>  //方法调用<br>  fn3(fn);</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，方法作用域， 写在 main函数之外的是全局方法， 在main函数里边的是 局部方法。<br>Dart语言方法中是可以嵌套方法的。<br>例如：<br>void main(){<br>    void neiBuFn(){<br>        print(“这是内部方法”);<br>    }<br>}</p>\n<p>2,  可选参数<br>//方法:可选参数, 注意是中括号[]<br>String printUserInfo2(String userName, [int age]){<br>  if(age != null){<br>    return “姓名:$userName — 年龄:$age”;<br>  }<br>  return “姓名:$userName — 年龄保密”;<br>}</p>\n<p>3,  默认参数<br>// 默认参数<br>String printUserInfo3(String userName, [String sex = “男”, int age]){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>4,  命名参数的方法<br>//命名参数的方法, 注意是大括号{}<br>String printUserInfo4(String userName,{int age, String sex = “男”}){<br>  if(age != null){<br>    return “姓名:$userName —性别：$sex  — 年龄:$age”;<br>  }<br>  return “姓名:$userName —性别：$sex — 年龄保密”;<br>}</p>\n<p>调用：<br>print(printUserInfo4(“小王”,age:20, sex:”女”));  //姓名:小王 —性别：女  — 年龄:20</p>\n<p>5，把方法当作参数传进去</p>\n<p>例子1：<br>  // //把方法当作参数传进去<br>  // fn1(){<br>  //   print(“fn1”);<br>  // }</p>\n<p>  // fn2(fn){<br>  //   fn();<br>  // }</p>\n<p>  // fn2(fn1);</p>\n<p>例子2：<br>  var fn = (){<br>    print(“这是一个匿名方法”);<br>  };<br>  fn3(tmpFn){<br>    tmpFn();<br>  };<br>  //方法调用<br>  fn3(fn);</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"09-面向对象","toc":true,"date":"2020-09-01T13:22:12.000Z","_content":"\n面向对象编程（OOP）三个基本特征： 封装，继承，多态\nDart 所有的东西都是对象，所有的对象都继承自object类。\n\nDart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。\n\n一个类通常由属性和方法组成。\n\n1， 构造函数， \n//Person类\nclass Person{\n  String name=\"张三\";\n  int age = 20;\n\n//默认构造函数只能有一个\n  // Person(){\n  // }\n\n  // Person(String name, int age){\n  //   this.name = name;\n  //   this.age = age;\n  // }\n\n  //构造函数也可以写成这样，自动会将数据赋值给对象的属性\n  Person(this.name, this.age);\n\n  void getInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\n2，命名构造函数\n\n //命名构造函数, 可以有多个\n  Person.now(){\n    print(\"这是命名构造函数\");\n  }\n\n  Person.printInfo(){\n    print(\"这是第二个命名构造函数\");\n  }\n\n  //带参数的命名构造函数\n  Person.printInfo1(String name, int age){\n    this.name = name;\n    this.age = age;\n  }\n\n  Person.printInfo2(name, age, num height){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n  }\n\n  Person.printInfo3(name, age, num height, num width){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n    this._width = width;\n  }\n\n\n3, 私有属性和方法\n在变量的前边，加上下划线 —\n\n  num _height;\n  num _width;\n\n这个 _height 和 _witdth就是私有属性，外部不可以直接访问。\n\n4， get和set属性\n  //get属性\n  get area{\n    return this._height * this._width;\n  }\n\n  //set属性\n  set personWidth(num height){\n    this._height = height;\n  }\n\n外部调用：\n Person p3 = Person.printInfo3(\"小李\", 25, 170, 70);\n print(\"${p3.area}\");\n\n p3.personWidth = 10;\n print(\"${p3.area}\");\n\n5，可以在构造函数运行之前初始化实例变量。\nclass Rect{\n  int height;\n  int width;\n\n  Rect():height = 20, width = 10{\n    print(\"${this.height} -- ${this.width}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/09-面向对象.md","raw":"---\ntitle: 09-面向对象\ntoc: true\ndate: 2020-09-01 21:22:12\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n面向对象编程（OOP）三个基本特征： 封装，继承，多态\nDart 所有的东西都是对象，所有的对象都继承自object类。\n\nDart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。\n\n一个类通常由属性和方法组成。\n\n1， 构造函数， \n//Person类\nclass Person{\n  String name=\"张三\";\n  int age = 20;\n\n//默认构造函数只能有一个\n  // Person(){\n  // }\n\n  // Person(String name, int age){\n  //   this.name = name;\n  //   this.age = age;\n  // }\n\n  //构造函数也可以写成这样，自动会将数据赋值给对象的属性\n  Person(this.name, this.age);\n\n  void getInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\n2，命名构造函数\n\n //命名构造函数, 可以有多个\n  Person.now(){\n    print(\"这是命名构造函数\");\n  }\n\n  Person.printInfo(){\n    print(\"这是第二个命名构造函数\");\n  }\n\n  //带参数的命名构造函数\n  Person.printInfo1(String name, int age){\n    this.name = name;\n    this.age = age;\n  }\n\n  Person.printInfo2(name, age, num height){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n  }\n\n  Person.printInfo3(name, age, num height, num width){\n    this.name = name;\n    this.age = age;\n    this._height = height;\n    this._width = width;\n  }\n\n\n3, 私有属性和方法\n在变量的前边，加上下划线 —\n\n  num _height;\n  num _width;\n\n这个 _height 和 _witdth就是私有属性，外部不可以直接访问。\n\n4， get和set属性\n  //get属性\n  get area{\n    return this._height * this._width;\n  }\n\n  //set属性\n  set personWidth(num height){\n    this._height = height;\n  }\n\n外部调用：\n Person p3 = Person.printInfo3(\"小李\", 25, 170, 70);\n print(\"${p3.area}\");\n\n p3.personWidth = 10;\n print(\"${p3.area}\");\n\n5，可以在构造函数运行之前初始化实例变量。\nclass Rect{\n  int height;\n  int width;\n\n  Rect():height = 20, width = 10{\n    print(\"${this.height} -- ${this.width}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/09-面向对象","published":1,"updated":"2020-09-01T13:34:55.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfy0013u3s68ira3blu","content":"<p>面向对象编程（OOP）三个基本特征： 封装，继承，多态<br>Dart 所有的东西都是对象，所有的对象都继承自object类。</p>\n<p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。</p>\n<p>一个类通常由属性和方法组成。</p>\n<p>1， 构造函数，<br>//Person类<br>class Person{<br>  String name=”张三”;<br>  int age = 20;</p>\n<p>//默认构造函数只能有一个<br>  // Person(){<br>  // }</p>\n<p>  // Person(String name, int age){<br>  //   this.name = name;<br>  //   this.age = age;<br>  // }</p>\n<p>  //构造函数也可以写成这样，自动会将数据赋值给对象的属性<br>  Person(this.name, this.age);</p>\n<p>  void getInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>2，命名构造函数</p>\n<p> //命名构造函数, 可以有多个<br>  Person.now(){<br>    print(“这是命名构造函数”);<br>  }</p>\n<p>  Person.printInfo(){<br>    print(“这是第二个命名构造函数”);<br>  }</p>\n<p>  //带参数的命名构造函数<br>  Person.printInfo1(String name, int age){<br>    this.name = name;<br>    this.age = age;<br>  }</p>\n<p>  Person.printInfo2(name, age, num height){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>  }</p>\n<p>  Person.printInfo3(name, age, num height, num width){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>    this._width = width;<br>  }</p>\n<p>3, 私有属性和方法<br>在变量的前边，加上下划线 —</p>\n<p>  num _height;<br>  num _width;</p>\n<p>这个 _height 和 _witdth就是私有属性，外部不可以直接访问。</p>\n<p>4， get和set属性<br>  //get属性<br>  get area{<br>    return this._height * this._width;<br>  }</p>\n<p>  //set属性<br>  set personWidth(num height){<br>    this._height = height;<br>  }</p>\n<p>外部调用：<br> Person p3 = Person.printInfo3(“小李”, 25, 170, 70);<br> print(“${p3.area}”);</p>\n<p> p3.personWidth = 10;<br> print(“${p3.area}”);</p>\n<p>5，可以在构造函数运行之前初始化实例变量。<br>class Rect{<br>  int height;<br>  int width;</p>\n<p>  Rect():height = 20, width = 10{<br>    print(“${this.height} – ${this.width}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>面向对象编程（OOP）三个基本特征： 封装，继承，多态<br>Dart 所有的东西都是对象，所有的对象都继承自object类。</p>\n<p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是object的子类。</p>\n<p>一个类通常由属性和方法组成。</p>\n<p>1， 构造函数，<br>//Person类<br>class Person{<br>  String name=”张三”;<br>  int age = 20;</p>\n<p>//默认构造函数只能有一个<br>  // Person(){<br>  // }</p>\n<p>  // Person(String name, int age){<br>  //   this.name = name;<br>  //   this.age = age;<br>  // }</p>\n<p>  //构造函数也可以写成这样，自动会将数据赋值给对象的属性<br>  Person(this.name, this.age);</p>\n<p>  void getInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>2，命名构造函数</p>\n<p> //命名构造函数, 可以有多个<br>  Person.now(){<br>    print(“这是命名构造函数”);<br>  }</p>\n<p>  Person.printInfo(){<br>    print(“这是第二个命名构造函数”);<br>  }</p>\n<p>  //带参数的命名构造函数<br>  Person.printInfo1(String name, int age){<br>    this.name = name;<br>    this.age = age;<br>  }</p>\n<p>  Person.printInfo2(name, age, num height){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>  }</p>\n<p>  Person.printInfo3(name, age, num height, num width){<br>    this.name = name;<br>    this.age = age;<br>    this._height = height;<br>    this._width = width;<br>  }</p>\n<p>3, 私有属性和方法<br>在变量的前边，加上下划线 —</p>\n<p>  num _height;<br>  num _width;</p>\n<p>这个 _height 和 _witdth就是私有属性，外部不可以直接访问。</p>\n<p>4， get和set属性<br>  //get属性<br>  get area{<br>    return this._height * this._width;<br>  }</p>\n<p>  //set属性<br>  set personWidth(num height){<br>    this._height = height;<br>  }</p>\n<p>外部调用：<br> Person p3 = Person.printInfo3(“小李”, 25, 170, 70);<br> print(“${p3.area}”);</p>\n<p> p3.personWidth = 10;<br> print(“${p3.area}”);</p>\n<p>5，可以在构造函数运行之前初始化实例变量。<br>class Rect{<br>  int height;<br>  int width;</p>\n<p>  Rect():height = 20, width = 10{<br>    print(“${this.height} – ${this.width}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-Dart集合类型， List, Set, Map","toc":true,"date":"2020-09-01T13:21:11.000Z","_content":"\n\n1, List 里面常用的属性和方法：\n\n常用属性：\nlength:  \t\t\t长度\nreversed\t\t\t反转\nisEmpty\t\t\t是否位空\nisNotEmpty\t\t是否不位空\n常用方法：\nadd\t\t\t\t添加\naddAll\t\t\t添加数组\nindexOf\t\t\t查找， 传入具体的值\nremove\t\t\t删除， 传入具体的值\nremoveAt\t\t\t删除， 传入索引值\nfillRange\t\t\t修改\ninsert(index, value)  指定位置插入\ninsertAll(index, list)\t指定位置插入List\ntoList()\t\t\t其他类型转换成List\njoin()\t\t\tList转换成字符串\nsplit()\t\t\t切割\nforEach()\t\t\t//循环，不带返回值\nmap()\t\t\t//循环，带有返回值\nwhere()\t\t\t//循环， 返回符合条件的\nany()\t\t\t//循环，只要有一个满足条件，就返回true,  否则返回false\nevery()\t\t\t//循环,   每一个都满足条件， 才返回true， 否则返回false\n\n\n2, \n //forEach方法：\n\n  // List myList = [\"桃子\",\"西瓜\",\"苹果\"];\n  // myList.forEach((value){\n  //   print(\"$value\");\n  // });\n\n\n//map方法：\n  // List myList = [1,3,4];\n  // var newList = myList.map((value){\n  //   return value * 2;\n  // });\n  // print(newList);           //(2, 6, 8)        \n  // print(newList.toList());  //[2, 6, 8]\n\n\n// //where方法：\n//   List myList = [1,3,4,5,6,7,8];\n//   var newList = myList.where((value){\n//     return value > 5;   //返回条件 > 5的\n//   });\n\n//   print(newList);   //(6, 7, 8)\n\n\n// //any方法： \n//   List myList = [1,3,4,5,6,7,8];\n\n//   //只要集合里面有一个满足条件，就返回true\n//   var f = myList.any((value){\n//     return value > 5;\n//   });\n\n//   print(f); //true\n\n\n// // every方法：\n//   //集合中每一个都要满足条件，返回true, 否则返回false\n//   List myList = [1,3,4,5,6,7,8];\n\n//   //\n//   var f = myList.every((value){\n//     return value > 5;\n//   });\n//   print(f);   //false\n\n\n//Set的遍历\n  // var s = new Set();\n  // s.add(\"111\");\n  // s.add(\"222\");\n\n  // //只有一行，可以使用 => \n  // s.forEach((value)=>print(value));\n\n  Map person = {\n    \"name\":\"张三\",\n    \"age\":20\n  };\n\n  person.forEach((key,value){\n    print(\"$key:$value\");\n  });\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/06-Dart集合类型，-List-Set-Map.md","raw":"---\ntitle: '06-Dart集合类型， List, Set, Map'\ntoc: true\ndate: 2020-09-01 21:21:11\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n\n1, List 里面常用的属性和方法：\n\n常用属性：\nlength:  \t\t\t长度\nreversed\t\t\t反转\nisEmpty\t\t\t是否位空\nisNotEmpty\t\t是否不位空\n常用方法：\nadd\t\t\t\t添加\naddAll\t\t\t添加数组\nindexOf\t\t\t查找， 传入具体的值\nremove\t\t\t删除， 传入具体的值\nremoveAt\t\t\t删除， 传入索引值\nfillRange\t\t\t修改\ninsert(index, value)  指定位置插入\ninsertAll(index, list)\t指定位置插入List\ntoList()\t\t\t其他类型转换成List\njoin()\t\t\tList转换成字符串\nsplit()\t\t\t切割\nforEach()\t\t\t//循环，不带返回值\nmap()\t\t\t//循环，带有返回值\nwhere()\t\t\t//循环， 返回符合条件的\nany()\t\t\t//循环，只要有一个满足条件，就返回true,  否则返回false\nevery()\t\t\t//循环,   每一个都满足条件， 才返回true， 否则返回false\n\n\n2, \n //forEach方法：\n\n  // List myList = [\"桃子\",\"西瓜\",\"苹果\"];\n  // myList.forEach((value){\n  //   print(\"$value\");\n  // });\n\n\n//map方法：\n  // List myList = [1,3,4];\n  // var newList = myList.map((value){\n  //   return value * 2;\n  // });\n  // print(newList);           //(2, 6, 8)        \n  // print(newList.toList());  //[2, 6, 8]\n\n\n// //where方法：\n//   List myList = [1,3,4,5,6,7,8];\n//   var newList = myList.where((value){\n//     return value > 5;   //返回条件 > 5的\n//   });\n\n//   print(newList);   //(6, 7, 8)\n\n\n// //any方法： \n//   List myList = [1,3,4,5,6,7,8];\n\n//   //只要集合里面有一个满足条件，就返回true\n//   var f = myList.any((value){\n//     return value > 5;\n//   });\n\n//   print(f); //true\n\n\n// // every方法：\n//   //集合中每一个都要满足条件，返回true, 否则返回false\n//   List myList = [1,3,4,5,6,7,8];\n\n//   //\n//   var f = myList.every((value){\n//     return value > 5;\n//   });\n//   print(f);   //false\n\n\n//Set的遍历\n  // var s = new Set();\n  // s.add(\"111\");\n  // s.add(\"222\");\n\n  // //只有一行，可以使用 => \n  // s.forEach((value)=>print(value));\n\n  Map person = {\n    \"name\":\"张三\",\n    \"age\":20\n  };\n\n  person.forEach((key,value){\n    print(\"$key:$value\");\n  });\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/06-Dart集合类型，-List-Set-Map","published":1,"updated":"2020-09-01T13:34:46.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfz0015u3s6b9s74lij","content":"<p>1, List 里面常用的属性和方法：</p>\n<p>常用属性：<br>length:              长度<br>reversed            反转<br>isEmpty            是否位空<br>isNotEmpty        是否不位空<br>常用方法：<br>add                添加<br>addAll            添加数组<br>indexOf            查找， 传入具体的值<br>remove            删除， 传入具体的值<br>removeAt            删除， 传入索引值<br>fillRange            修改<br>insert(index, value)  指定位置插入<br>insertAll(index, list)    指定位置插入List<br>toList()            其他类型转换成List<br>join()            List转换成字符串<br>split()            切割<br>forEach()            //循环，不带返回值<br>map()            //循环，带有返回值<br>where()            //循环， 返回符合条件的<br>any()            //循环，只要有一个满足条件，就返回true,  否则返回false<br>every()            //循环,   每一个都满足条件， 才返回true， 否则返回false</p>\n<p>2,<br> //forEach方法：</p>\n<p>  // List myList = [“桃子”,”西瓜”,”苹果”];<br>  // myList.forEach((value){<br>  //   print(“$value”);<br>  // });</p>\n<p>//map方法：<br>  // List myList = [1,3,4];<br>  // var newList = myList.map((value){<br>  //   return value * 2;<br>  // });<br>  // print(newList);           //(2, 6, 8)<br>  // print(newList.toList());  //[2, 6, 8]</p>\n<p>// //where方法：<br>//   List myList = [1,3,4,5,6,7,8];<br>//   var newList = myList.where((value){<br>//     return value &gt; 5;   //返回条件 &gt; 5的<br>//   });</p>\n<p>//   print(newList);   //(6, 7, 8)</p>\n<p>// //any方法：<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //只要集合里面有一个满足条件，就返回true<br>//   var f = myList.any((value){<br>//     return value &gt; 5;<br>//   });</p>\n<p>//   print(f); //true</p>\n<p>// // every方法：<br>//   //集合中每一个都要满足条件，返回true, 否则返回false<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //<br>//   var f = myList.every((value){<br>//     return value &gt; 5;<br>//   });<br>//   print(f);   //false</p>\n<p>//Set的遍历<br>  // var s = new Set();<br>  // s.add(“111”);<br>  // s.add(“222”);</p>\n<p>  // //只有一行，可以使用 =&gt;<br>  // s.forEach((value)=&gt;print(value));</p>\n<p>  Map person = {<br>    “name”:”张三”,<br>    “age”:20<br>  };</p>\n<p>  person.forEach((key,value){<br>    print(“$key:$value”);<br>  });</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1, List 里面常用的属性和方法：</p>\n<p>常用属性：<br>length:              长度<br>reversed            反转<br>isEmpty            是否位空<br>isNotEmpty        是否不位空<br>常用方法：<br>add                添加<br>addAll            添加数组<br>indexOf            查找， 传入具体的值<br>remove            删除， 传入具体的值<br>removeAt            删除， 传入索引值<br>fillRange            修改<br>insert(index, value)  指定位置插入<br>insertAll(index, list)    指定位置插入List<br>toList()            其他类型转换成List<br>join()            List转换成字符串<br>split()            切割<br>forEach()            //循环，不带返回值<br>map()            //循环，带有返回值<br>where()            //循环， 返回符合条件的<br>any()            //循环，只要有一个满足条件，就返回true,  否则返回false<br>every()            //循环,   每一个都满足条件， 才返回true， 否则返回false</p>\n<p>2,<br> //forEach方法：</p>\n<p>  // List myList = [“桃子”,”西瓜”,”苹果”];<br>  // myList.forEach((value){<br>  //   print(“$value”);<br>  // });</p>\n<p>//map方法：<br>  // List myList = [1,3,4];<br>  // var newList = myList.map((value){<br>  //   return value * 2;<br>  // });<br>  // print(newList);           //(2, 6, 8)<br>  // print(newList.toList());  //[2, 6, 8]</p>\n<p>// //where方法：<br>//   List myList = [1,3,4,5,6,7,8];<br>//   var newList = myList.where((value){<br>//     return value &gt; 5;   //返回条件 &gt; 5的<br>//   });</p>\n<p>//   print(newList);   //(6, 7, 8)</p>\n<p>// //any方法：<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //只要集合里面有一个满足条件，就返回true<br>//   var f = myList.any((value){<br>//     return value &gt; 5;<br>//   });</p>\n<p>//   print(f); //true</p>\n<p>// // every方法：<br>//   //集合中每一个都要满足条件，返回true, 否则返回false<br>//   List myList = [1,3,4,5,6,7,8];</p>\n<p>//   //<br>//   var f = myList.every((value){<br>//     return value &gt; 5;<br>//   });<br>//   print(f);   //false</p>\n<p>//Set的遍历<br>  // var s = new Set();<br>  // s.add(“111”);<br>  // s.add(“222”);</p>\n<p>  // //只有一行，可以使用 =&gt;<br>  // s.forEach((value)=&gt;print(value));</p>\n<p>  Map person = {<br>    “name”:”张三”,<br>    “age”:20<br>  };</p>\n<p>  person.forEach((key,value){<br>    print(“$key:$value”);<br>  });</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"08-箭头函数，匿名方法，自执行方法，闭包","toc":true,"date":"2020-09-01T13:21:53.000Z","_content":"\n1，箭头函数， 方法体只有一句。\n  //箭头函数\n  List myList = [\"橘子\",\"苹果\",\"香蕉\"];\n\n  //常规写法\n  myList.forEach((value){\n    print(value);\n  });\n\n  //箭头函数, 只有一句代码\n  myList.forEach((value)=>print(value));\n\n\n  // 返回一个新的数组， 要求 >2 的 数字乘于2，其他的不变\n  List list = [2,1,4,6];\n  var newList = list.map((value)=> value > 2 ? value * 2 : value);\n  print(newList.toList());  // [2, 1, 8, 12]\n\n2， 匿名函数\n\n  //匿名函数\n  var b = (){\n    print(\"这是要执行的代码1\");\n    print(\"这是要执行的代码2\");\n  };\n  b();\n\n3， 自执行方法\n  //自执行方法 -- 不带参数\n  ((){\n    print(\"自执行方法体\");\n  })();\n\n  //自执行方法 -- 带参数\n  ((value){\n    print(\"传进来的数据:\"+value);\n  })(\"这是参数字符串\");\n\n4， 闭包\n\n>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。\n>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。\n\n想要实现的功能：\n\n>1, 常驻内存\n>2, 不污染全局\n\n产生了闭包， 闭包可以解决这个问题\n闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。\n\n闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。\n\n\n  //闭包\n  fn(){\n    var a = 123;  /** 不污染全局 */\n\n    return(){\n      a++;\n      print(a);\n    };\n  }\n\n  var b = fn();\n  b();\n  b();\n  b();\n\n  /**  执行结果:\n  124\n  125\n  126  \n   */\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包.md","raw":"---\ntitle: 08-箭头函数，匿名方法，自执行方法，闭包\ntoc: true\ndate: 2020-09-01 21:21:53\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1，箭头函数， 方法体只有一句。\n  //箭头函数\n  List myList = [\"橘子\",\"苹果\",\"香蕉\"];\n\n  //常规写法\n  myList.forEach((value){\n    print(value);\n  });\n\n  //箭头函数, 只有一句代码\n  myList.forEach((value)=>print(value));\n\n\n  // 返回一个新的数组， 要求 >2 的 数字乘于2，其他的不变\n  List list = [2,1,4,6];\n  var newList = list.map((value)=> value > 2 ? value * 2 : value);\n  print(newList.toList());  // [2, 1, 8, 12]\n\n2， 匿名函数\n\n  //匿名函数\n  var b = (){\n    print(\"这是要执行的代码1\");\n    print(\"这是要执行的代码2\");\n  };\n  b();\n\n3， 自执行方法\n  //自执行方法 -- 不带参数\n  ((){\n    print(\"自执行方法体\");\n  })();\n\n  //自执行方法 -- 带参数\n  ((value){\n    print(\"传进来的数据:\"+value);\n  })(\"这是参数字符串\");\n\n4， 闭包\n\n>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。\n>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。\n\n想要实现的功能：\n\n>1, 常驻内存\n>2, 不污染全局\n\n产生了闭包， 闭包可以解决这个问题\n闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。\n\n闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。\n\n\n  //闭包\n  fn(){\n    var a = 123;  /** 不污染全局 */\n\n    return(){\n      a++;\n      print(a);\n    };\n  }\n\n  var b = fn();\n  b();\n  b();\n  b();\n\n  /**  执行结果:\n  124\n  125\n  126  \n   */\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/08-箭头函数，匿名方法，自执行方法，闭包","published":1,"updated":"2020-09-01T13:34:52.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenfz0016u3s68xi1bz31","content":"<p>1，箭头函数， 方法体只有一句。<br>  //箭头函数<br>  List myList = [“橘子”,”苹果”,”香蕉”];</p>\n<p>  //常规写法<br>  myList.forEach((value){<br>    print(value);<br>  });</p>\n<p>  //箭头函数, 只有一句代码<br>  myList.forEach((value)=&gt;print(value));</p>\n<p>  // 返回一个新的数组， 要求 &gt;2 的 数字乘于2，其他的不变<br>  List list = [2,1,4,6];<br>  var newList = list.map((value)=&gt; value &gt; 2 ? value * 2 : value);<br>  print(newList.toList());  // [2, 1, 8, 12]</p>\n<p>2， 匿名函数</p>\n<p>  //匿名函数<br>  var b = (){<br>    print(“这是要执行的代码1”);<br>    print(“这是要执行的代码2”);<br>  };<br>  b();</p>\n<p>3， 自执行方法<br>  //自执行方法 – 不带参数<br>  ((){<br>    print(“自执行方法体”);<br>  })();</p>\n<p>  //自执行方法 – 带参数<br>  ((value){<br>    print(“传进来的数据:”+value);<br>  })(“这是参数字符串”);</p>\n<p>4， 闭包</p>\n<blockquote>\n<p>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。<br>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。</p>\n</blockquote>\n<p>想要实现的功能：</p>\n<blockquote>\n<p>1, 常驻内存<br>2, 不污染全局</p>\n</blockquote>\n<p>产生了闭包， 闭包可以解决这个问题<br>闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。</p>\n<p>闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。</p>\n<p>  //闭包<br>  fn(){<br>    var a = 123;  /** 不污染全局 */</p>\n<pre><code>return(){\n  a++;\n  print(a);\n};</code></pre><p>  }</p>\n<p>  var b = fn();<br>  b();<br>  b();<br>  b();</p>\n<p>  /**  执行结果:<br>  124<br>  125<br>  126<br>   */</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，箭头函数， 方法体只有一句。<br>  //箭头函数<br>  List myList = [“橘子”,”苹果”,”香蕉”];</p>\n<p>  //常规写法<br>  myList.forEach((value){<br>    print(value);<br>  });</p>\n<p>  //箭头函数, 只有一句代码<br>  myList.forEach((value)=&gt;print(value));</p>\n<p>  // 返回一个新的数组， 要求 &gt;2 的 数字乘于2，其他的不变<br>  List list = [2,1,4,6];<br>  var newList = list.map((value)=&gt; value &gt; 2 ? value * 2 : value);<br>  print(newList.toList());  // [2, 1, 8, 12]</p>\n<p>2， 匿名函数</p>\n<p>  //匿名函数<br>  var b = (){<br>    print(“这是要执行的代码1”);<br>    print(“这是要执行的代码2”);<br>  };<br>  b();</p>\n<p>3， 自执行方法<br>  //自执行方法 – 不带参数<br>  ((){<br>    print(“自执行方法体”);<br>  })();</p>\n<p>  //自执行方法 – 带参数<br>  ((value){<br>    print(“传进来的数据:”+value);<br>  })(“这是参数字符串”);</p>\n<p>4， 闭包</p>\n<blockquote>\n<p>1, 全局变量的特点：  全局变量常驻内存，全局变量污染全局。<br>2, 局部变量的特点： 不常驻内存，会被垃圾回收机制回收，不会污染全局。</p>\n</blockquote>\n<p>想要实现的功能：</p>\n<blockquote>\n<p>1, 常驻内存<br>2, 不污染全局</p>\n</blockquote>\n<p>产生了闭包， 闭包可以解决这个问题<br>闭包： 函数嵌套函数， 内部函数会调用外部函数的变量或参数， 变量或参数不会被系统回收。</p>\n<p>闭包的写法：  函数嵌套函数， 并 return 里面的函数，这样就形式了闭包。</p>\n<p>  //闭包<br>  fn(){<br>    var a = 123;  /** 不污染全局 */</p>\n<pre><code>return(){\n  a++;\n  print(a);\n};</code></pre><p>  }</p>\n<p>  var b = fn();<br>  b();<br>  b();<br>  b();</p>\n<p>  /**  执行结果:<br>  124<br>  125<br>  126<br>   */</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"10-类中静态成员，静态方法，操作符，以及继承","toc":true,"date":"2020-09-01T13:22:21.000Z","_content":"\n1， Dart中的静态成员：\n1，使用 static 关键字来实现类级别的变量和函数。\n2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。\n2，Dart中的对象操作符：\n？\t\t条件运算符\nas\t\t类型转换\nis \t\t类型判断\n..\t\t级联操作\n\nPerson p;\n// p.printInfo();// 报错\np?.printInfo(); //不会报错\n\n\nPerson p1 = new Person(\"张三\", 20);\n\n//常规写法\np1.name = \"李四\";\np1.age = 30;\np1.printInfo();\n\n//级联操作符\np1..name = \"李四\"\n    ..age = 25\n    ..printInfo();\n\n3，继承，调用父类构造函数，重写父类方法\nclass Person{\n  String name;\n  int age;\n  Person(this.name, this.age);\n\n  void printInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\nclass Web extends Person{\n  String sex;\n  Web(String name, int age, String sex) : super(name, age){\n    this.sex = sex;\n  }\n\n  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上\n  @override\n  void printInfo(){\n    print(\"姓名:${this.name} --- 年龄:${this.age} --- 性别:${this.sex}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承.md","raw":"---\ntitle: 10-类中静态成员，静态方法，操作符，以及继承\ntoc: true\ndate: 2020-09-01 21:22:21\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1， Dart中的静态成员：\n1，使用 static 关键字来实现类级别的变量和函数。\n2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。\n2，Dart中的对象操作符：\n？\t\t条件运算符\nas\t\t类型转换\nis \t\t类型判断\n..\t\t级联操作\n\nPerson p;\n// p.printInfo();// 报错\np?.printInfo(); //不会报错\n\n\nPerson p1 = new Person(\"张三\", 20);\n\n//常规写法\np1.name = \"李四\";\np1.age = 30;\np1.printInfo();\n\n//级联操作符\np1..name = \"李四\"\n    ..age = 25\n    ..printInfo();\n\n3，继承，调用父类构造函数，重写父类方法\nclass Person{\n  String name;\n  int age;\n  Person(this.name, this.age);\n\n  void printInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n}\n\nclass Web extends Person{\n  String sex;\n  Web(String name, int age, String sex) : super(name, age){\n    this.sex = sex;\n  }\n\n  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上\n  @override\n  void printInfo(){\n    print(\"姓名:${this.name} --- 年龄:${this.age} --- 性别:${this.sex}\");\n  }\n}\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/10-类中静态成员，静态方法，操作符，以及继承","published":1,"updated":"2020-09-01T13:34:58.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng00018u3s64gxaauu1","content":"<p>1， Dart中的静态成员：<br>1，使用 static 关键字来实现类级别的变量和函数。<br>2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。<br>2，Dart中的对象操作符：<br>？        条件运算符<br>as        类型转换<br>is         类型判断<br>..        级联操作</p>\n<p>Person p;<br>// p.printInfo();// 报错<br>p?.printInfo(); //不会报错</p>\n<p>Person p1 = new Person(“张三”, 20);</p>\n<p>//常规写法<br>p1.name = “李四”;<br>p1.age = 30;<br>p1.printInfo();</p>\n<p>//级联操作符<br>p1..name = “李四”<br>    ..age = 25<br>    ..printInfo();</p>\n<p>3，继承，调用父类构造函数，重写父类方法<br>class Person{<br>  String name;<br>  int age;<br>  Person(this.name, this.age);</p>\n<p>  void printInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>class Web extends Person{<br>  String sex;<br>  Web(String name, int age, String sex) : super(name, age){<br>    this.sex = sex;<br>  }</p>\n<p>  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上<br>  @override<br>  void printInfo(){<br>    print(“姓名:${this.name} — 年龄:${this.age} — 性别:${this.sex}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1， Dart中的静态成员：<br>1，使用 static 关键字来实现类级别的变量和函数。<br>2，静态方法不能访问非静态成员，非静态方法可以访问静态成员。<br>2，Dart中的对象操作符：<br>？        条件运算符<br>as        类型转换<br>is         类型判断<br>..        级联操作</p>\n<p>Person p;<br>// p.printInfo();// 报错<br>p?.printInfo(); //不会报错</p>\n<p>Person p1 = new Person(“张三”, 20);</p>\n<p>//常规写法<br>p1.name = “李四”;<br>p1.age = 30;<br>p1.printInfo();</p>\n<p>//级联操作符<br>p1..name = “李四”<br>    ..age = 25<br>    ..printInfo();</p>\n<p>3，继承，调用父类构造函数，重写父类方法<br>class Person{<br>  String name;<br>  int age;<br>  Person(this.name, this.age);</p>\n<p>  void printInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }<br>}</p>\n<p>class Web extends Person{<br>  String sex;<br>  Web(String name, int age, String sex) : super(name, age){<br>    this.sex = sex;<br>  }</p>\n<p>  //重写父类的方法，可以加上 @override, 也可以不加，但一般建议加上<br>  @override<br>  void printInfo(){<br>    print(“姓名:${this.name} — 年龄:${this.age} — 性别:${this.sex}”);<br>  }<br>}</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"11-Dart中抽象类","toc":true,"date":"2020-09-01T13:22:31.000Z","_content":"\nDart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。\n1，抽象类是通过abstract 关键字来定义\n2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。\n3，如果子类继承抽象类，，必须得实现里面的抽象方法。\n4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。\n5，抽象类不能被实例化，只有继承它的子类可以。\n\nextends 抽象类 和 implements抽象类的区别：\n1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。\n2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/11-Dart中抽象类.md","raw":"---\ntitle: 11-Dart中抽象类\ntoc: true\ndate: 2020-09-01 21:22:31\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\nDart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。\n1，抽象类是通过abstract 关键字来定义\n2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。\n3，如果子类继承抽象类，，必须得实现里面的抽象方法。\n4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。\n5，抽象类不能被实例化，只有继承它的子类可以。\n\nextends 抽象类 和 implements抽象类的区别：\n1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。\n2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/11-Dart中抽象类","published":1,"updated":"2020-09-01T13:35:01.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng10019u3s6cvcg0za4","content":"<p>Dart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。<br>1，抽象类是通过abstract 关键字来定义<br>2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。<br>3，如果子类继承抽象类，，必须得实现里面的抽象方法。<br>4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。<br>5，抽象类不能被实例化，只有继承它的子类可以。</p>\n<p>extends 抽象类 和 implements抽象类的区别：<br>1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。<br>2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Dart中抽象类： Dart抽象类主要用于定义标准， 子类可以继承抽象类（extends）,  也可以实现抽象类(implements)。<br>1，抽象类是通过abstract 关键字来定义<br>2，Dart中的抽象方法不能用abstract声明， Dart中没有方法体的方法我们称之为抽象方法。 抽象类中，也可以有普通方法。<br>3，如果子类继承抽象类，，必须得实现里面的抽象方法。<br>4，如果把抽象类当作接口实现的话，必须得实现抽象类里面的所有属性和方法。<br>5，抽象类不能被实例化，只有继承它的子类可以。</p>\n<p>extends 抽象类 和 implements抽象类的区别：<br>1， 如果要复用抽象类里面的方法，并且要用抽象方法约束子类的话，我们就用extends继承抽象类。<br>2， 如果只是把抽象类当作一个标准，我们就用implements实现抽象类。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"12-Dart中的mixins","toc":true,"date":"2020-09-01T13:22:40.000Z","_content":"\nmixins的中文意思是混入，就是在类中混入其他功能。\n在Dart中可以使用mixins实现类似多继承的功能\n\n因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：\n1，作为mixins 的类只能继承自object, 不能继承其他类。\n2，作为mixins的类不能有构造函数。\n3，一个类可以mixins多个mixins类。\n4，mixins绝不是继承，也不是接口，而是一种全新的特性。\n\n例子：\n\nclass Person{\n  String name;\n  int age;\n  Person(this.name,this.age);\n\n  void printUserInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n\n  void run(){\n    print(\"Person run\");\n  }\n}\n\nclass A{\n  void printA(){\n    print(\"printA\");\n  }\n\n  void run(){\n    print(\"A - Run\");\n  }\n}\n\nclass B{\n  void printB(){\n    print(\"printB\");\n  }\n\n  void run(){\n    print(\"B - Run\");\n  }\n}\n\nclass C extends Person with B,A{\n  C(String name, int age) : super(name, age);\n\n  void printC(){\n    print(\"printC\");\n  }\n}\n\n\n  // C c = new C();\n  // c.printA();\n  // c.printB();\n  // c.printC();\n\n  /** 打印结果:\nprintA\nprintB\nprintC\n   */\n\n  C c1 = new C(\"张三\", 20);\n  c1.run();\n  c1.printUserInfo();\n\n打印结果：\n\nA - Run\n张三 --- 20\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/12-Dart中的mixins.md","raw":"---\ntitle: 12-Dart中的mixins\ntoc: true\ndate: 2020-09-01 21:22:40\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\nmixins的中文意思是混入，就是在类中混入其他功能。\n在Dart中可以使用mixins实现类似多继承的功能\n\n因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：\n1，作为mixins 的类只能继承自object, 不能继承其他类。\n2，作为mixins的类不能有构造函数。\n3，一个类可以mixins多个mixins类。\n4，mixins绝不是继承，也不是接口，而是一种全新的特性。\n\n例子：\n\nclass Person{\n  String name;\n  int age;\n  Person(this.name,this.age);\n\n  void printUserInfo(){\n    print(\"${this.name} --- ${this.age}\");\n  }\n\n  void run(){\n    print(\"Person run\");\n  }\n}\n\nclass A{\n  void printA(){\n    print(\"printA\");\n  }\n\n  void run(){\n    print(\"A - Run\");\n  }\n}\n\nclass B{\n  void printB(){\n    print(\"printB\");\n  }\n\n  void run(){\n    print(\"B - Run\");\n  }\n}\n\nclass C extends Person with B,A{\n  C(String name, int age) : super(name, age);\n\n  void printC(){\n    print(\"printC\");\n  }\n}\n\n\n  // C c = new C();\n  // c.printA();\n  // c.printB();\n  // c.printC();\n\n  /** 打印结果:\nprintA\nprintB\nprintC\n   */\n\n  C c1 = new C(\"张三\", 20);\n  c1.run();\n  c1.printUserInfo();\n\n打印结果：\n\nA - Run\n张三 --- 20\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/12-Dart中的mixins","published":1,"updated":"2020-09-01T13:35:03.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng3001bu3s660iab1gp","content":"<p>mixins的中文意思是混入，就是在类中混入其他功能。<br>在Dart中可以使用mixins实现类似多继承的功能</p>\n<p>因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：<br>1，作为mixins 的类只能继承自object, 不能继承其他类。<br>2，作为mixins的类不能有构造函数。<br>3，一个类可以mixins多个mixins类。<br>4，mixins绝不是继承，也不是接口，而是一种全新的特性。</p>\n<p>例子：</p>\n<p>class Person{<br>  String name;<br>  int age;<br>  Person(this.name,this.age);</p>\n<p>  void printUserInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }</p>\n<p>  void run(){<br>    print(“Person run”);<br>  }<br>}</p>\n<p>class A{<br>  void printA(){<br>    print(“printA”);<br>  }</p>\n<p>  void run(){<br>    print(“A - Run”);<br>  }<br>}</p>\n<p>class B{<br>  void printB(){<br>    print(“printB”);<br>  }</p>\n<p>  void run(){<br>    print(“B - Run”);<br>  }<br>}</p>\n<p>class C extends Person with B,A{<br>  C(String name, int age) : super(name, age);</p>\n<p>  void printC(){<br>    print(“printC”);<br>  }<br>}</p>\n<p>  // C c = new C();<br>  // c.printA();<br>  // c.printB();<br>  // c.printC();</p>\n<p>  /** 打印结果:<br>printA<br>printB<br>printC<br>   */</p>\n<p>  C c1 = new C(“张三”, 20);<br>  c1.run();<br>  c1.printUserInfo();</p>\n<p>打印结果：</p>\n<p>A - Run<br>张三 — 20</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>mixins的中文意思是混入，就是在类中混入其他功能。<br>在Dart中可以使用mixins实现类似多继承的功能</p>\n<p>因为mixins使用的条件，虽则Dart版本一直在改变，这里讲 Dart2.x中使用mixins的条件：<br>1，作为mixins 的类只能继承自object, 不能继承其他类。<br>2，作为mixins的类不能有构造函数。<br>3，一个类可以mixins多个mixins类。<br>4，mixins绝不是继承，也不是接口，而是一种全新的特性。</p>\n<p>例子：</p>\n<p>class Person{<br>  String name;<br>  int age;<br>  Person(this.name,this.age);</p>\n<p>  void printUserInfo(){<br>    print(“${this.name} — ${this.age}”);<br>  }</p>\n<p>  void run(){<br>    print(“Person run”);<br>  }<br>}</p>\n<p>class A{<br>  void printA(){<br>    print(“printA”);<br>  }</p>\n<p>  void run(){<br>    print(“A - Run”);<br>  }<br>}</p>\n<p>class B{<br>  void printB(){<br>    print(“printB”);<br>  }</p>\n<p>  void run(){<br>    print(“B - Run”);<br>  }<br>}</p>\n<p>class C extends Person with B,A{<br>  C(String name, int age) : super(name, age);</p>\n<p>  void printC(){<br>    print(“printC”);<br>  }<br>}</p>\n<p>  // C c = new C();<br>  // c.printA();<br>  // c.printB();<br>  // c.printC();</p>\n<p>  /** 打印结果:<br>printA<br>printB<br>printC<br>   */</p>\n<p>  C c1 = new C(“张三”, 20);<br>  c1.run();<br>  c1.printUserInfo();</p>\n<p>打印结果：</p>\n<p>A - Run<br>张三 — 20</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"13-泛型方法，泛型类，泛型接口","toc":true,"date":"2020-09-01T13:22:48.000Z","_content":"\n通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)\n\n1, 泛型方法\nT getData<T>(T value){\n  return value;\n}\n\n//调用\nprint(getData(\"你好\"));\nprint(getData(2));\nprint(getData<String>(\"哈哈哈\"));\nprint(getData<int>(2));\n\n2，泛型类\nclass PrintClass<T>{\n  List list = new List<T>();\n\n  void add(T value){\n    this.list.add(value);\n  }\n\n  void printInfo(){\n    for(var i = 0;i<this.list.length;i++){\n      print(this.list[i]);\n    }\n  }\n}\n\n调用：\nPrintClass<String> p = new PrintClass<String>();\np.add(\"你好\");\np.add(\"Dart\");\np.printInfo();\n\n\n3，泛型接口\n\nabstract class Cache<T>{\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass FileCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是文件缓存，把key=${key}, value=${value} 写入到了文件中\");\n  }\n}\n\nclass MemoryCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是内存缓存, 把key=${key}, value=${value} 写入到了内存中\");\n  }\n}\n\n调用：\nFileCache<String> f = new FileCache<String>();\nf.setByKey(\"index\", \"索引值\");\nf.setByKey(\"index1\", 2);  //这是错误写法\n\nMemoryCache<Map> m = new MemoryCache<Map>();\nm.setByKey(\"index\", {\"name\":\"张三\",\"age\":20});\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/13-泛型方法，泛型类，泛型接口.md","raw":"---\ntitle: 13-泛型方法，泛型类，泛型接口\ntoc: true\ndate: 2020-09-01 21:22:48\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)\n\n1, 泛型方法\nT getData<T>(T value){\n  return value;\n}\n\n//调用\nprint(getData(\"你好\"));\nprint(getData(2));\nprint(getData<String>(\"哈哈哈\"));\nprint(getData<int>(2));\n\n2，泛型类\nclass PrintClass<T>{\n  List list = new List<T>();\n\n  void add(T value){\n    this.list.add(value);\n  }\n\n  void printInfo(){\n    for(var i = 0;i<this.list.length;i++){\n      print(this.list[i]);\n    }\n  }\n}\n\n调用：\nPrintClass<String> p = new PrintClass<String>();\np.add(\"你好\");\np.add(\"Dart\");\np.printInfo();\n\n\n3，泛型接口\n\nabstract class Cache<T>{\n  getByKey(String key);\n  void setByKey(String key, T value);\n}\n\nclass FileCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是文件缓存，把key=${key}, value=${value} 写入到了文件中\");\n  }\n}\n\nclass MemoryCache<T> implements Cache<T>{\n  @override\n  getByKey(String key) {\n    return null;\n  }\n\n  @override\n  void setByKey(String key, T value) {\n    print(\"这是内存缓存, 把key=${key}, value=${value} 写入到了内存中\");\n  }\n}\n\n调用：\nFileCache<String> f = new FileCache<String>();\nf.setByKey(\"index\", \"索引值\");\nf.setByKey(\"index1\", 2);  //这是错误写法\n\nMemoryCache<Map> m = new MemoryCache<Map>();\nm.setByKey(\"index\", {\"name\":\"张三\",\"age\":20});\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/13-泛型方法，泛型类，泛型接口","published":1,"updated":"2020-09-01T13:35:06.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng4001cu3s60jl1aia6","content":"<p>通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)</p>\n<p>1, 泛型方法<br>T getData<T>(T value){<br>  return value;<br>}</T></p>\n<p>//调用<br>print(getData(“你好”));<br>print(getData(2));<br>print(getData<String>(“哈哈哈”));<br>print(getData<int>(2));</int></String></p>\n<p>2，泛型类<br>class PrintClass<T>{<br>  List list = new List<T>();</T></T></p>\n<p>  void add(T value){<br>    this.list.add(value);<br>  }</p>\n<p>  void printInfo(){<br>    for(var i = 0;i&lt;this.list.length;i++){<br>      print(this.list[i]);<br>    }<br>  }<br>}</p>\n<p>调用：<br>PrintClass<String> p = new PrintClass<String>();<br>p.add(“你好”);<br>p.add(“Dart”);<br>p.printInfo();</String></String></p>\n<p>3，泛型接口</p>\n<p>abstract class Cache<T>{<br>  getByKey(String key);<br>  void setByKey(String key, T value);<br>}</T></p>\n<p>class FileCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是文件缓存，把key=${key}, value=${value} 写入到了文件中”);<br>  }<br>}</p>\n<p>class MemoryCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是内存缓存, 把key=${key}, value=${value} 写入到了内存中”);<br>  }<br>}</p>\n<p>调用：<br>FileCache<String> f = new FileCache<String>();<br>f.setByKey(“index”, “索引值”);<br>f.setByKey(“index1”, 2);  //这是错误写法</String></String></p>\n<p>MemoryCache<Map> m = new MemoryCache<Map>();<br>m.setByKey(“index”, {“name”:”张三”,”age”:20});</Map></Map></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>通俗理解： 泛型就是解决 类，接口，方法， 的复用性， 以及对不特定数据类型的支持(类型校验)</p>\n<p>1, 泛型方法<br>T getData<T>(T value){<br>  return value;<br>}</T></p>\n<p>//调用<br>print(getData(“你好”));<br>print(getData(2));<br>print(getData<String>(“哈哈哈”));<br>print(getData<int>(2));</int></String></p>\n<p>2，泛型类<br>class PrintClass<T>{<br>  List list = new List<T>();</T></T></p>\n<p>  void add(T value){<br>    this.list.add(value);<br>  }</p>\n<p>  void printInfo(){<br>    for(var i = 0;i&lt;this.list.length;i++){<br>      print(this.list[i]);<br>    }<br>  }<br>}</p>\n<p>调用：<br>PrintClass<String> p = new PrintClass<String>();<br>p.add(“你好”);<br>p.add(“Dart”);<br>p.printInfo();</String></String></p>\n<p>3，泛型接口</p>\n<p>abstract class Cache<T>{<br>  getByKey(String key);<br>  void setByKey(String key, T value);<br>}</T></p>\n<p>class FileCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是文件缓存，把key=${key}, value=${value} 写入到了文件中”);<br>  }<br>}</p>\n<p>class MemoryCache<T> implements Cache<T>{<br>  @override<br>  getByKey(String key) {<br>    return null;<br>  }</T></T></p>\n<p>  @override<br>  void setByKey(String key, T value) {<br>    print(“这是内存缓存, 把key=${key}, value=${value} 写入到了内存中”);<br>  }<br>}</p>\n<p>调用：<br>FileCache<String> f = new FileCache<String>();<br>f.setByKey(“index”, “索引值”);<br>f.setByKey(“index1”, 2);  //这是错误写法</String></String></p>\n<p>MemoryCache<Map> m = new MemoryCache<Map>();<br>m.setByKey(“index”, {“name”:”张三”,”age”:20});</Map></Map></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"14-Dart中自定义库，系统库，第三方库","toc":true,"date":"2020-09-01T13:22:58.000Z","_content":"\n1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。\n2，引入系统库\n\n引入 math库\nimport 'dart:math';\n\n//求最小数和最大数\nprint(min(10,20));\nprint(max(10,20));\n\n引入io和convert库\nimport 'dart:io';\nimport 'dart:convert';\n\n\n/**\n * async 是让方法变成异步\n * await 是等待异步方法执行完成\n */\ngetDataFromZhiHuAPI() async{\n  //1. 创建HttpClient对象\n  var httpClient = new HttpClient();\n  //2. 创建Uri对象 http://news-at.zhihu.com/api/3/stories/latest\n  var uri = new Uri.http(\"news-at.zhihu.com\", \"/api/3/stories/latest\");\n  //3. 发起请求，等待结束\n  var request = await httpClient.getUrl(uri);\n  //4. 关闭请求，等待响应\n  var response = await request.close();\n  //5. 解码相应的内容\n  return response.transform(utf8.decoder).join();\n}\n\n调用方法：\nvar result = await getDataFromZhiHuAPI();\nprint(result);\n\n\n3，导入第三方库\npub包管理系统\n  1. 从下面网址找到要用的库\nhttps://pub.dev/packages\nhttps://pub.flutter-io.cn/packages\nhttps://pub.dartlang.org/flutter\n\n2. 创建一个pubspec.yaml 文件，内容如下：\n\nname: thisAPubSettingFile\ndescription : A new flutter module project\ndependencies:\n    \thttp: ^0.12.0+4\n   \tdate_format: ^1.0.8\n3. 配置 dependencies\n4. 运行 pub get 获取远程库到本地\n5. 看文档引入库使用。\n\n使用：\nimport 'dart:convert' as convert;\nimport 'package:http/http.dart' as http;\n\nvoid main(List<String> args) async {\n\n  var url = 'http://news-at.zhihu.com/api/3/stories/latest';\n\n  var response = await http.get(url);\n  if (response.statusCode == 200) {\n    var jsonResponse = convert.jsonDecode(response.body);\n    print(jsonResponse);\n  } else {\n    print('Request failed with status: ${response.statusCode}.');\n  }\n}\n\n4. Dart库冲突\n多个文件中，有相同的类，那么引入的时候，怎么办呢？\n使用 as 关键字指定, \n例如： Person1.dart文件和Person2.dart中都有 Person类\n\nimport 'lib/Person1.dart';\nimport 'lib/Person2.dart' as lib;\n\n使用：\nPerson p1 = new Person(\"张三\",20); //这里的Person使用的Person1.dart文件中的Person类\n\nlib.Person p2 = new lib.Person(\"李四\",30);  //这里的Person类就是Person2.dart文件的Person类\n\n5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？\n\n解决这种问题，有两种模式：\n模式一： 只导入需要的部分，使用 show 关键字，例如：\nimport \"package:lib1/lib1.dart\" show foo;   //只引用foo\n\n模式二：隐藏不需要的部分，使用hide关键字， 例如：\nimport \"package:lib2/lib12.dart\" hide  foo;  //隐藏foo, 其他的都引用\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/Dart/14-Dart中自定义库，系统库，第三方库.md","raw":"---\ntitle: 14-Dart中自定义库，系统库，第三方库\ntoc: true\ndate: 2020-09-01 21:22:58\ntags:\ncategories:\n- flutter\n- Dart语法\n---\n\n1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。\n2，引入系统库\n\n引入 math库\nimport 'dart:math';\n\n//求最小数和最大数\nprint(min(10,20));\nprint(max(10,20));\n\n引入io和convert库\nimport 'dart:io';\nimport 'dart:convert';\n\n\n/**\n * async 是让方法变成异步\n * await 是等待异步方法执行完成\n */\ngetDataFromZhiHuAPI() async{\n  //1. 创建HttpClient对象\n  var httpClient = new HttpClient();\n  //2. 创建Uri对象 http://news-at.zhihu.com/api/3/stories/latest\n  var uri = new Uri.http(\"news-at.zhihu.com\", \"/api/3/stories/latest\");\n  //3. 发起请求，等待结束\n  var request = await httpClient.getUrl(uri);\n  //4. 关闭请求，等待响应\n  var response = await request.close();\n  //5. 解码相应的内容\n  return response.transform(utf8.decoder).join();\n}\n\n调用方法：\nvar result = await getDataFromZhiHuAPI();\nprint(result);\n\n\n3，导入第三方库\npub包管理系统\n  1. 从下面网址找到要用的库\nhttps://pub.dev/packages\nhttps://pub.flutter-io.cn/packages\nhttps://pub.dartlang.org/flutter\n\n2. 创建一个pubspec.yaml 文件，内容如下：\n\nname: thisAPubSettingFile\ndescription : A new flutter module project\ndependencies:\n    \thttp: ^0.12.0+4\n   \tdate_format: ^1.0.8\n3. 配置 dependencies\n4. 运行 pub get 获取远程库到本地\n5. 看文档引入库使用。\n\n使用：\nimport 'dart:convert' as convert;\nimport 'package:http/http.dart' as http;\n\nvoid main(List<String> args) async {\n\n  var url = 'http://news-at.zhihu.com/api/3/stories/latest';\n\n  var response = await http.get(url);\n  if (response.statusCode == 200) {\n    var jsonResponse = convert.jsonDecode(response.body);\n    print(jsonResponse);\n  } else {\n    print('Request failed with status: ${response.statusCode}.');\n  }\n}\n\n4. Dart库冲突\n多个文件中，有相同的类，那么引入的时候，怎么办呢？\n使用 as 关键字指定, \n例如： Person1.dart文件和Person2.dart中都有 Person类\n\nimport 'lib/Person1.dart';\nimport 'lib/Person2.dart' as lib;\n\n使用：\nPerson p1 = new Person(\"张三\",20); //这里的Person使用的Person1.dart文件中的Person类\n\nlib.Person p2 = new lib.Person(\"李四\",30);  //这里的Person类就是Person2.dart文件的Person类\n\n5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？\n\n解决这种问题，有两种模式：\n模式一： 只导入需要的部分，使用 show 关键字，例如：\nimport \"package:lib1/lib1.dart\" show foo;   //只引用foo\n\n模式二：隐藏不需要的部分，使用hide关键字， 例如：\nimport \"package:lib2/lib12.dart\" hide  foo;  //隐藏foo, 其他的都引用\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/Dart/14-Dart中自定义库，系统库，第三方库","published":1,"updated":"2020-09-01T13:35:09.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng5001fu3s6h25j54sv","content":"<p>1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。<br>2，引入系统库</p>\n<p>引入 math库<br>import ‘dart:math’;</p>\n<p>//求最小数和最大数<br>print(min(10,20));<br>print(max(10,20));</p>\n<p>引入io和convert库<br>import ‘dart:io’;<br>import ‘dart:convert’;</p>\n<p>/**</p>\n<ul>\n<li>async 是让方法变成异步</li>\n<li>await 是等待异步方法执行完成</li>\n<li>/<br>getDataFromZhiHuAPI() async{<br>//1. 创建HttpClient对象<br>var httpClient = new HttpClient();<br>//2. 创建Uri对象 <a href=\"http://news-at.zhihu.com/api/3/stories/latest\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest</a><br>var uri = new Uri.http(“news-at.zhihu.com”, “/api/3/stories/latest”);<br>//3. 发起请求，等待结束<br>var request = await httpClient.getUrl(uri);<br>//4. 关闭请求，等待响应<br>var response = await request.close();<br>//5. 解码相应的内容<br>return response.transform(utf8.decoder).join();<br>}</li>\n</ul>\n<p>调用方法：<br>var result = await getDataFromZhiHuAPI();<br>print(result);</p>\n<p>3，导入第三方库<br>pub包管理系统</p>\n<ol>\n<li>从下面网址找到要用的库<br><a href=\"https://pub.dev/packages\" target=\"_blank\" rel=\"noopener\">https://pub.dev/packages</a><br><a href=\"https://pub.flutter-io.cn/packages\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/packages</a><br><a href=\"https://pub.dartlang.org/flutter\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/flutter</a></li>\n</ol>\n<ol start=\"2\">\n<li>创建一个pubspec.yaml 文件，内容如下：</li>\n</ol>\n<p>name: thisAPubSettingFile<br>description : A new flutter module project<br>dependencies:<br>        http: ^0.12.0+4<br>       date_format: ^1.0.8<br>3. 配置 dependencies<br>4. 运行 pub get 获取远程库到本地<br>5. 看文档引入库使用。</p>\n<p>使用：<br>import ‘dart:convert’ as convert;<br>import ‘package:http/http.dart’ as http;</p>\n<p>void main(List<String> args) async {</String></p>\n<p>  var url = ‘<a href=\"http://news-at.zhihu.com/api/3/stories/latest&#39;\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest&#39;</a>;</p>\n<p>  var response = await http.get(url);<br>  if (response.statusCode == 200) {<br>    var jsonResponse = convert.jsonDecode(response.body);<br>    print(jsonResponse);<br>  } else {<br>    print(‘Request failed with status: ${response.statusCode}.’);<br>  }<br>}</p>\n<ol start=\"4\">\n<li>Dart库冲突<br>多个文件中，有相同的类，那么引入的时候，怎么办呢？<br>使用 as 关键字指定,<br>例如： Person1.dart文件和Person2.dart中都有 Person类</li>\n</ol>\n<p>import ‘lib/Person1.dart’;<br>import ‘lib/Person2.dart’ as lib;</p>\n<p>使用：<br>Person p1 = new Person(“张三”,20); //这里的Person使用的Person1.dart文件中的Person类</p>\n<p>lib.Person p2 = new lib.Person(“李四”,30);  //这里的Person类就是Person2.dart文件的Person类</p>\n<p>5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？</p>\n<p>解决这种问题，有两种模式：<br>模式一： 只导入需要的部分，使用 show 关键字，例如：<br>import “package:lib1/lib1.dart” show foo;   //只引用foo</p>\n<p>模式二：隐藏不需要的部分，使用hide关键字， 例如：<br>import “package:lib2/lib12.dart” hide  foo;  //隐藏foo, 其他的都引用</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>1，自定义库，将 自定义类Person单独抽出去，放到一个单独的文件中，然后通过import的方式引入，这个Person.dart就是自定义的库。<br>2，引入系统库</p>\n<p>引入 math库<br>import ‘dart:math’;</p>\n<p>//求最小数和最大数<br>print(min(10,20));<br>print(max(10,20));</p>\n<p>引入io和convert库<br>import ‘dart:io’;<br>import ‘dart:convert’;</p>\n<p>/**</p>\n<ul>\n<li>async 是让方法变成异步</li>\n<li>await 是等待异步方法执行完成</li>\n<li>/<br>getDataFromZhiHuAPI() async{<br>//1. 创建HttpClient对象<br>var httpClient = new HttpClient();<br>//2. 创建Uri对象 <a href=\"http://news-at.zhihu.com/api/3/stories/latest\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest</a><br>var uri = new Uri.http(“news-at.zhihu.com”, “/api/3/stories/latest”);<br>//3. 发起请求，等待结束<br>var request = await httpClient.getUrl(uri);<br>//4. 关闭请求，等待响应<br>var response = await request.close();<br>//5. 解码相应的内容<br>return response.transform(utf8.decoder).join();<br>}</li>\n</ul>\n<p>调用方法：<br>var result = await getDataFromZhiHuAPI();<br>print(result);</p>\n<p>3，导入第三方库<br>pub包管理系统</p>\n<ol>\n<li>从下面网址找到要用的库<br><a href=\"https://pub.dev/packages\" target=\"_blank\" rel=\"noopener\">https://pub.dev/packages</a><br><a href=\"https://pub.flutter-io.cn/packages\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/packages</a><br><a href=\"https://pub.dartlang.org/flutter\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/flutter</a></li>\n</ol>\n<ol start=\"2\">\n<li>创建一个pubspec.yaml 文件，内容如下：</li>\n</ol>\n<p>name: thisAPubSettingFile<br>description : A new flutter module project<br>dependencies:<br>        http: ^0.12.0+4<br>       date_format: ^1.0.8<br>3. 配置 dependencies<br>4. 运行 pub get 获取远程库到本地<br>5. 看文档引入库使用。</p>\n<p>使用：<br>import ‘dart:convert’ as convert;<br>import ‘package:http/http.dart’ as http;</p>\n<p>void main(List<String> args) async {</String></p>\n<p>  var url = ‘<a href=\"http://news-at.zhihu.com/api/3/stories/latest&#39;\" target=\"_blank\" rel=\"noopener\">http://news-at.zhihu.com/api/3/stories/latest&#39;</a>;</p>\n<p>  var response = await http.get(url);<br>  if (response.statusCode == 200) {<br>    var jsonResponse = convert.jsonDecode(response.body);<br>    print(jsonResponse);<br>  } else {<br>    print(‘Request failed with status: ${response.statusCode}.’);<br>  }<br>}</p>\n<ol start=\"4\">\n<li>Dart库冲突<br>多个文件中，有相同的类，那么引入的时候，怎么办呢？<br>使用 as 关键字指定,<br>例如： Person1.dart文件和Person2.dart中都有 Person类</li>\n</ol>\n<p>import ‘lib/Person1.dart’;<br>import ‘lib/Person2.dart’ as lib;</p>\n<p>使用：<br>Person p1 = new Person(“张三”,20); //这里的Person使用的Person1.dart文件中的Person类</p>\n<p>lib.Person p2 = new lib.Person(“李四”,30);  //这里的Person类就是Person2.dart文件的Person类</p>\n<p>5，如果一个类库有很多方法，我们只需要其中的一个，或者多个，用不到的就不用引用，但是，它们都是在一个文件中，怎么办呢？</p>\n<p>解决这种问题，有两种模式：<br>模式一： 只导入需要的部分，使用 show 关键字，例如：<br>import “package:lib1/lib1.dart” show foo;   //只引用foo</p>\n<p>模式二：隐藏不需要的部分，使用hide关键字， 例如：<br>import “package:lib2/lib12.dart” hide  foo;  //隐藏foo, 其他的都引用</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"02-flutter之环境搭建","toc":true,"date":"2020-09-02T12:36:34.000Z","_content":"\nHello Flutter\n\n这个章节我们学习如何安装Flutter，并且写第一个Flutter程序。\n\n之后在iOS模拟器和Android模拟器上分别跑起来我们的应用程序（之后我会讲解如何跑在真机上）。\n\n当然，这个程序中的很多代码你可能并不是特别理解，里面涉及到一些dart知识，也涉及到一些flutter的东西。这些都没有关系，我们的目的是把这个工程跑起来，就表示你的环境是OK的。\n\n\n# 一. 环境搭建\n环境搭建有点麻烦，特别是Android环境的安装，大家耐心安装，有任何问题可以添加我的微信 372623326\n\n### 1.1. 操作系统选择\n\n很多同学会问，学习Flutter到底使用什么操作系统呢？\n\n学习阶段： Windows或者macOS（苹果操作系统）都是可以的\n\n开发阶段： 一般需要使用macOS，因为我们需要针对iOS进行调试，通常方便起见还是选择macOS\n\n疑问： 如果以后做Flutter开发没有macOS怎么办？\n\n这个可以完全放心，使用Flutter开发的公司必然会给你配备macOS的\nFlutter可以在Windows上学习，也可以在macOS上，因为我之后的课程要进行Android和iOS的调试，所以我当前使用的环境是macOS的。\n\n这里我再次强调，学习阶段使用Windows是没有任何问题，我之前也在Windows上写过很多Flutter的东西！\n\n在安装的过程中，我也会说到很多Windows安装的注意事项，大家按照步骤一步步完成即可。\n\n### 1.2. 安装Flutter SDK\n使用Flutter开发，首先我们需要安装一个Flutter的SDK。\n\n下载Flutter的SDK\n\n来到Flutter的官网网站，选择最新稳定的Flutter SDK的版本\n\n网站地址：flutter.dev/docs/develo…\n\n选择自己的操作系统和最新稳定的版本（Stable版本）（我当前最新稳定的版本是1.7.8）\n\n安装Flutter\n\n* 1.解压下载好的Flutter SDK\n\n\t这个在Windows和macOS都是一样的（选择一个自己想要安装的目录）\n\t但是在macOS中，我通常会讲flutter目录拖入到应用程序中，将其当作我的一个应用（个人习惯而已）\n\n![图1](02-flutter之环境搭建/02_001.png)\n\n\n* 2.配置Flutter的环境变量\n\n因为我们之后需要在命令行执行Flutter的命令，所以需要配置环境变量\nmacOS或者Linux系统，需要编辑~/.bash_profile文件\nexport PATH=$PATH:/Applications/flutter/bin\n\nWindows用户将所在路径添加到环境变量的Path下\n\nWindows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量\n\n找到Path，在其中添加Flutter SDK目录下bin目录\n\n在终端中执行flutter --version，出现如下内容，说明安装flutter成功\n\n![图1](02-flutter之环境搭建/02_002.png)\n\n配置镜像\n\nflutter项目会依赖一些东西，在国内下载这些依赖会有一些慢，所以我们可以将它们的安装源换成国内的（也就是设置国内的镜像）\n\nmacOS或者Linux操作系统，依然是编辑~/.bash_profile文件\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\n\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter\n```\n\nWindows用户还是需要修改环境变量\n\nWindows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量\n\n新建 变量 PUB_HOSTED_URL，其值为https://pub.flutter-io.cn\n\n新建 变量 FLUTTER_STORAGE_BASE_URL， 其值为https://storage.flutter-io.cn\n\n注意： 此镜像为临时镜像，并不能保证一直可用，大家可以参考详情请参考 Using Flutter in China 以获得有关镜像服务器的最新动态。\n\n### 1.3. 配置iOS环境\n如果想为Flutter配置iOS开发环境，需要在我们的电脑上安装一个Xcode（此部分Windows电脑忽略）\nXcode是苹果公司的iOS和macOS的IDE，进行过iOS开发的童鞋应该都非常熟悉\n\n如何安装Xcode呢？ 常见的是两种\n\n- 1.直接在App Store上搜索Xcode，找到安装即可\n这种安装方式有一个缺点，安装的一定是最新版本的（当然是用最新版本的最好）\n但是最新版本的Xcode会对macOS系统有一定的要求，所以可能还要设计到系统升级\n如果不希望系统升级，可以选择第二种方式\n\n- 2.第二种方式是安装自己想要的Xcode的版本，需要手动去下载\n\n进入developer.apple.com/download/mo…页面\n\n登录自己的Apple ID\n\n在搜索框输入Xcode，回车搜索，找到各种版本Xcode下载即可\n\n打开安装好的Xcode，可能打开速度有点慢：不着急，慢慢来\n\n选择自己想用的iOS模拟器\n\n打开Xcode，右上角点击Xcode - Open Developer Tools - Simulator\n\n![图1](02-flutter之环境搭建/02_003.png)\n\n这个时候会打开一个默认的iOS模拟器，也可以在Hardware - Device - 系统版本中选择自己想要测试的模拟器\n\n![图1](02-flutter之环境搭建/02_004.png)\n\n\n这个时候，我们就能看到如下模拟器了\n\n![图1](02-flutter之环境搭建/02_005.png)\n\n这个时候我们执行一下如下终端命令：\n\nflutter doctor\n\n看到如下有一个\n\n![图1](02-flutter之环境搭建/02_006.png)\n\n\n### 1.4. 配置Android环境\n\n如果想为Flutter配置Android开发环境，需要在我们的电脑上安装一个Android Studio\n\n- Android Studio是基于IntelliJ IDEA的、Google 官方的 Android 应用集成开发环境 (IDE)。\nAndroid Studio的下载\n- 官网地址：developer.android.com/studio/?utm…\n- 直接在官方下载即可\n- 安装直接双击安装即可\nAndroid的环境配置\n\n打开Android Studio，会问我们是否要设置代理，这是因为下载Android SDK等在国内不好下载\n- 至于如何设置代理，这里就不再讲解了~~~\n- 最好要设置代理哦，不然估计会被气死~~~\n\n![图1](02-flutter之环境搭建/02_007.png)\n\n之后各种下一步，就会帮我们安装SDK等相关需要使用的内容\n\n![图1](02-flutter之环境搭建/02_008.png)\n\n安装好后，点击Finish即可。\n\n\n创建Android模拟器\n安装好后，我们就可以去创建模拟器：选择Configure - AVD Manger\n\n![图1](02-flutter之环境搭建/02_009.png)\n\n选择create virtual device\n\n![图1](02-flutter之环境搭建/02_010.png)\n\n选择一个你想用的设备\n\n![图1](02-flutter之环境搭建/02_011.png)\n\n选择Android的版本（这里我没有选择Q版本，它目前还是一个bata版本），点击download\n\n下一个界面，点击accept - next就可以了\n\n![图1](02-flutter之环境搭建/02_012.png)\n\n\n接着下一步，给自己的模拟器起个名字\n\n![图1](02-flutter之环境搭建/02_013.png)\n\n启动Android模拟器\n\n![图1](02-flutter之环境搭建/02_014.png)\n\n这个时候我们执行一下如下终端命令：\n\nflutter doctor\n\n看到如下有两个可用的设备\n\n![图1](02-flutter之环境搭建/02_015.png)\n\n\n### 1.5. 开发工具的选择\n\n官方推荐两个工具来开发Flutter：Android Studio 和 VSCode，我们选择哪一个呢？\n\n对于有选择恐惧症的人，还真不是特别好选择，所以下面我会分别说出它们的优缺点，选择权在你\n\n最后我也会给出我的选择\n\n**VSCode优缺点**\n\nVSCode是最近非常非常流行的开发工具，并且非常好用！（我之前在微博感慨微软的东西最近两年越来越好用，其中之一就是VSCode）\n\n而且VSCode最近已经有取代WebStorm作为前端首选开发工具的趋势了\n\nVSCode的优点：\n\n- VSCode其实并不能称之为是一个IDE，它只是一个编辑器而已。\n- 所以它非常的轻量级，不会占用你非常大的内存消耗，而且启动速度等都非常快，对于电脑配置不是特别高的同学，肯定是一个非常好的选择。\n- 并且你可以在VSCode上安装各种各样的插件来满足自己的开发需求。\n\nVSCode的缺点：\n\n- 很多Android Studio包括的方便操作没有，比如点击启动、热更新点击等；\n- 而且在某些情况下会出现一些问题；\n- 比如之前我在使用的过程中，有时候热更新不及时常常看不到效果，必须重启；\n- 比如某些情况下，没有代码提示不够灵敏；\n\n\n使用须知：\n\n使用VSCode开发Flutter我们需要安装两个插件：Flutter和Dart\n\n**Android Studio优缺点**\n\n对于进行过Android开发或者使用过Webstorm、IDEA、PHPStorm等的同学，使用Android Studio肯定是没有任何问题的\nAndroid Studio的优点：\n\n- 集成开发环境（IDE）不用多说，你需要的功能基本都有\n- 而且上面说的VSCode存在的问题，在Android Studio中基本不会出现\n\nAndroid Studio的缺点：\n\n- 一个字：重\n- 无论是IDE本身，还是使用Android Studio启动项目，都会相对慢一些\n- 占据的计算机资源也很多，所以电脑配置较低是会出现卡顿\n\n使用须知：\n\n使用Android Studio开发Flutter我们需要安装两个插件：Flutter和Dart\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/02-flutter之环境搭建.md","raw":"---\ntitle: 02-flutter之环境搭建\ntoc: true\ndate: 2020-09-02 20:36:34\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\nHello Flutter\n\n这个章节我们学习如何安装Flutter，并且写第一个Flutter程序。\n\n之后在iOS模拟器和Android模拟器上分别跑起来我们的应用程序（之后我会讲解如何跑在真机上）。\n\n当然，这个程序中的很多代码你可能并不是特别理解，里面涉及到一些dart知识，也涉及到一些flutter的东西。这些都没有关系，我们的目的是把这个工程跑起来，就表示你的环境是OK的。\n\n\n# 一. 环境搭建\n环境搭建有点麻烦，特别是Android环境的安装，大家耐心安装，有任何问题可以添加我的微信 372623326\n\n### 1.1. 操作系统选择\n\n很多同学会问，学习Flutter到底使用什么操作系统呢？\n\n学习阶段： Windows或者macOS（苹果操作系统）都是可以的\n\n开发阶段： 一般需要使用macOS，因为我们需要针对iOS进行调试，通常方便起见还是选择macOS\n\n疑问： 如果以后做Flutter开发没有macOS怎么办？\n\n这个可以完全放心，使用Flutter开发的公司必然会给你配备macOS的\nFlutter可以在Windows上学习，也可以在macOS上，因为我之后的课程要进行Android和iOS的调试，所以我当前使用的环境是macOS的。\n\n这里我再次强调，学习阶段使用Windows是没有任何问题，我之前也在Windows上写过很多Flutter的东西！\n\n在安装的过程中，我也会说到很多Windows安装的注意事项，大家按照步骤一步步完成即可。\n\n### 1.2. 安装Flutter SDK\n使用Flutter开发，首先我们需要安装一个Flutter的SDK。\n\n下载Flutter的SDK\n\n来到Flutter的官网网站，选择最新稳定的Flutter SDK的版本\n\n网站地址：flutter.dev/docs/develo…\n\n选择自己的操作系统和最新稳定的版本（Stable版本）（我当前最新稳定的版本是1.7.8）\n\n安装Flutter\n\n* 1.解压下载好的Flutter SDK\n\n\t这个在Windows和macOS都是一样的（选择一个自己想要安装的目录）\n\t但是在macOS中，我通常会讲flutter目录拖入到应用程序中，将其当作我的一个应用（个人习惯而已）\n\n![图1](02-flutter之环境搭建/02_001.png)\n\n\n* 2.配置Flutter的环境变量\n\n因为我们之后需要在命令行执行Flutter的命令，所以需要配置环境变量\nmacOS或者Linux系统，需要编辑~/.bash_profile文件\nexport PATH=$PATH:/Applications/flutter/bin\n\nWindows用户将所在路径添加到环境变量的Path下\n\nWindows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量\n\n找到Path，在其中添加Flutter SDK目录下bin目录\n\n在终端中执行flutter --version，出现如下内容，说明安装flutter成功\n\n![图1](02-flutter之环境搭建/02_002.png)\n\n配置镜像\n\nflutter项目会依赖一些东西，在国内下载这些依赖会有一些慢，所以我们可以将它们的安装源换成国内的（也就是设置国内的镜像）\n\nmacOS或者Linux操作系统，依然是编辑~/.bash_profile文件\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\n\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter\n```\n\nWindows用户还是需要修改环境变量\n\nWindows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量\n\n新建 变量 PUB_HOSTED_URL，其值为https://pub.flutter-io.cn\n\n新建 变量 FLUTTER_STORAGE_BASE_URL， 其值为https://storage.flutter-io.cn\n\n注意： 此镜像为临时镜像，并不能保证一直可用，大家可以参考详情请参考 Using Flutter in China 以获得有关镜像服务器的最新动态。\n\n### 1.3. 配置iOS环境\n如果想为Flutter配置iOS开发环境，需要在我们的电脑上安装一个Xcode（此部分Windows电脑忽略）\nXcode是苹果公司的iOS和macOS的IDE，进行过iOS开发的童鞋应该都非常熟悉\n\n如何安装Xcode呢？ 常见的是两种\n\n- 1.直接在App Store上搜索Xcode，找到安装即可\n这种安装方式有一个缺点，安装的一定是最新版本的（当然是用最新版本的最好）\n但是最新版本的Xcode会对macOS系统有一定的要求，所以可能还要设计到系统升级\n如果不希望系统升级，可以选择第二种方式\n\n- 2.第二种方式是安装自己想要的Xcode的版本，需要手动去下载\n\n进入developer.apple.com/download/mo…页面\n\n登录自己的Apple ID\n\n在搜索框输入Xcode，回车搜索，找到各种版本Xcode下载即可\n\n打开安装好的Xcode，可能打开速度有点慢：不着急，慢慢来\n\n选择自己想用的iOS模拟器\n\n打开Xcode，右上角点击Xcode - Open Developer Tools - Simulator\n\n![图1](02-flutter之环境搭建/02_003.png)\n\n这个时候会打开一个默认的iOS模拟器，也可以在Hardware - Device - 系统版本中选择自己想要测试的模拟器\n\n![图1](02-flutter之环境搭建/02_004.png)\n\n\n这个时候，我们就能看到如下模拟器了\n\n![图1](02-flutter之环境搭建/02_005.png)\n\n这个时候我们执行一下如下终端命令：\n\nflutter doctor\n\n看到如下有一个\n\n![图1](02-flutter之环境搭建/02_006.png)\n\n\n### 1.4. 配置Android环境\n\n如果想为Flutter配置Android开发环境，需要在我们的电脑上安装一个Android Studio\n\n- Android Studio是基于IntelliJ IDEA的、Google 官方的 Android 应用集成开发环境 (IDE)。\nAndroid Studio的下载\n- 官网地址：developer.android.com/studio/?utm…\n- 直接在官方下载即可\n- 安装直接双击安装即可\nAndroid的环境配置\n\n打开Android Studio，会问我们是否要设置代理，这是因为下载Android SDK等在国内不好下载\n- 至于如何设置代理，这里就不再讲解了~~~\n- 最好要设置代理哦，不然估计会被气死~~~\n\n![图1](02-flutter之环境搭建/02_007.png)\n\n之后各种下一步，就会帮我们安装SDK等相关需要使用的内容\n\n![图1](02-flutter之环境搭建/02_008.png)\n\n安装好后，点击Finish即可。\n\n\n创建Android模拟器\n安装好后，我们就可以去创建模拟器：选择Configure - AVD Manger\n\n![图1](02-flutter之环境搭建/02_009.png)\n\n选择create virtual device\n\n![图1](02-flutter之环境搭建/02_010.png)\n\n选择一个你想用的设备\n\n![图1](02-flutter之环境搭建/02_011.png)\n\n选择Android的版本（这里我没有选择Q版本，它目前还是一个bata版本），点击download\n\n下一个界面，点击accept - next就可以了\n\n![图1](02-flutter之环境搭建/02_012.png)\n\n\n接着下一步，给自己的模拟器起个名字\n\n![图1](02-flutter之环境搭建/02_013.png)\n\n启动Android模拟器\n\n![图1](02-flutter之环境搭建/02_014.png)\n\n这个时候我们执行一下如下终端命令：\n\nflutter doctor\n\n看到如下有两个可用的设备\n\n![图1](02-flutter之环境搭建/02_015.png)\n\n\n### 1.5. 开发工具的选择\n\n官方推荐两个工具来开发Flutter：Android Studio 和 VSCode，我们选择哪一个呢？\n\n对于有选择恐惧症的人，还真不是特别好选择，所以下面我会分别说出它们的优缺点，选择权在你\n\n最后我也会给出我的选择\n\n**VSCode优缺点**\n\nVSCode是最近非常非常流行的开发工具，并且非常好用！（我之前在微博感慨微软的东西最近两年越来越好用，其中之一就是VSCode）\n\n而且VSCode最近已经有取代WebStorm作为前端首选开发工具的趋势了\n\nVSCode的优点：\n\n- VSCode其实并不能称之为是一个IDE，它只是一个编辑器而已。\n- 所以它非常的轻量级，不会占用你非常大的内存消耗，而且启动速度等都非常快，对于电脑配置不是特别高的同学，肯定是一个非常好的选择。\n- 并且你可以在VSCode上安装各种各样的插件来满足自己的开发需求。\n\nVSCode的缺点：\n\n- 很多Android Studio包括的方便操作没有，比如点击启动、热更新点击等；\n- 而且在某些情况下会出现一些问题；\n- 比如之前我在使用的过程中，有时候热更新不及时常常看不到效果，必须重启；\n- 比如某些情况下，没有代码提示不够灵敏；\n\n\n使用须知：\n\n使用VSCode开发Flutter我们需要安装两个插件：Flutter和Dart\n\n**Android Studio优缺点**\n\n对于进行过Android开发或者使用过Webstorm、IDEA、PHPStorm等的同学，使用Android Studio肯定是没有任何问题的\nAndroid Studio的优点：\n\n- 集成开发环境（IDE）不用多说，你需要的功能基本都有\n- 而且上面说的VSCode存在的问题，在Android Studio中基本不会出现\n\nAndroid Studio的缺点：\n\n- 一个字：重\n- 无论是IDE本身，还是使用Android Studio启动项目，都会相对慢一些\n- 占据的计算机资源也很多，所以电脑配置较低是会出现卡顿\n\n使用须知：\n\n使用Android Studio开发Flutter我们需要安装两个插件：Flutter和Dart\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/02-flutter之环境搭建","published":1,"updated":"2020-09-09T11:37:48.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng6001hu3s6357c0qfq","content":"<p>Hello Flutter</p>\n<p>这个章节我们学习如何安装Flutter，并且写第一个Flutter程序。</p>\n<p>之后在iOS模拟器和Android模拟器上分别跑起来我们的应用程序（之后我会讲解如何跑在真机上）。</p>\n<p>当然，这个程序中的很多代码你可能并不是特别理解，里面涉及到一些dart知识，也涉及到一些flutter的东西。这些都没有关系，我们的目的是把这个工程跑起来，就表示你的环境是OK的。</p>\n<h1 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h1><p>环境搭建有点麻烦，特别是Android环境的安装，大家耐心安装，有任何问题可以添加我的微信 372623326</p>\n<h3 id=\"1-1-操作系统选择\"><a href=\"#1-1-操作系统选择\" class=\"headerlink\" title=\"1.1. 操作系统选择\"></a>1.1. 操作系统选择</h3><p>很多同学会问，学习Flutter到底使用什么操作系统呢？</p>\n<p>学习阶段： Windows或者macOS（苹果操作系统）都是可以的</p>\n<p>开发阶段： 一般需要使用macOS，因为我们需要针对iOS进行调试，通常方便起见还是选择macOS</p>\n<p>疑问： 如果以后做Flutter开发没有macOS怎么办？</p>\n<p>这个可以完全放心，使用Flutter开发的公司必然会给你配备macOS的<br>Flutter可以在Windows上学习，也可以在macOS上，因为我之后的课程要进行Android和iOS的调试，所以我当前使用的环境是macOS的。</p>\n<p>这里我再次强调，学习阶段使用Windows是没有任何问题，我之前也在Windows上写过很多Flutter的东西！</p>\n<p>在安装的过程中，我也会说到很多Windows安装的注意事项，大家按照步骤一步步完成即可。</p>\n<h3 id=\"1-2-安装Flutter-SDK\"><a href=\"#1-2-安装Flutter-SDK\" class=\"headerlink\" title=\"1.2. 安装Flutter SDK\"></a>1.2. 安装Flutter SDK</h3><p>使用Flutter开发，首先我们需要安装一个Flutter的SDK。</p>\n<p>下载Flutter的SDK</p>\n<p>来到Flutter的官网网站，选择最新稳定的Flutter SDK的版本</p>\n<p>网站地址：flutter.dev/docs/develo…</p>\n<p>选择自己的操作系统和最新稳定的版本（Stable版本）（我当前最新稳定的版本是1.7.8）</p>\n<p>安装Flutter</p>\n<ul>\n<li><p>1.解压下载好的Flutter SDK</p>\n<p>  这个在Windows和macOS都是一样的（选择一个自己想要安装的目录）<br>  但是在macOS中，我通常会讲flutter目录拖入到应用程序中，将其当作我的一个应用（个人习惯而已）</p>\n</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_001.png\" alt=\"图1\"></p>\n<ul>\n<li>2.配置Flutter的环境变量</li>\n</ul>\n<p>因为我们之后需要在命令行执行Flutter的命令，所以需要配置环境变量<br>macOS或者Linux系统，需要编辑~/.bash_profile文件<br>export PATH=$PATH:/Applications/flutter/bin</p>\n<p>Windows用户将所在路径添加到环境变量的Path下</p>\n<p>Windows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量</p>\n<p>找到Path，在其中添加Flutter SDK目录下bin目录</p>\n<p>在终端中执行flutter –version，出现如下内容，说明安装flutter成功</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_002.png\" alt=\"图1\"></p>\n<p>配置镜像</p>\n<p>flutter项目会依赖一些东西，在国内下载这些依赖会有一些慢，所以我们可以将它们的安装源换成国内的（也就是设置国内的镜像）</p>\n<p>macOS或者Linux操作系统，依然是编辑~/.bash_profile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class=\"line\"></span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter</span><br></pre></td></tr></table></figure>\n\n<p>Windows用户还是需要修改环境变量</p>\n<p>Windows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量</p>\n<p>新建 变量 PUB_HOSTED_URL，其值为<a href=\"https://pub.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn</a></p>\n<p>新建 变量 FLUTTER_STORAGE_BASE_URL， 其值为<a href=\"https://storage.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://storage.flutter-io.cn</a></p>\n<p>注意： 此镜像为临时镜像，并不能保证一直可用，大家可以参考详情请参考 Using Flutter in China 以获得有关镜像服务器的最新动态。</p>\n<h3 id=\"1-3-配置iOS环境\"><a href=\"#1-3-配置iOS环境\" class=\"headerlink\" title=\"1.3. 配置iOS环境\"></a>1.3. 配置iOS环境</h3><p>如果想为Flutter配置iOS开发环境，需要在我们的电脑上安装一个Xcode（此部分Windows电脑忽略）<br>Xcode是苹果公司的iOS和macOS的IDE，进行过iOS开发的童鞋应该都非常熟悉</p>\n<p>如何安装Xcode呢？ 常见的是两种</p>\n<ul>\n<li><p>1.直接在App Store上搜索Xcode，找到安装即可<br>这种安装方式有一个缺点，安装的一定是最新版本的（当然是用最新版本的最好）<br>但是最新版本的Xcode会对macOS系统有一定的要求，所以可能还要设计到系统升级<br>如果不希望系统升级，可以选择第二种方式</p>\n</li>\n<li><p>2.第二种方式是安装自己想要的Xcode的版本，需要手动去下载</p>\n</li>\n</ul>\n<p>进入developer.apple.com/download/mo…页面</p>\n<p>登录自己的Apple ID</p>\n<p>在搜索框输入Xcode，回车搜索，找到各种版本Xcode下载即可</p>\n<p>打开安装好的Xcode，可能打开速度有点慢：不着急，慢慢来</p>\n<p>选择自己想用的iOS模拟器</p>\n<p>打开Xcode，右上角点击Xcode - Open Developer Tools - Simulator</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_003.png\" alt=\"图1\"></p>\n<p>这个时候会打开一个默认的iOS模拟器，也可以在Hardware - Device - 系统版本中选择自己想要测试的模拟器</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_004.png\" alt=\"图1\"></p>\n<p>这个时候，我们就能看到如下模拟器了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_005.png\" alt=\"图1\"></p>\n<p>这个时候我们执行一下如下终端命令：</p>\n<p>flutter doctor</p>\n<p>看到如下有一个</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_006.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-配置Android环境\"><a href=\"#1-4-配置Android环境\" class=\"headerlink\" title=\"1.4. 配置Android环境\"></a>1.4. 配置Android环境</h3><p>如果想为Flutter配置Android开发环境，需要在我们的电脑上安装一个Android Studio</p>\n<ul>\n<li>Android Studio是基于IntelliJ IDEA的、Google 官方的 Android 应用集成开发环境 (IDE)。<br>Android Studio的下载</li>\n<li>官网地址：developer.android.com/studio/?utm…</li>\n<li>直接在官方下载即可</li>\n<li>安装直接双击安装即可<br>Android的环境配置</li>\n</ul>\n<p>打开Android Studio，会问我们是否要设置代理，这是因为下载Android SDK等在国内不好下载</p>\n<ul>\n<li>至于如何设置代理，这里就不再讲解了<del>~</del></li>\n<li>最好要设置代理哦，不然估计会被气死<del>~</del></li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_007.png\" alt=\"图1\"></p>\n<p>之后各种下一步，就会帮我们安装SDK等相关需要使用的内容</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_008.png\" alt=\"图1\"></p>\n<p>安装好后，点击Finish即可。</p>\n<p>创建Android模拟器<br>安装好后，我们就可以去创建模拟器：选择Configure - AVD Manger</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_009.png\" alt=\"图1\"></p>\n<p>选择create virtual device</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_010.png\" alt=\"图1\"></p>\n<p>选择一个你想用的设备</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_011.png\" alt=\"图1\"></p>\n<p>选择Android的版本（这里我没有选择Q版本，它目前还是一个bata版本），点击download</p>\n<p>下一个界面，点击accept - next就可以了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_012.png\" alt=\"图1\"></p>\n<p>接着下一步，给自己的模拟器起个名字</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_013.png\" alt=\"图1\"></p>\n<p>启动Android模拟器</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_014.png\" alt=\"图1\"></p>\n<p>这个时候我们执行一下如下终端命令：</p>\n<p>flutter doctor</p>\n<p>看到如下有两个可用的设备</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_015.png\" alt=\"图1\"></p>\n<h3 id=\"1-5-开发工具的选择\"><a href=\"#1-5-开发工具的选择\" class=\"headerlink\" title=\"1.5. 开发工具的选择\"></a>1.5. 开发工具的选择</h3><p>官方推荐两个工具来开发Flutter：Android Studio 和 VSCode，我们选择哪一个呢？</p>\n<p>对于有选择恐惧症的人，还真不是特别好选择，所以下面我会分别说出它们的优缺点，选择权在你</p>\n<p>最后我也会给出我的选择</p>\n<p><strong>VSCode优缺点</strong></p>\n<p>VSCode是最近非常非常流行的开发工具，并且非常好用！（我之前在微博感慨微软的东西最近两年越来越好用，其中之一就是VSCode）</p>\n<p>而且VSCode最近已经有取代WebStorm作为前端首选开发工具的趋势了</p>\n<p>VSCode的优点：</p>\n<ul>\n<li>VSCode其实并不能称之为是一个IDE，它只是一个编辑器而已。</li>\n<li>所以它非常的轻量级，不会占用你非常大的内存消耗，而且启动速度等都非常快，对于电脑配置不是特别高的同学，肯定是一个非常好的选择。</li>\n<li>并且你可以在VSCode上安装各种各样的插件来满足自己的开发需求。</li>\n</ul>\n<p>VSCode的缺点：</p>\n<ul>\n<li>很多Android Studio包括的方便操作没有，比如点击启动、热更新点击等；</li>\n<li>而且在某些情况下会出现一些问题；</li>\n<li>比如之前我在使用的过程中，有时候热更新不及时常常看不到效果，必须重启；</li>\n<li>比如某些情况下，没有代码提示不够灵敏；</li>\n</ul>\n<p>使用须知：</p>\n<p>使用VSCode开发Flutter我们需要安装两个插件：Flutter和Dart</p>\n<p><strong>Android Studio优缺点</strong></p>\n<p>对于进行过Android开发或者使用过Webstorm、IDEA、PHPStorm等的同学，使用Android Studio肯定是没有任何问题的<br>Android Studio的优点：</p>\n<ul>\n<li>集成开发环境（IDE）不用多说，你需要的功能基本都有</li>\n<li>而且上面说的VSCode存在的问题，在Android Studio中基本不会出现</li>\n</ul>\n<p>Android Studio的缺点：</p>\n<ul>\n<li>一个字：重</li>\n<li>无论是IDE本身，还是使用Android Studio启动项目，都会相对慢一些</li>\n<li>占据的计算机资源也很多，所以电脑配置较低是会出现卡顿</li>\n</ul>\n<p>使用须知：</p>\n<p>使用Android Studio开发Flutter我们需要安装两个插件：Flutter和Dart</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello Flutter</p>\n<p>这个章节我们学习如何安装Flutter，并且写第一个Flutter程序。</p>\n<p>之后在iOS模拟器和Android模拟器上分别跑起来我们的应用程序（之后我会讲解如何跑在真机上）。</p>\n<p>当然，这个程序中的很多代码你可能并不是特别理解，里面涉及到一些dart知识，也涉及到一些flutter的东西。这些都没有关系，我们的目的是把这个工程跑起来，就表示你的环境是OK的。</p>\n<h1 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h1><p>环境搭建有点麻烦，特别是Android环境的安装，大家耐心安装，有任何问题可以添加我的微信 372623326</p>\n<h3 id=\"1-1-操作系统选择\"><a href=\"#1-1-操作系统选择\" class=\"headerlink\" title=\"1.1. 操作系统选择\"></a>1.1. 操作系统选择</h3><p>很多同学会问，学习Flutter到底使用什么操作系统呢？</p>\n<p>学习阶段： Windows或者macOS（苹果操作系统）都是可以的</p>\n<p>开发阶段： 一般需要使用macOS，因为我们需要针对iOS进行调试，通常方便起见还是选择macOS</p>\n<p>疑问： 如果以后做Flutter开发没有macOS怎么办？</p>\n<p>这个可以完全放心，使用Flutter开发的公司必然会给你配备macOS的<br>Flutter可以在Windows上学习，也可以在macOS上，因为我之后的课程要进行Android和iOS的调试，所以我当前使用的环境是macOS的。</p>\n<p>这里我再次强调，学习阶段使用Windows是没有任何问题，我之前也在Windows上写过很多Flutter的东西！</p>\n<p>在安装的过程中，我也会说到很多Windows安装的注意事项，大家按照步骤一步步完成即可。</p>\n<h3 id=\"1-2-安装Flutter-SDK\"><a href=\"#1-2-安装Flutter-SDK\" class=\"headerlink\" title=\"1.2. 安装Flutter SDK\"></a>1.2. 安装Flutter SDK</h3><p>使用Flutter开发，首先我们需要安装一个Flutter的SDK。</p>\n<p>下载Flutter的SDK</p>\n<p>来到Flutter的官网网站，选择最新稳定的Flutter SDK的版本</p>\n<p>网站地址：flutter.dev/docs/develo…</p>\n<p>选择自己的操作系统和最新稳定的版本（Stable版本）（我当前最新稳定的版本是1.7.8）</p>\n<p>安装Flutter</p>\n<ul>\n<li><p>1.解压下载好的Flutter SDK</p>\n<p>  这个在Windows和macOS都是一样的（选择一个自己想要安装的目录）<br>  但是在macOS中，我通常会讲flutter目录拖入到应用程序中，将其当作我的一个应用（个人习惯而已）</p>\n</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_001.png\" alt=\"图1\"></p>\n<ul>\n<li>2.配置Flutter的环境变量</li>\n</ul>\n<p>因为我们之后需要在命令行执行Flutter的命令，所以需要配置环境变量<br>macOS或者Linux系统，需要编辑~/.bash_profile文件<br>export PATH=$PATH:/Applications/flutter/bin</p>\n<p>Windows用户将所在路径添加到环境变量的Path下</p>\n<p>Windows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量</p>\n<p>找到Path，在其中添加Flutter SDK目录下bin目录</p>\n<p>在终端中执行flutter –version，出现如下内容，说明安装flutter成功</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_002.png\" alt=\"图1\"></p>\n<p>配置镜像</p>\n<p>flutter项目会依赖一些东西，在国内下载这些依赖会有一些慢，所以我们可以将它们的安装源换成国内的（也就是设置国内的镜像）</p>\n<p>macOS或者Linux操作系统，依然是编辑~/.bash_profile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class=\"line\"></span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter</span><br></pre></td></tr></table></figure>\n\n<p>Windows用户还是需要修改环境变量</p>\n<p>Windows环境变量修改：点击计算机图标 - 属性 - 高级系统设置 - 高级 - 环境变量</p>\n<p>新建 变量 PUB_HOSTED_URL，其值为<a href=\"https://pub.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn</a></p>\n<p>新建 变量 FLUTTER_STORAGE_BASE_URL， 其值为<a href=\"https://storage.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://storage.flutter-io.cn</a></p>\n<p>注意： 此镜像为临时镜像，并不能保证一直可用，大家可以参考详情请参考 Using Flutter in China 以获得有关镜像服务器的最新动态。</p>\n<h3 id=\"1-3-配置iOS环境\"><a href=\"#1-3-配置iOS环境\" class=\"headerlink\" title=\"1.3. 配置iOS环境\"></a>1.3. 配置iOS环境</h3><p>如果想为Flutter配置iOS开发环境，需要在我们的电脑上安装一个Xcode（此部分Windows电脑忽略）<br>Xcode是苹果公司的iOS和macOS的IDE，进行过iOS开发的童鞋应该都非常熟悉</p>\n<p>如何安装Xcode呢？ 常见的是两种</p>\n<ul>\n<li><p>1.直接在App Store上搜索Xcode，找到安装即可<br>这种安装方式有一个缺点，安装的一定是最新版本的（当然是用最新版本的最好）<br>但是最新版本的Xcode会对macOS系统有一定的要求，所以可能还要设计到系统升级<br>如果不希望系统升级，可以选择第二种方式</p>\n</li>\n<li><p>2.第二种方式是安装自己想要的Xcode的版本，需要手动去下载</p>\n</li>\n</ul>\n<p>进入developer.apple.com/download/mo…页面</p>\n<p>登录自己的Apple ID</p>\n<p>在搜索框输入Xcode，回车搜索，找到各种版本Xcode下载即可</p>\n<p>打开安装好的Xcode，可能打开速度有点慢：不着急，慢慢来</p>\n<p>选择自己想用的iOS模拟器</p>\n<p>打开Xcode，右上角点击Xcode - Open Developer Tools - Simulator</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_003.png\" alt=\"图1\"></p>\n<p>这个时候会打开一个默认的iOS模拟器，也可以在Hardware - Device - 系统版本中选择自己想要测试的模拟器</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_004.png\" alt=\"图1\"></p>\n<p>这个时候，我们就能看到如下模拟器了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_005.png\" alt=\"图1\"></p>\n<p>这个时候我们执行一下如下终端命令：</p>\n<p>flutter doctor</p>\n<p>看到如下有一个</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_006.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-配置Android环境\"><a href=\"#1-4-配置Android环境\" class=\"headerlink\" title=\"1.4. 配置Android环境\"></a>1.4. 配置Android环境</h3><p>如果想为Flutter配置Android开发环境，需要在我们的电脑上安装一个Android Studio</p>\n<ul>\n<li>Android Studio是基于IntelliJ IDEA的、Google 官方的 Android 应用集成开发环境 (IDE)。<br>Android Studio的下载</li>\n<li>官网地址：developer.android.com/studio/?utm…</li>\n<li>直接在官方下载即可</li>\n<li>安装直接双击安装即可<br>Android的环境配置</li>\n</ul>\n<p>打开Android Studio，会问我们是否要设置代理，这是因为下载Android SDK等在国内不好下载</p>\n<ul>\n<li>至于如何设置代理，这里就不再讲解了<del>~</del></li>\n<li>最好要设置代理哦，不然估计会被气死<del>~</del></li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_007.png\" alt=\"图1\"></p>\n<p>之后各种下一步，就会帮我们安装SDK等相关需要使用的内容</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_008.png\" alt=\"图1\"></p>\n<p>安装好后，点击Finish即可。</p>\n<p>创建Android模拟器<br>安装好后，我们就可以去创建模拟器：选择Configure - AVD Manger</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_009.png\" alt=\"图1\"></p>\n<p>选择create virtual device</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_010.png\" alt=\"图1\"></p>\n<p>选择一个你想用的设备</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_011.png\" alt=\"图1\"></p>\n<p>选择Android的版本（这里我没有选择Q版本，它目前还是一个bata版本），点击download</p>\n<p>下一个界面，点击accept - next就可以了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_012.png\" alt=\"图1\"></p>\n<p>接着下一步，给自己的模拟器起个名字</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_013.png\" alt=\"图1\"></p>\n<p>启动Android模拟器</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_014.png\" alt=\"图1\"></p>\n<p>这个时候我们执行一下如下终端命令：</p>\n<p>flutter doctor</p>\n<p>看到如下有两个可用的设备</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/02-flutter%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02_015.png\" alt=\"图1\"></p>\n<h3 id=\"1-5-开发工具的选择\"><a href=\"#1-5-开发工具的选择\" class=\"headerlink\" title=\"1.5. 开发工具的选择\"></a>1.5. 开发工具的选择</h3><p>官方推荐两个工具来开发Flutter：Android Studio 和 VSCode，我们选择哪一个呢？</p>\n<p>对于有选择恐惧症的人，还真不是特别好选择，所以下面我会分别说出它们的优缺点，选择权在你</p>\n<p>最后我也会给出我的选择</p>\n<p><strong>VSCode优缺点</strong></p>\n<p>VSCode是最近非常非常流行的开发工具，并且非常好用！（我之前在微博感慨微软的东西最近两年越来越好用，其中之一就是VSCode）</p>\n<p>而且VSCode最近已经有取代WebStorm作为前端首选开发工具的趋势了</p>\n<p>VSCode的优点：</p>\n<ul>\n<li>VSCode其实并不能称之为是一个IDE，它只是一个编辑器而已。</li>\n<li>所以它非常的轻量级，不会占用你非常大的内存消耗，而且启动速度等都非常快，对于电脑配置不是特别高的同学，肯定是一个非常好的选择。</li>\n<li>并且你可以在VSCode上安装各种各样的插件来满足自己的开发需求。</li>\n</ul>\n<p>VSCode的缺点：</p>\n<ul>\n<li>很多Android Studio包括的方便操作没有，比如点击启动、热更新点击等；</li>\n<li>而且在某些情况下会出现一些问题；</li>\n<li>比如之前我在使用的过程中，有时候热更新不及时常常看不到效果，必须重启；</li>\n<li>比如某些情况下，没有代码提示不够灵敏；</li>\n</ul>\n<p>使用须知：</p>\n<p>使用VSCode开发Flutter我们需要安装两个插件：Flutter和Dart</p>\n<p><strong>Android Studio优缺点</strong></p>\n<p>对于进行过Android开发或者使用过Webstorm、IDEA、PHPStorm等的同学，使用Android Studio肯定是没有任何问题的<br>Android Studio的优点：</p>\n<ul>\n<li>集成开发环境（IDE）不用多说，你需要的功能基本都有</li>\n<li>而且上面说的VSCode存在的问题，在Android Studio中基本不会出现</li>\n</ul>\n<p>Android Studio的缺点：</p>\n<ul>\n<li>一个字：重</li>\n<li>无论是IDE本身，还是使用Android Studio启动项目，都会相对慢一些</li>\n<li>占据的计算机资源也很多，所以电脑配置较低是会出现卡顿</li>\n</ul>\n<p>使用须知：</p>\n<p>使用Android Studio开发Flutter我们需要安装两个插件：Flutter和Dart</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"01-flutter学习开始","toc":true,"date":"2020-09-02T12:35:52.000Z","_content":"\n\n# 一. 认识Flutter\n\n### 1.1. 什么是Flutter ?\n\nFlutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。\n但是现在，它只是活跃于移动端。\n\n那么，目前移动平台主要有哪些呢？没错，iOS、Android！\n\n于是，我们可以简单概述一下Flutter：\n\nFlutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。\n它不仅仅性能优越，而且开发非常高效！\n\n![图1](01-flutter学习开始/01_001.png)\n\n为什么需要这样一种跨平台解决方案呢？\n待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。\n\n### 1.2. Flutter的特点\n\nGoogle公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。\n这部分了解即可，后面学习过程中，慢慢体会。\n\n美观\n\n使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。\n\n当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的\n\n快速\n\n后面有专门讲解为什么性能这么高，先做一个了解即可\n\nFlutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。\n\nFlutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。\n\n这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。\n\n![图1](01-flutter学习开始/01_002.png)\n\n高效\n\n对开发者来说，使用 Flutter 开发应用十分高效。\nFlutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。\n\n另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。\n\n![图1](01-flutter学习开始/01_003.png)\n\n开放\n\nFlutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。\ngithub地址： https://github.com/flutter/flutter\n\n![图1](01-flutter学习开始/01_004.png)\n\n# 二. 跨平台历史\n### 2.1. 平台独立开发\n目前移动端有两大系统：iOS和Android\n\n很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App\n\n  - 意味着Android系统上需要一个Android版本的App\n  \n  - 意味着iOS系统上需要一个iOS版本的App\n  \n  - 但是他们的开发方式完全不同！！！\n\n\niOS系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。\n  \n  - 2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。\n  \n  - 也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift\n\n\nAndroid系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Java\n\n  - 2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持\n\n  - 也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin\n\n\n通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。\n\n但是，对于一家小公司来说，这样的成本是非常高的。\n在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.\n\n### 2.2. 跨平台解决方案\n基于 JavaScript 和 WebView的跨平台\n\n最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。\n\n主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。\n但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。\n但是，它本身的体验并不理想，而且开发过程中的坑非常多。\n\n![图1](01-flutter学习开始/01_005.png)\n\n\n备受欢迎的React Native\n\n在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。\n\nReact Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。\n\nRN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。\n\n并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。\n\n但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。\n\n还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。\n\n所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。\n\n![图1](01-flutter学习开始/01_006.png)\n\n可能是终极的解决方案: Flutter\n从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。\n我们直接看下面这幅图来对比flutter - native - rn的区别\n\n  - Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）\n  - Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）\n  - 而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。\n\n具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。\n\n![图1](01-flutter学习开始/01_007.png)\n\n\n![图1](01-flutter学习开始/01_008.png)\n\n# 三. Flutter绘制原理\n### 3.1. Flutter渲染本质\n\n问题：一个图像到底是如何显示到屏幕上的呢？\n首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。\n\n比如下面的一个GIF图片:\n\n![图1](01-flutter学习开始/01_009.png)\n\n我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:\n\n![图1](01-flutter学习开始/01_010.png)\n\n但是我们为什么能看到类似于动画的效果呢？\n这是因为它播放的速度非常快，研究表明：\n*   当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿\n*   所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）\n\n\n我们说回到电脑、手机屏幕的显示\n\n事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。\n\n一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。\n\n![图1](01-flutter学习开始/01_011.png)\n\n在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：\n\n- CPU将计算好的显示内容提交给 GPU；\n- GPU渲染后放入帧缓冲区；\n- 视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；\n当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。\n\n![图1](01-flutter学习开始/01_012.png)\n\n  - GPU将信号同步到 UI 线程\n  - UI 线程用Dart来构建图层树\n  - 图层树在GPU 线程进行合成\n  - 合成后的视图数据提供给Skia 引擎\n  - Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU\n这也是flutter区别于React Native的本质区别：\n\n  - React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；\n  - Flutter 则是自己完成了组件渲染的闭环。\n\n### 3.2. Dart语言优势\nFlutter为什么要选择Dart作为开发语言？\n\n有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）\n\n早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。\n其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。\n\n但是Flutter团队从一开始就决定，不将就！！！\n\n*   Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。\n\n*   Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。\n\n*   Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。\n*   Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。\n*   开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。\n\n并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。\n\n### 3.3. 渲染引擎skia\n想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。\n\nSkia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。\n\n目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；\n\n而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。\n\n底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。\n\n![图1](01-flutter学习开始/01_013.png)\n\n# 四. 如何学习flutter\n### 4.1. 大前端学不动了\n很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。\n\n但是作为大前端开发者就是这样，各种折腾：\n\n*   客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）\n*   前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）\n\n大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。\n但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。\n并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。\n\n### 4.2. flutter学得会吗？\n\n很多人对于学习望而却步，主要是基于两点考虑：\n\n\n*   学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。\n*   flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等\n\ndart语言并不复杂，而且非常现代化\n\n*   首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）\n*   其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）\n\nflutter并没有非常多创新的概念：\n \n*   flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。\n*   声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/01-flutter学习开始.md","raw":"---\ntitle: 01-flutter学习开始\ntoc: true\ndate: 2020-09-02 20:35:52\ncategories:\n- flutter\n- flutter框架一\ntags:\n\n---\n\n\n# 一. 认识Flutter\n\n### 1.1. 什么是Flutter ?\n\nFlutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。\n但是现在，它只是活跃于移动端。\n\n那么，目前移动平台主要有哪些呢？没错，iOS、Android！\n\n于是，我们可以简单概述一下Flutter：\n\nFlutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。\n它不仅仅性能优越，而且开发非常高效！\n\n![图1](01-flutter学习开始/01_001.png)\n\n为什么需要这样一种跨平台解决方案呢？\n待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。\n\n### 1.2. Flutter的特点\n\nGoogle公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。\n这部分了解即可，后面学习过程中，慢慢体会。\n\n美观\n\n使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。\n\n当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的\n\n快速\n\n后面有专门讲解为什么性能这么高，先做一个了解即可\n\nFlutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。\n\nFlutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。\n\n这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。\n\n![图1](01-flutter学习开始/01_002.png)\n\n高效\n\n对开发者来说，使用 Flutter 开发应用十分高效。\nFlutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。\n\n另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。\n\n![图1](01-flutter学习开始/01_003.png)\n\n开放\n\nFlutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。\ngithub地址： https://github.com/flutter/flutter\n\n![图1](01-flutter学习开始/01_004.png)\n\n# 二. 跨平台历史\n### 2.1. 平台独立开发\n目前移动端有两大系统：iOS和Android\n\n很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App\n\n  - 意味着Android系统上需要一个Android版本的App\n  \n  - 意味着iOS系统上需要一个iOS版本的App\n  \n  - 但是他们的开发方式完全不同！！！\n\n\niOS系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。\n  \n  - 2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。\n  \n  - 也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift\n\n\nAndroid系统\n\n  - 最初，如果希望在其上开发应用程序，所采用的语言是Java\n\n  - 2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持\n\n  - 也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin\n\n\n通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。\n\n但是，对于一家小公司来说，这样的成本是非常高的。\n在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.\n\n### 2.2. 跨平台解决方案\n基于 JavaScript 和 WebView的跨平台\n\n最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。\n\n主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。\n但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。\n但是，它本身的体验并不理想，而且开发过程中的坑非常多。\n\n![图1](01-flutter学习开始/01_005.png)\n\n\n备受欢迎的React Native\n\n在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。\n\nReact Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。\n\nRN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。\n\n并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。\n\n但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。\n\n还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。\n\n所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。\n\n![图1](01-flutter学习开始/01_006.png)\n\n可能是终极的解决方案: Flutter\n从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。\n我们直接看下面这幅图来对比flutter - native - rn的区别\n\n  - Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）\n  - Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）\n  - 而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。\n\n具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。\n\n![图1](01-flutter学习开始/01_007.png)\n\n\n![图1](01-flutter学习开始/01_008.png)\n\n# 三. Flutter绘制原理\n### 3.1. Flutter渲染本质\n\n问题：一个图像到底是如何显示到屏幕上的呢？\n首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。\n\n比如下面的一个GIF图片:\n\n![图1](01-flutter学习开始/01_009.png)\n\n我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:\n\n![图1](01-flutter学习开始/01_010.png)\n\n但是我们为什么能看到类似于动画的效果呢？\n这是因为它播放的速度非常快，研究表明：\n*   当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿\n*   所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）\n\n\n我们说回到电脑、手机屏幕的显示\n\n事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。\n\n一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。\n\n![图1](01-flutter学习开始/01_011.png)\n\n在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：\n\n- CPU将计算好的显示内容提交给 GPU；\n- GPU渲染后放入帧缓冲区；\n- 视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；\n当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。\n\n![图1](01-flutter学习开始/01_012.png)\n\n  - GPU将信号同步到 UI 线程\n  - UI 线程用Dart来构建图层树\n  - 图层树在GPU 线程进行合成\n  - 合成后的视图数据提供给Skia 引擎\n  - Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU\n这也是flutter区别于React Native的本质区别：\n\n  - React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；\n  - Flutter 则是自己完成了组件渲染的闭环。\n\n### 3.2. Dart语言优势\nFlutter为什么要选择Dart作为开发语言？\n\n有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）\n\n早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。\n其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。\n\n但是Flutter团队从一开始就决定，不将就！！！\n\n*   Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。\n\n*   Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。\n\n*   Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。\n*   Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。\n*   开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。\n\n并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。\n\n### 3.3. 渲染引擎skia\n想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。\n\nSkia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。\n\n目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；\n\n而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。\n\n底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。\n\n![图1](01-flutter学习开始/01_013.png)\n\n# 四. 如何学习flutter\n### 4.1. 大前端学不动了\n很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。\n\n但是作为大前端开发者就是这样，各种折腾：\n\n*   客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）\n*   前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）\n\n大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。\n但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。\n并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。\n\n### 4.2. flutter学得会吗？\n\n很多人对于学习望而却步，主要是基于两点考虑：\n\n\n*   学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。\n*   flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等\n\ndart语言并不复杂，而且非常现代化\n\n*   首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）\n*   其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）\n\nflutter并没有非常多创新的概念：\n \n*   flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。\n*   声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/01-flutter学习开始","published":1,"updated":"2020-09-08T11:16:18.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng7001ku3s63457gxc0","content":"<h1 id=\"一-认识Flutter\"><a href=\"#一-认识Flutter\" class=\"headerlink\" title=\"一. 认识Flutter\"></a>一. 认识Flutter</h1><h3 id=\"1-1-什么是Flutter\"><a href=\"#1-1-什么是Flutter\" class=\"headerlink\" title=\"1.1. 什么是Flutter ?\"></a>1.1. 什么是Flutter ?</h3><p>Flutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。<br>但是现在，它只是活跃于移动端。</p>\n<p>那么，目前移动平台主要有哪些呢？没错，iOS、Android！</p>\n<p>于是，我们可以简单概述一下Flutter：</p>\n<p>Flutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。<br>它不仅仅性能优越，而且开发非常高效！</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_001.png\" alt=\"图1\"></p>\n<p>为什么需要这样一种跨平台解决方案呢？<br>待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。</p>\n<h3 id=\"1-2-Flutter的特点\"><a href=\"#1-2-Flutter的特点\" class=\"headerlink\" title=\"1.2. Flutter的特点\"></a>1.2. Flutter的特点</h3><p>Google公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。<br>这部分了解即可，后面学习过程中，慢慢体会。</p>\n<p>美观</p>\n<p>使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</p>\n<p>当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的</p>\n<p>快速</p>\n<p>后面有专门讲解为什么性能这么高，先做一个了解即可</p>\n<p>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。</p>\n<p>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。</p>\n<p>这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_002.png\" alt=\"图1\"></p>\n<p>高效</p>\n<p>对开发者来说，使用 Flutter 开发应用十分高效。<br>Flutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。</p>\n<p>另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_003.png\" alt=\"图1\"></p>\n<p>开放</p>\n<p>Flutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。<br>github地址： <a href=\"https://github.com/flutter/flutter\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter</a></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-跨平台历史\"><a href=\"#二-跨平台历史\" class=\"headerlink\" title=\"二. 跨平台历史\"></a>二. 跨平台历史</h1><h3 id=\"2-1-平台独立开发\"><a href=\"#2-1-平台独立开发\" class=\"headerlink\" title=\"2.1. 平台独立开发\"></a>2.1. 平台独立开发</h3><p>目前移动端有两大系统：iOS和Android</p>\n<p>很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App</p>\n<ul>\n<li><p>意味着Android系统上需要一个Android版本的App</p>\n</li>\n<li><p>意味着iOS系统上需要一个iOS版本的App</p>\n</li>\n<li><p>但是他们的开发方式完全不同！！！</p>\n</li>\n</ul>\n<p>iOS系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。</p>\n</li>\n<li><p>2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。</p>\n</li>\n<li><p>也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift</p>\n</li>\n</ul>\n<p>Android系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Java</p>\n</li>\n<li><p>2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持</p>\n</li>\n<li><p>也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin</p>\n</li>\n</ul>\n<p>通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。</p>\n<p>但是，对于一家小公司来说，这样的成本是非常高的。<br>在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.</p>\n<h3 id=\"2-2-跨平台解决方案\"><a href=\"#2-2-跨平台解决方案\" class=\"headerlink\" title=\"2.2. 跨平台解决方案\"></a>2.2. 跨平台解决方案</h3><p>基于 JavaScript 和 WebView的跨平台</p>\n<p>最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。</p>\n<p>主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。<br>但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。<br>但是，它本身的体验并不理想，而且开发过程中的坑非常多。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_005.png\" alt=\"图1\"></p>\n<p>备受欢迎的React Native</p>\n<p>在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。</p>\n<p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。</p>\n<p>RN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</p>\n<p>并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。</p>\n<p>但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。</p>\n<p>还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。</p>\n<p>所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_006.png\" alt=\"图1\"></p>\n<p>可能是终极的解决方案: Flutter<br>从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。<br>我们直接看下面这幅图来对比flutter - native - rn的区别</p>\n<ul>\n<li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）</li>\n<li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li>\n<li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li>\n</ul>\n<p>具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-Flutter绘制原理\"><a href=\"#三-Flutter绘制原理\" class=\"headerlink\" title=\"三. Flutter绘制原理\"></a>三. Flutter绘制原理</h1><h3 id=\"3-1-Flutter渲染本质\"><a href=\"#3-1-Flutter渲染本质\" class=\"headerlink\" title=\"3.1. Flutter渲染本质\"></a>3.1. Flutter渲染本质</h3><p>问题：一个图像到底是如何显示到屏幕上的呢？<br>首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。</p>\n<p>比如下面的一个GIF图片:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_009.png\" alt=\"图1\"></p>\n<p>我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_010.png\" alt=\"图1\"></p>\n<p>但是我们为什么能看到类似于动画的效果呢？<br>这是因为它播放的速度非常快，研究表明：</p>\n<ul>\n<li>当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿</li>\n<li>所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）</li>\n</ul>\n<p>我们说回到电脑、手机屏幕的显示</p>\n<p>事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。</p>\n<p>一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_011.png\" alt=\"图1\"></p>\n<p>在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：</p>\n<ul>\n<li>CPU将计算好的显示内容提交给 GPU；</li>\n<li>GPU渲染后放入帧缓冲区；</li>\n<li>视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；<br>当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_012.png\" alt=\"图1\"></p>\n<ul>\n<li><p>GPU将信号同步到 UI 线程</p>\n</li>\n<li><p>UI 线程用Dart来构建图层树</p>\n</li>\n<li><p>图层树在GPU 线程进行合成</p>\n</li>\n<li><p>合成后的视图数据提供给Skia 引擎</p>\n</li>\n<li><p>Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU<br>这也是flutter区别于React Native的本质区别：</p>\n</li>\n<li><p>React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；</p>\n</li>\n<li><p>Flutter 则是自己完成了组件渲染的闭环。</p>\n</li>\n</ul>\n<h3 id=\"3-2-Dart语言优势\"><a href=\"#3-2-Dart语言优势\" class=\"headerlink\" title=\"3.2. Dart语言优势\"></a>3.2. Dart语言优势</h3><p>Flutter为什么要选择Dart作为开发语言？</p>\n<p>有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）</p>\n<p>早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。<br>其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。</p>\n<p>但是Flutter团队从一开始就决定，不将就！！！</p>\n<ul>\n<li><p>Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。</p>\n</li>\n<li><p>Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。</p>\n</li>\n<li><p>Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。</p>\n</li>\n<li><p>Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。</p>\n</li>\n<li><p>开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。</p>\n</li>\n</ul>\n<p>并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。</p>\n<h3 id=\"3-3-渲染引擎skia\"><a href=\"#3-3-渲染引擎skia\" class=\"headerlink\" title=\"3.3. 渲染引擎skia\"></a>3.3. 渲染引擎skia</h3><p>想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。</p>\n<p>Skia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。</p>\n<p>目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；</p>\n<p>而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。</p>\n<p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_013.png\" alt=\"图1\"></p>\n<h1 id=\"四-如何学习flutter\"><a href=\"#四-如何学习flutter\" class=\"headerlink\" title=\"四. 如何学习flutter\"></a>四. 如何学习flutter</h1><h3 id=\"4-1-大前端学不动了\"><a href=\"#4-1-大前端学不动了\" class=\"headerlink\" title=\"4.1. 大前端学不动了\"></a>4.1. 大前端学不动了</h3><p>很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。</p>\n<p>但是作为大前端开发者就是这样，各种折腾：</p>\n<ul>\n<li>客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）</li>\n<li>前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）</li>\n</ul>\n<p>大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。<br>但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。<br>并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。</p>\n<h3 id=\"4-2-flutter学得会吗？\"><a href=\"#4-2-flutter学得会吗？\" class=\"headerlink\" title=\"4.2. flutter学得会吗？\"></a>4.2. flutter学得会吗？</h3><p>很多人对于学习望而却步，主要是基于两点考虑：</p>\n<ul>\n<li>学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。</li>\n<li>flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等</li>\n</ul>\n<p>dart语言并不复杂，而且非常现代化</p>\n<ul>\n<li>首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）</li>\n<li>其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）</li>\n</ul>\n<p>flutter并没有非常多创新的概念：</p>\n<ul>\n<li>flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。</li>\n<li>声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-认识Flutter\"><a href=\"#一-认识Flutter\" class=\"headerlink\" title=\"一. 认识Flutter\"></a>一. 认识Flutter</h1><h3 id=\"1-1-什么是Flutter\"><a href=\"#1-1-什么是Flutter\" class=\"headerlink\" title=\"1.1. 什么是Flutter ?\"></a>1.1. 什么是Flutter ?</h3><p>Flutter就是一个UI开发工具包，可以开发各个平台，但是目前最活跃的地方依然 移动平台，虽然他也支持Web、桌面，甚至也将是Google Fuchsia下开发应用的主要工具。<br>但是现在，它只是活跃于移动端。</p>\n<p>那么，目前移动平台主要有哪些呢？没错，iOS、Android！</p>\n<p>于是，我们可以简单概述一下Flutter：</p>\n<p>Flutter目前被应用最广泛的就是作为iOS、Android跨平台解决方案，而且可以说是目前最优秀的跨平台解决方案。<br>它不仅仅性能优越，而且开发非常高效！</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_001.png\" alt=\"图1\"></p>\n<p>为什么需要这样一种跨平台解决方案呢？<br>待会儿我会讲到移动端开发的历史（各端独立开发到跨平台开发的出现）以及在整个历史进程中出现的各个痛点，直到Flutter的出现。</p>\n<h3 id=\"1-2-Flutter的特点\"><a href=\"#1-2-Flutter的特点\" class=\"headerlink\" title=\"1.2. Flutter的特点\"></a>1.2. Flutter的特点</h3><p>Google公司在国内做过很多宣讲，其中多次提到Flutter的几个特点：美观、快速、高效、开放。<br>这部分了解即可，后面学习过程中，慢慢体会。</p>\n<p>美观</p>\n<p>使用Flutter内置美丽的Material Design和Cupertinowidget（什么是widget，不着急）、丰富的motion API、平滑而自然的滑动效果和平台感知，为您的用户带来全新体验。</p>\n<p>当然，在我们真正学会使用它开发之前，这些东西不能深刻的体会，后面大家会慢慢体会到的</p>\n<p>快速</p>\n<p>后面有专门讲解为什么性能这么高，先做一个了解即可</p>\n<p>Flutter 的 UI 渲染性能很好。在生产环境下，Flutter 将代码编译成机器码执行，并充分利用 GPU 的图形加速能力，因此使用 Flutter 开发的移动应用即使在低配手机上也能实现每秒 60 帧的 UI 渲染速度。</p>\n<p>Flutter 引擎使用 C++ 编写，包括高效的 Skia 2D 渲染引擎，Dart 运行时和文本渲染库。</p>\n<p>这个引擎使得 Flutter 框架可以自由、灵活、高效地绘制 UI 组件。而应用开发者则可以用 Flutter 框架来轻松实现各种设计语言和动画效果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_002.png\" alt=\"图1\"></p>\n<p>高效</p>\n<p>对开发者来说，使用 Flutter 开发应用十分高效。<br>Flutter 广受好评的 Hot Reload (热重载) 功能可以在 1 秒内实现代码到 UI 的更新，使得开发操作周期被大幅缩短。</p>\n<p>另外，热重载能够在执行的时候保留应用的当前状态 (即 Stateful)，比如您可能在修改一个导航结构里的子页面，保留状态的热重载可以让您不需要重新从起始页一路点击回到这个子页面，而是在代码修改完成后即刻看到结果。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_003.png\" alt=\"图1\"></p>\n<p>开放</p>\n<p>Flutter 是开放的，它是一个完全开源的项目。全球的开发者都可以免费使用和拓展 Flutter 的源代码，并为 Flutter 的生态和文档作贡献。 我们已经看到许多中国开发者（比如闲鱼开发团队）活跃在社区中，并为 Flutter 做出了很多贡献。<br>github地址： <a href=\"https://github.com/flutter/flutter\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter</a></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-跨平台历史\"><a href=\"#二-跨平台历史\" class=\"headerlink\" title=\"二. 跨平台历史\"></a>二. 跨平台历史</h1><h3 id=\"2-1-平台独立开发\"><a href=\"#2-1-平台独立开发\" class=\"headerlink\" title=\"2.1. 平台独立开发\"></a>2.1. 平台独立开发</h3><p>目前移动端有两大系统：iOS和Android</p>\n<p>很多公司为了扩散自己的产品，都需要在两大系统上跑自己的应用程序App</p>\n<ul>\n<li><p>意味着Android系统上需要一个Android版本的App</p>\n</li>\n<li><p>意味着iOS系统上需要一个iOS版本的App</p>\n</li>\n<li><p>但是他们的开发方式完全不同！！！</p>\n</li>\n</ul>\n<p>iOS系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Objective-C（没用过的人会被他的语法吓到）。</p>\n</li>\n<li><p>2014年，苹果在WWDC大会上发布了新的语言Swift，Swift更加现代化，也更加接近于其他语言，被认为是Objective-C的替代品（但是到现在都还没有替代，两个都在用）。</p>\n</li>\n<li><p>也就是现在开发iOS系统上的应用需要掌握两门语言：Objective-C和Swift</p>\n</li>\n</ul>\n<p>Android系统</p>\n<ul>\n<li><p>最初，如果希望在其上开发应用程序，所采用的语言是Java</p>\n</li>\n<li><p>2011年JetBrains推出Kotlin项目，在Google I/O2017中，Google宣布在Android上为Kotlin提供最佳支持</p>\n</li>\n<li><p>也就是现在开发Android系统上的应用需要掌握两门语言：Java和Kotlin</p>\n</li>\n</ul>\n<p>通常在一个公司，很难让一个人同时去胜任iOS开发和Android开发两个岗位，所以在一家公司可能就需要同时有iOS组和Android组分别针对不同的系统进行开发。</p>\n<p>但是，对于一家小公司来说，这样的成本是非常高的。<br>在很长一段时间内，大家都在需求一种移动端的跨平台解决方案，希望可以通过一套代码开发出可以同时运行在iOS和Android两个系统上的应用程序.</p>\n<h3 id=\"2-2-跨平台解决方案\"><a href=\"#2-2-跨平台解决方案\" class=\"headerlink\" title=\"2.2. 跨平台解决方案\"></a>2.2. 跨平台解决方案</h3><p>基于 JavaScript 和 WebView的跨平台</p>\n<p>最早出现的跨平台框架是基于 JavaScript 和 WebView，代表框架有PhoneGap，Apache Cordova，Ionic 等等。</p>\n<p>主要是通过HTML来构建自己的界面，再将其显示在各个平台的WebView中。<br>但是它默认是不能调用本地的一些服务的（比如相机、蓝牙等），所以需要通过JavaScript进行桥接调用Native的一些代码来完成某些功能。<br>但是，它本身的体验并不理想，而且开发过程中的坑非常多。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_005.png\" alt=\"图1\"></p>\n<p>备受欢迎的React Native</p>\n<p>在寻求最佳跨平台解决方案的过程中，无疑React Native 是之前最优秀的一个。</p>\n<p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和安卓两大平台。</p>\n<p>RN使用JavaScript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。</p>\n<p>并且在保留基本渲染能力的基础上，用原生自带的 UI 组件实现代替了核心的渲染引擎，从而保证了良好的渲染性能。</p>\n<p>但是，由于RN的本质是通过JavaScript VM调用远程接口，通信相对比较低效，而且框架本身不负责渲染，而是是间接通过原生进行渲染的。</p>\n<p>还有一个就是在进行iOS和Android适配的过程中，还要求开发者对两大系统本身有所熟悉才行。</p>\n<p>所在在RN上做出非常多贡献的Airbnb之前就宣布放弃RN，而转向Native进行开发。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_006.png\" alt=\"图1\"></p>\n<p>可能是终极的解决方案: Flutter<br>从Flutter出现到现在，我个人就一直非常看好，因为它可能才是我们很久依赖所期待的跨平台的终极解决方案。<br>我们直接看下面这幅图来对比flutter - native - rn的区别</p>\n<ul>\n<li>Flutter利用Skia绘图引擎，直接通过CPU、GPU进行绘制，不需要依赖任何原生的控件（后面有原理讲解）</li>\n<li>Android操作系统中，我们编写的原生控件实际上也是依赖于Skia进行绘制，所以flutter在某些Android操作系统上甚至还要高于原生（因为原生Android中的Skia必须随着操作系统进行更新，而Flutter SDK中总是保持最新的）</li>\n<li>而类似于RN的框架，必须通过某些桥接的方式先转成原生进行调用，之后再进行渲染。</li>\n</ul>\n<p>具体Flutter如何实现接近于原生的高性能的，下一个章节我们具体分析。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-Flutter绘制原理\"><a href=\"#三-Flutter绘制原理\" class=\"headerlink\" title=\"三. Flutter绘制原理\"></a>三. Flutter绘制原理</h1><h3 id=\"3-1-Flutter渲染本质\"><a href=\"#3-1-Flutter渲染本质\" class=\"headerlink\" title=\"3.1. Flutter渲染本质\"></a>3.1. Flutter渲染本质</h3><p>问题：一个图像到底是如何显示到屏幕上的呢？<br>首先，你需要知道，我们在屏幕上可以看到的所有内容都是计算机绘制出来的图像，无论是视频还是GIF图片，还是操作系统给我们看到的图形化界面中的画面，都是图像。</p>\n<p>比如下面的一个GIF图片:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_009.png\" alt=\"图1\"></p>\n<p>我们将它分解出来，就会发现它是很多张图片连续播放所看到的画面:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_010.png\" alt=\"图1\"></p>\n<p>但是我们为什么能看到类似于动画的效果呢？<br>这是因为它播放的速度非常快，研究表明：</p>\n<ul>\n<li>当图片连续播放的频率超过16帧（16张图片），人眼就会感觉非常流畅，当少于16帧时，会感觉到卡顿</li>\n<li>所以我们平时看到的电影，通常都是24帧或者30帧的（李安之前拍摄120帧的电影，目的就是让图片间隔更小，画面更加的流畅）</li>\n</ul>\n<p>我们说回到电脑、手机屏幕的显示</p>\n<p>事实上显示器就是以固定的频率显示图像的，比如 iPhone的 60Hz、iPad Pro的 120Hz。</p>\n<p>一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync），所以 60Hz的屏幕就会一秒内发出 60次这样的信号。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_011.png\" alt=\"图1\"></p>\n<p>在计算机系统中，CPU、GPU和显示器以一种特定的方式协作：</p>\n<ul>\n<li>CPU将计算好的显示内容提交给 GPU；</li>\n<li>GPU渲染后放入帧缓冲区；</li>\n<li>视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示；<br>当然，Android、iOS 的 UI 渲染过程是如此，Flutter 也是如此，在整个 Flutter 架构中，Flutter 只关心向 GPU 提供显示数据，并不关心显示器、视频控制器以及 GPU 是如何工作的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_012.png\" alt=\"图1\"></p>\n<ul>\n<li><p>GPU将信号同步到 UI 线程</p>\n</li>\n<li><p>UI 线程用Dart来构建图层树</p>\n</li>\n<li><p>图层树在GPU 线程进行合成</p>\n</li>\n<li><p>合成后的视图数据提供给Skia 引擎</p>\n</li>\n<li><p>Skia 引擎通过OpenGL 或者 Vulkan将显示内容提供给GPU<br>这也是flutter区别于React Native的本质区别：</p>\n</li>\n<li><p>React Native 之类的框架，只是通过 JavaScript 虚拟机扩展调用系统组件，由 Android 和 iOS 系统进行组件的渲染；</p>\n</li>\n<li><p>Flutter 则是自己完成了组件渲染的闭环。</p>\n</li>\n</ul>\n<h3 id=\"3-2-Dart语言优势\"><a href=\"#3-2-Dart语言优势\" class=\"headerlink\" title=\"3.2. Dart语言优势\"></a>3.2. Dart语言优势</h3><p>Flutter为什么要选择Dart作为开发语言？</p>\n<p>有一种半开玩笑的说法： 因为Dart团队就在Flutter团队的旁边，沟通起来非常方便（是玩笑，也是事实，dart语言本身针对Flutter进行过很多次的优化）</p>\n<p>早期的 Flutter 团队评估了十多种语言，并选择了 Dart，因为它符合他们构建用户界面的方式。<br>其实针对于前端开发者来说，选择JavaScript看起来更合适，因为大家的入门成本会更低，会有更多人选择学习和使用Flutter。</p>\n<p>但是Flutter团队从一开始就决定，不将就！！！</p>\n<ul>\n<li><p>Dart 是 AOT（Ahead Of Time）编译的，编译成快速、可预测的本地代码，使 Flutter 几乎都可以使用 Dart 编写。这不仅使 Flutter 变得更快，而且几乎所有的东西（包括所有的小部件）都可以定制。</p>\n</li>\n<li><p>Dart 也可以 JIT（Just In Time）编译，开发周期异常快，工作流颠覆常规（包括 Flutter 流行的亚秒级有状态热重载）。</p>\n</li>\n<li><p>Dart 可以更轻松地创建以 60fps 运行的流畅动画和转场。Dart 可以在没有锁的情况下进行对象分配和垃圾回收。就像 JavaScript 一样，Dart 避免了抢占式调度和共享内存（因而也不需要锁）。由于 Flutter 应用程序被编译为本地代码，因此它们不需要在领域之间建立缓慢的桥梁（例如，JavaScript 到本地代码）。它的启动速度也快得多。</p>\n</li>\n<li><p>Dart 使 Flutter 不需要单独的声明式布局语言，如 JSX 或 XML，或单独的可视化界面构建器，因为 Dart 的声明式编程布局易于阅读和可视化。所有的布局使用一种语言，聚集在一处，Flutter 很容易提供高级工具，使布局更简单。</p>\n</li>\n<li><p>开发人员发现 Dart 特别容易学习，因为它具有静态和动态语言用户都熟悉的特性。</p>\n</li>\n</ul>\n<p>并非所有这些功能都是 Dart 独有的，但它们的组合却恰到好处，使 Dart 在实现 Flutter 方面独一无二。因此，没有 Dart，很难想象 Flutter 像现在这样强大。</p>\n<h3 id=\"3-3-渲染引擎skia\"><a href=\"#3-3-渲染引擎skia\" class=\"headerlink\" title=\"3.3. 渲染引擎skia\"></a>3.3. 渲染引擎skia</h3><p>想要了解Flutter的本质，必须先了解它的底层图像渲染引擎 Skia，前面提到了 Flutter只关心如何构建视图抽象结构，向 GPU提供视图数据。Skia就是 Flutter向 GPU提供数据的途径。</p>\n<p>Skia全名Skia Graphics Library（SGL）是一个由C++编写的开源图形库，能在低端设备如手机上呈现高质量的2D图形，最初由Skia公司开发，后被Google收购，应用于Android、Google Chrome、Chrome OS等等当中。</p>\n<p>目前，Skia 已然是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；</p>\n<p>而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics/Core Animation/Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。</p>\n<p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性了。也就是说，Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/01-flutter%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B/01_013.png\" alt=\"图1\"></p>\n<h1 id=\"四-如何学习flutter\"><a href=\"#四-如何学习flutter\" class=\"headerlink\" title=\"四. 如何学习flutter\"></a>四. 如何学习flutter</h1><h3 id=\"4-1-大前端学不动了\"><a href=\"#4-1-大前端学不动了\" class=\"headerlink\" title=\"4.1. 大前端学不动了\"></a>4.1. 大前端学不动了</h3><p>很多人看到Google的flutter框架的时候，第一反应就是：别出新东西了，实在学不动了。</p>\n<p>但是作为大前端开发者就是这样，各种折腾：</p>\n<ul>\n<li>客户端开发者：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）</li>\n<li>前端开发者：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）</li>\n</ul>\n<p>大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西，新技术会层出不穷。<br>但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，所以我们要学会拥抱这种变化。<br>并且很多知识在学习的过程中，你会发现他们都是相同的，并不是说都要从头再来，最重要的是建立属于自己的知识体系。</p>\n<h3 id=\"4-2-flutter学得会吗？\"><a href=\"#4-2-flutter学得会吗？\" class=\"headerlink\" title=\"4.2. flutter学得会吗？\"></a>4.2. flutter学得会吗？</h3><p>很多人对于学习望而却步，主要是基于两点考虑：</p>\n<ul>\n<li>学习一门全新的语言：dart，也就是你必须从你原来熟悉的语言JavaScript或Swift或Java或其他转向这门全新的语言。</li>\n<li>flutter是全新的跨平台技术，意味着自己需要去学习很多新的内容：开发模式、框架原理、底层原理渲染机制等等</li>\n</ul>\n<p>dart语言并不复杂，而且非常现代化</p>\n<ul>\n<li>首先，所有编程语言都是大同小异，你花两天的时间去练习一定可以快速掌握它。（我个人一直认为一个开发者不可能在整个开发生涯只会一种编程语言，不现实！）</li>\n<li>其次，dart语言几乎集结了现代语言所有好用的特性，并不复杂（后面我们慢慢来学）</li>\n</ul>\n<p>flutter并没有非常多创新的概念：</p>\n<ul>\n<li>flutter从其他框架中借鉴了非常多设计思想：框架原理、底层渲染机制、事件处理方式都大同小异。</li>\n<li>声明式编程方式、组件化开发也是现代框架都有的特性，比如Vue、React。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"03-Hello Flutter","toc":true,"date":"2020-09-02T12:36:52.000Z","_content":"\n\n# 一：创建Flutter应用\n### 1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。\n\n这里我先选择通过终端（Windows和macOS都是一样的命令）\n\n打开终端 - 执行如下命令：\n\n```\nflutter create helloflutter\n```\n\n注意：后面的名称不能由特殊符号，也不能由大写\n\n![图1](03-Hello-Flutter/03_001.png)\n\n### 1.2. 项目跑在模拟器\n\n通过一个你喜欢的开发工具打开（我这里暂时选择Android Studio）\n\n![图1](03-Hello-Flutter/03_002.png)\n\n选择你要启动的设备，点击 运行 按钮：\n\n![图1](03-Hello-Flutter/03_003.png)\n\n我把项目运行在了两个模拟器上\n\n![图1](03-Hello-Flutter/03_004.png)\n\n### 1.3. 体验Flutter热重载\n\n对于我们开发测试阶段，如果每次修改代码都需要重新编译整个项目再加载的话，那每次可能都需要花费10秒左右甚至是几分钟的时间（电脑太慢的话），这样的开发效率是非常低的。\n\n现在前端开发都支持热重载（Hot Reload），可以大大加快我们的开发效率。\n\n- 热重载可以在无需重新编译代码、重新启动应用程序的情况下，看到修改后界面的效果\n\nFlutter在开发阶段使用JIT编译模式（后面我会讲解什么是JIT模式），所以可以做到热重载来提高我们的开发效率\n\n下面我们体会一下热重载，后面有时间我们来分析热重载是如何实现的\n\n将下面红框中的内容改成Hello Flutter，保存一下应用程序\n\n- 你会发现在不到1秒钟内，界面直接发生了刷新\n- 并且没有应用程序没有进行任何的重新，效率非常高\n\n![图1](03-Hello-Flutter/03_005.png)\n\n如果热重载不起作用，我们也可以点击右上角的 Hot Restart，并不需要重新运行项目\n\n![图1](03-Hello-Flutter/03_006.png)\n\n### 1.4. 工程目录分析\n\nFlutter工程创建完毕会，会感觉比较复杂，我们来看下图：\n\n![图1](03-Hello-Flutter/03_007.png)\n\n目录包含哪些东西呢？\n\n- 其中包含Flutter开发和测试需要的lib、test，在开发过程中，我们主要使用的就是lib目录\n- 另外一些是管理项目的配置文件信息等，当然也包括一些Git相关的文件\n- 除此之外，还包括一个Android子工程和iOS子工程\n\n为什么包含Android子工程和iOS子工程呢？\n\n- 这是因为作为一个跨平台的开发方案，最终还是要嵌入到Android工程或者iOS工程中来运行的\n- 并且在开发过程中也需要调用原生的一些功能\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/03-Hello-Flutter.md","raw":"---\ntitle: 03-Hello Flutter\ntoc: true\ndate: 2020-09-02 20:36:52\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一：创建Flutter应用\n### 1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。\n\n这里我先选择通过终端（Windows和macOS都是一样的命令）\n\n打开终端 - 执行如下命令：\n\n```\nflutter create helloflutter\n```\n\n注意：后面的名称不能由特殊符号，也不能由大写\n\n![图1](03-Hello-Flutter/03_001.png)\n\n### 1.2. 项目跑在模拟器\n\n通过一个你喜欢的开发工具打开（我这里暂时选择Android Studio）\n\n![图1](03-Hello-Flutter/03_002.png)\n\n选择你要启动的设备，点击 运行 按钮：\n\n![图1](03-Hello-Flutter/03_003.png)\n\n我把项目运行在了两个模拟器上\n\n![图1](03-Hello-Flutter/03_004.png)\n\n### 1.3. 体验Flutter热重载\n\n对于我们开发测试阶段，如果每次修改代码都需要重新编译整个项目再加载的话，那每次可能都需要花费10秒左右甚至是几分钟的时间（电脑太慢的话），这样的开发效率是非常低的。\n\n现在前端开发都支持热重载（Hot Reload），可以大大加快我们的开发效率。\n\n- 热重载可以在无需重新编译代码、重新启动应用程序的情况下，看到修改后界面的效果\n\nFlutter在开发阶段使用JIT编译模式（后面我会讲解什么是JIT模式），所以可以做到热重载来提高我们的开发效率\n\n下面我们体会一下热重载，后面有时间我们来分析热重载是如何实现的\n\n将下面红框中的内容改成Hello Flutter，保存一下应用程序\n\n- 你会发现在不到1秒钟内，界面直接发生了刷新\n- 并且没有应用程序没有进行任何的重新，效率非常高\n\n![图1](03-Hello-Flutter/03_005.png)\n\n如果热重载不起作用，我们也可以点击右上角的 Hot Restart，并不需要重新运行项目\n\n![图1](03-Hello-Flutter/03_006.png)\n\n### 1.4. 工程目录分析\n\nFlutter工程创建完毕会，会感觉比较复杂，我们来看下图：\n\n![图1](03-Hello-Flutter/03_007.png)\n\n目录包含哪些东西呢？\n\n- 其中包含Flutter开发和测试需要的lib、test，在开发过程中，我们主要使用的就是lib目录\n- 另外一些是管理项目的配置文件信息等，当然也包括一些Git相关的文件\n- 除此之外，还包括一个Android子工程和iOS子工程\n\n为什么包含Android子工程和iOS子工程呢？\n\n- 这是因为作为一个跨平台的开发方案，最终还是要嵌入到Android工程或者iOS工程中来运行的\n- 并且在开发过程中也需要调用原生的一些功能\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/03-Hello-Flutter","published":1,"updated":"2020-09-10T12:18:34.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7weng9001mu3s696ztc7rw","content":"<h1 id=\"一：创建Flutter应用\"><a href=\"#一：创建Flutter应用\" class=\"headerlink\" title=\"一：创建Flutter应用\"></a>一：创建Flutter应用</h1><h3 id=\"1-1-有两种方式创建Flutter应用：通过终端，通过编辑器。\"><a href=\"#1-1-有两种方式创建Flutter应用：通过终端，通过编辑器。\" class=\"headerlink\" title=\"1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。\"></a>1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。</h3><p>这里我先选择通过终端（Windows和macOS都是一样的命令）</p>\n<p>打开终端 - 执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create helloflutter</span><br></pre></td></tr></table></figure>\n\n<p>注意：后面的名称不能由特殊符号，也不能由大写</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-项目跑在模拟器\"><a href=\"#1-2-项目跑在模拟器\" class=\"headerlink\" title=\"1.2. 项目跑在模拟器\"></a>1.2. 项目跑在模拟器</h3><p>通过一个你喜欢的开发工具打开（我这里暂时选择Android Studio）</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_002.png\" alt=\"图1\"></p>\n<p>选择你要启动的设备，点击 运行 按钮：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_003.png\" alt=\"图1\"></p>\n<p>我把项目运行在了两个模拟器上</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-体验Flutter热重载\"><a href=\"#1-3-体验Flutter热重载\" class=\"headerlink\" title=\"1.3. 体验Flutter热重载\"></a>1.3. 体验Flutter热重载</h3><p>对于我们开发测试阶段，如果每次修改代码都需要重新编译整个项目再加载的话，那每次可能都需要花费10秒左右甚至是几分钟的时间（电脑太慢的话），这样的开发效率是非常低的。</p>\n<p>现在前端开发都支持热重载（Hot Reload），可以大大加快我们的开发效率。</p>\n<ul>\n<li>热重载可以在无需重新编译代码、重新启动应用程序的情况下，看到修改后界面的效果</li>\n</ul>\n<p>Flutter在开发阶段使用JIT编译模式（后面我会讲解什么是JIT模式），所以可以做到热重载来提高我们的开发效率</p>\n<p>下面我们体会一下热重载，后面有时间我们来分析热重载是如何实现的</p>\n<p>将下面红框中的内容改成Hello Flutter，保存一下应用程序</p>\n<ul>\n<li>你会发现在不到1秒钟内，界面直接发生了刷新</li>\n<li>并且没有应用程序没有进行任何的重新，效率非常高</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_005.png\" alt=\"图1\"></p>\n<p>如果热重载不起作用，我们也可以点击右上角的 Hot Restart，并不需要重新运行项目</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_006.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-工程目录分析\"><a href=\"#1-4-工程目录分析\" class=\"headerlink\" title=\"1.4. 工程目录分析\"></a>1.4. 工程目录分析</h3><p>Flutter工程创建完毕会，会感觉比较复杂，我们来看下图：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_007.png\" alt=\"图1\"></p>\n<p>目录包含哪些东西呢？</p>\n<ul>\n<li>其中包含Flutter开发和测试需要的lib、test，在开发过程中，我们主要使用的就是lib目录</li>\n<li>另外一些是管理项目的配置文件信息等，当然也包括一些Git相关的文件</li>\n<li>除此之外，还包括一个Android子工程和iOS子工程</li>\n</ul>\n<p>为什么包含Android子工程和iOS子工程呢？</p>\n<ul>\n<li>这是因为作为一个跨平台的开发方案，最终还是要嵌入到Android工程或者iOS工程中来运行的</li>\n<li>并且在开发过程中也需要调用原生的一些功能</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一：创建Flutter应用\"><a href=\"#一：创建Flutter应用\" class=\"headerlink\" title=\"一：创建Flutter应用\"></a>一：创建Flutter应用</h1><h3 id=\"1-1-有两种方式创建Flutter应用：通过终端，通过编辑器。\"><a href=\"#1-1-有两种方式创建Flutter应用：通过终端，通过编辑器。\" class=\"headerlink\" title=\"1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。\"></a>1.1.  有两种方式创建Flutter应用：通过终端，通过编辑器。</h3><p>这里我先选择通过终端（Windows和macOS都是一样的命令）</p>\n<p>打开终端 - 执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create helloflutter</span><br></pre></td></tr></table></figure>\n\n<p>注意：后面的名称不能由特殊符号，也不能由大写</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-项目跑在模拟器\"><a href=\"#1-2-项目跑在模拟器\" class=\"headerlink\" title=\"1.2. 项目跑在模拟器\"></a>1.2. 项目跑在模拟器</h3><p>通过一个你喜欢的开发工具打开（我这里暂时选择Android Studio）</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_002.png\" alt=\"图1\"></p>\n<p>选择你要启动的设备，点击 运行 按钮：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_003.png\" alt=\"图1\"></p>\n<p>我把项目运行在了两个模拟器上</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-体验Flutter热重载\"><a href=\"#1-3-体验Flutter热重载\" class=\"headerlink\" title=\"1.3. 体验Flutter热重载\"></a>1.3. 体验Flutter热重载</h3><p>对于我们开发测试阶段，如果每次修改代码都需要重新编译整个项目再加载的话，那每次可能都需要花费10秒左右甚至是几分钟的时间（电脑太慢的话），这样的开发效率是非常低的。</p>\n<p>现在前端开发都支持热重载（Hot Reload），可以大大加快我们的开发效率。</p>\n<ul>\n<li>热重载可以在无需重新编译代码、重新启动应用程序的情况下，看到修改后界面的效果</li>\n</ul>\n<p>Flutter在开发阶段使用JIT编译模式（后面我会讲解什么是JIT模式），所以可以做到热重载来提高我们的开发效率</p>\n<p>下面我们体会一下热重载，后面有时间我们来分析热重载是如何实现的</p>\n<p>将下面红框中的内容改成Hello Flutter，保存一下应用程序</p>\n<ul>\n<li>你会发现在不到1秒钟内，界面直接发生了刷新</li>\n<li>并且没有应用程序没有进行任何的重新，效率非常高</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_005.png\" alt=\"图1\"></p>\n<p>如果热重载不起作用，我们也可以点击右上角的 Hot Restart，并不需要重新运行项目</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_006.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-工程目录分析\"><a href=\"#1-4-工程目录分析\" class=\"headerlink\" title=\"1.4. 工程目录分析\"></a>1.4. 工程目录分析</h3><p>Flutter工程创建完毕会，会感觉比较复杂，我们来看下图：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/03-Hello-Flutter/03_007.png\" alt=\"图1\"></p>\n<p>目录包含哪些东西呢？</p>\n<ul>\n<li>其中包含Flutter开发和测试需要的lib、test，在开发过程中，我们主要使用的就是lib目录</li>\n<li>另外一些是管理项目的配置文件信息等，当然也包括一些Git相关的文件</li>\n<li>除此之外，还包括一个Android子工程和iOS子工程</li>\n</ul>\n<p>为什么包含Android子工程和iOS子工程呢？</p>\n<ul>\n<li>这是因为作为一个跨平台的开发方案，最终还是要嵌入到Android工程或者iOS工程中来运行的</li>\n<li>并且在开发过程中也需要调用原生的一些功能</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"04-Android Studio 中下载Android SDK的两种方式","toc":true,"date":"2020-09-02T12:37:06.000Z","_content":"\n\n# 方式一：网站下载：https://androidsdkmanager.azurewebsites.net/SDKPlatform\n\n\n# 方式二、设置HTTP Proxy\n\n1. 打开Settings\n\n2. 点击HTTP Proxy，选择Manual proxy configuration：\n\t\t设置 Host name 为：mirrors.opencas.cn(备用服务器地址：mirrors.opencas.org mirrors.opencas.ac.cn)\n\t\n\t设置 Port number 为：80\n\t\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_001.png)\n\n3. 点击Android SDK，选择SDK Update sites，勾选上Force Https://…，点击Apply\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_002.png)\n4. 点击ok，重新进入Android SDK即可. 最近设置代理已经不好用了，如果未能成功请尝试第二种方式\n\n\n# 方式二、更改hosts文件\n1. 首先取消方式一中设置的HTTP Proxy\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_003.png)\n2. 进入网站http://ping.chinaz.com/，进行 dl.google.com ping检查，选择大陆响应时间最短的IP地址\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_004.png)\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_005.png)\n\n3. 进入cmd对此IP地址进行ping测试，如果可以将（IP地址 dl.google.com）加入hosts文件中, hosts文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_006.png)\n\n4. 点击Apply、OK，重新打开Android SDK，可以看到列表已经获得\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_007.png)\n\n\t勾选对应的项点击Apply即可下载安装。 \n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_008.png)\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式.md","raw":"---\ntitle: 04-Android Studio 中下载Android SDK的两种方式\ntoc: true\ndate: 2020-09-02 20:37:06\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 方式一：网站下载：https://androidsdkmanager.azurewebsites.net/SDKPlatform\n\n\n# 方式二、设置HTTP Proxy\n\n1. 打开Settings\n\n2. 点击HTTP Proxy，选择Manual proxy configuration：\n\t\t设置 Host name 为：mirrors.opencas.cn(备用服务器地址：mirrors.opencas.org mirrors.opencas.ac.cn)\n\t\n\t设置 Port number 为：80\n\t\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_001.png)\n\n3. 点击Android SDK，选择SDK Update sites，勾选上Force Https://…，点击Apply\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_002.png)\n4. 点击ok，重新进入Android SDK即可. 最近设置代理已经不好用了，如果未能成功请尝试第二种方式\n\n\n# 方式二、更改hosts文件\n1. 首先取消方式一中设置的HTTP Proxy\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_003.png)\n2. 进入网站http://ping.chinaz.com/，进行 dl.google.com ping检查，选择大陆响应时间最短的IP地址\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_004.png)\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_005.png)\n\n3. 进入cmd对此IP地址进行ping测试，如果可以将（IP地址 dl.google.com）加入hosts文件中, hosts文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_006.png)\n\n4. 点击Apply、OK，重新打开Android SDK，可以看到列表已经获得\n\n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_007.png)\n\n\t勾选对应的项点击Apply即可下载安装。 \n\t![图1](04-Android-Studio-中下载Android-SDK的两种方式/04_008.png)\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式","published":1,"updated":"2020-09-10T12:28:02.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenga001pu3s61m9v0umc","content":"<h1 id=\"方式一：网站下载：https-androidsdkmanager-azurewebsites-net-SDKPlatform\"><a href=\"#方式一：网站下载：https-androidsdkmanager-azurewebsites-net-SDKPlatform\" class=\"headerlink\" title=\"方式一：网站下载：https://androidsdkmanager.azurewebsites.net/SDKPlatform\"></a>方式一：网站下载：<a href=\"https://androidsdkmanager.azurewebsites.net/SDKPlatform\" target=\"_blank\" rel=\"noopener\">https://androidsdkmanager.azurewebsites.net/SDKPlatform</a></h1><h1 id=\"方式二、设置HTTP-Proxy\"><a href=\"#方式二、设置HTTP-Proxy\" class=\"headerlink\" title=\"方式二、设置HTTP Proxy\"></a>方式二、设置HTTP Proxy</h1><ol>\n<li><p>打开Settings</p>\n</li>\n<li><p>点击HTTP Proxy，选择Manual proxy configuration：</p>\n<pre><code>设置 Host name 为：mirrors.opencas.cn(备用服务器地址：mirrors.opencas.org mirrors.opencas.ac.cn)</code></pre><p> 设置 Port number 为：80</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_001.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击Android SDK，选择SDK Update sites，勾选上Force Https://…，点击Apply<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_002.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击ok，重新进入Android SDK即可. 最近设置代理已经不好用了，如果未能成功请尝试第二种方式</p>\n</li>\n</ol>\n<h1 id=\"方式二、更改hosts文件\"><a href=\"#方式二、更改hosts文件\" class=\"headerlink\" title=\"方式二、更改hosts文件\"></a>方式二、更改hosts文件</h1><ol>\n<li><p>首先取消方式一中设置的HTTP Proxy<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_003.png\" alt=\"图1\"></p>\n</li>\n<li><p>进入网站<a href=\"http://ping.chinaz.com/，进行\" target=\"_blank\" rel=\"noopener\">http://ping.chinaz.com/，进行</a> dl.google.com ping检查，选择大陆响应时间最短的IP地址</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_004.png\" alt=\"图1\"></p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_005.png\" alt=\"图1\"></p>\n</li>\n<li><p>进入cmd对此IP地址进行ping测试，如果可以将（IP地址 dl.google.com）加入hosts文件中, hosts文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_006.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击Apply、OK，重新打开Android SDK，可以看到列表已经获得</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_007.png\" alt=\"图1\"></p>\n<p> 勾选对应的项点击Apply即可下载安装。<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_008.png\" alt=\"图1\"></p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"方式一：网站下载：https-androidsdkmanager-azurewebsites-net-SDKPlatform\"><a href=\"#方式一：网站下载：https-androidsdkmanager-azurewebsites-net-SDKPlatform\" class=\"headerlink\" title=\"方式一：网站下载：https://androidsdkmanager.azurewebsites.net/SDKPlatform\"></a>方式一：网站下载：<a href=\"https://androidsdkmanager.azurewebsites.net/SDKPlatform\" target=\"_blank\" rel=\"noopener\">https://androidsdkmanager.azurewebsites.net/SDKPlatform</a></h1><h1 id=\"方式二、设置HTTP-Proxy\"><a href=\"#方式二、设置HTTP-Proxy\" class=\"headerlink\" title=\"方式二、设置HTTP Proxy\"></a>方式二、设置HTTP Proxy</h1><ol>\n<li><p>打开Settings</p>\n</li>\n<li><p>点击HTTP Proxy，选择Manual proxy configuration：</p>\n<pre><code>设置 Host name 为：mirrors.opencas.cn(备用服务器地址：mirrors.opencas.org mirrors.opencas.ac.cn)</code></pre><p> 设置 Port number 为：80</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_001.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击Android SDK，选择SDK Update sites，勾选上Force Https://…，点击Apply<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_002.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击ok，重新进入Android SDK即可. 最近设置代理已经不好用了，如果未能成功请尝试第二种方式</p>\n</li>\n</ol>\n<h1 id=\"方式二、更改hosts文件\"><a href=\"#方式二、更改hosts文件\" class=\"headerlink\" title=\"方式二、更改hosts文件\"></a>方式二、更改hosts文件</h1><ol>\n<li><p>首先取消方式一中设置的HTTP Proxy<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_003.png\" alt=\"图1\"></p>\n</li>\n<li><p>进入网站<a href=\"http://ping.chinaz.com/，进行\" target=\"_blank\" rel=\"noopener\">http://ping.chinaz.com/，进行</a> dl.google.com ping检查，选择大陆响应时间最短的IP地址</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_004.png\" alt=\"图1\"></p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_005.png\" alt=\"图1\"></p>\n</li>\n<li><p>进入cmd对此IP地址进行ping测试，如果可以将（IP地址 dl.google.com）加入hosts文件中, hosts文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_006.png\" alt=\"图1\"></p>\n</li>\n<li><p>点击Apply、OK，重新打开Android SDK，可以看到列表已经获得</p>\n<p> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_007.png\" alt=\"图1\"></p>\n<p> 勾选对应的项点击Apply即可下载安装。<br> <img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/04-Android-Studio-%E4%B8%AD%E4%B8%8B%E8%BD%BDAndroid-SDK%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/04_008.png\" alt=\"图1\"></p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"08-按钮变小设置","toc":true,"date":"2020-09-02T12:38:11.000Z","_content":"\n\n### 1，通过上边的了解，我们发现，按钮是有外边距的\n\n![图1](08-按钮变小设置/08_001.png)\n\n当前实现的代码：\n\n```\nWidget getDemo1(){\n  return Column(\n    children: <Widget>[\n      FlatButton(\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      ),\n      FlatButton(\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      )\n    ],\n  );\n}\n```\n\n解决办法：添加属性设置：\n\nmaterialTapTargetSize:MaterialTapTargetSize.shrinkWrap,   //最小包裹\n\n![图1](08-按钮变小设置/08_002.png)\n\n实现代码：\n\n![图1](08-按钮变小设置/08_003.png)\n\n### 2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\n\n![图1](08-按钮变小设置/08_004.png)\n\n![图1](08-按钮变小设置/08_005.png)\n\n那么如何设置按钮的大小呢？\n\n解决办法：\n\n将FlatButton用ButtonTheme组件包裹起来，并且设置宽度和高度, 以及内边距\n\n![图1](08-按钮变小设置/08_006.png)\n\n效果:\n\n![图1](08-按钮变小设置/08_007.png)\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/08-按钮变小设置.md","raw":"---\ntitle: 08-按钮变小设置\ntoc: true\ndate: 2020-09-02 20:38:11\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n### 1，通过上边的了解，我们发现，按钮是有外边距的\n\n![图1](08-按钮变小设置/08_001.png)\n\n当前实现的代码：\n\n```\nWidget getDemo1(){\n  return Column(\n    children: <Widget>[\n      FlatButton(\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      ),\n      FlatButton(\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      )\n    ],\n  );\n}\n```\n\n解决办法：添加属性设置：\n\nmaterialTapTargetSize:MaterialTapTargetSize.shrinkWrap,   //最小包裹\n\n![图1](08-按钮变小设置/08_002.png)\n\n实现代码：\n\n![图1](08-按钮变小设置/08_003.png)\n\n### 2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\n\n![图1](08-按钮变小设置/08_004.png)\n\n![图1](08-按钮变小设置/08_005.png)\n\n那么如何设置按钮的大小呢？\n\n解决办法：\n\n将FlatButton用ButtonTheme组件包裹起来，并且设置宽度和高度, 以及内边距\n\n![图1](08-按钮变小设置/08_006.png)\n\n效果:\n\n![图1](08-按钮变小设置/08_007.png)\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/08-按钮变小设置","published":1,"updated":"2020-09-18T14:04:10.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengb001ru3s6a7c73zul","content":"<h3 id=\"1，通过上边的了解，我们发现，按钮是有外边距的\"><a href=\"#1，通过上边的了解，我们发现，按钮是有外边距的\" class=\"headerlink\" title=\"1，通过上边的了解，我们发现，按钮是有外边距的\"></a>1，通过上边的了解，我们发现，按钮是有外边距的</h3><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_001.png\" alt=\"图1\"></p>\n<p>当前实现的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget getDemo1()&#123;</span><br><span class=\"line\">  return Column(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：添加属性设置：</p>\n<p>materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,   //最小包裹</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_003.png\" alt=\"图1\"></p>\n<h3 id=\"2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\"><a href=\"#2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\" class=\"headerlink\" title=\"2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\"></a>2，将文字设置为1，我们发现，按钮是有最小宽度和高度的</h3><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_004.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_005.png\" alt=\"图1\"></p>\n<p>那么如何设置按钮的大小呢？</p>\n<p>解决办法：</p>\n<p>将FlatButton用ButtonTheme组件包裹起来，并且设置宽度和高度, 以及内边距</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_006.png\" alt=\"图1\"></p>\n<p>效果:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_007.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1，通过上边的了解，我们发现，按钮是有外边距的\"><a href=\"#1，通过上边的了解，我们发现，按钮是有外边距的\" class=\"headerlink\" title=\"1，通过上边的了解，我们发现，按钮是有外边距的\"></a>1，通过上边的了解，我们发现，按钮是有外边距的</h3><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_001.png\" alt=\"图1\"></p>\n<p>当前实现的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget getDemo1()&#123;</span><br><span class=\"line\">  return Column(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：添加属性设置：</p>\n<p>materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,   //最小包裹</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_003.png\" alt=\"图1\"></p>\n<h3 id=\"2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\"><a href=\"#2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\" class=\"headerlink\" title=\"2，将文字设置为1，我们发现，按钮是有最小宽度和高度的\"></a>2，将文字设置为1，我们发现，按钮是有最小宽度和高度的</h3><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_004.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_005.png\" alt=\"图1\"></p>\n<p>那么如何设置按钮的大小呢？</p>\n<p>解决办法：</p>\n<p>将FlatButton用ButtonTheme组件包裹起来，并且设置宽度和高度, 以及内边距</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_006.png\" alt=\"图1\"></p>\n<p>效果:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/08-%E6%8C%89%E9%92%AE%E5%8F%98%E5%B0%8F%E8%AE%BE%E7%BD%AE/08_007.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-Dart(二)","toc":true,"date":"2020-09-02T12:37:45.000Z","_content":"\n\n# 一. 运算符\n这里，我只列出来相对其他语言比较特殊的运算符，因为某些运算符太简单了，不浪费时间，比如+、-、+=、==。\n\n你可能会疑惑，Dart为什么要搞出这么多特殊的运算符呢？\n\n你要坚信一点：所有这些特殊的运算符都是为了让我们在开发中可以更加方便的操作，而不是让我们的编码变得更加复杂。\n\n### 1.1. 除法、整除、取模运算\n我们来看一下除法、整除、取模运算\n\n![图1](06-Dart-二/06_001.png)\n\n\n### 1.2. ??=赋值操作\ndart有一个很多语言都不具备的赋值运算符：\n\n- 当变量为null时，使用后面的内容进行赋值。\n- 当变量有值时，使用自己原来的值。\n\n![图1](06-Dart-二/06_002.png)\n\n\n### 1.3. 条件运算符：\nDart中包含一直比较特殊的条件运算符：expr1 ?? expr2\n\n- 如果expr1是null，则返回expr2的结果;\n- 如果expr1不是null，直接使用expr1的结果。\n\n![图1](06-Dart-二/06_003.png)\n\n\n\n### 1.4. 级联语法：..\n某些时候，我们希望对一个对象进行连续的操作，这个时候可以使用级联语法\n\n![图1](06-Dart-二/06_004.png)\n\n# 二. 流程控制\n### 2.1. if和else\n和其他语言用法一样\n\n这里有一个注意点：不支持非空即真或者非0即真，必须有明确的bool类型\n\n - 我们来看下面name为null的判断\n\n![图1](06-Dart-二/06_005.png)\n\n### 2.2. 循环操作\n基本的for循环\n\n\n![图1](06-Dart-二/06_006.png)\n\n\nfor in遍历List和Set类型\n\n![图1](06-Dart-二/06_007.png)\n\nwhile和do-while和其他语言一致\n\nbreak和continue用法也是一致\n\n### 2.3. switch-case\n普通的switch使用\n\n- 注意：每一个case语句，默认情况下必须以一个break结尾\n\n![图1](06-Dart-二/06_008.png)\n\n\n# 三. 类和对象\nDart是一个面向对象的语言，面向对象中非常重要的概念就是类，类产生了对象。\n\n这一节，我们就具体来学习类和对象，但是Dart对类进行了很多其他语言没有的特性，所以，这里我会花比较长的篇幅来讲解。\n\n### 3.1. 类的定义\n在Dart中，定义类用class关键字。\n\n类通常有两部分组成：成员（member）和方法（method）。\n\n定义类的伪代码如下：\n\n![图1](06-Dart-二/06_009.png)\n\n编写一个简单的Person类：\n\n- 这里有一个注意点: 我们在方法中使用属性(成员/实例变量)时，并没有加this；\n- Dart的开发风格中，在方法中通常使用属性时，会省略this，但是有命名冲突时，this不能省略；\n\n![图1](06-Dart-二/06_010.png)\n\n我们来使用这个类，创建对应的对象：\n\n- 注意：从Dart2开始，new关键字可以省略。\n\n![图1](06-Dart-二/06_011.png)\n\n### 3.2. 构造方法\n#### 3.2.1. 普通构造方法\n我们知道, 当通过类创建一个对象时，会调用这个类的构造方法。\n\n- 当类中没有明确指定构造方法时，将默认拥有一个无参的构造方法。\n- 前面的Person中我们就是在调用这个构造方法.\n\n我们也可以根据自己的需求，定义自己的构造方法:\n\n**注意一：**当有了自己的构造方法时，默认的构造方法将会失效，不能使用\n\n- 当然，你可能希望明确的写一个默认的构造方法，但是会和我们自定义的构造方法冲突；\n- 这是因为Dart本身不支持函数的重载（名称相同, 参数不同的方式）。\n\n**注意二：**这里我还实现了toString方法\n\n![图1](06-Dart-二/06_012.png)\n\n另外，在实现构造方法时，通常做的事情就是通过**参数给属性**赋值\n\n为了简化这一过程, Dart提供了一种更加简洁的语法糖形式.\n\n上面的构造方法可以优化成下面的写法：\n\n![图1](06-Dart-二/06_013.png)\n\n#### 3.2.2. 命名构造函数\n\n但是在开发中, 我们确实希望实现更多的构造方法，怎么办呢？\n\n - 因为不支持方法（函数）的重载，所以我们没办法创建相同名称的构造方法。\n\n我们需要使用命名构造函数:\n\n![图1](06-Dart-二/06_014.png)\n\n在之后的开发中, 我们也可以利用命名构造方法，提供更加便捷的创建对象方式:\n\n - 比如开发中，我们需要经常将一个Map转成对象，可以提供如下的构造方法\n\n![图1](06-Dart-二/06_015.png)\n\n#### 3.2.3. 初始化列表\n\n我们来重新定义一个类Point, 传入x/y，可以得到它们的距离distance:\n\n![图1](06-Dart-二/06_016.png)\n\n上面这种初始化变量的方法, 我们称之为初始化列表(Initializer list)\n\n#### 3.2.4. 重定向构造方法\n在某些情况下, 我们希望在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：\n\n - 在一个构造函数中，去调用另外一个构造函数（注意：是在冒号后面使用this调用）\n\n![图1](06-Dart-二/06_017.png)\n\n#### 3.2.5. 常量构造方法\n在某些情况下，传入相同值时，我们希望返回同一个对象，这个时候，可以使用常量构造方法.\n\n默认情况下，创建对象时，即使传入相同的参数，创建出来的也不是同一个对象，看下面代码:\n\n - 这里我们使用identical(对象1, 对象2)函数来判断两个对象是否是同一个对象:\n\n![图1](06-Dart-二/06_018.png)\n\n但是, 如果将构造方法前加const进行修饰，那么可以保证同一个参数，创建出来的对象是相同的\n\n - 这样的构造方法就称之为常量构造方法。\n\n![图1](06-Dart-二/06_019.png)\n\n常量构造方法有一些注意点:\n\n - 注意一：拥有常量构造方法的类中，所有的成员变量必须是final修饰的.\n - 注意二: 为了可以通过常量构造方法，创建出相同的对象，不再使用 new关键字，而是使用const关键字\n - 如果是将结果赋值给const修饰的标识符时，const可以省略.\n\n#### 3.2.6. 工厂构造方法\nDart提供了factory关键字, 用于通过工厂去获取对象\n\n\n![图1](06-Dart-二/06_020.png)\n\n### 3.3. setter和getter\n默认情况下，Dart中类定义的属性是可以直接被外界访问的。\n\n但是某些情况下，我们希望监控这个类的属性被访问的过程，这个时候就可以使用setter和getter了\n\n![图1](06-Dart-二/06_021.png)\n\n### 3.4. 类的继承\n面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。\n\nDart中的继承使用extends关键字，子类中使用super来访问父类。\n\n父类中的所有成员变量和方法都会被继承,，但是构造方法除外。\n\n![图1](06-Dart-二/06_022.png)\n\n子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：\n\n![图1](06-Dart-二/06_023.png)\n\n子类中可以调用父类的构造方法，对某些属性进行初始化：\n\n - 子类的构造方法在执行前，将隐含调用父类的无参默认构造方法（没有参数且与类同名的构造方法）。\n - 如果父类没有无参默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。\n\n![图1](06-Dart-二/06_024.png)\n\n### 3.5. 抽象类\n\n我们知道，继承是多态使用的前提。\n\n所以在定义很多通用的**调用接口**时, 我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。\n\n但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法,，我们可以定义为抽象方法。\n\n什么是 抽象方法? 在Dart中没有具体实现的方法(没有方法体)，就是抽象方法。\n \n - 抽象方法，必须存在于抽象类中。\n - 抽象类是使用abstract声明的类。\n\n下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.\n\n![图1](06-Dart-二/06_025.png)\n\n注意事项:\n\n - **注意一：**抽象类不能实例化.\n - **注意二：**抽象类中的抽象方法必须被子类实现, 抽象类中的已经被实现方法, 可以不被子类重写.\n\n### 3.6. 隐式接口\nDart中的接口比较特殊, 没有一个专门的关键字来声明接口.(像java中的interface，oc中的protocol)\n\n默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)\n\n在开发中，我们通常将用于给别人实现的类声明为抽象类:\n\n![图1](06-Dart-二/06_026.png)\n\n### 3.7. Mixin混入\n在通过implements实现某个类时，类中所有的方法都必须被重新实现(无论这个类原来是否已经实现过该方法)。\n\n但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?\n\n - 使用继承吗？但是Dart只支持单继承，那么意味着你只能复用一个类的实现。\n\nDart提供了另外一种方案: Mixin混入的方式\n\n - 除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。\n - 只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。\n\n![图1](06-Dart-二/06_027.png)\n\n### 3.8. 类成员和方法\n前面我们在类中定义的成员和方法都属于对象级别的, 在开发中, 我们有时候也需要定义类级别的成员和方法\n\n在Dart中我们使用static关键字来定义:\n\n![图1](06-Dart-二/06_028.png)\n\n### 3.9. 枚举类型\n枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。\n\n#### 3.9.1. 枚举的定义\n枚举使用enum关键字来进行定义:\n\n![图1](06-Dart-二/06_029.png)\n\n#### 3.9.2. 枚举的属性\n\n枚举类型中有两个比较常见的属性:\n\n - index: 用于表示每个枚举常量的索引, 从0开始.\n - values: 包含每个枚举值的List.\n\n![图1](06-Dart-二/06_030.png)\n\n\n枚举类型的注意事项:\n \n - 注意一: 您不能子类化、混合或实现枚举。\n - 注意二: 不能显式实例化一个枚举\n\n# 四. 泛型\n### 4.1. 为什么使用泛型?\n对于有基础的同学, 这部分不再解释\n### 4.2. List和Map的泛型\nList使用时的泛型写法:\n\n![图1](06-Dart-二/06_031.png)\n\nMap使用时的泛型写法:\n\n![图1](06-Dart-二/06_032.png)\n\n### 4.3. 类定义的泛型\n\n如果我们需要定义一个类, 用于存储位置信息Location, 但是并不确定使用者希望使用的是int类型,还是double类型, 甚至是一个字符串, 这个时候如何定义呢?\n\n - 一种方案是使用Object类型, 但是在之后使用时, 非常不方便\n - 另一种方案就是使用泛型.\n\nLocation类的定义: Object方式\n\n![图1](06-Dart-二/06_033.png)\n\nLocation类的定义: 泛型方式\n\n![图1](06-Dart-二/06_034.png)\n\n如果我们希望类型只能是num类型, 怎么做呢?\n\n![图1](06-Dart-二/06_035.png)\n\n### 4.4. 泛型方法的定义\n最初，Dart仅仅在类中支持泛型。后来一种称为泛型方法的新语法允许在方法和函数中使用类型参数。\n\n![图1](06-Dart-二/06_036.png)\n\n# 五. 库的使用\n在Dart中，你可以导入一个库来使用它所提供的功能。\n\n库的使用可以使代码的重用性得到提高，并且可以更好的组合代码。\n\nDart中任何一个dart文件都是一个库，即使你没有用关键字library声明\n\n### 5.1. 库的导入\nimport语句用来导入一个库，后面跟一个字符串形式的Uri来指定表示要引用的库，语法如下：\n\n![图1](06-Dart-二/06_037.png)\n\n常见的库URI有三种不同的形式\n\n - 来自dart标准版，比如dart:io、dart:html、dart:math、dart:core(但是这个可以省略)\n\n![图1](06-Dart-二/06_038.png)\n\n\n - 使用相对路径导入的库，通常指自己项目中定义的其他dart文件\n\n![图1](06-Dart-二/06_039.png)\n\n - Pub包管理工具管理的一些库，包括自己的配置以及一些第三方的库，通常使用前缀package\n\n![图1](06-Dart-二/06_040.png)\n\n**库文件中内容的显示和隐藏**\n\n如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字\n\n - **show关键字：**可以显示某个成员（屏蔽其他）\n - **hide关键字：**可以隐藏某个成员（显示其他）\n\n![图1](06-Dart-二/06_041.png)\n\n库中内容和当前文件中的名字冲突\n\n当各个库有命名冲突的时候，可以使用as关键字来使用命名空间\n\n![图1](06-Dart-二/06_042.png)\n\n### 5.2. 库的定义\n**library关键字**\n\n通常在定义库时，我们可以使用library关键字给库起一个名字。\n\n但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI\n\n![图1](06-Dart-二/06_043.png)\n\n**part关键字**\n\n在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。\n\n在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了\n\n不过官方已经不建议使用这种方式了：\n\n - dart.dev/guides/libr…\n\n![图1](06-Dart-二/06_044.png)\n\n - mathUtils.dart文件\n\n![图1](06-Dart-二/06_045.png)\n\n - dateUtils.dart文件\n\n![图1](06-Dart-二/06_046.png)\n\n - utils.dart文件\n\n![图1](06-Dart-二/06_047.png)\n\n- test_libary.dart文件\n\n![图1](06-Dart-二/06_048.png)\n\n![图1](06-Dart-二/06_049.png)\n\n**export关键字**\n\n官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？\n\n - 将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入\n\n- mathUtils.dart文件\n\n![图1](06-Dart-二/06_050.png)\n\n- dateUtils.dart文件\n\n![图1](06-Dart-二/06_051.png)\n\n- utils.dart文件\n\n![图1](06-Dart-二/06_052.png)\n\n- test_libary.dart文件\n\n![图1](06-Dart-二/06_053.png)\n\n\n最后，也可以通过Pub管理自己的库，在项目开发中个人觉得不是非常有必要，所以暂时不讲解这种方式。\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/06-Dart-二.md","raw":"---\ntitle: 06-Dart(二)\ntoc: true\ndate: 2020-09-02 20:37:45\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. 运算符\n这里，我只列出来相对其他语言比较特殊的运算符，因为某些运算符太简单了，不浪费时间，比如+、-、+=、==。\n\n你可能会疑惑，Dart为什么要搞出这么多特殊的运算符呢？\n\n你要坚信一点：所有这些特殊的运算符都是为了让我们在开发中可以更加方便的操作，而不是让我们的编码变得更加复杂。\n\n### 1.1. 除法、整除、取模运算\n我们来看一下除法、整除、取模运算\n\n![图1](06-Dart-二/06_001.png)\n\n\n### 1.2. ??=赋值操作\ndart有一个很多语言都不具备的赋值运算符：\n\n- 当变量为null时，使用后面的内容进行赋值。\n- 当变量有值时，使用自己原来的值。\n\n![图1](06-Dart-二/06_002.png)\n\n\n### 1.3. 条件运算符：\nDart中包含一直比较特殊的条件运算符：expr1 ?? expr2\n\n- 如果expr1是null，则返回expr2的结果;\n- 如果expr1不是null，直接使用expr1的结果。\n\n![图1](06-Dart-二/06_003.png)\n\n\n\n### 1.4. 级联语法：..\n某些时候，我们希望对一个对象进行连续的操作，这个时候可以使用级联语法\n\n![图1](06-Dart-二/06_004.png)\n\n# 二. 流程控制\n### 2.1. if和else\n和其他语言用法一样\n\n这里有一个注意点：不支持非空即真或者非0即真，必须有明确的bool类型\n\n - 我们来看下面name为null的判断\n\n![图1](06-Dart-二/06_005.png)\n\n### 2.2. 循环操作\n基本的for循环\n\n\n![图1](06-Dart-二/06_006.png)\n\n\nfor in遍历List和Set类型\n\n![图1](06-Dart-二/06_007.png)\n\nwhile和do-while和其他语言一致\n\nbreak和continue用法也是一致\n\n### 2.3. switch-case\n普通的switch使用\n\n- 注意：每一个case语句，默认情况下必须以一个break结尾\n\n![图1](06-Dart-二/06_008.png)\n\n\n# 三. 类和对象\nDart是一个面向对象的语言，面向对象中非常重要的概念就是类，类产生了对象。\n\n这一节，我们就具体来学习类和对象，但是Dart对类进行了很多其他语言没有的特性，所以，这里我会花比较长的篇幅来讲解。\n\n### 3.1. 类的定义\n在Dart中，定义类用class关键字。\n\n类通常有两部分组成：成员（member）和方法（method）。\n\n定义类的伪代码如下：\n\n![图1](06-Dart-二/06_009.png)\n\n编写一个简单的Person类：\n\n- 这里有一个注意点: 我们在方法中使用属性(成员/实例变量)时，并没有加this；\n- Dart的开发风格中，在方法中通常使用属性时，会省略this，但是有命名冲突时，this不能省略；\n\n![图1](06-Dart-二/06_010.png)\n\n我们来使用这个类，创建对应的对象：\n\n- 注意：从Dart2开始，new关键字可以省略。\n\n![图1](06-Dart-二/06_011.png)\n\n### 3.2. 构造方法\n#### 3.2.1. 普通构造方法\n我们知道, 当通过类创建一个对象时，会调用这个类的构造方法。\n\n- 当类中没有明确指定构造方法时，将默认拥有一个无参的构造方法。\n- 前面的Person中我们就是在调用这个构造方法.\n\n我们也可以根据自己的需求，定义自己的构造方法:\n\n**注意一：**当有了自己的构造方法时，默认的构造方法将会失效，不能使用\n\n- 当然，你可能希望明确的写一个默认的构造方法，但是会和我们自定义的构造方法冲突；\n- 这是因为Dart本身不支持函数的重载（名称相同, 参数不同的方式）。\n\n**注意二：**这里我还实现了toString方法\n\n![图1](06-Dart-二/06_012.png)\n\n另外，在实现构造方法时，通常做的事情就是通过**参数给属性**赋值\n\n为了简化这一过程, Dart提供了一种更加简洁的语法糖形式.\n\n上面的构造方法可以优化成下面的写法：\n\n![图1](06-Dart-二/06_013.png)\n\n#### 3.2.2. 命名构造函数\n\n但是在开发中, 我们确实希望实现更多的构造方法，怎么办呢？\n\n - 因为不支持方法（函数）的重载，所以我们没办法创建相同名称的构造方法。\n\n我们需要使用命名构造函数:\n\n![图1](06-Dart-二/06_014.png)\n\n在之后的开发中, 我们也可以利用命名构造方法，提供更加便捷的创建对象方式:\n\n - 比如开发中，我们需要经常将一个Map转成对象，可以提供如下的构造方法\n\n![图1](06-Dart-二/06_015.png)\n\n#### 3.2.3. 初始化列表\n\n我们来重新定义一个类Point, 传入x/y，可以得到它们的距离distance:\n\n![图1](06-Dart-二/06_016.png)\n\n上面这种初始化变量的方法, 我们称之为初始化列表(Initializer list)\n\n#### 3.2.4. 重定向构造方法\n在某些情况下, 我们希望在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：\n\n - 在一个构造函数中，去调用另外一个构造函数（注意：是在冒号后面使用this调用）\n\n![图1](06-Dart-二/06_017.png)\n\n#### 3.2.5. 常量构造方法\n在某些情况下，传入相同值时，我们希望返回同一个对象，这个时候，可以使用常量构造方法.\n\n默认情况下，创建对象时，即使传入相同的参数，创建出来的也不是同一个对象，看下面代码:\n\n - 这里我们使用identical(对象1, 对象2)函数来判断两个对象是否是同一个对象:\n\n![图1](06-Dart-二/06_018.png)\n\n但是, 如果将构造方法前加const进行修饰，那么可以保证同一个参数，创建出来的对象是相同的\n\n - 这样的构造方法就称之为常量构造方法。\n\n![图1](06-Dart-二/06_019.png)\n\n常量构造方法有一些注意点:\n\n - 注意一：拥有常量构造方法的类中，所有的成员变量必须是final修饰的.\n - 注意二: 为了可以通过常量构造方法，创建出相同的对象，不再使用 new关键字，而是使用const关键字\n - 如果是将结果赋值给const修饰的标识符时，const可以省略.\n\n#### 3.2.6. 工厂构造方法\nDart提供了factory关键字, 用于通过工厂去获取对象\n\n\n![图1](06-Dart-二/06_020.png)\n\n### 3.3. setter和getter\n默认情况下，Dart中类定义的属性是可以直接被外界访问的。\n\n但是某些情况下，我们希望监控这个类的属性被访问的过程，这个时候就可以使用setter和getter了\n\n![图1](06-Dart-二/06_021.png)\n\n### 3.4. 类的继承\n面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。\n\nDart中的继承使用extends关键字，子类中使用super来访问父类。\n\n父类中的所有成员变量和方法都会被继承,，但是构造方法除外。\n\n![图1](06-Dart-二/06_022.png)\n\n子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：\n\n![图1](06-Dart-二/06_023.png)\n\n子类中可以调用父类的构造方法，对某些属性进行初始化：\n\n - 子类的构造方法在执行前，将隐含调用父类的无参默认构造方法（没有参数且与类同名的构造方法）。\n - 如果父类没有无参默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。\n\n![图1](06-Dart-二/06_024.png)\n\n### 3.5. 抽象类\n\n我们知道，继承是多态使用的前提。\n\n所以在定义很多通用的**调用接口**时, 我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。\n\n但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法,，我们可以定义为抽象方法。\n\n什么是 抽象方法? 在Dart中没有具体实现的方法(没有方法体)，就是抽象方法。\n \n - 抽象方法，必须存在于抽象类中。\n - 抽象类是使用abstract声明的类。\n\n下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.\n\n![图1](06-Dart-二/06_025.png)\n\n注意事项:\n\n - **注意一：**抽象类不能实例化.\n - **注意二：**抽象类中的抽象方法必须被子类实现, 抽象类中的已经被实现方法, 可以不被子类重写.\n\n### 3.6. 隐式接口\nDart中的接口比较特殊, 没有一个专门的关键字来声明接口.(像java中的interface，oc中的protocol)\n\n默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)\n\n在开发中，我们通常将用于给别人实现的类声明为抽象类:\n\n![图1](06-Dart-二/06_026.png)\n\n### 3.7. Mixin混入\n在通过implements实现某个类时，类中所有的方法都必须被重新实现(无论这个类原来是否已经实现过该方法)。\n\n但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?\n\n - 使用继承吗？但是Dart只支持单继承，那么意味着你只能复用一个类的实现。\n\nDart提供了另外一种方案: Mixin混入的方式\n\n - 除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。\n - 只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。\n\n![图1](06-Dart-二/06_027.png)\n\n### 3.8. 类成员和方法\n前面我们在类中定义的成员和方法都属于对象级别的, 在开发中, 我们有时候也需要定义类级别的成员和方法\n\n在Dart中我们使用static关键字来定义:\n\n![图1](06-Dart-二/06_028.png)\n\n### 3.9. 枚举类型\n枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。\n\n#### 3.9.1. 枚举的定义\n枚举使用enum关键字来进行定义:\n\n![图1](06-Dart-二/06_029.png)\n\n#### 3.9.2. 枚举的属性\n\n枚举类型中有两个比较常见的属性:\n\n - index: 用于表示每个枚举常量的索引, 从0开始.\n - values: 包含每个枚举值的List.\n\n![图1](06-Dart-二/06_030.png)\n\n\n枚举类型的注意事项:\n \n - 注意一: 您不能子类化、混合或实现枚举。\n - 注意二: 不能显式实例化一个枚举\n\n# 四. 泛型\n### 4.1. 为什么使用泛型?\n对于有基础的同学, 这部分不再解释\n### 4.2. List和Map的泛型\nList使用时的泛型写法:\n\n![图1](06-Dart-二/06_031.png)\n\nMap使用时的泛型写法:\n\n![图1](06-Dart-二/06_032.png)\n\n### 4.3. 类定义的泛型\n\n如果我们需要定义一个类, 用于存储位置信息Location, 但是并不确定使用者希望使用的是int类型,还是double类型, 甚至是一个字符串, 这个时候如何定义呢?\n\n - 一种方案是使用Object类型, 但是在之后使用时, 非常不方便\n - 另一种方案就是使用泛型.\n\nLocation类的定义: Object方式\n\n![图1](06-Dart-二/06_033.png)\n\nLocation类的定义: 泛型方式\n\n![图1](06-Dart-二/06_034.png)\n\n如果我们希望类型只能是num类型, 怎么做呢?\n\n![图1](06-Dart-二/06_035.png)\n\n### 4.4. 泛型方法的定义\n最初，Dart仅仅在类中支持泛型。后来一种称为泛型方法的新语法允许在方法和函数中使用类型参数。\n\n![图1](06-Dart-二/06_036.png)\n\n# 五. 库的使用\n在Dart中，你可以导入一个库来使用它所提供的功能。\n\n库的使用可以使代码的重用性得到提高，并且可以更好的组合代码。\n\nDart中任何一个dart文件都是一个库，即使你没有用关键字library声明\n\n### 5.1. 库的导入\nimport语句用来导入一个库，后面跟一个字符串形式的Uri来指定表示要引用的库，语法如下：\n\n![图1](06-Dart-二/06_037.png)\n\n常见的库URI有三种不同的形式\n\n - 来自dart标准版，比如dart:io、dart:html、dart:math、dart:core(但是这个可以省略)\n\n![图1](06-Dart-二/06_038.png)\n\n\n - 使用相对路径导入的库，通常指自己项目中定义的其他dart文件\n\n![图1](06-Dart-二/06_039.png)\n\n - Pub包管理工具管理的一些库，包括自己的配置以及一些第三方的库，通常使用前缀package\n\n![图1](06-Dart-二/06_040.png)\n\n**库文件中内容的显示和隐藏**\n\n如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字\n\n - **show关键字：**可以显示某个成员（屏蔽其他）\n - **hide关键字：**可以隐藏某个成员（显示其他）\n\n![图1](06-Dart-二/06_041.png)\n\n库中内容和当前文件中的名字冲突\n\n当各个库有命名冲突的时候，可以使用as关键字来使用命名空间\n\n![图1](06-Dart-二/06_042.png)\n\n### 5.2. 库的定义\n**library关键字**\n\n通常在定义库时，我们可以使用library关键字给库起一个名字。\n\n但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI\n\n![图1](06-Dart-二/06_043.png)\n\n**part关键字**\n\n在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。\n\n在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了\n\n不过官方已经不建议使用这种方式了：\n\n - dart.dev/guides/libr…\n\n![图1](06-Dart-二/06_044.png)\n\n - mathUtils.dart文件\n\n![图1](06-Dart-二/06_045.png)\n\n - dateUtils.dart文件\n\n![图1](06-Dart-二/06_046.png)\n\n - utils.dart文件\n\n![图1](06-Dart-二/06_047.png)\n\n- test_libary.dart文件\n\n![图1](06-Dart-二/06_048.png)\n\n![图1](06-Dart-二/06_049.png)\n\n**export关键字**\n\n官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？\n\n - 将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入\n\n- mathUtils.dart文件\n\n![图1](06-Dart-二/06_050.png)\n\n- dateUtils.dart文件\n\n![图1](06-Dart-二/06_051.png)\n\n- utils.dart文件\n\n![图1](06-Dart-二/06_052.png)\n\n- test_libary.dart文件\n\n![图1](06-Dart-二/06_053.png)\n\n\n最后，也可以通过Pub管理自己的库，在项目开发中个人觉得不是非常有必要，所以暂时不讲解这种方式。\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/06-Dart-二","published":1,"updated":"2020-09-18T13:41:20.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengc001uu3s6gysfci3m","content":"<h1 id=\"一-运算符\"><a href=\"#一-运算符\" class=\"headerlink\" title=\"一. 运算符\"></a>一. 运算符</h1><p>这里，我只列出来相对其他语言比较特殊的运算符，因为某些运算符太简单了，不浪费时间，比如+、-、+=、==。</p>\n<p>你可能会疑惑，Dart为什么要搞出这么多特殊的运算符呢？</p>\n<p>你要坚信一点：所有这些特殊的运算符都是为了让我们在开发中可以更加方便的操作，而不是让我们的编码变得更加复杂。</p>\n<h3 id=\"1-1-除法、整除、取模运算\"><a href=\"#1-1-除法、整除、取模运算\" class=\"headerlink\" title=\"1.1. 除法、整除、取模运算\"></a>1.1. 除法、整除、取模运算</h3><p>我们来看一下除法、整除、取模运算</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-赋值操作\"><a href=\"#1-2-赋值操作\" class=\"headerlink\" title=\"1.2. ??=赋值操作\"></a>1.2. ??=赋值操作</h3><p>dart有一个很多语言都不具备的赋值运算符：</p>\n<ul>\n<li>当变量为null时，使用后面的内容进行赋值。</li>\n<li>当变量有值时，使用自己原来的值。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-条件运算符：\"><a href=\"#1-3-条件运算符：\" class=\"headerlink\" title=\"1.3. 条件运算符：\"></a>1.3. 条件运算符：</h3><p>Dart中包含一直比较特殊的条件运算符：expr1 ?? expr2</p>\n<ul>\n<li>如果expr1是null，则返回expr2的结果;</li>\n<li>如果expr1不是null，直接使用expr1的结果。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_003.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-级联语法：\"><a href=\"#1-4-级联语法：\" class=\"headerlink\" title=\"1.4. 级联语法：..\"></a>1.4. 级联语法：..</h3><p>某些时候，我们希望对一个对象进行连续的操作，这个时候可以使用级联语法</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-流程控制\"><a href=\"#二-流程控制\" class=\"headerlink\" title=\"二. 流程控制\"></a>二. 流程控制</h1><h3 id=\"2-1-if和else\"><a href=\"#2-1-if和else\" class=\"headerlink\" title=\"2.1. if和else\"></a>2.1. if和else</h3><p>和其他语言用法一样</p>\n<p>这里有一个注意点：不支持非空即真或者非0即真，必须有明确的bool类型</p>\n<ul>\n<li>我们来看下面name为null的判断</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_005.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-循环操作\"><a href=\"#2-2-循环操作\" class=\"headerlink\" title=\"2.2. 循环操作\"></a>2.2. 循环操作</h3><p>基本的for循环</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_006.png\" alt=\"图1\"></p>\n<p>for in遍历List和Set类型</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_007.png\" alt=\"图1\"></p>\n<p>while和do-while和其他语言一致</p>\n<p>break和continue用法也是一致</p>\n<h3 id=\"2-3-switch-case\"><a href=\"#2-3-switch-case\" class=\"headerlink\" title=\"2.3. switch-case\"></a>2.3. switch-case</h3><p>普通的switch使用</p>\n<ul>\n<li>注意：每一个case语句，默认情况下必须以一个break结尾</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-类和对象\"><a href=\"#三-类和对象\" class=\"headerlink\" title=\"三. 类和对象\"></a>三. 类和对象</h1><p>Dart是一个面向对象的语言，面向对象中非常重要的概念就是类，类产生了对象。</p>\n<p>这一节，我们就具体来学习类和对象，但是Dart对类进行了很多其他语言没有的特性，所以，这里我会花比较长的篇幅来讲解。</p>\n<h3 id=\"3-1-类的定义\"><a href=\"#3-1-类的定义\" class=\"headerlink\" title=\"3.1. 类的定义\"></a>3.1. 类的定义</h3><p>在Dart中，定义类用class关键字。</p>\n<p>类通常有两部分组成：成员（member）和方法（method）。</p>\n<p>定义类的伪代码如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_009.png\" alt=\"图1\"></p>\n<p>编写一个简单的Person类：</p>\n<ul>\n<li>这里有一个注意点: 我们在方法中使用属性(成员/实例变量)时，并没有加this；</li>\n<li>Dart的开发风格中，在方法中通常使用属性时，会省略this，但是有命名冲突时，this不能省略；</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_010.png\" alt=\"图1\"></p>\n<p>我们来使用这个类，创建对应的对象：</p>\n<ul>\n<li>注意：从Dart2开始，new关键字可以省略。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_011.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-构造方法\"><a href=\"#3-2-构造方法\" class=\"headerlink\" title=\"3.2. 构造方法\"></a>3.2. 构造方法</h3><h4 id=\"3-2-1-普通构造方法\"><a href=\"#3-2-1-普通构造方法\" class=\"headerlink\" title=\"3.2.1. 普通构造方法\"></a>3.2.1. 普通构造方法</h4><p>我们知道, 当通过类创建一个对象时，会调用这个类的构造方法。</p>\n<ul>\n<li>当类中没有明确指定构造方法时，将默认拥有一个无参的构造方法。</li>\n<li>前面的Person中我们就是在调用这个构造方法.</li>\n</ul>\n<p>我们也可以根据自己的需求，定义自己的构造方法:</p>\n<p><strong>注意一：</strong>当有了自己的构造方法时，默认的构造方法将会失效，不能使用</p>\n<ul>\n<li>当然，你可能希望明确的写一个默认的构造方法，但是会和我们自定义的构造方法冲突；</li>\n<li>这是因为Dart本身不支持函数的重载（名称相同, 参数不同的方式）。</li>\n</ul>\n<p><strong>注意二：</strong>这里我还实现了toString方法</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_012.png\" alt=\"图1\"></p>\n<p>另外，在实现构造方法时，通常做的事情就是通过<strong>参数给属性</strong>赋值</p>\n<p>为了简化这一过程, Dart提供了一种更加简洁的语法糖形式.</p>\n<p>上面的构造方法可以优化成下面的写法：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_013.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-2-命名构造函数\"><a href=\"#3-2-2-命名构造函数\" class=\"headerlink\" title=\"3.2.2. 命名构造函数\"></a>3.2.2. 命名构造函数</h4><p>但是在开发中, 我们确实希望实现更多的构造方法，怎么办呢？</p>\n<ul>\n<li>因为不支持方法（函数）的重载，所以我们没办法创建相同名称的构造方法。</li>\n</ul>\n<p>我们需要使用命名构造函数:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_014.png\" alt=\"图1\"></p>\n<p>在之后的开发中, 我们也可以利用命名构造方法，提供更加便捷的创建对象方式:</p>\n<ul>\n<li>比如开发中，我们需要经常将一个Map转成对象，可以提供如下的构造方法</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_015.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-3-初始化列表\"><a href=\"#3-2-3-初始化列表\" class=\"headerlink\" title=\"3.2.3. 初始化列表\"></a>3.2.3. 初始化列表</h4><p>我们来重新定义一个类Point, 传入x/y，可以得到它们的距离distance:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_016.png\" alt=\"图1\"></p>\n<p>上面这种初始化变量的方法, 我们称之为初始化列表(Initializer list)</p>\n<h4 id=\"3-2-4-重定向构造方法\"><a href=\"#3-2-4-重定向构造方法\" class=\"headerlink\" title=\"3.2.4. 重定向构造方法\"></a>3.2.4. 重定向构造方法</h4><p>在某些情况下, 我们希望在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：</p>\n<ul>\n<li>在一个构造函数中，去调用另外一个构造函数（注意：是在冒号后面使用this调用）</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_017.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-5-常量构造方法\"><a href=\"#3-2-5-常量构造方法\" class=\"headerlink\" title=\"3.2.5. 常量构造方法\"></a>3.2.5. 常量构造方法</h4><p>在某些情况下，传入相同值时，我们希望返回同一个对象，这个时候，可以使用常量构造方法.</p>\n<p>默认情况下，创建对象时，即使传入相同的参数，创建出来的也不是同一个对象，看下面代码:</p>\n<ul>\n<li>这里我们使用identical(对象1, 对象2)函数来判断两个对象是否是同一个对象:</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_018.png\" alt=\"图1\"></p>\n<p>但是, 如果将构造方法前加const进行修饰，那么可以保证同一个参数，创建出来的对象是相同的</p>\n<ul>\n<li>这样的构造方法就称之为常量构造方法。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_019.png\" alt=\"图1\"></p>\n<p>常量构造方法有一些注意点:</p>\n<ul>\n<li>注意一：拥有常量构造方法的类中，所有的成员变量必须是final修饰的.</li>\n<li>注意二: 为了可以通过常量构造方法，创建出相同的对象，不再使用 new关键字，而是使用const关键字</li>\n<li>如果是将结果赋值给const修饰的标识符时，const可以省略.</li>\n</ul>\n<h4 id=\"3-2-6-工厂构造方法\"><a href=\"#3-2-6-工厂构造方法\" class=\"headerlink\" title=\"3.2.6. 工厂构造方法\"></a>3.2.6. 工厂构造方法</h4><p>Dart提供了factory关键字, 用于通过工厂去获取对象</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_020.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-setter和getter\"><a href=\"#3-3-setter和getter\" class=\"headerlink\" title=\"3.3. setter和getter\"></a>3.3. setter和getter</h3><p>默认情况下，Dart中类定义的属性是可以直接被外界访问的。</p>\n<p>但是某些情况下，我们希望监控这个类的属性被访问的过程，这个时候就可以使用setter和getter了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_021.png\" alt=\"图1\"></p>\n<h3 id=\"3-4-类的继承\"><a href=\"#3-4-类的继承\" class=\"headerlink\" title=\"3.4. 类的继承\"></a>3.4. 类的继承</h3><p>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。</p>\n<p>Dart中的继承使用extends关键字，子类中使用super来访问父类。</p>\n<p>父类中的所有成员变量和方法都会被继承,，但是构造方法除外。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_022.png\" alt=\"图1\"></p>\n<p>子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_023.png\" alt=\"图1\"></p>\n<p>子类中可以调用父类的构造方法，对某些属性进行初始化：</p>\n<ul>\n<li>子类的构造方法在执行前，将隐含调用父类的无参默认构造方法（没有参数且与类同名的构造方法）。</li>\n<li>如果父类没有无参默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_024.png\" alt=\"图1\"></p>\n<h3 id=\"3-5-抽象类\"><a href=\"#3-5-抽象类\" class=\"headerlink\" title=\"3.5. 抽象类\"></a>3.5. 抽象类</h3><p>我们知道，继承是多态使用的前提。</p>\n<p>所以在定义很多通用的<strong>调用接口</strong>时, 我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。</p>\n<p>但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法,，我们可以定义为抽象方法。</p>\n<p>什么是 抽象方法? 在Dart中没有具体实现的方法(没有方法体)，就是抽象方法。</p>\n<ul>\n<li>抽象方法，必须存在于抽象类中。</li>\n<li>抽象类是使用abstract声明的类。</li>\n</ul>\n<p>下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_025.png\" alt=\"图1\"></p>\n<p>注意事项:</p>\n<ul>\n<li><strong>注意一：</strong>抽象类不能实例化.</li>\n<li><strong>注意二：</strong>抽象类中的抽象方法必须被子类实现, 抽象类中的已经被实现方法, 可以不被子类重写.</li>\n</ul>\n<h3 id=\"3-6-隐式接口\"><a href=\"#3-6-隐式接口\" class=\"headerlink\" title=\"3.6. 隐式接口\"></a>3.6. 隐式接口</h3><p>Dart中的接口比较特殊, 没有一个专门的关键字来声明接口.(像java中的interface，oc中的protocol)</p>\n<p>默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)</p>\n<p>在开发中，我们通常将用于给别人实现的类声明为抽象类:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_026.png\" alt=\"图1\"></p>\n<h3 id=\"3-7-Mixin混入\"><a href=\"#3-7-Mixin混入\" class=\"headerlink\" title=\"3.7. Mixin混入\"></a>3.7. Mixin混入</h3><p>在通过implements实现某个类时，类中所有的方法都必须被重新实现(无论这个类原来是否已经实现过该方法)。</p>\n<p>但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?</p>\n<ul>\n<li>使用继承吗？但是Dart只支持单继承，那么意味着你只能复用一个类的实现。</li>\n</ul>\n<p>Dart提供了另外一种方案: Mixin混入的方式</p>\n<ul>\n<li>除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。</li>\n<li>只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_027.png\" alt=\"图1\"></p>\n<h3 id=\"3-8-类成员和方法\"><a href=\"#3-8-类成员和方法\" class=\"headerlink\" title=\"3.8. 类成员和方法\"></a>3.8. 类成员和方法</h3><p>前面我们在类中定义的成员和方法都属于对象级别的, 在开发中, 我们有时候也需要定义类级别的成员和方法</p>\n<p>在Dart中我们使用static关键字来定义:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_028.png\" alt=\"图1\"></p>\n<h3 id=\"3-9-枚举类型\"><a href=\"#3-9-枚举类型\" class=\"headerlink\" title=\"3.9. 枚举类型\"></a>3.9. 枚举类型</h3><p>枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。</p>\n<h4 id=\"3-9-1-枚举的定义\"><a href=\"#3-9-1-枚举的定义\" class=\"headerlink\" title=\"3.9.1. 枚举的定义\"></a>3.9.1. 枚举的定义</h4><p>枚举使用enum关键字来进行定义:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_029.png\" alt=\"图1\"></p>\n<h4 id=\"3-9-2-枚举的属性\"><a href=\"#3-9-2-枚举的属性\" class=\"headerlink\" title=\"3.9.2. 枚举的属性\"></a>3.9.2. 枚举的属性</h4><p>枚举类型中有两个比较常见的属性:</p>\n<ul>\n<li>index: 用于表示每个枚举常量的索引, 从0开始.</li>\n<li>values: 包含每个枚举值的List.</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_030.png\" alt=\"图1\"></p>\n<p>枚举类型的注意事项:</p>\n<ul>\n<li>注意一: 您不能子类化、混合或实现枚举。</li>\n<li>注意二: 不能显式实例化一个枚举</li>\n</ul>\n<h1 id=\"四-泛型\"><a href=\"#四-泛型\" class=\"headerlink\" title=\"四. 泛型\"></a>四. 泛型</h1><h3 id=\"4-1-为什么使用泛型\"><a href=\"#4-1-为什么使用泛型\" class=\"headerlink\" title=\"4.1. 为什么使用泛型?\"></a>4.1. 为什么使用泛型?</h3><p>对于有基础的同学, 这部分不再解释</p>\n<h3 id=\"4-2-List和Map的泛型\"><a href=\"#4-2-List和Map的泛型\" class=\"headerlink\" title=\"4.2. List和Map的泛型\"></a>4.2. List和Map的泛型</h3><p>List使用时的泛型写法:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_031.png\" alt=\"图1\"></p>\n<p>Map使用时的泛型写法:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_032.png\" alt=\"图1\"></p>\n<h3 id=\"4-3-类定义的泛型\"><a href=\"#4-3-类定义的泛型\" class=\"headerlink\" title=\"4.3. 类定义的泛型\"></a>4.3. 类定义的泛型</h3><p>如果我们需要定义一个类, 用于存储位置信息Location, 但是并不确定使用者希望使用的是int类型,还是double类型, 甚至是一个字符串, 这个时候如何定义呢?</p>\n<ul>\n<li>一种方案是使用Object类型, 但是在之后使用时, 非常不方便</li>\n<li>另一种方案就是使用泛型.</li>\n</ul>\n<p>Location类的定义: Object方式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_033.png\" alt=\"图1\"></p>\n<p>Location类的定义: 泛型方式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_034.png\" alt=\"图1\"></p>\n<p>如果我们希望类型只能是num类型, 怎么做呢?</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_035.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-泛型方法的定义\"><a href=\"#4-4-泛型方法的定义\" class=\"headerlink\" title=\"4.4. 泛型方法的定义\"></a>4.4. 泛型方法的定义</h3><p>最初，Dart仅仅在类中支持泛型。后来一种称为泛型方法的新语法允许在方法和函数中使用类型参数。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_036.png\" alt=\"图1\"></p>\n<h1 id=\"五-库的使用\"><a href=\"#五-库的使用\" class=\"headerlink\" title=\"五. 库的使用\"></a>五. 库的使用</h1><p>在Dart中，你可以导入一个库来使用它所提供的功能。</p>\n<p>库的使用可以使代码的重用性得到提高，并且可以更好的组合代码。</p>\n<p>Dart中任何一个dart文件都是一个库，即使你没有用关键字library声明</p>\n<h3 id=\"5-1-库的导入\"><a href=\"#5-1-库的导入\" class=\"headerlink\" title=\"5.1. 库的导入\"></a>5.1. 库的导入</h3><p>import语句用来导入一个库，后面跟一个字符串形式的Uri来指定表示要引用的库，语法如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_037.png\" alt=\"图1\"></p>\n<p>常见的库URI有三种不同的形式</p>\n<ul>\n<li>来自dart标准版，比如dart:io、dart:html、dart:math、dart:core(但是这个可以省略)</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_038.png\" alt=\"图1\"></p>\n<ul>\n<li>使用相对路径导入的库，通常指自己项目中定义的其他dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_039.png\" alt=\"图1\"></p>\n<ul>\n<li>Pub包管理工具管理的一些库，包括自己的配置以及一些第三方的库，通常使用前缀package</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_040.png\" alt=\"图1\"></p>\n<p><strong>库文件中内容的显示和隐藏</strong></p>\n<p>如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字</p>\n<ul>\n<li><strong>show关键字：</strong>可以显示某个成员（屏蔽其他）</li>\n<li><strong>hide关键字：</strong>可以隐藏某个成员（显示其他）</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_041.png\" alt=\"图1\"></p>\n<p>库中内容和当前文件中的名字冲突</p>\n<p>当各个库有命名冲突的时候，可以使用as关键字来使用命名空间</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_042.png\" alt=\"图1\"></p>\n<h3 id=\"5-2-库的定义\"><a href=\"#5-2-库的定义\" class=\"headerlink\" title=\"5.2. 库的定义\"></a>5.2. 库的定义</h3><p><strong>library关键字</strong></p>\n<p>通常在定义库时，我们可以使用library关键字给库起一个名字。</p>\n<p>但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_043.png\" alt=\"图1\"></p>\n<p><strong>part关键字</strong></p>\n<p>在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。</p>\n<p>在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了</p>\n<p>不过官方已经不建议使用这种方式了：</p>\n<ul>\n<li>dart.dev/guides/libr…</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_044.png\" alt=\"图1\"></p>\n<ul>\n<li>mathUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_045.png\" alt=\"图1\"></p>\n<ul>\n<li>dateUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_046.png\" alt=\"图1\"></p>\n<ul>\n<li>utils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_047.png\" alt=\"图1\"></p>\n<ul>\n<li>test_libary.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_048.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_049.png\" alt=\"图1\"></p>\n<p><strong>export关键字</strong></p>\n<p>官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？</p>\n<ul>\n<li>将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入</li>\n</ul>\n<ul>\n<li>mathUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_050.png\" alt=\"图1\"></p>\n<ul>\n<li>dateUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_051.png\" alt=\"图1\"></p>\n<ul>\n<li>utils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_052.png\" alt=\"图1\"></p>\n<ul>\n<li>test_libary.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_053.png\" alt=\"图1\"></p>\n<p>最后，也可以通过Pub管理自己的库，在项目开发中个人觉得不是非常有必要，所以暂时不讲解这种方式。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-运算符\"><a href=\"#一-运算符\" class=\"headerlink\" title=\"一. 运算符\"></a>一. 运算符</h1><p>这里，我只列出来相对其他语言比较特殊的运算符，因为某些运算符太简单了，不浪费时间，比如+、-、+=、==。</p>\n<p>你可能会疑惑，Dart为什么要搞出这么多特殊的运算符呢？</p>\n<p>你要坚信一点：所有这些特殊的运算符都是为了让我们在开发中可以更加方便的操作，而不是让我们的编码变得更加复杂。</p>\n<h3 id=\"1-1-除法、整除、取模运算\"><a href=\"#1-1-除法、整除、取模运算\" class=\"headerlink\" title=\"1.1. 除法、整除、取模运算\"></a>1.1. 除法、整除、取模运算</h3><p>我们来看一下除法、整除、取模运算</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-赋值操作\"><a href=\"#1-2-赋值操作\" class=\"headerlink\" title=\"1.2. ??=赋值操作\"></a>1.2. ??=赋值操作</h3><p>dart有一个很多语言都不具备的赋值运算符：</p>\n<ul>\n<li>当变量为null时，使用后面的内容进行赋值。</li>\n<li>当变量有值时，使用自己原来的值。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-条件运算符：\"><a href=\"#1-3-条件运算符：\" class=\"headerlink\" title=\"1.3. 条件运算符：\"></a>1.3. 条件运算符：</h3><p>Dart中包含一直比较特殊的条件运算符：expr1 ?? expr2</p>\n<ul>\n<li>如果expr1是null，则返回expr2的结果;</li>\n<li>如果expr1不是null，直接使用expr1的结果。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_003.png\" alt=\"图1\"></p>\n<h3 id=\"1-4-级联语法：\"><a href=\"#1-4-级联语法：\" class=\"headerlink\" title=\"1.4. 级联语法：..\"></a>1.4. 级联语法：..</h3><p>某些时候，我们希望对一个对象进行连续的操作，这个时候可以使用级联语法</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-流程控制\"><a href=\"#二-流程控制\" class=\"headerlink\" title=\"二. 流程控制\"></a>二. 流程控制</h1><h3 id=\"2-1-if和else\"><a href=\"#2-1-if和else\" class=\"headerlink\" title=\"2.1. if和else\"></a>2.1. if和else</h3><p>和其他语言用法一样</p>\n<p>这里有一个注意点：不支持非空即真或者非0即真，必须有明确的bool类型</p>\n<ul>\n<li>我们来看下面name为null的判断</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_005.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-循环操作\"><a href=\"#2-2-循环操作\" class=\"headerlink\" title=\"2.2. 循环操作\"></a>2.2. 循环操作</h3><p>基本的for循环</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_006.png\" alt=\"图1\"></p>\n<p>for in遍历List和Set类型</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_007.png\" alt=\"图1\"></p>\n<p>while和do-while和其他语言一致</p>\n<p>break和continue用法也是一致</p>\n<h3 id=\"2-3-switch-case\"><a href=\"#2-3-switch-case\" class=\"headerlink\" title=\"2.3. switch-case\"></a>2.3. switch-case</h3><p>普通的switch使用</p>\n<ul>\n<li>注意：每一个case语句，默认情况下必须以一个break结尾</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_008.png\" alt=\"图1\"></p>\n<h1 id=\"三-类和对象\"><a href=\"#三-类和对象\" class=\"headerlink\" title=\"三. 类和对象\"></a>三. 类和对象</h1><p>Dart是一个面向对象的语言，面向对象中非常重要的概念就是类，类产生了对象。</p>\n<p>这一节，我们就具体来学习类和对象，但是Dart对类进行了很多其他语言没有的特性，所以，这里我会花比较长的篇幅来讲解。</p>\n<h3 id=\"3-1-类的定义\"><a href=\"#3-1-类的定义\" class=\"headerlink\" title=\"3.1. 类的定义\"></a>3.1. 类的定义</h3><p>在Dart中，定义类用class关键字。</p>\n<p>类通常有两部分组成：成员（member）和方法（method）。</p>\n<p>定义类的伪代码如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_009.png\" alt=\"图1\"></p>\n<p>编写一个简单的Person类：</p>\n<ul>\n<li>这里有一个注意点: 我们在方法中使用属性(成员/实例变量)时，并没有加this；</li>\n<li>Dart的开发风格中，在方法中通常使用属性时，会省略this，但是有命名冲突时，this不能省略；</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_010.png\" alt=\"图1\"></p>\n<p>我们来使用这个类，创建对应的对象：</p>\n<ul>\n<li>注意：从Dart2开始，new关键字可以省略。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_011.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-构造方法\"><a href=\"#3-2-构造方法\" class=\"headerlink\" title=\"3.2. 构造方法\"></a>3.2. 构造方法</h3><h4 id=\"3-2-1-普通构造方法\"><a href=\"#3-2-1-普通构造方法\" class=\"headerlink\" title=\"3.2.1. 普通构造方法\"></a>3.2.1. 普通构造方法</h4><p>我们知道, 当通过类创建一个对象时，会调用这个类的构造方法。</p>\n<ul>\n<li>当类中没有明确指定构造方法时，将默认拥有一个无参的构造方法。</li>\n<li>前面的Person中我们就是在调用这个构造方法.</li>\n</ul>\n<p>我们也可以根据自己的需求，定义自己的构造方法:</p>\n<p><strong>注意一：</strong>当有了自己的构造方法时，默认的构造方法将会失效，不能使用</p>\n<ul>\n<li>当然，你可能希望明确的写一个默认的构造方法，但是会和我们自定义的构造方法冲突；</li>\n<li>这是因为Dart本身不支持函数的重载（名称相同, 参数不同的方式）。</li>\n</ul>\n<p><strong>注意二：</strong>这里我还实现了toString方法</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_012.png\" alt=\"图1\"></p>\n<p>另外，在实现构造方法时，通常做的事情就是通过<strong>参数给属性</strong>赋值</p>\n<p>为了简化这一过程, Dart提供了一种更加简洁的语法糖形式.</p>\n<p>上面的构造方法可以优化成下面的写法：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_013.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-2-命名构造函数\"><a href=\"#3-2-2-命名构造函数\" class=\"headerlink\" title=\"3.2.2. 命名构造函数\"></a>3.2.2. 命名构造函数</h4><p>但是在开发中, 我们确实希望实现更多的构造方法，怎么办呢？</p>\n<ul>\n<li>因为不支持方法（函数）的重载，所以我们没办法创建相同名称的构造方法。</li>\n</ul>\n<p>我们需要使用命名构造函数:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_014.png\" alt=\"图1\"></p>\n<p>在之后的开发中, 我们也可以利用命名构造方法，提供更加便捷的创建对象方式:</p>\n<ul>\n<li>比如开发中，我们需要经常将一个Map转成对象，可以提供如下的构造方法</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_015.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-3-初始化列表\"><a href=\"#3-2-3-初始化列表\" class=\"headerlink\" title=\"3.2.3. 初始化列表\"></a>3.2.3. 初始化列表</h4><p>我们来重新定义一个类Point, 传入x/y，可以得到它们的距离distance:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_016.png\" alt=\"图1\"></p>\n<p>上面这种初始化变量的方法, 我们称之为初始化列表(Initializer list)</p>\n<h4 id=\"3-2-4-重定向构造方法\"><a href=\"#3-2-4-重定向构造方法\" class=\"headerlink\" title=\"3.2.4. 重定向构造方法\"></a>3.2.4. 重定向构造方法</h4><p>在某些情况下, 我们希望在一个构造方法中去调用另外一个构造方法, 这个时候可以使用重定向构造方法：</p>\n<ul>\n<li>在一个构造函数中，去调用另外一个构造函数（注意：是在冒号后面使用this调用）</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_017.png\" alt=\"图1\"></p>\n<h4 id=\"3-2-5-常量构造方法\"><a href=\"#3-2-5-常量构造方法\" class=\"headerlink\" title=\"3.2.5. 常量构造方法\"></a>3.2.5. 常量构造方法</h4><p>在某些情况下，传入相同值时，我们希望返回同一个对象，这个时候，可以使用常量构造方法.</p>\n<p>默认情况下，创建对象时，即使传入相同的参数，创建出来的也不是同一个对象，看下面代码:</p>\n<ul>\n<li>这里我们使用identical(对象1, 对象2)函数来判断两个对象是否是同一个对象:</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_018.png\" alt=\"图1\"></p>\n<p>但是, 如果将构造方法前加const进行修饰，那么可以保证同一个参数，创建出来的对象是相同的</p>\n<ul>\n<li>这样的构造方法就称之为常量构造方法。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_019.png\" alt=\"图1\"></p>\n<p>常量构造方法有一些注意点:</p>\n<ul>\n<li>注意一：拥有常量构造方法的类中，所有的成员变量必须是final修饰的.</li>\n<li>注意二: 为了可以通过常量构造方法，创建出相同的对象，不再使用 new关键字，而是使用const关键字</li>\n<li>如果是将结果赋值给const修饰的标识符时，const可以省略.</li>\n</ul>\n<h4 id=\"3-2-6-工厂构造方法\"><a href=\"#3-2-6-工厂构造方法\" class=\"headerlink\" title=\"3.2.6. 工厂构造方法\"></a>3.2.6. 工厂构造方法</h4><p>Dart提供了factory关键字, 用于通过工厂去获取对象</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_020.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-setter和getter\"><a href=\"#3-3-setter和getter\" class=\"headerlink\" title=\"3.3. setter和getter\"></a>3.3. setter和getter</h3><p>默认情况下，Dart中类定义的属性是可以直接被外界访问的。</p>\n<p>但是某些情况下，我们希望监控这个类的属性被访问的过程，这个时候就可以使用setter和getter了</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_021.png\" alt=\"图1\"></p>\n<h3 id=\"3-4-类的继承\"><a href=\"#3-4-类的继承\" class=\"headerlink\" title=\"3.4. 类的继承\"></a>3.4. 类的继承</h3><p>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。</p>\n<p>Dart中的继承使用extends关键字，子类中使用super来访问父类。</p>\n<p>父类中的所有成员变量和方法都会被继承,，但是构造方法除外。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_022.png\" alt=\"图1\"></p>\n<p>子类可以拥有自己的成员变量, 并且可以对父类的方法进行重写：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_023.png\" alt=\"图1\"></p>\n<p>子类中可以调用父类的构造方法，对某些属性进行初始化：</p>\n<ul>\n<li>子类的构造方法在执行前，将隐含调用父类的无参默认构造方法（没有参数且与类同名的构造方法）。</li>\n<li>如果父类没有无参默认构造方法，则子类的构造方法必须在初始化列表中通过super显式调用父类的某个构造方法。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_024.png\" alt=\"图1\"></p>\n<h3 id=\"3-5-抽象类\"><a href=\"#3-5-抽象类\" class=\"headerlink\" title=\"3.5. 抽象类\"></a>3.5. 抽象类</h3><p>我们知道，继承是多态使用的前提。</p>\n<p>所以在定义很多通用的<strong>调用接口</strong>时, 我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。</p>\n<p>但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法,，我们可以定义为抽象方法。</p>\n<p>什么是 抽象方法? 在Dart中没有具体实现的方法(没有方法体)，就是抽象方法。</p>\n<ul>\n<li>抽象方法，必须存在于抽象类中。</li>\n<li>抽象类是使用abstract声明的类。</li>\n</ul>\n<p>下面的代码中, Shape类就是一个抽象类, 其中包含一个抽象方法.</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_025.png\" alt=\"图1\"></p>\n<p>注意事项:</p>\n<ul>\n<li><strong>注意一：</strong>抽象类不能实例化.</li>\n<li><strong>注意二：</strong>抽象类中的抽象方法必须被子类实现, 抽象类中的已经被实现方法, 可以不被子类重写.</li>\n</ul>\n<h3 id=\"3-6-隐式接口\"><a href=\"#3-6-隐式接口\" class=\"headerlink\" title=\"3.6. 隐式接口\"></a>3.6. 隐式接口</h3><p>Dart中的接口比较特殊, 没有一个专门的关键字来声明接口.(像java中的interface，oc中的protocol)</p>\n<p>默认情况下，定义的每个类都相当于默认也声明了一个接口，可以由其他的类来实现(因为Dart不支持多继承)</p>\n<p>在开发中，我们通常将用于给别人实现的类声明为抽象类:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_026.png\" alt=\"图1\"></p>\n<h3 id=\"3-7-Mixin混入\"><a href=\"#3-7-Mixin混入\" class=\"headerlink\" title=\"3.7. Mixin混入\"></a>3.7. Mixin混入</h3><p>在通过implements实现某个类时，类中所有的方法都必须被重新实现(无论这个类原来是否已经实现过该方法)。</p>\n<p>但是某些情况下，一个类可能希望直接复用之前类的原有实现方案，怎么做呢?</p>\n<ul>\n<li>使用继承吗？但是Dart只支持单继承，那么意味着你只能复用一个类的实现。</li>\n</ul>\n<p>Dart提供了另外一种方案: Mixin混入的方式</p>\n<ul>\n<li>除了可以通过class定义类之外，也可以通过mixin关键字来定义一个类。</li>\n<li>只是通过mixin定义的类用于被其他类混入使用，通过with关键字来进行混入。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_027.png\" alt=\"图1\"></p>\n<h3 id=\"3-8-类成员和方法\"><a href=\"#3-8-类成员和方法\" class=\"headerlink\" title=\"3.8. 类成员和方法\"></a>3.8. 类成员和方法</h3><p>前面我们在类中定义的成员和方法都属于对象级别的, 在开发中, 我们有时候也需要定义类级别的成员和方法</p>\n<p>在Dart中我们使用static关键字来定义:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_028.png\" alt=\"图1\"></p>\n<h3 id=\"3-9-枚举类型\"><a href=\"#3-9-枚举类型\" class=\"headerlink\" title=\"3.9. 枚举类型\"></a>3.9. 枚举类型</h3><p>枚举在开发中也非常常见, 枚举也是一种特殊的类, 通常用于表示固定数量的常量值。</p>\n<h4 id=\"3-9-1-枚举的定义\"><a href=\"#3-9-1-枚举的定义\" class=\"headerlink\" title=\"3.9.1. 枚举的定义\"></a>3.9.1. 枚举的定义</h4><p>枚举使用enum关键字来进行定义:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_029.png\" alt=\"图1\"></p>\n<h4 id=\"3-9-2-枚举的属性\"><a href=\"#3-9-2-枚举的属性\" class=\"headerlink\" title=\"3.9.2. 枚举的属性\"></a>3.9.2. 枚举的属性</h4><p>枚举类型中有两个比较常见的属性:</p>\n<ul>\n<li>index: 用于表示每个枚举常量的索引, 从0开始.</li>\n<li>values: 包含每个枚举值的List.</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_030.png\" alt=\"图1\"></p>\n<p>枚举类型的注意事项:</p>\n<ul>\n<li>注意一: 您不能子类化、混合或实现枚举。</li>\n<li>注意二: 不能显式实例化一个枚举</li>\n</ul>\n<h1 id=\"四-泛型\"><a href=\"#四-泛型\" class=\"headerlink\" title=\"四. 泛型\"></a>四. 泛型</h1><h3 id=\"4-1-为什么使用泛型\"><a href=\"#4-1-为什么使用泛型\" class=\"headerlink\" title=\"4.1. 为什么使用泛型?\"></a>4.1. 为什么使用泛型?</h3><p>对于有基础的同学, 这部分不再解释</p>\n<h3 id=\"4-2-List和Map的泛型\"><a href=\"#4-2-List和Map的泛型\" class=\"headerlink\" title=\"4.2. List和Map的泛型\"></a>4.2. List和Map的泛型</h3><p>List使用时的泛型写法:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_031.png\" alt=\"图1\"></p>\n<p>Map使用时的泛型写法:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_032.png\" alt=\"图1\"></p>\n<h3 id=\"4-3-类定义的泛型\"><a href=\"#4-3-类定义的泛型\" class=\"headerlink\" title=\"4.3. 类定义的泛型\"></a>4.3. 类定义的泛型</h3><p>如果我们需要定义一个类, 用于存储位置信息Location, 但是并不确定使用者希望使用的是int类型,还是double类型, 甚至是一个字符串, 这个时候如何定义呢?</p>\n<ul>\n<li>一种方案是使用Object类型, 但是在之后使用时, 非常不方便</li>\n<li>另一种方案就是使用泛型.</li>\n</ul>\n<p>Location类的定义: Object方式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_033.png\" alt=\"图1\"></p>\n<p>Location类的定义: 泛型方式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_034.png\" alt=\"图1\"></p>\n<p>如果我们希望类型只能是num类型, 怎么做呢?</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_035.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-泛型方法的定义\"><a href=\"#4-4-泛型方法的定义\" class=\"headerlink\" title=\"4.4. 泛型方法的定义\"></a>4.4. 泛型方法的定义</h3><p>最初，Dart仅仅在类中支持泛型。后来一种称为泛型方法的新语法允许在方法和函数中使用类型参数。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_036.png\" alt=\"图1\"></p>\n<h1 id=\"五-库的使用\"><a href=\"#五-库的使用\" class=\"headerlink\" title=\"五. 库的使用\"></a>五. 库的使用</h1><p>在Dart中，你可以导入一个库来使用它所提供的功能。</p>\n<p>库的使用可以使代码的重用性得到提高，并且可以更好的组合代码。</p>\n<p>Dart中任何一个dart文件都是一个库，即使你没有用关键字library声明</p>\n<h3 id=\"5-1-库的导入\"><a href=\"#5-1-库的导入\" class=\"headerlink\" title=\"5.1. 库的导入\"></a>5.1. 库的导入</h3><p>import语句用来导入一个库，后面跟一个字符串形式的Uri来指定表示要引用的库，语法如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_037.png\" alt=\"图1\"></p>\n<p>常见的库URI有三种不同的形式</p>\n<ul>\n<li>来自dart标准版，比如dart:io、dart:html、dart:math、dart:core(但是这个可以省略)</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_038.png\" alt=\"图1\"></p>\n<ul>\n<li>使用相对路径导入的库，通常指自己项目中定义的其他dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_039.png\" alt=\"图1\"></p>\n<ul>\n<li>Pub包管理工具管理的一些库，包括自己的配置以及一些第三方的库，通常使用前缀package</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_040.png\" alt=\"图1\"></p>\n<p><strong>库文件中内容的显示和隐藏</strong></p>\n<p>如果希望只导入库中某些内容，或者刻意隐藏库里面某些内容，可以使用show和hide关键字</p>\n<ul>\n<li><strong>show关键字：</strong>可以显示某个成员（屏蔽其他）</li>\n<li><strong>hide关键字：</strong>可以隐藏某个成员（显示其他）</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_041.png\" alt=\"图1\"></p>\n<p>库中内容和当前文件中的名字冲突</p>\n<p>当各个库有命名冲突的时候，可以使用as关键字来使用命名空间</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_042.png\" alt=\"图1\"></p>\n<h3 id=\"5-2-库的定义\"><a href=\"#5-2-库的定义\" class=\"headerlink\" title=\"5.2. 库的定义\"></a>5.2. 库的定义</h3><p><strong>library关键字</strong></p>\n<p>通常在定义库时，我们可以使用library关键字给库起一个名字。</p>\n<p>但目前我发现，库的名字并不影响导入，因为import语句用的是字符串URI</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_043.png\" alt=\"图1\"></p>\n<p><strong>part关键字</strong></p>\n<p>在之前我们使用student.dart作为演练的时候，只是将该文件作为一个库。</p>\n<p>在开发中，如果一个库文件太大，将所有内容保存到一个文件夹是不太合理的，我们有可能希望将这个库进行拆分，这个时候就可以使用part关键字了</p>\n<p>不过官方已经不建议使用这种方式了：</p>\n<ul>\n<li>dart.dev/guides/libr…</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_044.png\" alt=\"图1\"></p>\n<ul>\n<li>mathUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_045.png\" alt=\"图1\"></p>\n<ul>\n<li>dateUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_046.png\" alt=\"图1\"></p>\n<ul>\n<li>utils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_047.png\" alt=\"图1\"></p>\n<ul>\n<li>test_libary.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_048.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_049.png\" alt=\"图1\"></p>\n<p><strong>export关键字</strong></p>\n<p>官方不推荐使用part关键字，那如果库非常大，如何进行管理呢？</p>\n<ul>\n<li>将每一个dart文件作为库文件，使用export关键字在某个库文件中单独导入</li>\n</ul>\n<ul>\n<li>mathUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_050.png\" alt=\"图1\"></p>\n<ul>\n<li>dateUtils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_051.png\" alt=\"图1\"></p>\n<ul>\n<li>utils.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_052.png\" alt=\"图1\"></p>\n<ul>\n<li>test_libary.dart文件</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/06-Dart-%E4%BA%8C/06_053.png\" alt=\"图1\"></p>\n<p>最后，也可以通过Pub管理自己的库，在项目开发中个人觉得不是非常有必要，所以暂时不讲解这种方式。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"07-Flutter的基础Widget","toc":true,"date":"2020-09-02T12:38:01.000Z","_content":"\n\n# 一. 文本Widget\n在Android中，我们使用TextView，iOS中我们使用UILabel来显示文本；\n\nFlutter中，我们使用Text组件控制文本如何展示；\n\n### 1.1. 普通文本展示\n在Flutter中，我们可以将文本的控制显示分成两类：\n\n - 控制文本布局的参数： 如文本对齐方式 textAlign、文本排版方向 textDirection，文本显示最大行数 maxLines、文本截断规则 overflow 等等，这些都是构造函数中的参数；\n - 控制文本样式的参数： 如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、文本阴影 shadows 等等，这些参数被统一封装到了构造函数中的参数 style 中；\n\n\n下面我们来看一下其中一些属性的使用：\n\n![图1](07-Flutter的基础Widget/07_001.png)\n\n展示效果如下：\n\n![图1](07-Flutter的基础Widget/07_002.png)\n\n我们可以通过一些属性来改变Text的布局：\n\n - textAlign：文本对齐方式，比如TextAlign.center\n - maxLines：最大显示行数，比如1\n - overflow：超出部分显示方式，比如TextOverflow.ellipsis\n - textScaleFactor：控制文本缩放，比如1.24\n\n代码如下：\n\n![图1](07-Flutter的基础Widget/07_003.png)\n\n![图1](07-Flutter的基础Widget/07_004.png)\n\n\n### 1.2. 富文本展示\n前面展示的文本，我们都应用了相同的样式，如果我们希望给他们不同的样式呢？\n\n - 比如《定风波》我希望字体更大一点，并且是黑色字体，并且有加粗效果；\n - 比如 苏轼 我希望是红色字体；\n\n如果希望展示这种混合样式，那么我们可以利用分片来进行操作（在Android中，我们可以使用SpannableString，在iOS中，我们可以使用NSAttributedString完成，了解即可）\n\n代码如下：\n\n```\nclass MyHomeBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text.rich(\n      TextSpan(\n        children: [\n          TextSpan(text: \"《定风波》\", style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold, color: Colors.black)),\n          TextSpan(text: \"苏轼\", style: TextStyle(fontSize: 18, color: Colors.redAccent)),\n          TextSpan(text: \"\\n莫听穿林打叶声，何妨吟啸且徐行。\\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。\")\n        ],\n      ),\n      style: TextStyle(fontSize: 20, color: Colors.purple),\n      textAlign: TextAlign.center,\n    );\n  }\n}\n```\n\n# 二. 按钮Widget\n### 2.1. 按钮的基础\nMaterial widget库中提供了多种按钮Widget如FloatingActionButton、RaisedButton、FlatButton、OutlineButton等\n\n我们直接来对他们进行一个展示：\n\n![图1](07-Flutter的基础Widget/07_005.png)\n\n![图1](07-Flutter的基础Widget/07_006.png)\n\n### 2.2. 自定义样式\n前面的按钮我们使用的都是默认样式，我们可以通过一些属性来改变按钮的样式\n\n![图1](07-Flutter的基础Widget/07_007.png)\n\n![图1](07-Flutter的基础Widget/07_008.png)\n\n\n事实上这里还有一个比较常见的属性：elevation，用于控制阴影的大小，很多地方都会有这个属性，大家可以自行演示一下\n\n### 2.3. 图文混排\n实现代码：\n\n![图1](07-Flutter的基础Widget/07_009.png)\n\n效果：\n\n![图1](07-Flutter的基础Widget/07_010.png)\n\n### 三. 图片Widget\n图片可以让我们的应用更加丰富多彩，Flutter中使用Image组件\n\nImage组件有很多的构造函数，我们这里主要学习两个：\n\n- Image.assets：加载本地资源图片；\n- Image.network：加载网络中的图片；\n\n### 3.1. 加载网络图片\n相对来讲，Flutter中加载网络图片会更加简单，直接传入URL并不需要什么配置，所以我们先来看一下Flutter中如何加载网络图片。\n\n我们先来看看Image有哪些属性可以设置：\n\n![图1](07-Flutter的基础Widget/07_011.png)\n\n- width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。\n- fit：该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：\n - fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。\n - cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。\n - contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。\n - fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。\n - fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。\n - none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。\n- color和 colorBlendMode：在图片绘制时可以对每一个像素进行颜色混合处理，color指定混合色，而colorBlendMode指定混合模式；\n- repeat：当图片本身大小小于显示空间时，指定图片的重复规则。\n\n我们对其中某些属性做一个演练：\n\n- 注意，这里我用了一个Container，大家可以把它理解成一个UIView或者View，就是一个容器；\n- 后面我会专门讲到这个组件的使用；\n\n![图1](07-Flutter的基础Widget/07_012.png)\n\n![图1](07-Flutter的基础Widget/07_013.png)\n\n\n### 3.2. 加载本地图片\n加载本地图片稍微麻烦一点，需要将图片引入，并且进行配置\n\n\n![图1](07-Flutter的基础Widget/07_014.png)\n\n![图1](07-Flutter的基础Widget/07_015.png)\n### 3.3. 实现圆角图像\n\n在Flutter中实现圆角效果也是使用一些Widget来实现的。\n\n#### 3.3.1. 实现圆角头像\n**方式一：CircleAvatar**\n\nCircleAvatar可以实现圆角头像，也可以添加一个子Widget：\n\n![图1](07-Flutter的基础Widget/07_016.png)\n\n\n我们来实现一个圆形头像：\n\n- 注意一：这里我们使用的是NetworkImage，因为backgroundImage要求我们传入一个ImageProvider；\n - ImageProvider是一个抽象类，事实上所有我们前面创建的Image对象都有包含image属性，该属性就是一个ImageProvider\n- 注意二：这里我还在里面添加了一个文字，但是我在文字外层包裹了一个Container；\n - 这里Container的作用是为了可以控制文字在其中的位置调整；\n\n\n![图1](07-Flutter的基础Widget/07_017.png)\n\n![图1](07-Flutter的基础Widget/07_018.png)\n\n\n**方式二：ClipOval**\n\nClipOval也可以实现圆角头像，而且通常是在只有头像时使用\n\n![图1](07-Flutter的基础Widget/07_019.png)\n\n![图1](07-Flutter的基础Widget/07_020.png)\n\n#### 3.3.2. 实现圆角图片\n\n**方式一：ClipRRect**\nClipRRect用于实现圆角效果，可以设置圆角的大小。\n\n实现代码如下，非常简单：\n\n![图1](07-Flutter的基础Widget/07_021.png)\n\n\n![图1](07-Flutter的基础Widget/07_022.png)\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/07-Flutter的基础Widget.md","raw":"---\ntitle: 07-Flutter的基础Widget\ntoc: true\ndate: 2020-09-02 20:38:01\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. 文本Widget\n在Android中，我们使用TextView，iOS中我们使用UILabel来显示文本；\n\nFlutter中，我们使用Text组件控制文本如何展示；\n\n### 1.1. 普通文本展示\n在Flutter中，我们可以将文本的控制显示分成两类：\n\n - 控制文本布局的参数： 如文本对齐方式 textAlign、文本排版方向 textDirection，文本显示最大行数 maxLines、文本截断规则 overflow 等等，这些都是构造函数中的参数；\n - 控制文本样式的参数： 如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、文本阴影 shadows 等等，这些参数被统一封装到了构造函数中的参数 style 中；\n\n\n下面我们来看一下其中一些属性的使用：\n\n![图1](07-Flutter的基础Widget/07_001.png)\n\n展示效果如下：\n\n![图1](07-Flutter的基础Widget/07_002.png)\n\n我们可以通过一些属性来改变Text的布局：\n\n - textAlign：文本对齐方式，比如TextAlign.center\n - maxLines：最大显示行数，比如1\n - overflow：超出部分显示方式，比如TextOverflow.ellipsis\n - textScaleFactor：控制文本缩放，比如1.24\n\n代码如下：\n\n![图1](07-Flutter的基础Widget/07_003.png)\n\n![图1](07-Flutter的基础Widget/07_004.png)\n\n\n### 1.2. 富文本展示\n前面展示的文本，我们都应用了相同的样式，如果我们希望给他们不同的样式呢？\n\n - 比如《定风波》我希望字体更大一点，并且是黑色字体，并且有加粗效果；\n - 比如 苏轼 我希望是红色字体；\n\n如果希望展示这种混合样式，那么我们可以利用分片来进行操作（在Android中，我们可以使用SpannableString，在iOS中，我们可以使用NSAttributedString完成，了解即可）\n\n代码如下：\n\n```\nclass MyHomeBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text.rich(\n      TextSpan(\n        children: [\n          TextSpan(text: \"《定风波》\", style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold, color: Colors.black)),\n          TextSpan(text: \"苏轼\", style: TextStyle(fontSize: 18, color: Colors.redAccent)),\n          TextSpan(text: \"\\n莫听穿林打叶声，何妨吟啸且徐行。\\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。\")\n        ],\n      ),\n      style: TextStyle(fontSize: 20, color: Colors.purple),\n      textAlign: TextAlign.center,\n    );\n  }\n}\n```\n\n# 二. 按钮Widget\n### 2.1. 按钮的基础\nMaterial widget库中提供了多种按钮Widget如FloatingActionButton、RaisedButton、FlatButton、OutlineButton等\n\n我们直接来对他们进行一个展示：\n\n![图1](07-Flutter的基础Widget/07_005.png)\n\n![图1](07-Flutter的基础Widget/07_006.png)\n\n### 2.2. 自定义样式\n前面的按钮我们使用的都是默认样式，我们可以通过一些属性来改变按钮的样式\n\n![图1](07-Flutter的基础Widget/07_007.png)\n\n![图1](07-Flutter的基础Widget/07_008.png)\n\n\n事实上这里还有一个比较常见的属性：elevation，用于控制阴影的大小，很多地方都会有这个属性，大家可以自行演示一下\n\n### 2.3. 图文混排\n实现代码：\n\n![图1](07-Flutter的基础Widget/07_009.png)\n\n效果：\n\n![图1](07-Flutter的基础Widget/07_010.png)\n\n### 三. 图片Widget\n图片可以让我们的应用更加丰富多彩，Flutter中使用Image组件\n\nImage组件有很多的构造函数，我们这里主要学习两个：\n\n- Image.assets：加载本地资源图片；\n- Image.network：加载网络中的图片；\n\n### 3.1. 加载网络图片\n相对来讲，Flutter中加载网络图片会更加简单，直接传入URL并不需要什么配置，所以我们先来看一下Flutter中如何加载网络图片。\n\n我们先来看看Image有哪些属性可以设置：\n\n![图1](07-Flutter的基础Widget/07_011.png)\n\n- width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。\n- fit：该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：\n - fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。\n - cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。\n - contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。\n - fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。\n - fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。\n - none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。\n- color和 colorBlendMode：在图片绘制时可以对每一个像素进行颜色混合处理，color指定混合色，而colorBlendMode指定混合模式；\n- repeat：当图片本身大小小于显示空间时，指定图片的重复规则。\n\n我们对其中某些属性做一个演练：\n\n- 注意，这里我用了一个Container，大家可以把它理解成一个UIView或者View，就是一个容器；\n- 后面我会专门讲到这个组件的使用；\n\n![图1](07-Flutter的基础Widget/07_012.png)\n\n![图1](07-Flutter的基础Widget/07_013.png)\n\n\n### 3.2. 加载本地图片\n加载本地图片稍微麻烦一点，需要将图片引入，并且进行配置\n\n\n![图1](07-Flutter的基础Widget/07_014.png)\n\n![图1](07-Flutter的基础Widget/07_015.png)\n### 3.3. 实现圆角图像\n\n在Flutter中实现圆角效果也是使用一些Widget来实现的。\n\n#### 3.3.1. 实现圆角头像\n**方式一：CircleAvatar**\n\nCircleAvatar可以实现圆角头像，也可以添加一个子Widget：\n\n![图1](07-Flutter的基础Widget/07_016.png)\n\n\n我们来实现一个圆形头像：\n\n- 注意一：这里我们使用的是NetworkImage，因为backgroundImage要求我们传入一个ImageProvider；\n - ImageProvider是一个抽象类，事实上所有我们前面创建的Image对象都有包含image属性，该属性就是一个ImageProvider\n- 注意二：这里我还在里面添加了一个文字，但是我在文字外层包裹了一个Container；\n - 这里Container的作用是为了可以控制文字在其中的位置调整；\n\n\n![图1](07-Flutter的基础Widget/07_017.png)\n\n![图1](07-Flutter的基础Widget/07_018.png)\n\n\n**方式二：ClipOval**\n\nClipOval也可以实现圆角头像，而且通常是在只有头像时使用\n\n![图1](07-Flutter的基础Widget/07_019.png)\n\n![图1](07-Flutter的基础Widget/07_020.png)\n\n#### 3.3.2. 实现圆角图片\n\n**方式一：ClipRRect**\nClipRRect用于实现圆角效果，可以设置圆角的大小。\n\n实现代码如下，非常简单：\n\n![图1](07-Flutter的基础Widget/07_021.png)\n\n\n![图1](07-Flutter的基础Widget/07_022.png)\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/07-Flutter的基础Widget","published":1,"updated":"2020-09-18T13:59:14.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengc001wu3s6gf3o2eln","content":"<h1 id=\"一-文本Widget\"><a href=\"#一-文本Widget\" class=\"headerlink\" title=\"一. 文本Widget\"></a>一. 文本Widget</h1><p>在Android中，我们使用TextView，iOS中我们使用UILabel来显示文本；</p>\n<p>Flutter中，我们使用Text组件控制文本如何展示；</p>\n<h3 id=\"1-1-普通文本展示\"><a href=\"#1-1-普通文本展示\" class=\"headerlink\" title=\"1.1. 普通文本展示\"></a>1.1. 普通文本展示</h3><p>在Flutter中，我们可以将文本的控制显示分成两类：</p>\n<ul>\n<li>控制文本布局的参数： 如文本对齐方式 textAlign、文本排版方向 textDirection，文本显示最大行数 maxLines、文本截断规则 overflow 等等，这些都是构造函数中的参数；</li>\n<li>控制文本样式的参数： 如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、文本阴影 shadows 等等，这些参数被统一封装到了构造函数中的参数 style 中；</li>\n</ul>\n<p>下面我们来看一下其中一些属性的使用：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_001.png\" alt=\"图1\"></p>\n<p>展示效果如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_002.png\" alt=\"图1\"></p>\n<p>我们可以通过一些属性来改变Text的布局：</p>\n<ul>\n<li>textAlign：文本对齐方式，比如TextAlign.center</li>\n<li>maxLines：最大显示行数，比如1</li>\n<li>overflow：超出部分显示方式，比如TextOverflow.ellipsis</li>\n<li>textScaleFactor：控制文本缩放，比如1.24</li>\n</ul>\n<p>代码如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_003.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-富文本展示\"><a href=\"#1-2-富文本展示\" class=\"headerlink\" title=\"1.2. 富文本展示\"></a>1.2. 富文本展示</h3><p>前面展示的文本，我们都应用了相同的样式，如果我们希望给他们不同的样式呢？</p>\n<ul>\n<li>比如《定风波》我希望字体更大一点，并且是黑色字体，并且有加粗效果；</li>\n<li>比如 苏轼 我希望是红色字体；</li>\n</ul>\n<p>如果希望展示这种混合样式，那么我们可以利用分片来进行操作（在Android中，我们可以使用SpannableString，在iOS中，我们可以使用NSAttributedString完成，了解即可）</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyHomeBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">      TextSpan(</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          TextSpan(text: &quot;《定风波》&quot;, style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold, color: Colors.black)),</span><br><span class=\"line\">          TextSpan(text: &quot;苏轼&quot;, style: TextStyle(fontSize: 18, color: Colors.redAccent)),</span><br><span class=\"line\">          TextSpan(text: &quot;\\n莫听穿林打叶声，何妨吟啸且徐行。\\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&quot;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      style: TextStyle(fontSize: 20, color: Colors.purple),</span><br><span class=\"line\">      textAlign: TextAlign.center,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-按钮Widget\"><a href=\"#二-按钮Widget\" class=\"headerlink\" title=\"二. 按钮Widget\"></a>二. 按钮Widget</h1><h3 id=\"2-1-按钮的基础\"><a href=\"#2-1-按钮的基础\" class=\"headerlink\" title=\"2.1. 按钮的基础\"></a>2.1. 按钮的基础</h3><p>Material widget库中提供了多种按钮Widget如FloatingActionButton、RaisedButton、FlatButton、OutlineButton等</p>\n<p>我们直接来对他们进行一个展示：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_005.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_006.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-自定义样式\"><a href=\"#2-2-自定义样式\" class=\"headerlink\" title=\"2.2. 自定义样式\"></a>2.2. 自定义样式</h3><p>前面的按钮我们使用的都是默认样式，我们可以通过一些属性来改变按钮的样式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_008.png\" alt=\"图1\"></p>\n<p>事实上这里还有一个比较常见的属性：elevation，用于控制阴影的大小，很多地方都会有这个属性，大家可以自行演示一下</p>\n<h3 id=\"2-3-图文混排\"><a href=\"#2-3-图文混排\" class=\"headerlink\" title=\"2.3. 图文混排\"></a>2.3. 图文混排</h3><p>实现代码：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_009.png\" alt=\"图1\"></p>\n<p>效果：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_010.png\" alt=\"图1\"></p>\n<h3 id=\"三-图片Widget\"><a href=\"#三-图片Widget\" class=\"headerlink\" title=\"三. 图片Widget\"></a>三. 图片Widget</h3><p>图片可以让我们的应用更加丰富多彩，Flutter中使用Image组件</p>\n<p>Image组件有很多的构造函数，我们这里主要学习两个：</p>\n<ul>\n<li>Image.assets：加载本地资源图片；</li>\n<li>Image.network：加载网络中的图片；</li>\n</ul>\n<h3 id=\"3-1-加载网络图片\"><a href=\"#3-1-加载网络图片\" class=\"headerlink\" title=\"3.1. 加载网络图片\"></a>3.1. 加载网络图片</h3><p>相对来讲，Flutter中加载网络图片会更加简单，直接传入URL并不需要什么配置，所以我们先来看一下Flutter中如何加载网络图片。</p>\n<p>我们先来看看Image有哪些属性可以设置：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_011.png\" alt=\"图1\"></p>\n<ul>\n<li>width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。</li>\n<li>fit：该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：<ul>\n<li>fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。</li>\n<li>cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。</li>\n<li>fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。</li>\n</ul>\n</li>\n<li>color和 colorBlendMode：在图片绘制时可以对每一个像素进行颜色混合处理，color指定混合色，而colorBlendMode指定混合模式；</li>\n<li>repeat：当图片本身大小小于显示空间时，指定图片的重复规则。</li>\n</ul>\n<p>我们对其中某些属性做一个演练：</p>\n<ul>\n<li>注意，这里我用了一个Container，大家可以把它理解成一个UIView或者View，就是一个容器；</li>\n<li>后面我会专门讲到这个组件的使用；</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_012.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_013.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-加载本地图片\"><a href=\"#3-2-加载本地图片\" class=\"headerlink\" title=\"3.2. 加载本地图片\"></a>3.2. 加载本地图片</h3><p>加载本地图片稍微麻烦一点，需要将图片引入，并且进行配置</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_014.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_015.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-实现圆角图像\"><a href=\"#3-3-实现圆角图像\" class=\"headerlink\" title=\"3.3. 实现圆角图像\"></a>3.3. 实现圆角图像</h3><p>在Flutter中实现圆角效果也是使用一些Widget来实现的。</p>\n<h4 id=\"3-3-1-实现圆角头像\"><a href=\"#3-3-1-实现圆角头像\" class=\"headerlink\" title=\"3.3.1. 实现圆角头像\"></a>3.3.1. 实现圆角头像</h4><p><strong>方式一：CircleAvatar</strong></p>\n<p>CircleAvatar可以实现圆角头像，也可以添加一个子Widget：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_016.png\" alt=\"图1\"></p>\n<p>我们来实现一个圆形头像：</p>\n<ul>\n<li>注意一：这里我们使用的是NetworkImage，因为backgroundImage要求我们传入一个ImageProvider；<ul>\n<li>ImageProvider是一个抽象类，事实上所有我们前面创建的Image对象都有包含image属性，该属性就是一个ImageProvider</li>\n</ul>\n</li>\n<li>注意二：这里我还在里面添加了一个文字，但是我在文字外层包裹了一个Container；<ul>\n<li>这里Container的作用是为了可以控制文字在其中的位置调整；</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_017.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_018.png\" alt=\"图1\"></p>\n<p><strong>方式二：ClipOval</strong></p>\n<p>ClipOval也可以实现圆角头像，而且通常是在只有头像时使用</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_019.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_020.png\" alt=\"图1\"></p>\n<h4 id=\"3-3-2-实现圆角图片\"><a href=\"#3-3-2-实现圆角图片\" class=\"headerlink\" title=\"3.3.2. 实现圆角图片\"></a>3.3.2. 实现圆角图片</h4><p><strong>方式一：ClipRRect</strong><br>ClipRRect用于实现圆角效果，可以设置圆角的大小。</p>\n<p>实现代码如下，非常简单：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_021.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_022.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-文本Widget\"><a href=\"#一-文本Widget\" class=\"headerlink\" title=\"一. 文本Widget\"></a>一. 文本Widget</h1><p>在Android中，我们使用TextView，iOS中我们使用UILabel来显示文本；</p>\n<p>Flutter中，我们使用Text组件控制文本如何展示；</p>\n<h3 id=\"1-1-普通文本展示\"><a href=\"#1-1-普通文本展示\" class=\"headerlink\" title=\"1.1. 普通文本展示\"></a>1.1. 普通文本展示</h3><p>在Flutter中，我们可以将文本的控制显示分成两类：</p>\n<ul>\n<li>控制文本布局的参数： 如文本对齐方式 textAlign、文本排版方向 textDirection，文本显示最大行数 maxLines、文本截断规则 overflow 等等，这些都是构造函数中的参数；</li>\n<li>控制文本样式的参数： 如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、文本阴影 shadows 等等，这些参数被统一封装到了构造函数中的参数 style 中；</li>\n</ul>\n<p>下面我们来看一下其中一些属性的使用：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_001.png\" alt=\"图1\"></p>\n<p>展示效果如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_002.png\" alt=\"图1\"></p>\n<p>我们可以通过一些属性来改变Text的布局：</p>\n<ul>\n<li>textAlign：文本对齐方式，比如TextAlign.center</li>\n<li>maxLines：最大显示行数，比如1</li>\n<li>overflow：超出部分显示方式，比如TextOverflow.ellipsis</li>\n<li>textScaleFactor：控制文本缩放，比如1.24</li>\n</ul>\n<p>代码如下：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_003.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-富文本展示\"><a href=\"#1-2-富文本展示\" class=\"headerlink\" title=\"1.2. 富文本展示\"></a>1.2. 富文本展示</h3><p>前面展示的文本，我们都应用了相同的样式，如果我们希望给他们不同的样式呢？</p>\n<ul>\n<li>比如《定风波》我希望字体更大一点，并且是黑色字体，并且有加粗效果；</li>\n<li>比如 苏轼 我希望是红色字体；</li>\n</ul>\n<p>如果希望展示这种混合样式，那么我们可以利用分片来进行操作（在Android中，我们可以使用SpannableString，在iOS中，我们可以使用NSAttributedString完成，了解即可）</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyHomeBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">      TextSpan(</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          TextSpan(text: &quot;《定风波》&quot;, style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold, color: Colors.black)),</span><br><span class=\"line\">          TextSpan(text: &quot;苏轼&quot;, style: TextStyle(fontSize: 18, color: Colors.redAccent)),</span><br><span class=\"line\">          TextSpan(text: &quot;\\n莫听穿林打叶声，何妨吟啸且徐行。\\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&quot;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      style: TextStyle(fontSize: 20, color: Colors.purple),</span><br><span class=\"line\">      textAlign: TextAlign.center,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-按钮Widget\"><a href=\"#二-按钮Widget\" class=\"headerlink\" title=\"二. 按钮Widget\"></a>二. 按钮Widget</h1><h3 id=\"2-1-按钮的基础\"><a href=\"#2-1-按钮的基础\" class=\"headerlink\" title=\"2.1. 按钮的基础\"></a>2.1. 按钮的基础</h3><p>Material widget库中提供了多种按钮Widget如FloatingActionButton、RaisedButton、FlatButton、OutlineButton等</p>\n<p>我们直接来对他们进行一个展示：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_005.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_006.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-自定义样式\"><a href=\"#2-2-自定义样式\" class=\"headerlink\" title=\"2.2. 自定义样式\"></a>2.2. 自定义样式</h3><p>前面的按钮我们使用的都是默认样式，我们可以通过一些属性来改变按钮的样式</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_007.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_008.png\" alt=\"图1\"></p>\n<p>事实上这里还有一个比较常见的属性：elevation，用于控制阴影的大小，很多地方都会有这个属性，大家可以自行演示一下</p>\n<h3 id=\"2-3-图文混排\"><a href=\"#2-3-图文混排\" class=\"headerlink\" title=\"2.3. 图文混排\"></a>2.3. 图文混排</h3><p>实现代码：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_009.png\" alt=\"图1\"></p>\n<p>效果：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_010.png\" alt=\"图1\"></p>\n<h3 id=\"三-图片Widget\"><a href=\"#三-图片Widget\" class=\"headerlink\" title=\"三. 图片Widget\"></a>三. 图片Widget</h3><p>图片可以让我们的应用更加丰富多彩，Flutter中使用Image组件</p>\n<p>Image组件有很多的构造函数，我们这里主要学习两个：</p>\n<ul>\n<li>Image.assets：加载本地资源图片；</li>\n<li>Image.network：加载网络中的图片；</li>\n</ul>\n<h3 id=\"3-1-加载网络图片\"><a href=\"#3-1-加载网络图片\" class=\"headerlink\" title=\"3.1. 加载网络图片\"></a>3.1. 加载网络图片</h3><p>相对来讲，Flutter中加载网络图片会更加简单，直接传入URL并不需要什么配置，所以我们先来看一下Flutter中如何加载网络图片。</p>\n<p>我们先来看看Image有哪些属性可以设置：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_011.png\" alt=\"图1\"></p>\n<ul>\n<li>width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。</li>\n<li>fit：该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：<ul>\n<li>fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。</li>\n<li>cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。</li>\n<li>fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li>\n<li>none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。</li>\n</ul>\n</li>\n<li>color和 colorBlendMode：在图片绘制时可以对每一个像素进行颜色混合处理，color指定混合色，而colorBlendMode指定混合模式；</li>\n<li>repeat：当图片本身大小小于显示空间时，指定图片的重复规则。</li>\n</ul>\n<p>我们对其中某些属性做一个演练：</p>\n<ul>\n<li>注意，这里我用了一个Container，大家可以把它理解成一个UIView或者View，就是一个容器；</li>\n<li>后面我会专门讲到这个组件的使用；</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_012.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_013.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-加载本地图片\"><a href=\"#3-2-加载本地图片\" class=\"headerlink\" title=\"3.2. 加载本地图片\"></a>3.2. 加载本地图片</h3><p>加载本地图片稍微麻烦一点，需要将图片引入，并且进行配置</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_014.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_015.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-实现圆角图像\"><a href=\"#3-3-实现圆角图像\" class=\"headerlink\" title=\"3.3. 实现圆角图像\"></a>3.3. 实现圆角图像</h3><p>在Flutter中实现圆角效果也是使用一些Widget来实现的。</p>\n<h4 id=\"3-3-1-实现圆角头像\"><a href=\"#3-3-1-实现圆角头像\" class=\"headerlink\" title=\"3.3.1. 实现圆角头像\"></a>3.3.1. 实现圆角头像</h4><p><strong>方式一：CircleAvatar</strong></p>\n<p>CircleAvatar可以实现圆角头像，也可以添加一个子Widget：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_016.png\" alt=\"图1\"></p>\n<p>我们来实现一个圆形头像：</p>\n<ul>\n<li>注意一：这里我们使用的是NetworkImage，因为backgroundImage要求我们传入一个ImageProvider；<ul>\n<li>ImageProvider是一个抽象类，事实上所有我们前面创建的Image对象都有包含image属性，该属性就是一个ImageProvider</li>\n</ul>\n</li>\n<li>注意二：这里我还在里面添加了一个文字，但是我在文字外层包裹了一个Container；<ul>\n<li>这里Container的作用是为了可以控制文字在其中的位置调整；</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_017.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_018.png\" alt=\"图1\"></p>\n<p><strong>方式二：ClipOval</strong></p>\n<p>ClipOval也可以实现圆角头像，而且通常是在只有头像时使用</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_019.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_020.png\" alt=\"图1\"></p>\n<h4 id=\"3-3-2-实现圆角图片\"><a href=\"#3-3-2-实现圆角图片\" class=\"headerlink\" title=\"3.3.2. 实现圆角图片\"></a>3.3.2. 实现圆角图片</h4><p><strong>方式一：ClipRRect</strong><br>ClipRRect用于实现圆角效果，可以设置圆角的大小。</p>\n<p>实现代码如下，非常简单：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_021.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/07-Flutter%E7%9A%84%E5%9F%BA%E7%A1%80Widget/07_022.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"05-Dart(一)","toc":true,"date":"2020-09-02T12:37:33.000Z","_content":"\n\n# 一. Dart介绍和安装\n### 1.1. 认识Dart\n\nGoogle为Flutter选择了Dart就已经是既定的事实，无论你多么想用你熟悉的语言，比如JavaScript、Java、Swift、C++等来开发Flutter，至少目前都是不可以的。\n\n在讲解Dart的过程中，我会假定你已经有一定的编程语言基础，比如JavaScript、Java、Python、C++等。\n\n其实如果你对编程语言足够的自信，Dart的学习过程甚至可以直接忽略：\n\n- 因为你学过N种编程语言之后，你会发现他们的差异是并不大；\n- 无非就是语法上的差异+某些语言有某些特性，而某些语言没有某些特性而已；\n- 在我初次接触Flutter的时候，并没有专门去看Dart的语法，而是对于某些语法不太熟练的时候回头去了解而已；\n\n所以，如果你对编程语言已经足够了解，可以跳过我们接下来的Dart学习：\n\n- 我也并不会所有特性都一一罗列，我会挑出比较重要的语言特性来专门讲解；\n- 某些特性可能会等到后面讲解Flutter的一些知识的时候单独拿出来讲解；\n\n下面，我们就从安装Dart开始吧！\n\n### 1.2. 安装Dart\n为什么还需要安装Dart呢？\n\n事实上在安装Flutter SDK的时候，它已经内置了Dart了，我们完全可以直接使用Flutter去进行Dart的编写并且运行。\n\n但是，如果你想单独学习Dart，并且运行自己的Dart代码，最好去安装一个Dart SDK。\n\n到Dart的官方，根据不同的操作系统下载对应的Dart\n\n- 官方网站：dart.dev/get-dart\n\n无论是什么操作系统，安装方式都是有两种：通过工具安装和直接下载SDK，配置环境变量\n\n1.通过工具安装\n\n- Windows可以通过Chocolatey\n- macOS可以通过homebrew\n- 具体安装操作官网网站有详细的解释\n\n2.直接下载SDK，配置环境变量\n\n- 下载地址：dart.dev/tools/sdk/a…\n- 我采用了这个安装方式。\n- 下载完成后，根据路径配置环境变量即可。\n\n### 1.3. VSCode配置\n学习Dart过程中，我使用VSCode作为编辑器\n\n- 一方面编写代码非常方便，而且界面风格我也很喜欢\n- 另一方面我可以快速在终端看到我编写代码的效果\n\n使用VSCode编写Dart需要安装Dart插件：我目前给这个VSCode装了四个插件\n\n![图1](05-Dart-一/05_001.png)\n\n# 二. Hello Dart\n### 2.1. Hello World\n\n接下来，就可以步入正题了。学习编程语言，从祖传的Hello World开始。\n\n在VSCode中新建一个helloWorld.dart文件，添加下面的内容：\n\n```\nmain(List<String> args) {\n  print('Hello World');\n}\n```\n\n然后在终端执行dart helloWorld.dart，就能看到Hello World的结果了。\n\n完成了这个执行过程之后，以你之前学习的编程语言来看，你能得到多少信息呢？\n\n\n### 2.2. 程序的分析\n\n接下来，就是我自己的总结：\n\n- 一、Dart语言的入口也是main函数，并且必须显示的进行定义；\n- 二、Dart的入口函数main是没有返回值的；\n- 三、传递给main的命令行参数，是通过List<String>完成的。\n\t- 从字面值就可以理解List是Dart中的集合类型。\n\t- 其中的每一个String都表示传递给main的一个参数；\n- 四、定义字符串的时候，可以使用单引号或双引号；\n- 五、每行语句必须使用分号结尾，很多语言并不需要分号，比如Swift、JavaScript；\n\n# 三. 定义变量\n### 3.1. 明确声明(Explicit)\n明确声明变量的方式, 格式如下:\n\n##### 变量类型 变量名称 = 赋值;\n\n\n示例代码:\n\n```\nString name = 'coderwhy';\nint age = 18;\ndouble height = 1.88;\nprint('${name}, ${age}, ${height}'); // 拼接方式后续会讲解\n```\n\n\n注意事项: 定义的变量可以修改值, 但是不能赋值其他类型\n\n```\nString content = 'Hello Dart';\ncontent = 'Hello World'; // 正确的\ncontent = 111; // 错误的, 将一个int值赋值给一个String变量\n```\n\n### 3.2. 类型推导(Type Inference)\n\n类型推导声明变量的方式, 格式如下:\n\n##### var/dynamic/const/final 变量名称 = 赋值;\n\n\n### 3.3.1. var的使用\n\nvar的使用示例:\n\nruntimeType用于获取变量当前的类型\n\n```\nvar name = 'coderwhy';\nname = 'kobe';\nprint(name.runtimeType); // String\n```\n\n\nvar的错误用法:\n\n```\nvar age = 18;\nage = 'why'; // 不可以将String赋值给一个int类型\n```\n\n### 3.3.2. dynamic的使用\n如果确实希望这样做,可以使用dynamic来声明变量:\n\n但是在开发中, 通常情况下不使用dynamic, 因为类型的变量会带来潜在的危险\n\n```\ndynamic name = 'coderwhy';\nprint(name.runtimeType); // String\nname = 18;\nprint(name.runtimeType); // int\n```\n\n### 3.3.3. final&const的使用\n\nfinal和const都是用于定义常量的, 也就是定义之后值都不可以修改\n\n```\nfinal name = 'coderwhy';\nname = 'kobe'; // 错误做法\n\nconst age = 18;\nage = 20; // 错误做法\n```\n\nfinal和const有什么区别呢?\nconst在赋值时, 赋值的内容必须是在编译期间就确定下来的\nfinal可以通过计算/函数 获取一个值(运行期间确定一个值)\n\n```\nString getName() {\nreturn 'coderwhy'; \n} \nmain(List<String> args) { \nconst name = getName(); // 错误的做法, 因为要执行函数才能获取到值 \nfinal name = getName(); // 正确的做法 \n}\n```\n\nfinal和const小案例:\n\n- 首先, const是不可以赋值为DateTime.now()\n- 其次, final一旦被赋值后就有确定的结果, 不会再次赋值\n\n![图1](05-Dart-一/05_002.png)\n\nconst放在赋值语句的右边，可以共享对象，提高性能:\n\n- 这里可以暂时先做了解，后面讲解类的常量构造函数时，我会再次提到这个概念\n\n![图1](05-Dart-一/05_003.png)\n\n# 四. 数据类型\n### 4.1. 数字类型\n\n对于数值来说，我们也不用关心它是否有符号，以及数据的宽度和精度等问题。只要记着整数用int，浮点数用double就行了。\n\n不过，要说明一下的是Dart中的int和double可表示的范围并不是固定的，它取决于运行Dart的平台。\n\n![图1](05-Dart-一/05_004.png)\n\n字符串和数字之间的转化:\n\n![图1](05-Dart-一/05_005.png)\n\n### 4.2. 布尔类型\n布尔类型中,Dart提供了一个bool的类型, 取值为true和false\n\n```\n// 布尔类型\nvar isFlag = true;\nprint('$isFlag ${isFlag.runtimeType}');\n\n```\n\n##### 注意: Dart中不能判断非0即真, 或者非空即真\n\nDart的类型安全性意味着您不能使用if(非booleanvalue)或assert(非booleanvalue)之类的代码。\n\n\n![图1](05-Dart-一/05_006.png)\n\n\n### 4.3. 字符串类型\n\nDart字符串是UTF-16编码单元的序列。您可以使用单引号或双引号创建一个字符串:\n\n![图1](05-Dart-一/05_007.png)\n\n\n可以使用三个单引号或者双引号表示多行字符串:\n\n![图1](05-Dart-一/05_008.png)\n\n字符串和其他变量或表达式拼接:\n \n```\n使用 ${expression}, 如果表达式是一个标识符, 那么{}可以省略\n```\n\n![图1](05-Dart-一/05_009.png)\n\n\n### 4.4. 集合类型\n### 4.4.1. 集合类型的定义\n\n对于集合类型，Dart则内置了最常用的三种：List / Set / Map。\n\n\n其中，List可以这样来定义：\n\n![图1](05-Dart-一/05_010.png)\n\n其中，set可以这样来定义：\n\n- 其实，也就是把[]换成{}就好了。\n- Set和List最大的两个不同就是：Set是无序的，并且元素是不重复的。\n\n\n![图1](05-Dart-一/05_011.png)\n\n\n最后，Map是我们常说的字典类型，它的定义是这样的：\n\n![图1](05-Dart-一/05_012.png)\n\n### 4.4.2. 集合的常见操作\n了解了这三个集合的定义方式之后，我们来看一些最基础的公共操作\n\n第一类，是所有集合都支持的获取长度的属性length：\n\n![图1](05-Dart-一/05_013.png)\n\n\n第二类, 是添加/删除/包含操作\n\n - 并且，对List来说，由于元素是有序的，它还提供了一个删除指定索引位置上元素的方法\n\n\n![图1](05-Dart-一/05_014.png)\n\n第三类，是Map的操作\n\n- 由于它有key和value，因此无论是读取值，还是操作，都要明确是基于key的，还是基于value的，或者是基于key/value对的。\n\n```\n// Map的操作\n// 1.根据key获取value\nprint(infoMap1['name']); // why\n\n// 2.获取所有的entries\nprint('${infoMap1.entries} ${infoMap1.entries.runtimeType}'); // (MapEntry(name: why), MapEntry(age: 18)) MappedIterable<String, MapEntry<String, Object>>\n\n// 3.获取所有的keys\nprint('${infoMap1.keys} ${infoMap1.keys.runtimeType}'); // (name, age) _CompactIterable<String>\n\n// 4.获取所有的values\nprint('${infoMap1.values} ${infoMap1.values.runtimeType}'); // (why, 18) _CompactIterable<Object>\n\n// 5.判断是否包含某个key或者value\nprint('${infoMap1.containsKey('age')} ${infoMap1.containsValue(18)}'); // true true\n\n// 6.根据key删除元素\ninfoMap1.remove('age');\nprint('${infoMap1}'); // {name: why}\n```\n\n# 五. 函数\n### 5.1. 函数的基本定义\n\nDart是一种真正的面向对象语言，所以即使函数也是对象，所有也有类型, 类型就是Function。\n\n这也就意味着函数可以作为变量定义或者作为其他函数的参数或者返回值.\n\n函数的定义方式:\n\n![图1](05-Dart-一/05_015.png)\n\n按照上面的定义方式, 我们定义一个完整的函数:\n\n![图1](05-Dart-一/05_016.png)\n\nEffective Dart建议对公共的API, 使用类型注解, 但是如果我们省略掉了类型, 依然是可以正常工作的\n\n\n![图1](05-Dart-一/05_017.png)\n\n另外, 如果函数中只有一个表达式, 那么可以使用箭头语法(arrow syntax)\n\n- 注意, 这里面只能是一个表达式, 不能是一个语句\n\n```\nsum(num1, num2) => num1 + num2;\n```\n\n\n### 5.2. 函数的参数问题\n函数的参数可以分成两类: 必须参数和可选参数\n\n前面使用的参数都是必须参数.\n\n### 5.2.1. 可选参数\n可选参数可以分为 命名可选参数 和 位置可选参数\n\n定义方式:\n\n![图1](05-Dart-一/05_018.png)\n\n命名可选参数的演示:\n\n![图1](05-Dart-一/05_019.png)\n\n\n位置可选参数的演示:\n\n![图1](05-Dart-一/05_020.png)\n\n\n命名可选参数, 可以指定某个参数是必传的(使用@required, 有问题)\n\n![图1](05-Dart-一/05_021.png)\n\n### 5.2.2. 参数默认值\n参数可以有默认值, 在不传入的情况下, 使用默认值\n\n- 注意, 只有可选参数才可以有默认值, 必须参数不能有默认值\n\n![图1](05-Dart-一/05_022.png)\n\nDart中的main函数就是一个接受可选的列表参数作为参数的, 所以在使用main函数时, 我们可以传入参数, 也可以不传入\n\n### 5.3. 函数是一等公民\n\n在很多语言中, 函数并不能作为一等公民来使用, 比如Java/OC. 这种限制让编程不够灵活, 所以现代的编程语言基本都支持函数作为一等公民来使用, Dart也支持.\n\n这就意味着你可以将函数赋值给一个变量, 也可以将函数作为另外一个函数的参数或者返回值来使用.\n\n![图1](05-Dart-一/05_023.png)\n\n### 5.4. 匿名函数的使用\n大部分我们定义的函数都会有自己的名字， 比如前面定义的foo、test函数等等。\n\n但是某些情况下，给函数命名太麻烦了，我们可以使用没有名字的函数，这种函数可以被称之为匿名函数( anonymous function)，也可以叫lambda或者closure。\n\n![图1](05-Dart-一/05_024.png)\n\n\n### 5.5. 词法作用域\ndart中的词法有自己明确的作用域范围，它是根据代码的结构({})来决定作用域范围的\n优先使用自己作用域中的变量，如果没有找到，则一层层向外查找。\n\n![图1](05-Dart-一/05_025.png)\n\n\n### 5.6. 词法闭包\n闭包可以访问其词法范围内的变量，即使函数在其他地方被使用，也可以正常的访问。\n\n![图1](05-Dart-一/05_026.png)\n\n\n5.7. 返回值问题\n所有函数都返回一个值。如果没有指定返回值，则语句返回null;隐式附加到函数体。\n\n![图1](05-Dart-一/05_027.png)\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/05-Dart-一.md","raw":"---\ntitle: 05-Dart(一)\ntoc: true\ndate: 2020-09-02 20:37:33\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. Dart介绍和安装\n### 1.1. 认识Dart\n\nGoogle为Flutter选择了Dart就已经是既定的事实，无论你多么想用你熟悉的语言，比如JavaScript、Java、Swift、C++等来开发Flutter，至少目前都是不可以的。\n\n在讲解Dart的过程中，我会假定你已经有一定的编程语言基础，比如JavaScript、Java、Python、C++等。\n\n其实如果你对编程语言足够的自信，Dart的学习过程甚至可以直接忽略：\n\n- 因为你学过N种编程语言之后，你会发现他们的差异是并不大；\n- 无非就是语法上的差异+某些语言有某些特性，而某些语言没有某些特性而已；\n- 在我初次接触Flutter的时候，并没有专门去看Dart的语法，而是对于某些语法不太熟练的时候回头去了解而已；\n\n所以，如果你对编程语言已经足够了解，可以跳过我们接下来的Dart学习：\n\n- 我也并不会所有特性都一一罗列，我会挑出比较重要的语言特性来专门讲解；\n- 某些特性可能会等到后面讲解Flutter的一些知识的时候单独拿出来讲解；\n\n下面，我们就从安装Dart开始吧！\n\n### 1.2. 安装Dart\n为什么还需要安装Dart呢？\n\n事实上在安装Flutter SDK的时候，它已经内置了Dart了，我们完全可以直接使用Flutter去进行Dart的编写并且运行。\n\n但是，如果你想单独学习Dart，并且运行自己的Dart代码，最好去安装一个Dart SDK。\n\n到Dart的官方，根据不同的操作系统下载对应的Dart\n\n- 官方网站：dart.dev/get-dart\n\n无论是什么操作系统，安装方式都是有两种：通过工具安装和直接下载SDK，配置环境变量\n\n1.通过工具安装\n\n- Windows可以通过Chocolatey\n- macOS可以通过homebrew\n- 具体安装操作官网网站有详细的解释\n\n2.直接下载SDK，配置环境变量\n\n- 下载地址：dart.dev/tools/sdk/a…\n- 我采用了这个安装方式。\n- 下载完成后，根据路径配置环境变量即可。\n\n### 1.3. VSCode配置\n学习Dart过程中，我使用VSCode作为编辑器\n\n- 一方面编写代码非常方便，而且界面风格我也很喜欢\n- 另一方面我可以快速在终端看到我编写代码的效果\n\n使用VSCode编写Dart需要安装Dart插件：我目前给这个VSCode装了四个插件\n\n![图1](05-Dart-一/05_001.png)\n\n# 二. Hello Dart\n### 2.1. Hello World\n\n接下来，就可以步入正题了。学习编程语言，从祖传的Hello World开始。\n\n在VSCode中新建一个helloWorld.dart文件，添加下面的内容：\n\n```\nmain(List<String> args) {\n  print('Hello World');\n}\n```\n\n然后在终端执行dart helloWorld.dart，就能看到Hello World的结果了。\n\n完成了这个执行过程之后，以你之前学习的编程语言来看，你能得到多少信息呢？\n\n\n### 2.2. 程序的分析\n\n接下来，就是我自己的总结：\n\n- 一、Dart语言的入口也是main函数，并且必须显示的进行定义；\n- 二、Dart的入口函数main是没有返回值的；\n- 三、传递给main的命令行参数，是通过List<String>完成的。\n\t- 从字面值就可以理解List是Dart中的集合类型。\n\t- 其中的每一个String都表示传递给main的一个参数；\n- 四、定义字符串的时候，可以使用单引号或双引号；\n- 五、每行语句必须使用分号结尾，很多语言并不需要分号，比如Swift、JavaScript；\n\n# 三. 定义变量\n### 3.1. 明确声明(Explicit)\n明确声明变量的方式, 格式如下:\n\n##### 变量类型 变量名称 = 赋值;\n\n\n示例代码:\n\n```\nString name = 'coderwhy';\nint age = 18;\ndouble height = 1.88;\nprint('${name}, ${age}, ${height}'); // 拼接方式后续会讲解\n```\n\n\n注意事项: 定义的变量可以修改值, 但是不能赋值其他类型\n\n```\nString content = 'Hello Dart';\ncontent = 'Hello World'; // 正确的\ncontent = 111; // 错误的, 将一个int值赋值给一个String变量\n```\n\n### 3.2. 类型推导(Type Inference)\n\n类型推导声明变量的方式, 格式如下:\n\n##### var/dynamic/const/final 变量名称 = 赋值;\n\n\n### 3.3.1. var的使用\n\nvar的使用示例:\n\nruntimeType用于获取变量当前的类型\n\n```\nvar name = 'coderwhy';\nname = 'kobe';\nprint(name.runtimeType); // String\n```\n\n\nvar的错误用法:\n\n```\nvar age = 18;\nage = 'why'; // 不可以将String赋值给一个int类型\n```\n\n### 3.3.2. dynamic的使用\n如果确实希望这样做,可以使用dynamic来声明变量:\n\n但是在开发中, 通常情况下不使用dynamic, 因为类型的变量会带来潜在的危险\n\n```\ndynamic name = 'coderwhy';\nprint(name.runtimeType); // String\nname = 18;\nprint(name.runtimeType); // int\n```\n\n### 3.3.3. final&const的使用\n\nfinal和const都是用于定义常量的, 也就是定义之后值都不可以修改\n\n```\nfinal name = 'coderwhy';\nname = 'kobe'; // 错误做法\n\nconst age = 18;\nage = 20; // 错误做法\n```\n\nfinal和const有什么区别呢?\nconst在赋值时, 赋值的内容必须是在编译期间就确定下来的\nfinal可以通过计算/函数 获取一个值(运行期间确定一个值)\n\n```\nString getName() {\nreturn 'coderwhy'; \n} \nmain(List<String> args) { \nconst name = getName(); // 错误的做法, 因为要执行函数才能获取到值 \nfinal name = getName(); // 正确的做法 \n}\n```\n\nfinal和const小案例:\n\n- 首先, const是不可以赋值为DateTime.now()\n- 其次, final一旦被赋值后就有确定的结果, 不会再次赋值\n\n![图1](05-Dart-一/05_002.png)\n\nconst放在赋值语句的右边，可以共享对象，提高性能:\n\n- 这里可以暂时先做了解，后面讲解类的常量构造函数时，我会再次提到这个概念\n\n![图1](05-Dart-一/05_003.png)\n\n# 四. 数据类型\n### 4.1. 数字类型\n\n对于数值来说，我们也不用关心它是否有符号，以及数据的宽度和精度等问题。只要记着整数用int，浮点数用double就行了。\n\n不过，要说明一下的是Dart中的int和double可表示的范围并不是固定的，它取决于运行Dart的平台。\n\n![图1](05-Dart-一/05_004.png)\n\n字符串和数字之间的转化:\n\n![图1](05-Dart-一/05_005.png)\n\n### 4.2. 布尔类型\n布尔类型中,Dart提供了一个bool的类型, 取值为true和false\n\n```\n// 布尔类型\nvar isFlag = true;\nprint('$isFlag ${isFlag.runtimeType}');\n\n```\n\n##### 注意: Dart中不能判断非0即真, 或者非空即真\n\nDart的类型安全性意味着您不能使用if(非booleanvalue)或assert(非booleanvalue)之类的代码。\n\n\n![图1](05-Dart-一/05_006.png)\n\n\n### 4.3. 字符串类型\n\nDart字符串是UTF-16编码单元的序列。您可以使用单引号或双引号创建一个字符串:\n\n![图1](05-Dart-一/05_007.png)\n\n\n可以使用三个单引号或者双引号表示多行字符串:\n\n![图1](05-Dart-一/05_008.png)\n\n字符串和其他变量或表达式拼接:\n \n```\n使用 ${expression}, 如果表达式是一个标识符, 那么{}可以省略\n```\n\n![图1](05-Dart-一/05_009.png)\n\n\n### 4.4. 集合类型\n### 4.4.1. 集合类型的定义\n\n对于集合类型，Dart则内置了最常用的三种：List / Set / Map。\n\n\n其中，List可以这样来定义：\n\n![图1](05-Dart-一/05_010.png)\n\n其中，set可以这样来定义：\n\n- 其实，也就是把[]换成{}就好了。\n- Set和List最大的两个不同就是：Set是无序的，并且元素是不重复的。\n\n\n![图1](05-Dart-一/05_011.png)\n\n\n最后，Map是我们常说的字典类型，它的定义是这样的：\n\n![图1](05-Dart-一/05_012.png)\n\n### 4.4.2. 集合的常见操作\n了解了这三个集合的定义方式之后，我们来看一些最基础的公共操作\n\n第一类，是所有集合都支持的获取长度的属性length：\n\n![图1](05-Dart-一/05_013.png)\n\n\n第二类, 是添加/删除/包含操作\n\n - 并且，对List来说，由于元素是有序的，它还提供了一个删除指定索引位置上元素的方法\n\n\n![图1](05-Dart-一/05_014.png)\n\n第三类，是Map的操作\n\n- 由于它有key和value，因此无论是读取值，还是操作，都要明确是基于key的，还是基于value的，或者是基于key/value对的。\n\n```\n// Map的操作\n// 1.根据key获取value\nprint(infoMap1['name']); // why\n\n// 2.获取所有的entries\nprint('${infoMap1.entries} ${infoMap1.entries.runtimeType}'); // (MapEntry(name: why), MapEntry(age: 18)) MappedIterable<String, MapEntry<String, Object>>\n\n// 3.获取所有的keys\nprint('${infoMap1.keys} ${infoMap1.keys.runtimeType}'); // (name, age) _CompactIterable<String>\n\n// 4.获取所有的values\nprint('${infoMap1.values} ${infoMap1.values.runtimeType}'); // (why, 18) _CompactIterable<Object>\n\n// 5.判断是否包含某个key或者value\nprint('${infoMap1.containsKey('age')} ${infoMap1.containsValue(18)}'); // true true\n\n// 6.根据key删除元素\ninfoMap1.remove('age');\nprint('${infoMap1}'); // {name: why}\n```\n\n# 五. 函数\n### 5.1. 函数的基本定义\n\nDart是一种真正的面向对象语言，所以即使函数也是对象，所有也有类型, 类型就是Function。\n\n这也就意味着函数可以作为变量定义或者作为其他函数的参数或者返回值.\n\n函数的定义方式:\n\n![图1](05-Dart-一/05_015.png)\n\n按照上面的定义方式, 我们定义一个完整的函数:\n\n![图1](05-Dart-一/05_016.png)\n\nEffective Dart建议对公共的API, 使用类型注解, 但是如果我们省略掉了类型, 依然是可以正常工作的\n\n\n![图1](05-Dart-一/05_017.png)\n\n另外, 如果函数中只有一个表达式, 那么可以使用箭头语法(arrow syntax)\n\n- 注意, 这里面只能是一个表达式, 不能是一个语句\n\n```\nsum(num1, num2) => num1 + num2;\n```\n\n\n### 5.2. 函数的参数问题\n函数的参数可以分成两类: 必须参数和可选参数\n\n前面使用的参数都是必须参数.\n\n### 5.2.1. 可选参数\n可选参数可以分为 命名可选参数 和 位置可选参数\n\n定义方式:\n\n![图1](05-Dart-一/05_018.png)\n\n命名可选参数的演示:\n\n![图1](05-Dart-一/05_019.png)\n\n\n位置可选参数的演示:\n\n![图1](05-Dart-一/05_020.png)\n\n\n命名可选参数, 可以指定某个参数是必传的(使用@required, 有问题)\n\n![图1](05-Dart-一/05_021.png)\n\n### 5.2.2. 参数默认值\n参数可以有默认值, 在不传入的情况下, 使用默认值\n\n- 注意, 只有可选参数才可以有默认值, 必须参数不能有默认值\n\n![图1](05-Dart-一/05_022.png)\n\nDart中的main函数就是一个接受可选的列表参数作为参数的, 所以在使用main函数时, 我们可以传入参数, 也可以不传入\n\n### 5.3. 函数是一等公民\n\n在很多语言中, 函数并不能作为一等公民来使用, 比如Java/OC. 这种限制让编程不够灵活, 所以现代的编程语言基本都支持函数作为一等公民来使用, Dart也支持.\n\n这就意味着你可以将函数赋值给一个变量, 也可以将函数作为另外一个函数的参数或者返回值来使用.\n\n![图1](05-Dart-一/05_023.png)\n\n### 5.4. 匿名函数的使用\n大部分我们定义的函数都会有自己的名字， 比如前面定义的foo、test函数等等。\n\n但是某些情况下，给函数命名太麻烦了，我们可以使用没有名字的函数，这种函数可以被称之为匿名函数( anonymous function)，也可以叫lambda或者closure。\n\n![图1](05-Dart-一/05_024.png)\n\n\n### 5.5. 词法作用域\ndart中的词法有自己明确的作用域范围，它是根据代码的结构({})来决定作用域范围的\n优先使用自己作用域中的变量，如果没有找到，则一层层向外查找。\n\n![图1](05-Dart-一/05_025.png)\n\n\n### 5.6. 词法闭包\n闭包可以访问其词法范围内的变量，即使函数在其他地方被使用，也可以正常的访问。\n\n![图1](05-Dart-一/05_026.png)\n\n\n5.7. 返回值问题\n所有函数都返回一个值。如果没有指定返回值，则语句返回null;隐式附加到函数体。\n\n![图1](05-Dart-一/05_027.png)\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/05-Dart-一","published":1,"updated":"2020-09-18T12:52:57.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengd001zu3s66s0h8dvm","content":"<h1 id=\"一-Dart介绍和安装\"><a href=\"#一-Dart介绍和安装\" class=\"headerlink\" title=\"一. Dart介绍和安装\"></a>一. Dart介绍和安装</h1><h3 id=\"1-1-认识Dart\"><a href=\"#1-1-认识Dart\" class=\"headerlink\" title=\"1.1. 认识Dart\"></a>1.1. 认识Dart</h3><p>Google为Flutter选择了Dart就已经是既定的事实，无论你多么想用你熟悉的语言，比如JavaScript、Java、Swift、C++等来开发Flutter，至少目前都是不可以的。</p>\n<p>在讲解Dart的过程中，我会假定你已经有一定的编程语言基础，比如JavaScript、Java、Python、C++等。</p>\n<p>其实如果你对编程语言足够的自信，Dart的学习过程甚至可以直接忽略：</p>\n<ul>\n<li>因为你学过N种编程语言之后，你会发现他们的差异是并不大；</li>\n<li>无非就是语法上的差异+某些语言有某些特性，而某些语言没有某些特性而已；</li>\n<li>在我初次接触Flutter的时候，并没有专门去看Dart的语法，而是对于某些语法不太熟练的时候回头去了解而已；</li>\n</ul>\n<p>所以，如果你对编程语言已经足够了解，可以跳过我们接下来的Dart学习：</p>\n<ul>\n<li>我也并不会所有特性都一一罗列，我会挑出比较重要的语言特性来专门讲解；</li>\n<li>某些特性可能会等到后面讲解Flutter的一些知识的时候单独拿出来讲解；</li>\n</ul>\n<p>下面，我们就从安装Dart开始吧！</p>\n<h3 id=\"1-2-安装Dart\"><a href=\"#1-2-安装Dart\" class=\"headerlink\" title=\"1.2. 安装Dart\"></a>1.2. 安装Dart</h3><p>为什么还需要安装Dart呢？</p>\n<p>事实上在安装Flutter SDK的时候，它已经内置了Dart了，我们完全可以直接使用Flutter去进行Dart的编写并且运行。</p>\n<p>但是，如果你想单独学习Dart，并且运行自己的Dart代码，最好去安装一个Dart SDK。</p>\n<p>到Dart的官方，根据不同的操作系统下载对应的Dart</p>\n<ul>\n<li>官方网站：dart.dev/get-dart</li>\n</ul>\n<p>无论是什么操作系统，安装方式都是有两种：通过工具安装和直接下载SDK，配置环境变量</p>\n<p>1.通过工具安装</p>\n<ul>\n<li>Windows可以通过Chocolatey</li>\n<li>macOS可以通过homebrew</li>\n<li>具体安装操作官网网站有详细的解释</li>\n</ul>\n<p>2.直接下载SDK，配置环境变量</p>\n<ul>\n<li>下载地址：dart.dev/tools/sdk/a…</li>\n<li>我采用了这个安装方式。</li>\n<li>下载完成后，根据路径配置环境变量即可。</li>\n</ul>\n<h3 id=\"1-3-VSCode配置\"><a href=\"#1-3-VSCode配置\" class=\"headerlink\" title=\"1.3. VSCode配置\"></a>1.3. VSCode配置</h3><p>学习Dart过程中，我使用VSCode作为编辑器</p>\n<ul>\n<li>一方面编写代码非常方便，而且界面风格我也很喜欢</li>\n<li>另一方面我可以快速在终端看到我编写代码的效果</li>\n</ul>\n<p>使用VSCode编写Dart需要安装Dart插件：我目前给这个VSCode装了四个插件</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_001.png\" alt=\"图1\"></p>\n<h1 id=\"二-Hello-Dart\"><a href=\"#二-Hello-Dart\" class=\"headerlink\" title=\"二. Hello Dart\"></a>二. Hello Dart</h1><h3 id=\"2-1-Hello-World\"><a href=\"#2-1-Hello-World\" class=\"headerlink\" title=\"2.1. Hello World\"></a>2.1. Hello World</h3><p>接下来，就可以步入正题了。学习编程语言，从祖传的Hello World开始。</p>\n<p>在VSCode中新建一个helloWorld.dart文件，添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(List&lt;String&gt; args) &#123;</span><br><span class=\"line\">  print(&#39;Hello World&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在终端执行dart helloWorld.dart，就能看到Hello World的结果了。</p>\n<p>完成了这个执行过程之后，以你之前学习的编程语言来看，你能得到多少信息呢？</p>\n<h3 id=\"2-2-程序的分析\"><a href=\"#2-2-程序的分析\" class=\"headerlink\" title=\"2.2. 程序的分析\"></a>2.2. 程序的分析</h3><p>接下来，就是我自己的总结：</p>\n<ul>\n<li>一、Dart语言的入口也是main函数，并且必须显示的进行定义；</li>\n<li>二、Dart的入口函数main是没有返回值的；</li>\n<li>三、传递给main的命令行参数，是通过List<String>完成的。<ul>\n<li>从字面值就可以理解List是Dart中的集合类型。</li>\n<li>其中的每一个String都表示传递给main的一个参数；</li>\n</ul>\n</String></li>\n<li>四、定义字符串的时候，可以使用单引号或双引号；</li>\n<li>五、每行语句必须使用分号结尾，很多语言并不需要分号，比如Swift、JavaScript；</li>\n</ul>\n<h1 id=\"三-定义变量\"><a href=\"#三-定义变量\" class=\"headerlink\" title=\"三. 定义变量\"></a>三. 定义变量</h1><h3 id=\"3-1-明确声明-Explicit\"><a href=\"#3-1-明确声明-Explicit\" class=\"headerlink\" title=\"3.1. 明确声明(Explicit)\"></a>3.1. 明确声明(Explicit)</h3><p>明确声明变量的方式, 格式如下:</p>\n<h5 id=\"变量类型-变量名称-赋值\"><a href=\"#变量类型-变量名称-赋值\" class=\"headerlink\" title=\"变量类型 变量名称 = 赋值;\"></a>变量类型 变量名称 = 赋值;</h5><p>示例代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">int age &#x3D; 18;</span><br><span class=\"line\">double height &#x3D; 1.88;</span><br><span class=\"line\">print(&#39;$&#123;name&#125;, $&#123;age&#125;, $&#123;height&#125;&#39;); &#x2F;&#x2F; 拼接方式后续会讲解</span><br></pre></td></tr></table></figure>\n\n\n<p>注意事项: 定义的变量可以修改值, 但是不能赋值其他类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String content &#x3D; &#39;Hello Dart&#39;;</span><br><span class=\"line\">content &#x3D; &#39;Hello World&#39;; &#x2F;&#x2F; 正确的</span><br><span class=\"line\">content &#x3D; 111; &#x2F;&#x2F; 错误的, 将一个int值赋值给一个String变量</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-类型推导-Type-Inference\"><a href=\"#3-2-类型推导-Type-Inference\" class=\"headerlink\" title=\"3.2. 类型推导(Type Inference)\"></a>3.2. 类型推导(Type Inference)</h3><p>类型推导声明变量的方式, 格式如下:</p>\n<h5 id=\"var-dynamic-const-final-变量名称-赋值\"><a href=\"#var-dynamic-const-final-变量名称-赋值\" class=\"headerlink\" title=\"var/dynamic/const/final 变量名称 = 赋值;\"></a>var/dynamic/const/final 变量名称 = 赋值;</h5><h3 id=\"3-3-1-var的使用\"><a href=\"#3-3-1-var的使用\" class=\"headerlink\" title=\"3.3.1. var的使用\"></a>3.3.1. var的使用</h3><p>var的使用示例:</p>\n<p>runtimeType用于获取变量当前的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">name &#x3D; &#39;kobe&#39;;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; String</span><br></pre></td></tr></table></figure>\n\n\n<p>var的错误用法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 18;</span><br><span class=\"line\">age &#x3D; &#39;why&#39;; &#x2F;&#x2F; 不可以将String赋值给一个int类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-2-dynamic的使用\"><a href=\"#3-3-2-dynamic的使用\" class=\"headerlink\" title=\"3.3.2. dynamic的使用\"></a>3.3.2. dynamic的使用</h3><p>如果确实希望这样做,可以使用dynamic来声明变量:</p>\n<p>但是在开发中, 通常情况下不使用dynamic, 因为类型的变量会带来潜在的危险</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dynamic name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; String</span><br><span class=\"line\">name &#x3D; 18;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; int</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-3-final-amp-const的使用\"><a href=\"#3-3-3-final-amp-const的使用\" class=\"headerlink\" title=\"3.3.3. final&amp;const的使用\"></a>3.3.3. final&amp;const的使用</h3><p>final和const都是用于定义常量的, 也就是定义之后值都不可以修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">name &#x3D; &#39;kobe&#39;; &#x2F;&#x2F; 错误做法</span><br><span class=\"line\"></span><br><span class=\"line\">const age &#x3D; 18;</span><br><span class=\"line\">age &#x3D; 20; &#x2F;&#x2F; 错误做法</span><br></pre></td></tr></table></figure>\n\n<p>final和const有什么区别呢?<br>const在赋值时, 赋值的内容必须是在编译期间就确定下来的<br>final可以通过计算/函数 获取一个值(运行期间确定一个值)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String getName() &#123;</span><br><span class=\"line\">return &#39;coderwhy&#39;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">main(List&lt;String&gt; args) &#123; </span><br><span class=\"line\">const name &#x3D; getName(); &#x2F;&#x2F; 错误的做法, 因为要执行函数才能获取到值 </span><br><span class=\"line\">final name &#x3D; getName(); &#x2F;&#x2F; 正确的做法 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>final和const小案例:</p>\n<ul>\n<li>首先, const是不可以赋值为DateTime.now()</li>\n<li>其次, final一旦被赋值后就有确定的结果, 不会再次赋值</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_002.png\" alt=\"图1\"></p>\n<p>const放在赋值语句的右边，可以共享对象，提高性能:</p>\n<ul>\n<li>这里可以暂时先做了解，后面讲解类的常量构造函数时，我会再次提到这个概念</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_003.png\" alt=\"图1\"></p>\n<h1 id=\"四-数据类型\"><a href=\"#四-数据类型\" class=\"headerlink\" title=\"四. 数据类型\"></a>四. 数据类型</h1><h3 id=\"4-1-数字类型\"><a href=\"#4-1-数字类型\" class=\"headerlink\" title=\"4.1. 数字类型\"></a>4.1. 数字类型</h3><p>对于数值来说，我们也不用关心它是否有符号，以及数据的宽度和精度等问题。只要记着整数用int，浮点数用double就行了。</p>\n<p>不过，要说明一下的是Dart中的int和double可表示的范围并不是固定的，它取决于运行Dart的平台。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_004.png\" alt=\"图1\"></p>\n<p>字符串和数字之间的转化:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_005.png\" alt=\"图1\"></p>\n<h3 id=\"4-2-布尔类型\"><a href=\"#4-2-布尔类型\" class=\"headerlink\" title=\"4.2. 布尔类型\"></a>4.2. 布尔类型</h3><p>布尔类型中,Dart提供了一个bool的类型, 取值为true和false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 布尔类型</span><br><span class=\"line\">var isFlag &#x3D; true;</span><br><span class=\"line\">print(&#39;$isFlag $&#123;isFlag.runtimeType&#125;&#39;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意-Dart中不能判断非0即真-或者非空即真\"><a href=\"#注意-Dart中不能判断非0即真-或者非空即真\" class=\"headerlink\" title=\"注意: Dart中不能判断非0即真, 或者非空即真\"></a>注意: Dart中不能判断非0即真, 或者非空即真</h5><p>Dart的类型安全性意味着您不能使用if(非booleanvalue)或assert(非booleanvalue)之类的代码。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_006.png\" alt=\"图1\"></p>\n<h3 id=\"4-3-字符串类型\"><a href=\"#4-3-字符串类型\" class=\"headerlink\" title=\"4.3. 字符串类型\"></a>4.3. 字符串类型</h3><p>Dart字符串是UTF-16编码单元的序列。您可以使用单引号或双引号创建一个字符串:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_007.png\" alt=\"图1\"></p>\n<p>可以使用三个单引号或者双引号表示多行字符串:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_008.png\" alt=\"图1\"></p>\n<p>字符串和其他变量或表达式拼接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 $&#123;expression&#125;, 如果表达式是一个标识符, 那么&#123;&#125;可以省略</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_009.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-集合类型\"><a href=\"#4-4-集合类型\" class=\"headerlink\" title=\"4.4. 集合类型\"></a>4.4. 集合类型</h3><h3 id=\"4-4-1-集合类型的定义\"><a href=\"#4-4-1-集合类型的定义\" class=\"headerlink\" title=\"4.4.1. 集合类型的定义\"></a>4.4.1. 集合类型的定义</h3><p>对于集合类型，Dart则内置了最常用的三种：List / Set / Map。</p>\n<p>其中，List可以这样来定义：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_010.png\" alt=\"图1\"></p>\n<p>其中，set可以这样来定义：</p>\n<ul>\n<li>其实，也就是把[]换成{}就好了。</li>\n<li>Set和List最大的两个不同就是：Set是无序的，并且元素是不重复的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_011.png\" alt=\"图1\"></p>\n<p>最后，Map是我们常说的字典类型，它的定义是这样的：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_012.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-2-集合的常见操作\"><a href=\"#4-4-2-集合的常见操作\" class=\"headerlink\" title=\"4.4.2. 集合的常见操作\"></a>4.4.2. 集合的常见操作</h3><p>了解了这三个集合的定义方式之后，我们来看一些最基础的公共操作</p>\n<p>第一类，是所有集合都支持的获取长度的属性length：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_013.png\" alt=\"图1\"></p>\n<p>第二类, 是添加/删除/包含操作</p>\n<ul>\n<li>并且，对List来说，由于元素是有序的，它还提供了一个删除指定索引位置上元素的方法</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_014.png\" alt=\"图1\"></p>\n<p>第三类，是Map的操作</p>\n<ul>\n<li>由于它有key和value，因此无论是读取值，还是操作，都要明确是基于key的，还是基于value的，或者是基于key/value对的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Map的操作</span><br><span class=\"line\">&#x2F;&#x2F; 1.根据key获取value</span><br><span class=\"line\">print(infoMap1[&#39;name&#39;]); &#x2F;&#x2F; why</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2.获取所有的entries</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.entries&#125; $&#123;infoMap1.entries.runtimeType&#125;&#39;); &#x2F;&#x2F; (MapEntry(name: why), MapEntry(age: 18)) MappedIterable&lt;String, MapEntry&lt;String, Object&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 3.获取所有的keys</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.keys&#125; $&#123;infoMap1.keys.runtimeType&#125;&#39;); &#x2F;&#x2F; (name, age) _CompactIterable&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.获取所有的values</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.values&#125; $&#123;infoMap1.values.runtimeType&#125;&#39;); &#x2F;&#x2F; (why, 18) _CompactIterable&lt;Object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 5.判断是否包含某个key或者value</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.containsKey(&#39;age&#39;)&#125; $&#123;infoMap1.containsValue(18)&#125;&#39;); &#x2F;&#x2F; true true</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 6.根据key删除元素</span><br><span class=\"line\">infoMap1.remove(&#39;age&#39;);</span><br><span class=\"line\">print(&#39;$&#123;infoMap1&#125;&#39;); &#x2F;&#x2F; &#123;name: why&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-函数\"><a href=\"#五-函数\" class=\"headerlink\" title=\"五. 函数\"></a>五. 函数</h1><h3 id=\"5-1-函数的基本定义\"><a href=\"#5-1-函数的基本定义\" class=\"headerlink\" title=\"5.1. 函数的基本定义\"></a>5.1. 函数的基本定义</h3><p>Dart是一种真正的面向对象语言，所以即使函数也是对象，所有也有类型, 类型就是Function。</p>\n<p>这也就意味着函数可以作为变量定义或者作为其他函数的参数或者返回值.</p>\n<p>函数的定义方式:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_015.png\" alt=\"图1\"></p>\n<p>按照上面的定义方式, 我们定义一个完整的函数:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_016.png\" alt=\"图1\"></p>\n<p>Effective Dart建议对公共的API, 使用类型注解, 但是如果我们省略掉了类型, 依然是可以正常工作的</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_017.png\" alt=\"图1\"></p>\n<p>另外, 如果函数中只有一个表达式, 那么可以使用箭头语法(arrow syntax)</p>\n<ul>\n<li>注意, 这里面只能是一个表达式, 不能是一个语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(num1, num2) &#x3D;&gt; num1 + num2;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-2-函数的参数问题\"><a href=\"#5-2-函数的参数问题\" class=\"headerlink\" title=\"5.2. 函数的参数问题\"></a>5.2. 函数的参数问题</h3><p>函数的参数可以分成两类: 必须参数和可选参数</p>\n<p>前面使用的参数都是必须参数.</p>\n<h3 id=\"5-2-1-可选参数\"><a href=\"#5-2-1-可选参数\" class=\"headerlink\" title=\"5.2.1. 可选参数\"></a>5.2.1. 可选参数</h3><p>可选参数可以分为 命名可选参数 和 位置可选参数</p>\n<p>定义方式:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_018.png\" alt=\"图1\"></p>\n<p>命名可选参数的演示:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_019.png\" alt=\"图1\"></p>\n<p>位置可选参数的演示:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_020.png\" alt=\"图1\"></p>\n<p>命名可选参数, 可以指定某个参数是必传的(使用@required, 有问题)</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_021.png\" alt=\"图1\"></p>\n<h3 id=\"5-2-2-参数默认值\"><a href=\"#5-2-2-参数默认值\" class=\"headerlink\" title=\"5.2.2. 参数默认值\"></a>5.2.2. 参数默认值</h3><p>参数可以有默认值, 在不传入的情况下, 使用默认值</p>\n<ul>\n<li>注意, 只有可选参数才可以有默认值, 必须参数不能有默认值</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_022.png\" alt=\"图1\"></p>\n<p>Dart中的main函数就是一个接受可选的列表参数作为参数的, 所以在使用main函数时, 我们可以传入参数, 也可以不传入</p>\n<h3 id=\"5-3-函数是一等公民\"><a href=\"#5-3-函数是一等公民\" class=\"headerlink\" title=\"5.3. 函数是一等公民\"></a>5.3. 函数是一等公民</h3><p>在很多语言中, 函数并不能作为一等公民来使用, 比如Java/OC. 这种限制让编程不够灵活, 所以现代的编程语言基本都支持函数作为一等公民来使用, Dart也支持.</p>\n<p>这就意味着你可以将函数赋值给一个变量, 也可以将函数作为另外一个函数的参数或者返回值来使用.</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_023.png\" alt=\"图1\"></p>\n<h3 id=\"5-4-匿名函数的使用\"><a href=\"#5-4-匿名函数的使用\" class=\"headerlink\" title=\"5.4. 匿名函数的使用\"></a>5.4. 匿名函数的使用</h3><p>大部分我们定义的函数都会有自己的名字， 比如前面定义的foo、test函数等等。</p>\n<p>但是某些情况下，给函数命名太麻烦了，我们可以使用没有名字的函数，这种函数可以被称之为匿名函数( anonymous function)，也可以叫lambda或者closure。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_024.png\" alt=\"图1\"></p>\n<h3 id=\"5-5-词法作用域\"><a href=\"#5-5-词法作用域\" class=\"headerlink\" title=\"5.5. 词法作用域\"></a>5.5. 词法作用域</h3><p>dart中的词法有自己明确的作用域范围，它是根据代码的结构({})来决定作用域范围的<br>优先使用自己作用域中的变量，如果没有找到，则一层层向外查找。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_025.png\" alt=\"图1\"></p>\n<h3 id=\"5-6-词法闭包\"><a href=\"#5-6-词法闭包\" class=\"headerlink\" title=\"5.6. 词法闭包\"></a>5.6. 词法闭包</h3><p>闭包可以访问其词法范围内的变量，即使函数在其他地方被使用，也可以正常的访问。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_026.png\" alt=\"图1\"></p>\n<p>5.7. 返回值问题<br>所有函数都返回一个值。如果没有指定返回值，则语句返回null;隐式附加到函数体。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_027.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Dart介绍和安装\"><a href=\"#一-Dart介绍和安装\" class=\"headerlink\" title=\"一. Dart介绍和安装\"></a>一. Dart介绍和安装</h1><h3 id=\"1-1-认识Dart\"><a href=\"#1-1-认识Dart\" class=\"headerlink\" title=\"1.1. 认识Dart\"></a>1.1. 认识Dart</h3><p>Google为Flutter选择了Dart就已经是既定的事实，无论你多么想用你熟悉的语言，比如JavaScript、Java、Swift、C++等来开发Flutter，至少目前都是不可以的。</p>\n<p>在讲解Dart的过程中，我会假定你已经有一定的编程语言基础，比如JavaScript、Java、Python、C++等。</p>\n<p>其实如果你对编程语言足够的自信，Dart的学习过程甚至可以直接忽略：</p>\n<ul>\n<li>因为你学过N种编程语言之后，你会发现他们的差异是并不大；</li>\n<li>无非就是语法上的差异+某些语言有某些特性，而某些语言没有某些特性而已；</li>\n<li>在我初次接触Flutter的时候，并没有专门去看Dart的语法，而是对于某些语法不太熟练的时候回头去了解而已；</li>\n</ul>\n<p>所以，如果你对编程语言已经足够了解，可以跳过我们接下来的Dart学习：</p>\n<ul>\n<li>我也并不会所有特性都一一罗列，我会挑出比较重要的语言特性来专门讲解；</li>\n<li>某些特性可能会等到后面讲解Flutter的一些知识的时候单独拿出来讲解；</li>\n</ul>\n<p>下面，我们就从安装Dart开始吧！</p>\n<h3 id=\"1-2-安装Dart\"><a href=\"#1-2-安装Dart\" class=\"headerlink\" title=\"1.2. 安装Dart\"></a>1.2. 安装Dart</h3><p>为什么还需要安装Dart呢？</p>\n<p>事实上在安装Flutter SDK的时候，它已经内置了Dart了，我们完全可以直接使用Flutter去进行Dart的编写并且运行。</p>\n<p>但是，如果你想单独学习Dart，并且运行自己的Dart代码，最好去安装一个Dart SDK。</p>\n<p>到Dart的官方，根据不同的操作系统下载对应的Dart</p>\n<ul>\n<li>官方网站：dart.dev/get-dart</li>\n</ul>\n<p>无论是什么操作系统，安装方式都是有两种：通过工具安装和直接下载SDK，配置环境变量</p>\n<p>1.通过工具安装</p>\n<ul>\n<li>Windows可以通过Chocolatey</li>\n<li>macOS可以通过homebrew</li>\n<li>具体安装操作官网网站有详细的解释</li>\n</ul>\n<p>2.直接下载SDK，配置环境变量</p>\n<ul>\n<li>下载地址：dart.dev/tools/sdk/a…</li>\n<li>我采用了这个安装方式。</li>\n<li>下载完成后，根据路径配置环境变量即可。</li>\n</ul>\n<h3 id=\"1-3-VSCode配置\"><a href=\"#1-3-VSCode配置\" class=\"headerlink\" title=\"1.3. VSCode配置\"></a>1.3. VSCode配置</h3><p>学习Dart过程中，我使用VSCode作为编辑器</p>\n<ul>\n<li>一方面编写代码非常方便，而且界面风格我也很喜欢</li>\n<li>另一方面我可以快速在终端看到我编写代码的效果</li>\n</ul>\n<p>使用VSCode编写Dart需要安装Dart插件：我目前给这个VSCode装了四个插件</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_001.png\" alt=\"图1\"></p>\n<h1 id=\"二-Hello-Dart\"><a href=\"#二-Hello-Dart\" class=\"headerlink\" title=\"二. Hello Dart\"></a>二. Hello Dart</h1><h3 id=\"2-1-Hello-World\"><a href=\"#2-1-Hello-World\" class=\"headerlink\" title=\"2.1. Hello World\"></a>2.1. Hello World</h3><p>接下来，就可以步入正题了。学习编程语言，从祖传的Hello World开始。</p>\n<p>在VSCode中新建一个helloWorld.dart文件，添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(List&lt;String&gt; args) &#123;</span><br><span class=\"line\">  print(&#39;Hello World&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在终端执行dart helloWorld.dart，就能看到Hello World的结果了。</p>\n<p>完成了这个执行过程之后，以你之前学习的编程语言来看，你能得到多少信息呢？</p>\n<h3 id=\"2-2-程序的分析\"><a href=\"#2-2-程序的分析\" class=\"headerlink\" title=\"2.2. 程序的分析\"></a>2.2. 程序的分析</h3><p>接下来，就是我自己的总结：</p>\n<ul>\n<li>一、Dart语言的入口也是main函数，并且必须显示的进行定义；</li>\n<li>二、Dart的入口函数main是没有返回值的；</li>\n<li>三、传递给main的命令行参数，是通过List<String>完成的。<ul>\n<li>从字面值就可以理解List是Dart中的集合类型。</li>\n<li>其中的每一个String都表示传递给main的一个参数；</li>\n</ul>\n</String></li>\n<li>四、定义字符串的时候，可以使用单引号或双引号；</li>\n<li>五、每行语句必须使用分号结尾，很多语言并不需要分号，比如Swift、JavaScript；</li>\n</ul>\n<h1 id=\"三-定义变量\"><a href=\"#三-定义变量\" class=\"headerlink\" title=\"三. 定义变量\"></a>三. 定义变量</h1><h3 id=\"3-1-明确声明-Explicit\"><a href=\"#3-1-明确声明-Explicit\" class=\"headerlink\" title=\"3.1. 明确声明(Explicit)\"></a>3.1. 明确声明(Explicit)</h3><p>明确声明变量的方式, 格式如下:</p>\n<h5 id=\"变量类型-变量名称-赋值\"><a href=\"#变量类型-变量名称-赋值\" class=\"headerlink\" title=\"变量类型 变量名称 = 赋值;\"></a>变量类型 变量名称 = 赋值;</h5><p>示例代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">int age &#x3D; 18;</span><br><span class=\"line\">double height &#x3D; 1.88;</span><br><span class=\"line\">print(&#39;$&#123;name&#125;, $&#123;age&#125;, $&#123;height&#125;&#39;); &#x2F;&#x2F; 拼接方式后续会讲解</span><br></pre></td></tr></table></figure>\n\n\n<p>注意事项: 定义的变量可以修改值, 但是不能赋值其他类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String content &#x3D; &#39;Hello Dart&#39;;</span><br><span class=\"line\">content &#x3D; &#39;Hello World&#39;; &#x2F;&#x2F; 正确的</span><br><span class=\"line\">content &#x3D; 111; &#x2F;&#x2F; 错误的, 将一个int值赋值给一个String变量</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-类型推导-Type-Inference\"><a href=\"#3-2-类型推导-Type-Inference\" class=\"headerlink\" title=\"3.2. 类型推导(Type Inference)\"></a>3.2. 类型推导(Type Inference)</h3><p>类型推导声明变量的方式, 格式如下:</p>\n<h5 id=\"var-dynamic-const-final-变量名称-赋值\"><a href=\"#var-dynamic-const-final-变量名称-赋值\" class=\"headerlink\" title=\"var/dynamic/const/final 变量名称 = 赋值;\"></a>var/dynamic/const/final 变量名称 = 赋值;</h5><h3 id=\"3-3-1-var的使用\"><a href=\"#3-3-1-var的使用\" class=\"headerlink\" title=\"3.3.1. var的使用\"></a>3.3.1. var的使用</h3><p>var的使用示例:</p>\n<p>runtimeType用于获取变量当前的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">name &#x3D; &#39;kobe&#39;;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; String</span><br></pre></td></tr></table></figure>\n\n\n<p>var的错误用法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 18;</span><br><span class=\"line\">age &#x3D; &#39;why&#39;; &#x2F;&#x2F; 不可以将String赋值给一个int类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-2-dynamic的使用\"><a href=\"#3-3-2-dynamic的使用\" class=\"headerlink\" title=\"3.3.2. dynamic的使用\"></a>3.3.2. dynamic的使用</h3><p>如果确实希望这样做,可以使用dynamic来声明变量:</p>\n<p>但是在开发中, 通常情况下不使用dynamic, 因为类型的变量会带来潜在的危险</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dynamic name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; String</span><br><span class=\"line\">name &#x3D; 18;</span><br><span class=\"line\">print(name.runtimeType); &#x2F;&#x2F; int</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-3-final-amp-const的使用\"><a href=\"#3-3-3-final-amp-const的使用\" class=\"headerlink\" title=\"3.3.3. final&amp;const的使用\"></a>3.3.3. final&amp;const的使用</h3><p>final和const都是用于定义常量的, 也就是定义之后值都不可以修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final name &#x3D; &#39;coderwhy&#39;;</span><br><span class=\"line\">name &#x3D; &#39;kobe&#39;; &#x2F;&#x2F; 错误做法</span><br><span class=\"line\"></span><br><span class=\"line\">const age &#x3D; 18;</span><br><span class=\"line\">age &#x3D; 20; &#x2F;&#x2F; 错误做法</span><br></pre></td></tr></table></figure>\n\n<p>final和const有什么区别呢?<br>const在赋值时, 赋值的内容必须是在编译期间就确定下来的<br>final可以通过计算/函数 获取一个值(运行期间确定一个值)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String getName() &#123;</span><br><span class=\"line\">return &#39;coderwhy&#39;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">main(List&lt;String&gt; args) &#123; </span><br><span class=\"line\">const name &#x3D; getName(); &#x2F;&#x2F; 错误的做法, 因为要执行函数才能获取到值 </span><br><span class=\"line\">final name &#x3D; getName(); &#x2F;&#x2F; 正确的做法 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>final和const小案例:</p>\n<ul>\n<li>首先, const是不可以赋值为DateTime.now()</li>\n<li>其次, final一旦被赋值后就有确定的结果, 不会再次赋值</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_002.png\" alt=\"图1\"></p>\n<p>const放在赋值语句的右边，可以共享对象，提高性能:</p>\n<ul>\n<li>这里可以暂时先做了解，后面讲解类的常量构造函数时，我会再次提到这个概念</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_003.png\" alt=\"图1\"></p>\n<h1 id=\"四-数据类型\"><a href=\"#四-数据类型\" class=\"headerlink\" title=\"四. 数据类型\"></a>四. 数据类型</h1><h3 id=\"4-1-数字类型\"><a href=\"#4-1-数字类型\" class=\"headerlink\" title=\"4.1. 数字类型\"></a>4.1. 数字类型</h3><p>对于数值来说，我们也不用关心它是否有符号，以及数据的宽度和精度等问题。只要记着整数用int，浮点数用double就行了。</p>\n<p>不过，要说明一下的是Dart中的int和double可表示的范围并不是固定的，它取决于运行Dart的平台。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_004.png\" alt=\"图1\"></p>\n<p>字符串和数字之间的转化:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_005.png\" alt=\"图1\"></p>\n<h3 id=\"4-2-布尔类型\"><a href=\"#4-2-布尔类型\" class=\"headerlink\" title=\"4.2. 布尔类型\"></a>4.2. 布尔类型</h3><p>布尔类型中,Dart提供了一个bool的类型, 取值为true和false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 布尔类型</span><br><span class=\"line\">var isFlag &#x3D; true;</span><br><span class=\"line\">print(&#39;$isFlag $&#123;isFlag.runtimeType&#125;&#39;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意-Dart中不能判断非0即真-或者非空即真\"><a href=\"#注意-Dart中不能判断非0即真-或者非空即真\" class=\"headerlink\" title=\"注意: Dart中不能判断非0即真, 或者非空即真\"></a>注意: Dart中不能判断非0即真, 或者非空即真</h5><p>Dart的类型安全性意味着您不能使用if(非booleanvalue)或assert(非booleanvalue)之类的代码。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_006.png\" alt=\"图1\"></p>\n<h3 id=\"4-3-字符串类型\"><a href=\"#4-3-字符串类型\" class=\"headerlink\" title=\"4.3. 字符串类型\"></a>4.3. 字符串类型</h3><p>Dart字符串是UTF-16编码单元的序列。您可以使用单引号或双引号创建一个字符串:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_007.png\" alt=\"图1\"></p>\n<p>可以使用三个单引号或者双引号表示多行字符串:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_008.png\" alt=\"图1\"></p>\n<p>字符串和其他变量或表达式拼接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 $&#123;expression&#125;, 如果表达式是一个标识符, 那么&#123;&#125;可以省略</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_009.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-集合类型\"><a href=\"#4-4-集合类型\" class=\"headerlink\" title=\"4.4. 集合类型\"></a>4.4. 集合类型</h3><h3 id=\"4-4-1-集合类型的定义\"><a href=\"#4-4-1-集合类型的定义\" class=\"headerlink\" title=\"4.4.1. 集合类型的定义\"></a>4.4.1. 集合类型的定义</h3><p>对于集合类型，Dart则内置了最常用的三种：List / Set / Map。</p>\n<p>其中，List可以这样来定义：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_010.png\" alt=\"图1\"></p>\n<p>其中，set可以这样来定义：</p>\n<ul>\n<li>其实，也就是把[]换成{}就好了。</li>\n<li>Set和List最大的两个不同就是：Set是无序的，并且元素是不重复的。</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_011.png\" alt=\"图1\"></p>\n<p>最后，Map是我们常说的字典类型，它的定义是这样的：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_012.png\" alt=\"图1\"></p>\n<h3 id=\"4-4-2-集合的常见操作\"><a href=\"#4-4-2-集合的常见操作\" class=\"headerlink\" title=\"4.4.2. 集合的常见操作\"></a>4.4.2. 集合的常见操作</h3><p>了解了这三个集合的定义方式之后，我们来看一些最基础的公共操作</p>\n<p>第一类，是所有集合都支持的获取长度的属性length：</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_013.png\" alt=\"图1\"></p>\n<p>第二类, 是添加/删除/包含操作</p>\n<ul>\n<li>并且，对List来说，由于元素是有序的，它还提供了一个删除指定索引位置上元素的方法</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_014.png\" alt=\"图1\"></p>\n<p>第三类，是Map的操作</p>\n<ul>\n<li>由于它有key和value，因此无论是读取值，还是操作，都要明确是基于key的，还是基于value的，或者是基于key/value对的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Map的操作</span><br><span class=\"line\">&#x2F;&#x2F; 1.根据key获取value</span><br><span class=\"line\">print(infoMap1[&#39;name&#39;]); &#x2F;&#x2F; why</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2.获取所有的entries</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.entries&#125; $&#123;infoMap1.entries.runtimeType&#125;&#39;); &#x2F;&#x2F; (MapEntry(name: why), MapEntry(age: 18)) MappedIterable&lt;String, MapEntry&lt;String, Object&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 3.获取所有的keys</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.keys&#125; $&#123;infoMap1.keys.runtimeType&#125;&#39;); &#x2F;&#x2F; (name, age) _CompactIterable&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.获取所有的values</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.values&#125; $&#123;infoMap1.values.runtimeType&#125;&#39;); &#x2F;&#x2F; (why, 18) _CompactIterable&lt;Object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 5.判断是否包含某个key或者value</span><br><span class=\"line\">print(&#39;$&#123;infoMap1.containsKey(&#39;age&#39;)&#125; $&#123;infoMap1.containsValue(18)&#125;&#39;); &#x2F;&#x2F; true true</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 6.根据key删除元素</span><br><span class=\"line\">infoMap1.remove(&#39;age&#39;);</span><br><span class=\"line\">print(&#39;$&#123;infoMap1&#125;&#39;); &#x2F;&#x2F; &#123;name: why&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-函数\"><a href=\"#五-函数\" class=\"headerlink\" title=\"五. 函数\"></a>五. 函数</h1><h3 id=\"5-1-函数的基本定义\"><a href=\"#5-1-函数的基本定义\" class=\"headerlink\" title=\"5.1. 函数的基本定义\"></a>5.1. 函数的基本定义</h3><p>Dart是一种真正的面向对象语言，所以即使函数也是对象，所有也有类型, 类型就是Function。</p>\n<p>这也就意味着函数可以作为变量定义或者作为其他函数的参数或者返回值.</p>\n<p>函数的定义方式:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_015.png\" alt=\"图1\"></p>\n<p>按照上面的定义方式, 我们定义一个完整的函数:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_016.png\" alt=\"图1\"></p>\n<p>Effective Dart建议对公共的API, 使用类型注解, 但是如果我们省略掉了类型, 依然是可以正常工作的</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_017.png\" alt=\"图1\"></p>\n<p>另外, 如果函数中只有一个表达式, 那么可以使用箭头语法(arrow syntax)</p>\n<ul>\n<li>注意, 这里面只能是一个表达式, 不能是一个语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(num1, num2) &#x3D;&gt; num1 + num2;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-2-函数的参数问题\"><a href=\"#5-2-函数的参数问题\" class=\"headerlink\" title=\"5.2. 函数的参数问题\"></a>5.2. 函数的参数问题</h3><p>函数的参数可以分成两类: 必须参数和可选参数</p>\n<p>前面使用的参数都是必须参数.</p>\n<h3 id=\"5-2-1-可选参数\"><a href=\"#5-2-1-可选参数\" class=\"headerlink\" title=\"5.2.1. 可选参数\"></a>5.2.1. 可选参数</h3><p>可选参数可以分为 命名可选参数 和 位置可选参数</p>\n<p>定义方式:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_018.png\" alt=\"图1\"></p>\n<p>命名可选参数的演示:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_019.png\" alt=\"图1\"></p>\n<p>位置可选参数的演示:</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_020.png\" alt=\"图1\"></p>\n<p>命名可选参数, 可以指定某个参数是必传的(使用@required, 有问题)</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_021.png\" alt=\"图1\"></p>\n<h3 id=\"5-2-2-参数默认值\"><a href=\"#5-2-2-参数默认值\" class=\"headerlink\" title=\"5.2.2. 参数默认值\"></a>5.2.2. 参数默认值</h3><p>参数可以有默认值, 在不传入的情况下, 使用默认值</p>\n<ul>\n<li>注意, 只有可选参数才可以有默认值, 必须参数不能有默认值</li>\n</ul>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_022.png\" alt=\"图1\"></p>\n<p>Dart中的main函数就是一个接受可选的列表参数作为参数的, 所以在使用main函数时, 我们可以传入参数, 也可以不传入</p>\n<h3 id=\"5-3-函数是一等公民\"><a href=\"#5-3-函数是一等公民\" class=\"headerlink\" title=\"5.3. 函数是一等公民\"></a>5.3. 函数是一等公民</h3><p>在很多语言中, 函数并不能作为一等公民来使用, 比如Java/OC. 这种限制让编程不够灵活, 所以现代的编程语言基本都支持函数作为一等公民来使用, Dart也支持.</p>\n<p>这就意味着你可以将函数赋值给一个变量, 也可以将函数作为另外一个函数的参数或者返回值来使用.</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_023.png\" alt=\"图1\"></p>\n<h3 id=\"5-4-匿名函数的使用\"><a href=\"#5-4-匿名函数的使用\" class=\"headerlink\" title=\"5.4. 匿名函数的使用\"></a>5.4. 匿名函数的使用</h3><p>大部分我们定义的函数都会有自己的名字， 比如前面定义的foo、test函数等等。</p>\n<p>但是某些情况下，给函数命名太麻烦了，我们可以使用没有名字的函数，这种函数可以被称之为匿名函数( anonymous function)，也可以叫lambda或者closure。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_024.png\" alt=\"图1\"></p>\n<h3 id=\"5-5-词法作用域\"><a href=\"#5-5-词法作用域\" class=\"headerlink\" title=\"5.5. 词法作用域\"></a>5.5. 词法作用域</h3><p>dart中的词法有自己明确的作用域范围，它是根据代码的结构({})来决定作用域范围的<br>优先使用自己作用域中的变量，如果没有找到，则一层层向外查找。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_025.png\" alt=\"图1\"></p>\n<h3 id=\"5-6-词法闭包\"><a href=\"#5-6-词法闭包\" class=\"headerlink\" title=\"5.6. 词法闭包\"></a>5.6. 词法闭包</h3><p>闭包可以访问其词法范围内的变量，即使函数在其他地方被使用，也可以正常的访问。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_026.png\" alt=\"图1\"></p>\n<p>5.7. 返回值问题<br>所有函数都返回一个值。如果没有指定返回值，则语句返回null;隐式附加到函数体。</p>\n<p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/05-Dart-%E4%B8%80/05_027.png\" alt=\"图1\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"09-StatefulWidget生命周期","toc":true,"date":"2020-09-02T12:38:22.000Z","_content":"\n\n# 一： StatelessWidget 生命周期\n\n1, 构造方法\n\n2，build方法\n\n# 二： StatefulWidget 生命周期\n\n1，statefulWidget  类 的构造方法\n\n2，statefulWidget  类  的createState方法\n\n3，state  类的 构造方法\n\n4，state  类的 initState方法\n\n5，state  类的 build方法\n\n6，state  类的dispose 方法\n\n还有  didUpdateWidget 方法\n\n涉及代码：\n\n```\nclass HYContentBody extends StatefulWidget {\n  HYContentBody(){\n    print(\"1. HYContentBody --- 构造方法\");\n  }\n  @override\n  _HYContentBodyState createState(){\n    print(\"2. HYContentBody --- createState 方法\");\n    return _HYContentBodyState();\n  }\n}\n\nclass _HYContentBodyState extends State<HYContentBody> {\n  _HYContentBodyState(){\n    print(\"3._HYContentBodyState --- 构造方法\");\n  }\n\n  @override\n  void didUpdateWidget(HYContentBody oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    print(\"_HYContentBodyState --- didUpdateWidget 方法\");\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    print(\"4._HYContentBodyState --- initState 方法\");\n  }\n  @override\n  Widget build(BuildContext context) {\n    print(\"5._HYContentBodyState --- build 方法\");\n    return Text(\"test001\");\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n\n    print(\"6._HYContentBodyState --- dispose 方法\");\n  }\n}\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/09-StatefulWidget生命周期.md","raw":"---\ntitle: 09-StatefulWidget生命周期\ntoc: true\ndate: 2020-09-02 20:38:22\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一： StatelessWidget 生命周期\n\n1, 构造方法\n\n2，build方法\n\n# 二： StatefulWidget 生命周期\n\n1，statefulWidget  类 的构造方法\n\n2，statefulWidget  类  的createState方法\n\n3，state  类的 构造方法\n\n4，state  类的 initState方法\n\n5，state  类的 build方法\n\n6，state  类的dispose 方法\n\n还有  didUpdateWidget 方法\n\n涉及代码：\n\n```\nclass HYContentBody extends StatefulWidget {\n  HYContentBody(){\n    print(\"1. HYContentBody --- 构造方法\");\n  }\n  @override\n  _HYContentBodyState createState(){\n    print(\"2. HYContentBody --- createState 方法\");\n    return _HYContentBodyState();\n  }\n}\n\nclass _HYContentBodyState extends State<HYContentBody> {\n  _HYContentBodyState(){\n    print(\"3._HYContentBodyState --- 构造方法\");\n  }\n\n  @override\n  void didUpdateWidget(HYContentBody oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    print(\"_HYContentBodyState --- didUpdateWidget 方法\");\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    print(\"4._HYContentBodyState --- initState 方法\");\n  }\n  @override\n  Widget build(BuildContext context) {\n    print(\"5._HYContentBodyState --- build 方法\");\n    return Text(\"test001\");\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n\n    print(\"6._HYContentBodyState --- dispose 方法\");\n  }\n}\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/09-StatefulWidget生命周期","published":1,"updated":"2020-09-18T14:07:11.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenge0021u3s655vx4f8m","content":"<h1 id=\"一：-StatelessWidget-生命周期\"><a href=\"#一：-StatelessWidget-生命周期\" class=\"headerlink\" title=\"一： StatelessWidget 生命周期\"></a>一： StatelessWidget 生命周期</h1><p>1, 构造方法</p>\n<p>2，build方法</p>\n<h1 id=\"二：-StatefulWidget-生命周期\"><a href=\"#二：-StatefulWidget-生命周期\" class=\"headerlink\" title=\"二： StatefulWidget 生命周期\"></a>二： StatefulWidget 生命周期</h1><p>1，statefulWidget  类 的构造方法</p>\n<p>2，statefulWidget  类  的createState方法</p>\n<p>3，state  类的 构造方法</p>\n<p>4，state  类的 initState方法</p>\n<p>5，state  类的 build方法</p>\n<p>6，state  类的dispose 方法</p>\n<p>还有  didUpdateWidget 方法</p>\n<p>涉及代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatefulWidget &#123;</span><br><span class=\"line\">  HYContentBody()&#123;</span><br><span class=\"line\">    print(&quot;1. HYContentBody --- 构造方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYContentBodyState createState()&#123;</span><br><span class=\"line\">    print(&quot;2. HYContentBody --- createState 方法&quot;);</span><br><span class=\"line\">    return _HYContentBodyState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYContentBodyState extends State&lt;HYContentBody&gt; &#123;</span><br><span class=\"line\">  _HYContentBodyState()&#123;</span><br><span class=\"line\">    print(&quot;3._HYContentBodyState --- 构造方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didUpdateWidget(HYContentBody oldWidget) &#123;</span><br><span class=\"line\">    super.didUpdateWidget(oldWidget);</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;_HYContentBodyState --- didUpdateWidget 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    print(&quot;4._HYContentBodyState --- initState 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    print(&quot;5._HYContentBodyState --- build 方法&quot;);</span><br><span class=\"line\">    return Text(&quot;test001&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;6._HYContentBodyState --- dispose 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一：-StatelessWidget-生命周期\"><a href=\"#一：-StatelessWidget-生命周期\" class=\"headerlink\" title=\"一： StatelessWidget 生命周期\"></a>一： StatelessWidget 生命周期</h1><p>1, 构造方法</p>\n<p>2，build方法</p>\n<h1 id=\"二：-StatefulWidget-生命周期\"><a href=\"#二：-StatefulWidget-生命周期\" class=\"headerlink\" title=\"二： StatefulWidget 生命周期\"></a>二： StatefulWidget 生命周期</h1><p>1，statefulWidget  类 的构造方法</p>\n<p>2，statefulWidget  类  的createState方法</p>\n<p>3，state  类的 构造方法</p>\n<p>4，state  类的 initState方法</p>\n<p>5，state  类的 build方法</p>\n<p>6，state  类的dispose 方法</p>\n<p>还有  didUpdateWidget 方法</p>\n<p>涉及代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatefulWidget &#123;</span><br><span class=\"line\">  HYContentBody()&#123;</span><br><span class=\"line\">    print(&quot;1. HYContentBody --- 构造方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYContentBodyState createState()&#123;</span><br><span class=\"line\">    print(&quot;2. HYContentBody --- createState 方法&quot;);</span><br><span class=\"line\">    return _HYContentBodyState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYContentBodyState extends State&lt;HYContentBody&gt; &#123;</span><br><span class=\"line\">  _HYContentBodyState()&#123;</span><br><span class=\"line\">    print(&quot;3._HYContentBodyState --- 构造方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didUpdateWidget(HYContentBody oldWidget) &#123;</span><br><span class=\"line\">    super.didUpdateWidget(oldWidget);</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;_HYContentBodyState --- didUpdateWidget 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    print(&quot;4._HYContentBodyState --- initState 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    print(&quot;5._HYContentBodyState --- build 方法&quot;);</span><br><span class=\"line\">    return Text(&quot;test001&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;6._HYContentBodyState --- dispose 方法&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"11-基础组件的使用","toc":true,"date":"2020-09-18T14:11:35.000Z","_content":"\n\n# 一：按钮设置\n\n![图1](11-基础组件的使用/11_001.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        getDemo0(),\n        SizedBox(height:30),\n        getDemo1(),\n        SizedBox(height:30),\n        getDemo2()\n      ],\n    );\n  }\n}\n\nWidget getDemo0(){\n  return FlatButton(\n    child: Text(\"1\"),\n    color: Colors.red,\n    onPressed: () {},\n  );\n}\n\nWidget getDemo1(){\n  return Column(\n    children: <Widget>[\n      FlatButton(\n        materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      ),\n      FlatButton(\n        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      )\n    ],\n  );\n}\n\nWidget getDemo2(){\n  return ButtonTheme(\n    minWidth: 20,\n    height: 15,\n    padding: EdgeInsets.all(0),\n    child: FlatButton(\n      color: Colors.red,\n      child: Text(\"1\",style: TextStyle(fontSize: 9),),\n      onPressed: (){},\n    ),\n  );\n}\n\n```\n\n# 二：给图片增加占位图\n\n![图1](11-基础组件的使用/11_002.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return FadeInImage(\n        fadeInDuration: Duration(seconds: 1),   //淡入时间\n        fadeOutDuration: Duration(seconds: 1),  //淡出时间\n        placeholder: AssetImage(\"assets/images/xingkong.jpeg\"), //占位图\n        image: NetworkImage(\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589203158053&di=4ca63350aef3bf0b0459e872ca7db5e7&imgtype=0&src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg\")\n    );\n  }\n}\n\n```\n\n# 三：图标的使用\n\n![图1](11-基础组件的使用/11_003.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    /**\n     * Icon字体图标 和 图片图标\n     * 1,字体图标是矢量图(放大的时候不会失真)\n     * 2,字体图标可以设置颜色\n     * 3,图标很多时，占据空间更小\n     * 4,  0xe192 -> unicode编码\n     *     设置对象的字体\n     * */\n//    return Icon(Icons.access_time,color: Colors.red,size: 300,);\n//    IconData(0xe192, fontFamily: 'MaterialIcons');\n//    return Text(\"\\ue192\",style: TextStyle(fontFamily: \"MaterialIcons\",color: Colors.blue,fontSize: 30),);\n      return Column(\n        children: <Widget>[\n          Icon(Icons.access_time,color: Colors.red,size: 50,),\n          Text(\"\\ue192\",style: TextStyle(fontFamily: \"MaterialIcons\",color: Colors.blue,fontSize: 30),),\n        ],\n      );\n  }\n}\n\n```\n\n# 四：文本输入框\n\n![图1](11-基础组件的使用/11_004.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    return Theme(\n      data:ThemeData(\n        primaryColor: Colors.red,\n      ),\n      child: Padding(\n        padding: EdgeInsets.all(10),\n        child: Column(\n          children: <Widget>[\n            Column(\n              children: <Widget>[\n                TextField(\n                  controller: userNameController,\n//                  keyboardType: TextInputType.number, //键盘类型\n                  decoration: InputDecoration(\n                      icon: Icon(Icons.people),\n                      labelText: \"用户名\",\n//                  border: OutlineInputBorder(),\n                      border: InputBorder.none,\n                      hintText: \"请输入用户名\",\n                      filled: true,\n                      fillColor: Colors.red[100]\n                  ),\n                  onChanged: (value){\n                    print(\"onChanged:$value\");\n                  },\n                  onSubmitted: (value){\n                    print(\"onSubmitted:$value\");\n                  },\n                ),\n                SizedBox(height:20),\n                TextField(\n                  controller: passwordController,\n                  decoration: InputDecoration(\n                      icon: Icon(Icons.lock),\n                      labelText: \"密码\",\n                      hintText: \"请输入密码\",\n                      border: OutlineInputBorder(\n                          borderSide: BorderSide(\n                              color: Colors.red,\n                              width: 2\n                          )\n                      )\n                  ),\n                  onChanged: (value){\n                    print(\"password onChange:$value\");\n                  },\n                ),\n                SizedBox(height:20),\n                Container(\n//                  width: 200,\n                  width: double.infinity,\n                  height: 50,\n                  child: FlatButton(\n                    color: Colors.purple,\n                    child: Text(\"登录\",style: TextStyle(color: Colors.white, fontSize: 20),),\n                    onPressed: (){\n                      final userName = userNameController.text;\n                      final password = passwordController.text;\n                      print(\"userName;$userName, password:$password\");\n\n                      //清空数据\n                      userNameController.clear();\n                      passwordController.clear();\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n# 五：Container组件\n\n![图1](11-基础组件的使用/11_005.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 200,\n      height: 200,\n//      color: Colors.red,\n      padding: EdgeInsets.all(10),\n      margin: EdgeInsets.all(20),\n      decoration: BoxDecoration(\n          color: Colors.red,\n          border: Border.all(\n              color:Colors.blue,  //边框颜色\n              width: 5            //边框宽度\n          ),\n\n          //设置圆角\n//        borderRadius: BorderRadius.all(\n//            Radius.circular(10),\n//        ),\n\n//        borderRadius: BorderRadius.circular(100),   //设置圆形\n          boxShadow: [\n            BoxShadow(\n              color: Colors.purple,\n              offset: Offset(5,5),\n              spreadRadius: 5,\n              blurRadius: 5,\n            ),\n            BoxShadow(\n                color: Colors.pink,     //阴影颜色\n                offset: Offset(-5,-5),  //偏移量\n                spreadRadius: 10, //扩展半径\n                blurRadius: 5  //模糊半径\n            )\n          ]\n      ),\n      alignment: Alignment.center,\n//      child: Icon(Icons.pets,color: Colors.white,size: 30,)\n//      child: Text(\"hello\",textAlign: TextAlign.justify,),\n      child: Text(\"hello world\",style: TextStyle(backgroundColor: Colors.amber),),\n    );\n  }\n}\n```\n\n# 六：Row组件\n\n![图1](11-基础组件的使用/11_006.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    /**\n     * Row 特点：\n     *  - 水平方向尽可能占据比较大的客供件\n     *    * 水平方向尽可能的包括内容，那么设置 mainAxisSize = min\n     *  - 垂直方向包括内容\n     *  MainAxisAlignment:\n     *    - start: 主轴的开始位置挨个摆放元素(默认值)\n     *    - end: 主轴的结束位置挨个摆放元素\n     *    - center: 主轴的中心点对齐\n     *    - spaceBetween: 左右两边的间距为0，其他元素之间平分间距\n     *    - spaceAround: 左右两边的间距是其他元素之间的间距一半\n     *    - spaceEvenly: 所有的元素间距平分空间\n     *  CrossAxisAlignment:\n     *    - start: 交叉轴的起始位置对齐\n     *    - end: 交叉抽的结束位置对齐\n     *    - center: 中心点对齐(默认值)\n     *    - baseline: 基线对齐(必须有文字的时候才起效果)\n     *    - stretch: 先Row占据交叉抽尽可能的空间，将所有的子widget交叉抽的高度，拉伸到最大。\n     * */\n    return Container(\n//      height: 150,\n//      color: Colors.black26,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n//        mainAxisSize: MainAxisSize.max,\n//        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: <Widget>[\n          Container(width: 80, height: 30, color: Colors.red,),\n          Container(width: 120, height: 80, color: Colors.blue,),\n          Container(width:40, height: 20, color: Colors.cyan,),\n          Container(width: 40, height: 60, color: Colors.purple,)\n\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 七：Expanded组件\n\n![图1](11-基础组件的使用/11_007.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      child: Row(\n        children: <Widget>[\n          Expanded(\n              flex: 2,\n              child: Container(width: 80, height: 30, color: Colors.red,)\n          ),\n          Expanded(\n            flex: 1,\n            child: Container(width: 120, height: 80, color: Colors.blue,),\n          ),\n          Container(width:40, height: 20, color: Colors.cyan,),\n          Container(width: 40, height: 60, color: Colors.purple,)\n\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 八：Stack组件\n\n![图1](11-基础组件的使用/11_008.png)\n\n实现代码：\n\n```\n/**\n * Stack 默认的大小是包裹内容的\n *  - alignment: 从什么位置开始排布所有的子widget\n *  - fit: expand(很少用), 将子元素拉伸到尽可能到大\n *  - overflow: 超出部分如何处理。\n * */\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      child: Stack(\n//        alignment: Alignment.bottomCenter,\n        overflow: Overflow.clip,  //超出部分裁剪\n        children: <Widget>[\n          Image.asset(\"assets/images/xingkong.jpeg\"),\n          Positioned(\n            left: 0,\n            top:0,\n            right:0,\n            child:\n            Container(\n                height: 40,\n                color: Color.fromARGB(130, 255, 0, 0),\n                padding: EdgeInsets.all(5),\n                alignment: Alignment.center,\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: <Widget>[\n                    Text(\n                      \"这是星空!!!\",\n                      style: TextStyle(\n                          color: Colors.white\n                      ),\n                    ),\n                    IconButton(\n                      icon:Icon(Icons.favorite,size: 20,),\n                      color: Colors.white,\n                    )\n                  ],\n                )\n            ),\n          )\n        ],\n      ),\n    );\n  }\n}\n```\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/11-基础组件的使用.md","raw":"---\ntitle: 11-基础组件的使用\ntoc: true\ndate: 2020-09-18 22:11:35\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一：按钮设置\n\n![图1](11-基础组件的使用/11_001.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        getDemo0(),\n        SizedBox(height:30),\n        getDemo1(),\n        SizedBox(height:30),\n        getDemo2()\n      ],\n    );\n  }\n}\n\nWidget getDemo0(){\n  return FlatButton(\n    child: Text(\"1\"),\n    color: Colors.red,\n    onPressed: () {},\n  );\n}\n\nWidget getDemo1(){\n  return Column(\n    children: <Widget>[\n      FlatButton(\n        materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      ),\n      FlatButton(\n        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n        child: Text(\"flat button1\"),\n        color: Colors.red,\n        onPressed: () {},\n      )\n    ],\n  );\n}\n\nWidget getDemo2(){\n  return ButtonTheme(\n    minWidth: 20,\n    height: 15,\n    padding: EdgeInsets.all(0),\n    child: FlatButton(\n      color: Colors.red,\n      child: Text(\"1\",style: TextStyle(fontSize: 9),),\n      onPressed: (){},\n    ),\n  );\n}\n\n```\n\n# 二：给图片增加占位图\n\n![图1](11-基础组件的使用/11_002.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return FadeInImage(\n        fadeInDuration: Duration(seconds: 1),   //淡入时间\n        fadeOutDuration: Duration(seconds: 1),  //淡出时间\n        placeholder: AssetImage(\"assets/images/xingkong.jpeg\"), //占位图\n        image: NetworkImage(\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589203158053&di=4ca63350aef3bf0b0459e872ca7db5e7&imgtype=0&src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg\")\n    );\n  }\n}\n\n```\n\n# 三：图标的使用\n\n![图1](11-基础组件的使用/11_003.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    /**\n     * Icon字体图标 和 图片图标\n     * 1,字体图标是矢量图(放大的时候不会失真)\n     * 2,字体图标可以设置颜色\n     * 3,图标很多时，占据空间更小\n     * 4,  0xe192 -> unicode编码\n     *     设置对象的字体\n     * */\n//    return Icon(Icons.access_time,color: Colors.red,size: 300,);\n//    IconData(0xe192, fontFamily: 'MaterialIcons');\n//    return Text(\"\\ue192\",style: TextStyle(fontFamily: \"MaterialIcons\",color: Colors.blue,fontSize: 30),);\n      return Column(\n        children: <Widget>[\n          Icon(Icons.access_time,color: Colors.red,size: 50,),\n          Text(\"\\ue192\",style: TextStyle(fontFamily: \"MaterialIcons\",color: Colors.blue,fontSize: 30),),\n        ],\n      );\n  }\n}\n\n```\n\n# 四：文本输入框\n\n![图1](11-基础组件的使用/11_004.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    return Theme(\n      data:ThemeData(\n        primaryColor: Colors.red,\n      ),\n      child: Padding(\n        padding: EdgeInsets.all(10),\n        child: Column(\n          children: <Widget>[\n            Column(\n              children: <Widget>[\n                TextField(\n                  controller: userNameController,\n//                  keyboardType: TextInputType.number, //键盘类型\n                  decoration: InputDecoration(\n                      icon: Icon(Icons.people),\n                      labelText: \"用户名\",\n//                  border: OutlineInputBorder(),\n                      border: InputBorder.none,\n                      hintText: \"请输入用户名\",\n                      filled: true,\n                      fillColor: Colors.red[100]\n                  ),\n                  onChanged: (value){\n                    print(\"onChanged:$value\");\n                  },\n                  onSubmitted: (value){\n                    print(\"onSubmitted:$value\");\n                  },\n                ),\n                SizedBox(height:20),\n                TextField(\n                  controller: passwordController,\n                  decoration: InputDecoration(\n                      icon: Icon(Icons.lock),\n                      labelText: \"密码\",\n                      hintText: \"请输入密码\",\n                      border: OutlineInputBorder(\n                          borderSide: BorderSide(\n                              color: Colors.red,\n                              width: 2\n                          )\n                      )\n                  ),\n                  onChanged: (value){\n                    print(\"password onChange:$value\");\n                  },\n                ),\n                SizedBox(height:20),\n                Container(\n//                  width: 200,\n                  width: double.infinity,\n                  height: 50,\n                  child: FlatButton(\n                    color: Colors.purple,\n                    child: Text(\"登录\",style: TextStyle(color: Colors.white, fontSize: 20),),\n                    onPressed: (){\n                      final userName = userNameController.text;\n                      final password = passwordController.text;\n                      print(\"userName;$userName, password:$password\");\n\n                      //清空数据\n                      userNameController.clear();\n                      passwordController.clear();\n                    },\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n# 五：Container组件\n\n![图1](11-基础组件的使用/11_005.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 200,\n      height: 200,\n//      color: Colors.red,\n      padding: EdgeInsets.all(10),\n      margin: EdgeInsets.all(20),\n      decoration: BoxDecoration(\n          color: Colors.red,\n          border: Border.all(\n              color:Colors.blue,  //边框颜色\n              width: 5            //边框宽度\n          ),\n\n          //设置圆角\n//        borderRadius: BorderRadius.all(\n//            Radius.circular(10),\n//        ),\n\n//        borderRadius: BorderRadius.circular(100),   //设置圆形\n          boxShadow: [\n            BoxShadow(\n              color: Colors.purple,\n              offset: Offset(5,5),\n              spreadRadius: 5,\n              blurRadius: 5,\n            ),\n            BoxShadow(\n                color: Colors.pink,     //阴影颜色\n                offset: Offset(-5,-5),  //偏移量\n                spreadRadius: 10, //扩展半径\n                blurRadius: 5  //模糊半径\n            )\n          ]\n      ),\n      alignment: Alignment.center,\n//      child: Icon(Icons.pets,color: Colors.white,size: 30,)\n//      child: Text(\"hello\",textAlign: TextAlign.justify,),\n      child: Text(\"hello world\",style: TextStyle(backgroundColor: Colors.amber),),\n    );\n  }\n}\n```\n\n# 六：Row组件\n\n![图1](11-基础组件的使用/11_006.png)\n\n实现代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  final userNameController = TextEditingController();\n  final passwordController = TextEditingController();\n  @override\n  Widget build(BuildContext context) {\n    /**\n     * Row 特点：\n     *  - 水平方向尽可能占据比较大的客供件\n     *    * 水平方向尽可能的包括内容，那么设置 mainAxisSize = min\n     *  - 垂直方向包括内容\n     *  MainAxisAlignment:\n     *    - start: 主轴的开始位置挨个摆放元素(默认值)\n     *    - end: 主轴的结束位置挨个摆放元素\n     *    - center: 主轴的中心点对齐\n     *    - spaceBetween: 左右两边的间距为0，其他元素之间平分间距\n     *    - spaceAround: 左右两边的间距是其他元素之间的间距一半\n     *    - spaceEvenly: 所有的元素间距平分空间\n     *  CrossAxisAlignment:\n     *    - start: 交叉轴的起始位置对齐\n     *    - end: 交叉抽的结束位置对齐\n     *    - center: 中心点对齐(默认值)\n     *    - baseline: 基线对齐(必须有文字的时候才起效果)\n     *    - stretch: 先Row占据交叉抽尽可能的空间，将所有的子widget交叉抽的高度，拉伸到最大。\n     * */\n    return Container(\n//      height: 150,\n//      color: Colors.black26,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n//        mainAxisSize: MainAxisSize.max,\n//        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: <Widget>[\n          Container(width: 80, height: 30, color: Colors.red,),\n          Container(width: 120, height: 80, color: Colors.blue,),\n          Container(width:40, height: 20, color: Colors.cyan,),\n          Container(width: 40, height: 60, color: Colors.purple,)\n\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 七：Expanded组件\n\n![图1](11-基础组件的使用/11_007.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      child: Row(\n        children: <Widget>[\n          Expanded(\n              flex: 2,\n              child: Container(width: 80, height: 30, color: Colors.red,)\n          ),\n          Expanded(\n            flex: 1,\n            child: Container(width: 120, height: 80, color: Colors.blue,),\n          ),\n          Container(width:40, height: 20, color: Colors.cyan,),\n          Container(width: 40, height: 60, color: Colors.purple,)\n\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 八：Stack组件\n\n![图1](11-基础组件的使用/11_008.png)\n\n实现代码：\n\n```\n/**\n * Stack 默认的大小是包裹内容的\n *  - alignment: 从什么位置开始排布所有的子widget\n *  - fit: expand(很少用), 将子元素拉伸到尽可能到大\n *  - overflow: 超出部分如何处理。\n * */\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      child: Stack(\n//        alignment: Alignment.bottomCenter,\n        overflow: Overflow.clip,  //超出部分裁剪\n        children: <Widget>[\n          Image.asset(\"assets/images/xingkong.jpeg\"),\n          Positioned(\n            left: 0,\n            top:0,\n            right:0,\n            child:\n            Container(\n                height: 40,\n                color: Color.fromARGB(130, 255, 0, 0),\n                padding: EdgeInsets.all(5),\n                alignment: Alignment.center,\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: <Widget>[\n                    Text(\n                      \"这是星空!!!\",\n                      style: TextStyle(\n                          color: Colors.white\n                      ),\n                    ),\n                    IconButton(\n                      icon:Icon(Icons.favorite,size: 20,),\n                      color: Colors.white,\n                    )\n                  ],\n                )\n            ),\n          )\n        ],\n      ),\n    );\n  }\n}\n```\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/11-基础组件的使用","published":1,"updated":"2020-09-18T14:19:50.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengg0024u3s69yq473ll","content":"<h1 id=\"一：按钮设置\"><a href=\"#一：按钮设置\" class=\"headerlink\" title=\"一：按钮设置\"></a>一：按钮设置</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Column(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        getDemo0(),</span><br><span class=\"line\">        SizedBox(height:30),</span><br><span class=\"line\">        getDemo1(),</span><br><span class=\"line\">        SizedBox(height:30),</span><br><span class=\"line\">        getDemo2()</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo0()&#123;</span><br><span class=\"line\">  return FlatButton(</span><br><span class=\"line\">    child: Text(&quot;1&quot;),</span><br><span class=\"line\">    color: Colors.red,</span><br><span class=\"line\">    onPressed: () &#123;&#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo1()&#123;</span><br><span class=\"line\">  return Column(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo2()&#123;</span><br><span class=\"line\">  return ButtonTheme(</span><br><span class=\"line\">    minWidth: 20,</span><br><span class=\"line\">    height: 15,</span><br><span class=\"line\">    padding: EdgeInsets.all(0),</span><br><span class=\"line\">    child: FlatButton(</span><br><span class=\"line\">      color: Colors.red,</span><br><span class=\"line\">      child: Text(&quot;1&quot;,style: TextStyle(fontSize: 9),),</span><br><span class=\"line\">      onPressed: ()&#123;&#125;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二：给图片增加占位图\"><a href=\"#二：给图片增加占位图\" class=\"headerlink\" title=\"二：给图片增加占位图\"></a>二：给图片增加占位图</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return FadeInImage(</span><br><span class=\"line\">        fadeInDuration: Duration(seconds: 1),   &#x2F;&#x2F;淡入时间</span><br><span class=\"line\">        fadeOutDuration: Duration(seconds: 1),  &#x2F;&#x2F;淡出时间</span><br><span class=\"line\">        placeholder: AssetImage(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;), &#x2F;&#x2F;占位图</span><br><span class=\"line\">        image: NetworkImage(&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589203158053&amp;di&#x3D;4ca63350aef3bf0b0459e872ca7db5e7&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg&quot;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三：图标的使用\"><a href=\"#三：图标的使用\" class=\"headerlink\" title=\"三：图标的使用\"></a>三：图标的使用</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_003.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Icon字体图标 和 图片图标</span><br><span class=\"line\">     * 1,字体图标是矢量图(放大的时候不会失真)</span><br><span class=\"line\">     * 2,字体图标可以设置颜色</span><br><span class=\"line\">     * 3,图标很多时，占据空间更小</span><br><span class=\"line\">     * 4,  0xe192 -&gt; unicode编码</span><br><span class=\"line\">     *     设置对象的字体</span><br><span class=\"line\">     * *&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;    return Icon(Icons.access_time,color: Colors.red,size: 300,);</span><br><span class=\"line\">&#x2F;&#x2F;    IconData(0xe192, fontFamily: &#39;MaterialIcons&#39;);</span><br><span class=\"line\">&#x2F;&#x2F;    return Text(&quot;\\ue192&quot;,style: TextStyle(fontFamily: &quot;MaterialIcons&quot;,color: Colors.blue,fontSize: 30),);</span><br><span class=\"line\">      return Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Icon(Icons.access_time,color: Colors.red,size: 50,),</span><br><span class=\"line\">          Text(&quot;\\ue192&quot;,style: TextStyle(fontFamily: &quot;MaterialIcons&quot;,color: Colors.blue,fontSize: 30),),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：文本输入框\"><a href=\"#四：文本输入框\" class=\"headerlink\" title=\"四：文本输入框\"></a>四：文本输入框</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_004.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Theme(</span><br><span class=\"line\">      data:ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.red,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Padding(</span><br><span class=\"line\">        padding: EdgeInsets.all(10),</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Column(</span><br><span class=\"line\">              children: &lt;Widget&gt;[</span><br><span class=\"line\">                TextField(</span><br><span class=\"line\">                  controller: userNameController,</span><br><span class=\"line\">&#x2F;&#x2F;                  keyboardType: TextInputType.number, &#x2F;&#x2F;键盘类型</span><br><span class=\"line\">                  decoration: InputDecoration(</span><br><span class=\"line\">                      icon: Icon(Icons.people),</span><br><span class=\"line\">                      labelText: &quot;用户名&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                  border: OutlineInputBorder(),</span><br><span class=\"line\">                      border: InputBorder.none,</span><br><span class=\"line\">                      hintText: &quot;请输入用户名&quot;,</span><br><span class=\"line\">                      filled: true,</span><br><span class=\"line\">                      fillColor: Colors.red[100]</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  onChanged: (value)&#123;</span><br><span class=\"line\">                    print(&quot;onChanged:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  onSubmitted: (value)&#123;</span><br><span class=\"line\">                    print(&quot;onSubmitted:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                SizedBox(height:20),</span><br><span class=\"line\">                TextField(</span><br><span class=\"line\">                  controller: passwordController,</span><br><span class=\"line\">                  decoration: InputDecoration(</span><br><span class=\"line\">                      icon: Icon(Icons.lock),</span><br><span class=\"line\">                      labelText: &quot;密码&quot;,</span><br><span class=\"line\">                      hintText: &quot;请输入密码&quot;,</span><br><span class=\"line\">                      border: OutlineInputBorder(</span><br><span class=\"line\">                          borderSide: BorderSide(</span><br><span class=\"line\">                              color: Colors.red,</span><br><span class=\"line\">                              width: 2</span><br><span class=\"line\">                          )</span><br><span class=\"line\">                      )</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  onChanged: (value)&#123;</span><br><span class=\"line\">                    print(&quot;password onChange:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                SizedBox(height:20),</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">&#x2F;&#x2F;                  width: 200,</span><br><span class=\"line\">                  width: double.infinity,</span><br><span class=\"line\">                  height: 50,</span><br><span class=\"line\">                  child: FlatButton(</span><br><span class=\"line\">                    color: Colors.purple,</span><br><span class=\"line\">                    child: Text(&quot;登录&quot;,style: TextStyle(color: Colors.white, fontSize: 20),),</span><br><span class=\"line\">                    onPressed: ()&#123;</span><br><span class=\"line\">                      final userName &#x3D; userNameController.text;</span><br><span class=\"line\">                      final password &#x3D; passwordController.text;</span><br><span class=\"line\">                      print(&quot;userName;$userName, password:$password&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                      &#x2F;&#x2F;清空数据</span><br><span class=\"line\">                      userNameController.clear();</span><br><span class=\"line\">                      passwordController.clear();</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五：Container组件\"><a href=\"#五：Container组件\" class=\"headerlink\" title=\"五：Container组件\"></a>五：Container组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_005.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 200,</span><br><span class=\"line\">      height: 200,</span><br><span class=\"line\">&#x2F;&#x2F;      color: Colors.red,</span><br><span class=\"line\">      padding: EdgeInsets.all(10),</span><br><span class=\"line\">      margin: EdgeInsets.all(20),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          border: Border.all(</span><br><span class=\"line\">              color:Colors.blue,  &#x2F;&#x2F;边框颜色</span><br><span class=\"line\">              width: 5            &#x2F;&#x2F;边框宽度</span><br><span class=\"line\">          ),</span><br><span class=\"line\"></span><br><span class=\"line\">          &#x2F;&#x2F;设置圆角</span><br><span class=\"line\">&#x2F;&#x2F;        borderRadius: BorderRadius.all(</span><br><span class=\"line\">&#x2F;&#x2F;            Radius.circular(10),</span><br><span class=\"line\">&#x2F;&#x2F;        ),</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;        borderRadius: BorderRadius.circular(100),   &#x2F;&#x2F;设置圆形</span><br><span class=\"line\">          boxShadow: [</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">              color: Colors.purple,</span><br><span class=\"line\">              offset: Offset(5,5),</span><br><span class=\"line\">              spreadRadius: 5,</span><br><span class=\"line\">              blurRadius: 5,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">                color: Colors.pink,     &#x2F;&#x2F;阴影颜色</span><br><span class=\"line\">                offset: Offset(-5,-5),  &#x2F;&#x2F;偏移量</span><br><span class=\"line\">                spreadRadius: 10, &#x2F;&#x2F;扩展半径</span><br><span class=\"line\">                blurRadius: 5  &#x2F;&#x2F;模糊半径</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ]</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      alignment: Alignment.center,</span><br><span class=\"line\">&#x2F;&#x2F;      child: Icon(Icons.pets,color: Colors.white,size: 30,)</span><br><span class=\"line\">&#x2F;&#x2F;      child: Text(&quot;hello&quot;,textAlign: TextAlign.justify,),</span><br><span class=\"line\">      child: Text(&quot;hello world&quot;,style: TextStyle(backgroundColor: Colors.amber),),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六：Row组件\"><a href=\"#六：Row组件\" class=\"headerlink\" title=\"六：Row组件\"></a>六：Row组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_006.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Row 特点：</span><br><span class=\"line\">     *  - 水平方向尽可能占据比较大的客供件</span><br><span class=\"line\">     *    * 水平方向尽可能的包括内容，那么设置 mainAxisSize &#x3D; min</span><br><span class=\"line\">     *  - 垂直方向包括内容</span><br><span class=\"line\">     *  MainAxisAlignment:</span><br><span class=\"line\">     *    - start: 主轴的开始位置挨个摆放元素(默认值)</span><br><span class=\"line\">     *    - end: 主轴的结束位置挨个摆放元素</span><br><span class=\"line\">     *    - center: 主轴的中心点对齐</span><br><span class=\"line\">     *    - spaceBetween: 左右两边的间距为0，其他元素之间平分间距</span><br><span class=\"line\">     *    - spaceAround: 左右两边的间距是其他元素之间的间距一半</span><br><span class=\"line\">     *    - spaceEvenly: 所有的元素间距平分空间</span><br><span class=\"line\">     *  CrossAxisAlignment:</span><br><span class=\"line\">     *    - start: 交叉轴的起始位置对齐</span><br><span class=\"line\">     *    - end: 交叉抽的结束位置对齐</span><br><span class=\"line\">     *    - center: 中心点对齐(默认值)</span><br><span class=\"line\">     *    - baseline: 基线对齐(必须有文字的时候才起效果)</span><br><span class=\"line\">     *    - stretch: 先Row占据交叉抽尽可能的空间，将所有的子widget交叉抽的高度，拉伸到最大。</span><br><span class=\"line\">     * *&#x2F;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">&#x2F;&#x2F;      height: 150,</span><br><span class=\"line\">&#x2F;&#x2F;      color: Colors.black26,</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">&#x2F;&#x2F;        mainAxisSize: MainAxisSize.max,</span><br><span class=\"line\">&#x2F;&#x2F;        crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Container(width: 80, height: 30, color: Colors.red,),</span><br><span class=\"line\">          Container(width: 120, height: 80, color: Colors.blue,),</span><br><span class=\"line\">          Container(width:40, height: 20, color: Colors.cyan,),</span><br><span class=\"line\">          Container(width: 40, height: 60, color: Colors.purple,)</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七：Expanded组件\"><a href=\"#七：Expanded组件\" class=\"headerlink\" title=\"七：Expanded组件\"></a>七：Expanded组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_007.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">              flex: 2,</span><br><span class=\"line\">              child: Container(width: 80, height: 30, color: Colors.red,)</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">            flex: 1,</span><br><span class=\"line\">            child: Container(width: 120, height: 80, color: Colors.blue,),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Container(width:40, height: 20, color: Colors.cyan,),</span><br><span class=\"line\">          Container(width: 40, height: 60, color: Colors.purple,)</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八：Stack组件\"><a href=\"#八：Stack组件\" class=\"headerlink\" title=\"八：Stack组件\"></a>八：Stack组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_008.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Stack 默认的大小是包裹内容的</span><br><span class=\"line\"> *  - alignment: 从什么位置开始排布所有的子widget</span><br><span class=\"line\"> *  - fit: expand(很少用), 将子元素拉伸到尽可能到大</span><br><span class=\"line\"> *  - overflow: 超出部分如何处理。</span><br><span class=\"line\"> * *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: Stack(</span><br><span class=\"line\">&#x2F;&#x2F;        alignment: Alignment.bottomCenter,</span><br><span class=\"line\">        overflow: Overflow.clip,  &#x2F;&#x2F;超出部分裁剪</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Image.asset(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;),</span><br><span class=\"line\">          Positioned(</span><br><span class=\"line\">            left: 0,</span><br><span class=\"line\">            top:0,</span><br><span class=\"line\">            right:0,</span><br><span class=\"line\">            child:</span><br><span class=\"line\">            Container(</span><br><span class=\"line\">                height: 40,</span><br><span class=\"line\">                color: Color.fromARGB(130, 255, 0, 0),</span><br><span class=\"line\">                padding: EdgeInsets.all(5),</span><br><span class=\"line\">                alignment: Alignment.center,</span><br><span class=\"line\">                child: Row(</span><br><span class=\"line\">                  mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    Text(</span><br><span class=\"line\">                      &quot;这是星空!!!&quot;,</span><br><span class=\"line\">                      style: TextStyle(</span><br><span class=\"line\">                          color: Colors.white</span><br><span class=\"line\">                      ),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                    IconButton(</span><br><span class=\"line\">                      icon:Icon(Icons.favorite,size: 20,),</span><br><span class=\"line\">                      color: Colors.white,</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一：按钮设置\"><a href=\"#一：按钮设置\" class=\"headerlink\" title=\"一：按钮设置\"></a>一：按钮设置</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Column(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        getDemo0(),</span><br><span class=\"line\">        SizedBox(height:30),</span><br><span class=\"line\">        getDemo1(),</span><br><span class=\"line\">        SizedBox(height:30),</span><br><span class=\"line\">        getDemo2()</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo0()&#123;</span><br><span class=\"line\">  return FlatButton(</span><br><span class=\"line\">    child: Text(&quot;1&quot;),</span><br><span class=\"line\">    color: Colors.red,</span><br><span class=\"line\">    onPressed: () &#123;&#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo1()&#123;</span><br><span class=\"line\">  return Column(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      FlatButton(</span><br><span class=\"line\">        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,</span><br><span class=\"line\">        child: Text(&quot;flat button1&quot;),</span><br><span class=\"line\">        color: Colors.red,</span><br><span class=\"line\">        onPressed: () &#123;&#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget getDemo2()&#123;</span><br><span class=\"line\">  return ButtonTheme(</span><br><span class=\"line\">    minWidth: 20,</span><br><span class=\"line\">    height: 15,</span><br><span class=\"line\">    padding: EdgeInsets.all(0),</span><br><span class=\"line\">    child: FlatButton(</span><br><span class=\"line\">      color: Colors.red,</span><br><span class=\"line\">      child: Text(&quot;1&quot;,style: TextStyle(fontSize: 9),),</span><br><span class=\"line\">      onPressed: ()&#123;&#125;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二：给图片增加占位图\"><a href=\"#二：给图片增加占位图\" class=\"headerlink\" title=\"二：给图片增加占位图\"></a>二：给图片增加占位图</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return FadeInImage(</span><br><span class=\"line\">        fadeInDuration: Duration(seconds: 1),   &#x2F;&#x2F;淡入时间</span><br><span class=\"line\">        fadeOutDuration: Duration(seconds: 1),  &#x2F;&#x2F;淡出时间</span><br><span class=\"line\">        placeholder: AssetImage(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;), &#x2F;&#x2F;占位图</span><br><span class=\"line\">        image: NetworkImage(&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589203158053&amp;di&#x3D;4ca63350aef3bf0b0459e872ca7db5e7&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg&quot;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三：图标的使用\"><a href=\"#三：图标的使用\" class=\"headerlink\" title=\"三：图标的使用\"></a>三：图标的使用</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_003.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Icon字体图标 和 图片图标</span><br><span class=\"line\">     * 1,字体图标是矢量图(放大的时候不会失真)</span><br><span class=\"line\">     * 2,字体图标可以设置颜色</span><br><span class=\"line\">     * 3,图标很多时，占据空间更小</span><br><span class=\"line\">     * 4,  0xe192 -&gt; unicode编码</span><br><span class=\"line\">     *     设置对象的字体</span><br><span class=\"line\">     * *&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;    return Icon(Icons.access_time,color: Colors.red,size: 300,);</span><br><span class=\"line\">&#x2F;&#x2F;    IconData(0xe192, fontFamily: &#39;MaterialIcons&#39;);</span><br><span class=\"line\">&#x2F;&#x2F;    return Text(&quot;\\ue192&quot;,style: TextStyle(fontFamily: &quot;MaterialIcons&quot;,color: Colors.blue,fontSize: 30),);</span><br><span class=\"line\">      return Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Icon(Icons.access_time,color: Colors.red,size: 50,),</span><br><span class=\"line\">          Text(&quot;\\ue192&quot;,style: TextStyle(fontFamily: &quot;MaterialIcons&quot;,color: Colors.blue,fontSize: 30),),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：文本输入框\"><a href=\"#四：文本输入框\" class=\"headerlink\" title=\"四：文本输入框\"></a>四：文本输入框</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_004.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Theme(</span><br><span class=\"line\">      data:ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.red,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Padding(</span><br><span class=\"line\">        padding: EdgeInsets.all(10),</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Column(</span><br><span class=\"line\">              children: &lt;Widget&gt;[</span><br><span class=\"line\">                TextField(</span><br><span class=\"line\">                  controller: userNameController,</span><br><span class=\"line\">&#x2F;&#x2F;                  keyboardType: TextInputType.number, &#x2F;&#x2F;键盘类型</span><br><span class=\"line\">                  decoration: InputDecoration(</span><br><span class=\"line\">                      icon: Icon(Icons.people),</span><br><span class=\"line\">                      labelText: &quot;用户名&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;                  border: OutlineInputBorder(),</span><br><span class=\"line\">                      border: InputBorder.none,</span><br><span class=\"line\">                      hintText: &quot;请输入用户名&quot;,</span><br><span class=\"line\">                      filled: true,</span><br><span class=\"line\">                      fillColor: Colors.red[100]</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  onChanged: (value)&#123;</span><br><span class=\"line\">                    print(&quot;onChanged:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  onSubmitted: (value)&#123;</span><br><span class=\"line\">                    print(&quot;onSubmitted:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                SizedBox(height:20),</span><br><span class=\"line\">                TextField(</span><br><span class=\"line\">                  controller: passwordController,</span><br><span class=\"line\">                  decoration: InputDecoration(</span><br><span class=\"line\">                      icon: Icon(Icons.lock),</span><br><span class=\"line\">                      labelText: &quot;密码&quot;,</span><br><span class=\"line\">                      hintText: &quot;请输入密码&quot;,</span><br><span class=\"line\">                      border: OutlineInputBorder(</span><br><span class=\"line\">                          borderSide: BorderSide(</span><br><span class=\"line\">                              color: Colors.red,</span><br><span class=\"line\">                              width: 2</span><br><span class=\"line\">                          )</span><br><span class=\"line\">                      )</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  onChanged: (value)&#123;</span><br><span class=\"line\">                    print(&quot;password onChange:$value&quot;);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                SizedBox(height:20),</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">&#x2F;&#x2F;                  width: 200,</span><br><span class=\"line\">                  width: double.infinity,</span><br><span class=\"line\">                  height: 50,</span><br><span class=\"line\">                  child: FlatButton(</span><br><span class=\"line\">                    color: Colors.purple,</span><br><span class=\"line\">                    child: Text(&quot;登录&quot;,style: TextStyle(color: Colors.white, fontSize: 20),),</span><br><span class=\"line\">                    onPressed: ()&#123;</span><br><span class=\"line\">                      final userName &#x3D; userNameController.text;</span><br><span class=\"line\">                      final password &#x3D; passwordController.text;</span><br><span class=\"line\">                      print(&quot;userName;$userName, password:$password&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                      &#x2F;&#x2F;清空数据</span><br><span class=\"line\">                      userNameController.clear();</span><br><span class=\"line\">                      passwordController.clear();</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ],</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五：Container组件\"><a href=\"#五：Container组件\" class=\"headerlink\" title=\"五：Container组件\"></a>五：Container组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_005.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 200,</span><br><span class=\"line\">      height: 200,</span><br><span class=\"line\">&#x2F;&#x2F;      color: Colors.red,</span><br><span class=\"line\">      padding: EdgeInsets.all(10),</span><br><span class=\"line\">      margin: EdgeInsets.all(20),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          border: Border.all(</span><br><span class=\"line\">              color:Colors.blue,  &#x2F;&#x2F;边框颜色</span><br><span class=\"line\">              width: 5            &#x2F;&#x2F;边框宽度</span><br><span class=\"line\">          ),</span><br><span class=\"line\"></span><br><span class=\"line\">          &#x2F;&#x2F;设置圆角</span><br><span class=\"line\">&#x2F;&#x2F;        borderRadius: BorderRadius.all(</span><br><span class=\"line\">&#x2F;&#x2F;            Radius.circular(10),</span><br><span class=\"line\">&#x2F;&#x2F;        ),</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;        borderRadius: BorderRadius.circular(100),   &#x2F;&#x2F;设置圆形</span><br><span class=\"line\">          boxShadow: [</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">              color: Colors.purple,</span><br><span class=\"line\">              offset: Offset(5,5),</span><br><span class=\"line\">              spreadRadius: 5,</span><br><span class=\"line\">              blurRadius: 5,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">                color: Colors.pink,     &#x2F;&#x2F;阴影颜色</span><br><span class=\"line\">                offset: Offset(-5,-5),  &#x2F;&#x2F;偏移量</span><br><span class=\"line\">                spreadRadius: 10, &#x2F;&#x2F;扩展半径</span><br><span class=\"line\">                blurRadius: 5  &#x2F;&#x2F;模糊半径</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ]</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      alignment: Alignment.center,</span><br><span class=\"line\">&#x2F;&#x2F;      child: Icon(Icons.pets,color: Colors.white,size: 30,)</span><br><span class=\"line\">&#x2F;&#x2F;      child: Text(&quot;hello&quot;,textAlign: TextAlign.justify,),</span><br><span class=\"line\">      child: Text(&quot;hello world&quot;,style: TextStyle(backgroundColor: Colors.amber),),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六：Row组件\"><a href=\"#六：Row组件\" class=\"headerlink\" title=\"六：Row组件\"></a>六：Row组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_006.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  final userNameController &#x3D; TextEditingController();</span><br><span class=\"line\">  final passwordController &#x3D; TextEditingController();</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Row 特点：</span><br><span class=\"line\">     *  - 水平方向尽可能占据比较大的客供件</span><br><span class=\"line\">     *    * 水平方向尽可能的包括内容，那么设置 mainAxisSize &#x3D; min</span><br><span class=\"line\">     *  - 垂直方向包括内容</span><br><span class=\"line\">     *  MainAxisAlignment:</span><br><span class=\"line\">     *    - start: 主轴的开始位置挨个摆放元素(默认值)</span><br><span class=\"line\">     *    - end: 主轴的结束位置挨个摆放元素</span><br><span class=\"line\">     *    - center: 主轴的中心点对齐</span><br><span class=\"line\">     *    - spaceBetween: 左右两边的间距为0，其他元素之间平分间距</span><br><span class=\"line\">     *    - spaceAround: 左右两边的间距是其他元素之间的间距一半</span><br><span class=\"line\">     *    - spaceEvenly: 所有的元素间距平分空间</span><br><span class=\"line\">     *  CrossAxisAlignment:</span><br><span class=\"line\">     *    - start: 交叉轴的起始位置对齐</span><br><span class=\"line\">     *    - end: 交叉抽的结束位置对齐</span><br><span class=\"line\">     *    - center: 中心点对齐(默认值)</span><br><span class=\"line\">     *    - baseline: 基线对齐(必须有文字的时候才起效果)</span><br><span class=\"line\">     *    - stretch: 先Row占据交叉抽尽可能的空间，将所有的子widget交叉抽的高度，拉伸到最大。</span><br><span class=\"line\">     * *&#x2F;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">&#x2F;&#x2F;      height: 150,</span><br><span class=\"line\">&#x2F;&#x2F;      color: Colors.black26,</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">&#x2F;&#x2F;        mainAxisSize: MainAxisSize.max,</span><br><span class=\"line\">&#x2F;&#x2F;        crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Container(width: 80, height: 30, color: Colors.red,),</span><br><span class=\"line\">          Container(width: 120, height: 80, color: Colors.blue,),</span><br><span class=\"line\">          Container(width:40, height: 20, color: Colors.cyan,),</span><br><span class=\"line\">          Container(width: 40, height: 60, color: Colors.purple,)</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七：Expanded组件\"><a href=\"#七：Expanded组件\" class=\"headerlink\" title=\"七：Expanded组件\"></a>七：Expanded组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_007.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">              flex: 2,</span><br><span class=\"line\">              child: Container(width: 80, height: 30, color: Colors.red,)</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">            flex: 1,</span><br><span class=\"line\">            child: Container(width: 120, height: 80, color: Colors.blue,),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Container(width:40, height: 20, color: Colors.cyan,),</span><br><span class=\"line\">          Container(width: 40, height: 60, color: Colors.purple,)</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八：Stack组件\"><a href=\"#八：Stack组件\" class=\"headerlink\" title=\"八：Stack组件\"></a>八：Stack组件</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/11-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/11_008.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Stack 默认的大小是包裹内容的</span><br><span class=\"line\"> *  - alignment: 从什么位置开始排布所有的子widget</span><br><span class=\"line\"> *  - fit: expand(很少用), 将子元素拉伸到尽可能到大</span><br><span class=\"line\"> *  - overflow: 超出部分如何处理。</span><br><span class=\"line\"> * *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: Stack(</span><br><span class=\"line\">&#x2F;&#x2F;        alignment: Alignment.bottomCenter,</span><br><span class=\"line\">        overflow: Overflow.clip,  &#x2F;&#x2F;超出部分裁剪</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Image.asset(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;),</span><br><span class=\"line\">          Positioned(</span><br><span class=\"line\">            left: 0,</span><br><span class=\"line\">            top:0,</span><br><span class=\"line\">            right:0,</span><br><span class=\"line\">            child:</span><br><span class=\"line\">            Container(</span><br><span class=\"line\">                height: 40,</span><br><span class=\"line\">                color: Color.fromARGB(130, 255, 0, 0),</span><br><span class=\"line\">                padding: EdgeInsets.all(5),</span><br><span class=\"line\">                alignment: Alignment.center,</span><br><span class=\"line\">                child: Row(</span><br><span class=\"line\">                  mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    Text(</span><br><span class=\"line\">                      &quot;这是星空!!!&quot;,</span><br><span class=\"line\">                      style: TextStyle(</span><br><span class=\"line\">                          color: Colors.white</span><br><span class=\"line\">                      ),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                    IconButton(</span><br><span class=\"line\">                      icon:Icon(Icons.favorite,size: 20,),</span><br><span class=\"line\">                      color: Colors.white,</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"10-图文混排，按钮，图片","toc":true,"date":"2020-09-02T12:38:31.000Z","_content":"\n\n# 一：图文混排效果：\n\n![图1](10-图文混排，按钮，图片/10_001.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget{\n  @override\n  Widget build(BuildContext context) {\n    return Text.rich(\n      TextSpan(\n        children: [\n          TextSpan(text:\"hello world\",style: TextStyle(color: Colors.red, fontSize: 20)),\n          WidgetSpan(child: Icon(Icons.add_call,color: Colors.purple,)),\n          TextSpan(text:\"hello flutter\",style: TextStyle(color: Colors.green,fontSize: 26)),\n          TextSpan(text:\"hello dart\", style: TextStyle(color: Colors.blue,fontSize: 20))\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 二，按钮使用的效果\n\n![图1](10-图文混排，按钮，图片/10_002.png)\n\n实现代码：\n```\nclass HYContentBody extends StatelessWidget{\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n//      crossAxisAlignment: CrossAxisAlignment.start,\n      children: <Widget>[\n        RaisedButton(\n          child: Text(\"RaisedButton\"),\n          color: Colors.red,\n          onPressed: () => print(\"RaisedButton click\"),\n        ),\n        FlatButton(\n            color: Colors.purple,\n            onPressed: () => print(\"FlatButton click\"),\n            child: Text(\"FlatButton\")\n        ),\n        OutlineButton(\n          color: Colors.blue,\n          textColor: Colors.green,\n          onPressed: () => print(\"OutlineButton click\"),\n          child: Text(\"OutlineButton\"),\n        ),\n        // 图标 + 文字 + 背景 + 圆角\n        FlatButton(\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(10),\n          ),\n          onPressed: (){\n            print(\"自定义button实现\");\n          },\n          color: Colors.yellow,\n          child: Row(\n            mainAxisSize: MainAxisSize.min,  //自适应到最小\n            children: <Widget>[\n              Icon(Icons.account_box,color: Colors.red,),\n              SizedBox(width: 3,),\n              Text(\"自定义按钮1111\")\n            ],\n          ),\n        )\n      ],\n    );\n  }\n}\n```\n\n# 三： 图片实现的效果\n\n![图1](10-图文混排，按钮，图片/10_003.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget{\n  final url = \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589191476392&di=c7e1699d62fe37ba74ff92362cc71296&imgtype=0&src=http%3A%2F%2Ffile02.16sucai.com%2Fd%2Ffile%2F2014%2F0829%2Fb871e1addf5f8e96f3b390ece2b2da0d.jpg\";\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n        child: Column(\n          children: <Widget>[\n            CircleAvatar(\n              radius: 30,\n              backgroundImage: NetworkImage(\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589191476390&di=15174b862ac6db450939ff0637c35ba4&imgtype=0&src=http%3A%2F%2F3732784.s21i-3.faidns.com%2F2%2FABUIABACGAAgxaP3qQUogPOy4QIwywg44AU.jpg\"),\n              child: Text(\"这是圆形头像\"),\n            ),\n            ClipOval(\n                child: Image.network(\n                  \"https://tva1.sinaimg.cn/large/006y8mN6gy1g7aa03bmfpj3069069mx8.jpg\",\n                  width: 50,\n                  height: 50,\n                )\n            ),\n            ClipRRect(\n              borderRadius: BorderRadius.circular(10),\n              child: Image.network(url,width: 200,),\n            ),\n          ],\n        )\n    );\n  }\n}\n\n//通过Image方式,调用网络图片\nImage getImage1(url){\n  return Image(\n    width: 200,\n    height: 200,\n    image: NetworkImage(url),\n    fit: BoxFit.fitWidth,\n  );\n}\n\n//通过Image方式 调用本地图片\n/**\n * 1,在项目中创建 assets/images/2.0x 或者 3.0 文件夹\n * 2,在pubspec.yaml文件中，开启assets， 注意assets前面的的空格要去掉，与 uses-material-design 同一个级别。\n * 3,使用图片\n * */\nImage getImage2(){\n  return Image(\n    //设置颜色以及混入模式\n      color: Colors.red,\n      colorBlendMode: BlendMode.difference,\n      width: 200,\n      height: 200,\n      image: AssetImage(\n        \"assets/images/xingkong.jpeg\",\n      )\n  );\n}\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/10-图文混排，按钮，图片.md","raw":"---\ntitle: 10-图文混排，按钮，图片\ntoc: true\ndate: 2020-09-02 20:38:31\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一：图文混排效果：\n\n![图1](10-图文混排，按钮，图片/10_001.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget{\n  @override\n  Widget build(BuildContext context) {\n    return Text.rich(\n      TextSpan(\n        children: [\n          TextSpan(text:\"hello world\",style: TextStyle(color: Colors.red, fontSize: 20)),\n          WidgetSpan(child: Icon(Icons.add_call,color: Colors.purple,)),\n          TextSpan(text:\"hello flutter\",style: TextStyle(color: Colors.green,fontSize: 26)),\n          TextSpan(text:\"hello dart\", style: TextStyle(color: Colors.blue,fontSize: 20))\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 二，按钮使用的效果\n\n![图1](10-图文混排，按钮，图片/10_002.png)\n\n实现代码：\n```\nclass HYContentBody extends StatelessWidget{\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n//      crossAxisAlignment: CrossAxisAlignment.start,\n      children: <Widget>[\n        RaisedButton(\n          child: Text(\"RaisedButton\"),\n          color: Colors.red,\n          onPressed: () => print(\"RaisedButton click\"),\n        ),\n        FlatButton(\n            color: Colors.purple,\n            onPressed: () => print(\"FlatButton click\"),\n            child: Text(\"FlatButton\")\n        ),\n        OutlineButton(\n          color: Colors.blue,\n          textColor: Colors.green,\n          onPressed: () => print(\"OutlineButton click\"),\n          child: Text(\"OutlineButton\"),\n        ),\n        // 图标 + 文字 + 背景 + 圆角\n        FlatButton(\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(10),\n          ),\n          onPressed: (){\n            print(\"自定义button实现\");\n          },\n          color: Colors.yellow,\n          child: Row(\n            mainAxisSize: MainAxisSize.min,  //自适应到最小\n            children: <Widget>[\n              Icon(Icons.account_box,color: Colors.red,),\n              SizedBox(width: 3,),\n              Text(\"自定义按钮1111\")\n            ],\n          ),\n        )\n      ],\n    );\n  }\n}\n```\n\n# 三： 图片实现的效果\n\n![图1](10-图文混排，按钮，图片/10_003.png)\n\n代码：\n\n```\nclass HYContentBody extends StatelessWidget{\n  final url = \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589191476392&di=c7e1699d62fe37ba74ff92362cc71296&imgtype=0&src=http%3A%2F%2Ffile02.16sucai.com%2Fd%2Ffile%2F2014%2F0829%2Fb871e1addf5f8e96f3b390ece2b2da0d.jpg\";\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n        child: Column(\n          children: <Widget>[\n            CircleAvatar(\n              radius: 30,\n              backgroundImage: NetworkImage(\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1589191476390&di=15174b862ac6db450939ff0637c35ba4&imgtype=0&src=http%3A%2F%2F3732784.s21i-3.faidns.com%2F2%2FABUIABACGAAgxaP3qQUogPOy4QIwywg44AU.jpg\"),\n              child: Text(\"这是圆形头像\"),\n            ),\n            ClipOval(\n                child: Image.network(\n                  \"https://tva1.sinaimg.cn/large/006y8mN6gy1g7aa03bmfpj3069069mx8.jpg\",\n                  width: 50,\n                  height: 50,\n                )\n            ),\n            ClipRRect(\n              borderRadius: BorderRadius.circular(10),\n              child: Image.network(url,width: 200,),\n            ),\n          ],\n        )\n    );\n  }\n}\n\n//通过Image方式,调用网络图片\nImage getImage1(url){\n  return Image(\n    width: 200,\n    height: 200,\n    image: NetworkImage(url),\n    fit: BoxFit.fitWidth,\n  );\n}\n\n//通过Image方式 调用本地图片\n/**\n * 1,在项目中创建 assets/images/2.0x 或者 3.0 文件夹\n * 2,在pubspec.yaml文件中，开启assets， 注意assets前面的的空格要去掉，与 uses-material-design 同一个级别。\n * 3,使用图片\n * */\nImage getImage2(){\n  return Image(\n    //设置颜色以及混入模式\n      color: Colors.red,\n      colorBlendMode: BlendMode.difference,\n      width: 200,\n      height: 200,\n      image: AssetImage(\n        \"assets/images/xingkong.jpeg\",\n      )\n  );\n}\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/10-图文混排，按钮，图片","published":1,"updated":"2020-09-18T14:10:58.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengg0026u3s6ckbofdzp","content":"<h1 id=\"一：图文混排效果：\"><a href=\"#一：图文混排效果：\" class=\"headerlink\" title=\"一：图文混排效果：\"></a>一：图文混排效果：</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">      TextSpan(</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          TextSpan(text:&quot;hello world&quot;,style: TextStyle(color: Colors.red, fontSize: 20)),</span><br><span class=\"line\">          WidgetSpan(child: Icon(Icons.add_call,color: Colors.purple,)),</span><br><span class=\"line\">          TextSpan(text:&quot;hello flutter&quot;,style: TextStyle(color: Colors.green,fontSize: 26)),</span><br><span class=\"line\">          TextSpan(text:&quot;hello dart&quot;, style: TextStyle(color: Colors.blue,fontSize: 20))</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，按钮使用的效果\"><a href=\"#二，按钮使用的效果\" class=\"headerlink\" title=\"二，按钮使用的效果\"></a>二，按钮使用的效果</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Column(</span><br><span class=\"line\">&#x2F;&#x2F;      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        RaisedButton(</span><br><span class=\"line\">          child: Text(&quot;RaisedButton&quot;),</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          onPressed: () &#x3D;&gt; print(&quot;RaisedButton click&quot;),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        FlatButton(</span><br><span class=\"line\">            color: Colors.purple,</span><br><span class=\"line\">            onPressed: () &#x3D;&gt; print(&quot;FlatButton click&quot;),</span><br><span class=\"line\">            child: Text(&quot;FlatButton&quot;)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        OutlineButton(</span><br><span class=\"line\">          color: Colors.blue,</span><br><span class=\"line\">          textColor: Colors.green,</span><br><span class=\"line\">          onPressed: () &#x3D;&gt; print(&quot;OutlineButton click&quot;),</span><br><span class=\"line\">          child: Text(&quot;OutlineButton&quot;),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        &#x2F;&#x2F; 图标 + 文字 + 背景 + 圆角</span><br><span class=\"line\">        FlatButton(</span><br><span class=\"line\">          shape: RoundedRectangleBorder(</span><br><span class=\"line\">            borderRadius: BorderRadius.circular(10),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          onPressed: ()&#123;</span><br><span class=\"line\">            print(&quot;自定义button实现&quot;);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          color: Colors.yellow,</span><br><span class=\"line\">          child: Row(</span><br><span class=\"line\">            mainAxisSize: MainAxisSize.min,  &#x2F;&#x2F;自适应到最小</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Icon(Icons.account_box,color: Colors.red,),</span><br><span class=\"line\">              SizedBox(width: 3,),</span><br><span class=\"line\">              Text(&quot;自定义按钮1111&quot;)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三：-图片实现的效果\"><a href=\"#三：-图片实现的效果\" class=\"headerlink\" title=\"三： 图片实现的效果\"></a>三： 图片实现的效果</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_003.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  final url &#x3D; &quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589191476392&amp;di&#x3D;c7e1699d62fe37ba74ff92362cc71296&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Ffile02.16sucai.com%2Fd%2Ffile%2F2014%2F0829%2Fb871e1addf5f8e96f3b390ece2b2da0d.jpg&quot;;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            CircleAvatar(</span><br><span class=\"line\">              radius: 30,</span><br><span class=\"line\">              backgroundImage: NetworkImage(&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589191476390&amp;di&#x3D;15174b862ac6db450939ff0637c35ba4&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2F3732784.s21i-3.faidns.com%2F2%2FABUIABACGAAgxaP3qQUogPOy4QIwywg44AU.jpg&quot;),</span><br><span class=\"line\">              child: Text(&quot;这是圆形头像&quot;),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ClipOval(</span><br><span class=\"line\">                child: Image.network(</span><br><span class=\"line\">                  &quot;https:&#x2F;&#x2F;tva1.sinaimg.cn&#x2F;large&#x2F;006y8mN6gy1g7aa03bmfpj3069069mx8.jpg&quot;,</span><br><span class=\"line\">                  width: 50,</span><br><span class=\"line\">                  height: 50,</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ClipRRect(</span><br><span class=\"line\">              borderRadius: BorderRadius.circular(10),</span><br><span class=\"line\">              child: Image.network(url,width: 200,),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;通过Image方式,调用网络图片</span><br><span class=\"line\">Image getImage1(url)&#123;</span><br><span class=\"line\">  return Image(</span><br><span class=\"line\">    width: 200,</span><br><span class=\"line\">    height: 200,</span><br><span class=\"line\">    image: NetworkImage(url),</span><br><span class=\"line\">    fit: BoxFit.fitWidth,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;通过Image方式 调用本地图片</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 1,在项目中创建 assets&#x2F;images&#x2F;2.0x 或者 3.0 文件夹</span><br><span class=\"line\"> * 2,在pubspec.yaml文件中，开启assets， 注意assets前面的的空格要去掉，与 uses-material-design 同一个级别。</span><br><span class=\"line\"> * 3,使用图片</span><br><span class=\"line\"> * *&#x2F;</span><br><span class=\"line\">Image getImage2()&#123;</span><br><span class=\"line\">  return Image(</span><br><span class=\"line\">    &#x2F;&#x2F;设置颜色以及混入模式</span><br><span class=\"line\">      color: Colors.red,</span><br><span class=\"line\">      colorBlendMode: BlendMode.difference,</span><br><span class=\"line\">      width: 200,</span><br><span class=\"line\">      height: 200,</span><br><span class=\"line\">      image: AssetImage(</span><br><span class=\"line\">        &quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一：图文混排效果：\"><a href=\"#一：图文混排效果：\" class=\"headerlink\" title=\"一：图文混排效果：\"></a>一：图文混排效果：</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">      TextSpan(</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          TextSpan(text:&quot;hello world&quot;,style: TextStyle(color: Colors.red, fontSize: 20)),</span><br><span class=\"line\">          WidgetSpan(child: Icon(Icons.add_call,color: Colors.purple,)),</span><br><span class=\"line\">          TextSpan(text:&quot;hello flutter&quot;,style: TextStyle(color: Colors.green,fontSize: 26)),</span><br><span class=\"line\">          TextSpan(text:&quot;hello dart&quot;, style: TextStyle(color: Colors.blue,fontSize: 20))</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，按钮使用的效果\"><a href=\"#二，按钮使用的效果\" class=\"headerlink\" title=\"二，按钮使用的效果\"></a>二，按钮使用的效果</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Column(</span><br><span class=\"line\">&#x2F;&#x2F;      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        RaisedButton(</span><br><span class=\"line\">          child: Text(&quot;RaisedButton&quot;),</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          onPressed: () &#x3D;&gt; print(&quot;RaisedButton click&quot;),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        FlatButton(</span><br><span class=\"line\">            color: Colors.purple,</span><br><span class=\"line\">            onPressed: () &#x3D;&gt; print(&quot;FlatButton click&quot;),</span><br><span class=\"line\">            child: Text(&quot;FlatButton&quot;)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        OutlineButton(</span><br><span class=\"line\">          color: Colors.blue,</span><br><span class=\"line\">          textColor: Colors.green,</span><br><span class=\"line\">          onPressed: () &#x3D;&gt; print(&quot;OutlineButton click&quot;),</span><br><span class=\"line\">          child: Text(&quot;OutlineButton&quot;),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        &#x2F;&#x2F; 图标 + 文字 + 背景 + 圆角</span><br><span class=\"line\">        FlatButton(</span><br><span class=\"line\">          shape: RoundedRectangleBorder(</span><br><span class=\"line\">            borderRadius: BorderRadius.circular(10),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          onPressed: ()&#123;</span><br><span class=\"line\">            print(&quot;自定义button实现&quot;);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          color: Colors.yellow,</span><br><span class=\"line\">          child: Row(</span><br><span class=\"line\">            mainAxisSize: MainAxisSize.min,  &#x2F;&#x2F;自适应到最小</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Icon(Icons.account_box,color: Colors.red,),</span><br><span class=\"line\">              SizedBox(width: 3,),</span><br><span class=\"line\">              Text(&quot;自定义按钮1111&quot;)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三：-图片实现的效果\"><a href=\"#三：-图片实现的效果\" class=\"headerlink\" title=\"三： 图片实现的效果\"></a>三： 图片实现的效果</h1><p><img src=\"/2020/09/02/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/10-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E5%9B%BE%E7%89%87/10_003.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYContentBody extends StatelessWidget&#123;</span><br><span class=\"line\">  final url &#x3D; &quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589191476392&amp;di&#x3D;c7e1699d62fe37ba74ff92362cc71296&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Ffile02.16sucai.com%2Fd%2Ffile%2F2014%2F0829%2Fb871e1addf5f8e96f3b390ece2b2da0d.jpg&quot;;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            CircleAvatar(</span><br><span class=\"line\">              radius: 30,</span><br><span class=\"line\">              backgroundImage: NetworkImage(&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1589191476390&amp;di&#x3D;15174b862ac6db450939ff0637c35ba4&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2F3732784.s21i-3.faidns.com%2F2%2FABUIABACGAAgxaP3qQUogPOy4QIwywg44AU.jpg&quot;),</span><br><span class=\"line\">              child: Text(&quot;这是圆形头像&quot;),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ClipOval(</span><br><span class=\"line\">                child: Image.network(</span><br><span class=\"line\">                  &quot;https:&#x2F;&#x2F;tva1.sinaimg.cn&#x2F;large&#x2F;006y8mN6gy1g7aa03bmfpj3069069mx8.jpg&quot;,</span><br><span class=\"line\">                  width: 50,</span><br><span class=\"line\">                  height: 50,</span><br><span class=\"line\">                )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ClipRRect(</span><br><span class=\"line\">              borderRadius: BorderRadius.circular(10),</span><br><span class=\"line\">              child: Image.network(url,width: 200,),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;通过Image方式,调用网络图片</span><br><span class=\"line\">Image getImage1(url)&#123;</span><br><span class=\"line\">  return Image(</span><br><span class=\"line\">    width: 200,</span><br><span class=\"line\">    height: 200,</span><br><span class=\"line\">    image: NetworkImage(url),</span><br><span class=\"line\">    fit: BoxFit.fitWidth,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;通过Image方式 调用本地图片</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 1,在项目中创建 assets&#x2F;images&#x2F;2.0x 或者 3.0 文件夹</span><br><span class=\"line\"> * 2,在pubspec.yaml文件中，开启assets， 注意assets前面的的空格要去掉，与 uses-material-design 同一个级别。</span><br><span class=\"line\"> * 3,使用图片</span><br><span class=\"line\"> * *&#x2F;</span><br><span class=\"line\">Image getImage2()&#123;</span><br><span class=\"line\">  return Image(</span><br><span class=\"line\">    &#x2F;&#x2F;设置颜色以及混入模式</span><br><span class=\"line\">      color: Colors.red,</span><br><span class=\"line\">      colorBlendMode: BlendMode.difference,</span><br><span class=\"line\">      width: 200,</span><br><span class=\"line\">      height: 200,</span><br><span class=\"line\">      image: AssetImage(</span><br><span class=\"line\">        &quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"12-滚动组件的使用","toc":true,"date":"2020-09-18T14:12:02.000Z","_content":"\n\n# 一：ListView组件的使用\n\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"富文本\"),\n      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView.separated(\n        itemBuilder: (BuildContext ctx, int index){\n          return ListTile(\n            title: Text(\"联系人$index\",style: TextStyle(backgroundColor: Colors.blue),),\n          );\n        },\n        separatorBuilder: (BuildContext ctx, int index){\n          return Divider(\n            color: Colors.red,\n            indent: 60,   //前边的距离\n            endIndent: 100,   //后边的距离\n            height: 5,       //分割线所占的高度\n            thickness: 10,    //分割线的厚度，即高度\n          );\n        },\n        itemCount: 100);\n  }\n}\n\n\nclass HYContentBody3 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView.builder(\n        itemExtent: 80,   //项的高度，或者宽度\n//        scrollDirection: Axis.horizontal,\n//        reverse: true,   //列表数据反转\n        itemCount: 100,\n        itemBuilder: (BuildContext ctx, int index) {\n          return ListTile(\n            leading: Icon(Icons.people),\n            trailing: Icon(Icons.delete),\n            title: Text(\"联系人 $index\"),\n            subtitle: Text(\"电话号码 18811112222\"),\n          );\n        }\n    );\n  }\n}\n\n\nclass HYContentBody2 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      children: List.generate(100, (index){\n        return Text(\"Hello world $index\",style: TextStyle(fontSize: 30),);\n      }),\n    );\n  }\n}\n\n\nclass HYContentBody1 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      children: <Widget>[\n        Text(\"hello world 1\"),\n        Text(\"hello world 2\"),\n        Text(\"hello world 3\"),\n      ],\n    );\n  }\n}\n\n```\n\n# 二：GridView的使用\n效果图：\n\n![图1](12-滚动组件的使用/12_001.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: EdgeInsets.symmetric(horizontal:10),  //对称间距，水平方向上间距10个点\n      child: GridView.builder(\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 3,\n              mainAxisSpacing: 10,\n              crossAxisSpacing: 10\n          ),\n          itemBuilder: (BuildContext ctx,int index){\n            return Container(\n              color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n            );\n          }\n      ),\n    );\n  }\n}\n\n//代理： SliverGridDelegateWithMaxCrossAxisExtent(最大交叉轴)\nclass HYContentBody2 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GridView(\n        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(\n            maxCrossAxisExtent: 200,  //交叉轴的数量\n            mainAxisSpacing: 10, //主轴上的间距\n            crossAxisSpacing: 10,  //交叉轴上的间距\n            childAspectRatio: 0.8 //宽高比\n        ),\n        children: List.generate(100, (index){\n          return Container(\n            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n          );\n        })\n    );\n  }\n}\n\n//代理： SliverGridDelegateWithFixedCrossAxisCount (固定轴上数量)\nclass HYContentBody1 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GridView(\n        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n            crossAxisCount: 3,  //交叉轴的数量\n            crossAxisSpacing: 10,  //交叉轴上的间距\n            mainAxisSpacing: 20,  //主轴上的间距\n            childAspectRatio:0.7  //宽高比例\n        ),\n        children: List.generate(100, (index){\n          return Container(\n            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n          );\n        })\n    );\n  }\n}\n\n```\n\n# 三，自定义滚动view CustomScrollView\n\n![图1](12-滚动组件的使用/12_002.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n//      appBar: AppBar(\n//        title: Text(\"列表测试\"),\n//      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return CustomScrollView(\n      slivers: <Widget>[\n        SliverAppBar(\n//          title: Text(\"这是title\"),\n          expandedHeight: 200,\n          flexibleSpace: FlexibleSpaceBar(\n            title: Text(\"hello\"),\n            background: Image.asset(\"assets/images/xingkong.jpeg\",fit:BoxFit.fill),\n          ),\n        ),\n        SliverGrid(\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 4,\n              mainAxisSpacing: 10,\n              crossAxisSpacing: 10,\n              childAspectRatio: 1.5\n          ),\n          delegate: SliverChildBuilderDelegate(\n                  (BuildContext ctx, int index){\n                return Container(\n                  color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n                );\n              },\n              childCount: 8\n          ),\n        ),\n        SliverList(\n          delegate: SliverChildBuilderDelegate(\n                  (BuildContext ctx,int index) {\n                return ListTile(\n                  title: Text(\"联系人 $index\"),\n                );\n              },\n              childCount: 20\n          ),\n        ),\n      ],\n    );\n  }\n}\n\n```\n\n# 四：滚动监听\n\n![图1](12-滚动组件的使用/12_003.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatefulWidget {\n  @override\n  _HYHomePageState createState() => _HYHomePageState();\n}\n\nclass _HYHomePageState extends State<HYHomePage> {\n\n  ScrollController _scrollController = new ScrollController(initialScrollOffset: 100);\n\n  bool _isShowFloatingButton = false;\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n//      print(\"监听到滚动......当前滚动位置：${_scrollController.offset}\");\n      setState(() {\n        _isShowFloatingButton = _scrollController.offset > 800;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: NotificationListener(\n        onNotification: (ScrollNotification notification){\n          //开始滚动的通知\n          if(notification is ScrollStartNotification){\n            print(\"开始滚动.....\");\n          }else if(notification is ScrollUpdateNotification){\n            print(\"正在滚动中.....总体位置：${notification.metrics.maxScrollExtent} ,当前位置${notification.metrics.pixels}\");\n          }else if(notification is ScrollEndNotification){\n            print(\"结束滚动....\");\n          }\n        },\n        child: ListView.builder(\n          controller: _scrollController,\n          itemBuilder: (BuildContext ctx,int index){\n            return ListTile(\n              leading: Icon(Icons.people),\n              title: Text(\"联系人$index\"),\n            );\n          },\n          itemCount: 100,\n        ),\n      ),\n      floatingActionButton: (_isShowFloatingButton ? FloatingActionButton(\n          child: Icon(Icons.arrow_upward),\n          onPressed: (){\n            //滚动到顶部\n            _scrollController.animateTo(0, duration: Duration(milliseconds:250), curve: Curves.easeIn\n            );\n          }\n      ) : null),\n    );\n  }\n}\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/12-滚动组件的使用.md","raw":"---\ntitle: 12-滚动组件的使用\ntoc: true\ndate: 2020-09-18 22:12:02\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一：ListView组件的使用\n\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"富文本\"),\n      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView.separated(\n        itemBuilder: (BuildContext ctx, int index){\n          return ListTile(\n            title: Text(\"联系人$index\",style: TextStyle(backgroundColor: Colors.blue),),\n          );\n        },\n        separatorBuilder: (BuildContext ctx, int index){\n          return Divider(\n            color: Colors.red,\n            indent: 60,   //前边的距离\n            endIndent: 100,   //后边的距离\n            height: 5,       //分割线所占的高度\n            thickness: 10,    //分割线的厚度，即高度\n          );\n        },\n        itemCount: 100);\n  }\n}\n\n\nclass HYContentBody3 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView.builder(\n        itemExtent: 80,   //项的高度，或者宽度\n//        scrollDirection: Axis.horizontal,\n//        reverse: true,   //列表数据反转\n        itemCount: 100,\n        itemBuilder: (BuildContext ctx, int index) {\n          return ListTile(\n            leading: Icon(Icons.people),\n            trailing: Icon(Icons.delete),\n            title: Text(\"联系人 $index\"),\n            subtitle: Text(\"电话号码 18811112222\"),\n          );\n        }\n    );\n  }\n}\n\n\nclass HYContentBody2 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      children: List.generate(100, (index){\n        return Text(\"Hello world $index\",style: TextStyle(fontSize: 30),);\n      }),\n    );\n  }\n}\n\n\nclass HYContentBody1 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      children: <Widget>[\n        Text(\"hello world 1\"),\n        Text(\"hello world 2\"),\n        Text(\"hello world 3\"),\n      ],\n    );\n  }\n}\n\n```\n\n# 二：GridView的使用\n效果图：\n\n![图1](12-滚动组件的使用/12_001.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: EdgeInsets.symmetric(horizontal:10),  //对称间距，水平方向上间距10个点\n      child: GridView.builder(\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 3,\n              mainAxisSpacing: 10,\n              crossAxisSpacing: 10\n          ),\n          itemBuilder: (BuildContext ctx,int index){\n            return Container(\n              color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n            );\n          }\n      ),\n    );\n  }\n}\n\n//代理： SliverGridDelegateWithMaxCrossAxisExtent(最大交叉轴)\nclass HYContentBody2 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GridView(\n        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(\n            maxCrossAxisExtent: 200,  //交叉轴的数量\n            mainAxisSpacing: 10, //主轴上的间距\n            crossAxisSpacing: 10,  //交叉轴上的间距\n            childAspectRatio: 0.8 //宽高比\n        ),\n        children: List.generate(100, (index){\n          return Container(\n            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n          );\n        })\n    );\n  }\n}\n\n//代理： SliverGridDelegateWithFixedCrossAxisCount (固定轴上数量)\nclass HYContentBody1 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GridView(\n        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n            crossAxisCount: 3,  //交叉轴的数量\n            crossAxisSpacing: 10,  //交叉轴上的间距\n            mainAxisSpacing: 20,  //主轴上的间距\n            childAspectRatio:0.7  //宽高比例\n        ),\n        children: List.generate(100, (index){\n          return Container(\n            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n          );\n        })\n    );\n  }\n}\n\n```\n\n# 三，自定义滚动view CustomScrollView\n\n![图1](12-滚动组件的使用/12_002.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n//      appBar: AppBar(\n//        title: Text(\"列表测试\"),\n//      ),\n      body: HYContentBody(),\n    );\n  }\n}\n\nclass HYContentBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return CustomScrollView(\n      slivers: <Widget>[\n        SliverAppBar(\n//          title: Text(\"这是title\"),\n          expandedHeight: 200,\n          flexibleSpace: FlexibleSpaceBar(\n            title: Text(\"hello\"),\n            background: Image.asset(\"assets/images/xingkong.jpeg\",fit:BoxFit.fill),\n          ),\n        ),\n        SliverGrid(\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n              crossAxisCount: 4,\n              mainAxisSpacing: 10,\n              crossAxisSpacing: 10,\n              childAspectRatio: 1.5\n          ),\n          delegate: SliverChildBuilderDelegate(\n                  (BuildContext ctx, int index){\n                return Container(\n                  color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),\n                );\n              },\n              childCount: 8\n          ),\n        ),\n        SliverList(\n          delegate: SliverChildBuilderDelegate(\n                  (BuildContext ctx,int index) {\n                return ListTile(\n                  title: Text(\"联系人 $index\"),\n                );\n              },\n              childCount: 20\n          ),\n        ),\n      ],\n    );\n  }\n}\n\n```\n\n# 四：滚动监听\n\n![图1](12-滚动组件的使用/12_003.png)\n\n实现代码：\n\n```\nimport 'dart:ffi';\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: HYHomePage(),\n    );\n  }\n}\n\nclass HYHomePage extends StatefulWidget {\n  @override\n  _HYHomePageState createState() => _HYHomePageState();\n}\n\nclass _HYHomePageState extends State<HYHomePage> {\n\n  ScrollController _scrollController = new ScrollController(initialScrollOffset: 100);\n\n  bool _isShowFloatingButton = false;\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n//      print(\"监听到滚动......当前滚动位置：${_scrollController.offset}\");\n      setState(() {\n        _isShowFloatingButton = _scrollController.offset > 800;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: NotificationListener(\n        onNotification: (ScrollNotification notification){\n          //开始滚动的通知\n          if(notification is ScrollStartNotification){\n            print(\"开始滚动.....\");\n          }else if(notification is ScrollUpdateNotification){\n            print(\"正在滚动中.....总体位置：${notification.metrics.maxScrollExtent} ,当前位置${notification.metrics.pixels}\");\n          }else if(notification is ScrollEndNotification){\n            print(\"结束滚动....\");\n          }\n        },\n        child: ListView.builder(\n          controller: _scrollController,\n          itemBuilder: (BuildContext ctx,int index){\n            return ListTile(\n              leading: Icon(Icons.people),\n              title: Text(\"联系人$index\"),\n            );\n          },\n          itemCount: 100,\n        ),\n      ),\n      floatingActionButton: (_isShowFloatingButton ? FloatingActionButton(\n          child: Icon(Icons.arrow_upward),\n          onPressed: (){\n            //滚动到顶部\n            _scrollController.animateTo(0, duration: Duration(milliseconds:250), curve: Curves.easeIn\n            );\n          }\n      ) : null),\n    );\n  }\n}\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/12-滚动组件的使用","published":1,"updated":"2020-09-18T14:23:43.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengh0029u3s68ujrc9il","content":"<h1 id=\"一：ListView组件的使用\"><a href=\"#一：ListView组件的使用\" class=\"headerlink\" title=\"一：ListView组件的使用\"></a>一：ListView组件的使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;富文本&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView.separated(</span><br><span class=\"line\">        itemBuilder: (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">          return ListTile(</span><br><span class=\"line\">            title: Text(&quot;联系人$index&quot;,style: TextStyle(backgroundColor: Colors.blue),),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        separatorBuilder: (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">          return Divider(</span><br><span class=\"line\">            color: Colors.red,</span><br><span class=\"line\">            indent: 60,   &#x2F;&#x2F;前边的距离</span><br><span class=\"line\">            endIndent: 100,   &#x2F;&#x2F;后边的距离</span><br><span class=\"line\">            height: 5,       &#x2F;&#x2F;分割线所占的高度</span><br><span class=\"line\">            thickness: 10,    &#x2F;&#x2F;分割线的厚度，即高度</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        itemCount: 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody3 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView.builder(</span><br><span class=\"line\">        itemExtent: 80,   &#x2F;&#x2F;项的高度，或者宽度</span><br><span class=\"line\">&#x2F;&#x2F;        scrollDirection: Axis.horizontal,</span><br><span class=\"line\">&#x2F;&#x2F;        reverse: true,   &#x2F;&#x2F;列表数据反转</span><br><span class=\"line\">        itemCount: 100,</span><br><span class=\"line\">        itemBuilder: (BuildContext ctx, int index) &#123;</span><br><span class=\"line\">          return ListTile(</span><br><span class=\"line\">            leading: Icon(Icons.people),</span><br><span class=\"line\">            trailing: Icon(Icons.delete),</span><br><span class=\"line\">            title: Text(&quot;联系人 $index&quot;),</span><br><span class=\"line\">            subtitle: Text(&quot;电话号码 18811112222&quot;),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody2 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView(</span><br><span class=\"line\">      children: List.generate(100, (index)&#123;</span><br><span class=\"line\">        return Text(&quot;Hello world $index&quot;,style: TextStyle(fontSize: 30),);</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody1 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        Text(&quot;hello world 1&quot;),</span><br><span class=\"line\">        Text(&quot;hello world 2&quot;),</span><br><span class=\"line\">        Text(&quot;hello world 3&quot;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二：GridView的使用\"><a href=\"#二：GridView的使用\" class=\"headerlink\" title=\"二：GridView的使用\"></a>二：GridView的使用</h1><p>效果图：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_001.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Padding(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(horizontal:10),  &#x2F;&#x2F;对称间距，水平方向上间距10个点</span><br><span class=\"line\">      child: GridView.builder(</span><br><span class=\"line\">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">              crossAxisCount: 3,</span><br><span class=\"line\">              mainAxisSpacing: 10,</span><br><span class=\"line\">              crossAxisSpacing: 10</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          itemBuilder: (BuildContext ctx,int index)&#123;</span><br><span class=\"line\">            return Container(</span><br><span class=\"line\">              color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理： SliverGridDelegateWithMaxCrossAxisExtent(最大交叉轴)</span><br><span class=\"line\">class HYContentBody2 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GridView(</span><br><span class=\"line\">        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(</span><br><span class=\"line\">            maxCrossAxisExtent: 200,  &#x2F;&#x2F;交叉轴的数量</span><br><span class=\"line\">            mainAxisSpacing: 10, &#x2F;&#x2F;主轴上的间距</span><br><span class=\"line\">            crossAxisSpacing: 10,  &#x2F;&#x2F;交叉轴上的间距</span><br><span class=\"line\">            childAspectRatio: 0.8 &#x2F;&#x2F;宽高比</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        children: List.generate(100, (index)&#123;</span><br><span class=\"line\">          return Container(</span><br><span class=\"line\">            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理： SliverGridDelegateWithFixedCrossAxisCount (固定轴上数量)</span><br><span class=\"line\">class HYContentBody1 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GridView(</span><br><span class=\"line\">        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">            crossAxisCount: 3,  &#x2F;&#x2F;交叉轴的数量</span><br><span class=\"line\">            crossAxisSpacing: 10,  &#x2F;&#x2F;交叉轴上的间距</span><br><span class=\"line\">            mainAxisSpacing: 20,  &#x2F;&#x2F;主轴上的间距</span><br><span class=\"line\">            childAspectRatio:0.7  &#x2F;&#x2F;宽高比例</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        children: List.generate(100, (index)&#123;</span><br><span class=\"line\">          return Container(</span><br><span class=\"line\">            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三，自定义滚动view-CustomScrollView\"><a href=\"#三，自定义滚动view-CustomScrollView\" class=\"headerlink\" title=\"三，自定义滚动view CustomScrollView\"></a>三，自定义滚动view CustomScrollView</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">&#x2F;&#x2F;      appBar: AppBar(</span><br><span class=\"line\">&#x2F;&#x2F;        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">&#x2F;&#x2F;      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return CustomScrollView(</span><br><span class=\"line\">      slivers: &lt;Widget&gt;[</span><br><span class=\"line\">        SliverAppBar(</span><br><span class=\"line\">&#x2F;&#x2F;          title: Text(&quot;这是title&quot;),</span><br><span class=\"line\">          expandedHeight: 200,</span><br><span class=\"line\">          flexibleSpace: FlexibleSpaceBar(</span><br><span class=\"line\">            title: Text(&quot;hello&quot;),</span><br><span class=\"line\">            background: Image.asset(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;,fit:BoxFit.fill),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        SliverGrid(</span><br><span class=\"line\">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">              crossAxisCount: 4,</span><br><span class=\"line\">              mainAxisSpacing: 10,</span><br><span class=\"line\">              crossAxisSpacing: 10,</span><br><span class=\"line\">              childAspectRatio: 1.5</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          delegate: SliverChildBuilderDelegate(</span><br><span class=\"line\">                  (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">                return Container(</span><br><span class=\"line\">                  color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              childCount: 8</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        SliverList(</span><br><span class=\"line\">          delegate: SliverChildBuilderDelegate(</span><br><span class=\"line\">                  (BuildContext ctx,int index) &#123;</span><br><span class=\"line\">                return ListTile(</span><br><span class=\"line\">                  title: Text(&quot;联系人 $index&quot;),</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              childCount: 20</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：滚动监听\"><a href=\"#四：滚动监听\" class=\"headerlink\" title=\"四：滚动监听\"></a>四：滚动监听</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_003.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYHomePageState createState() &#x3D;&gt; _HYHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYHomePageState extends State&lt;HYHomePage&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ScrollController _scrollController &#x3D; new ScrollController(initialScrollOffset: 100);</span><br><span class=\"line\"></span><br><span class=\"line\">  bool _isShowFloatingButton &#x3D; false;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">&#x2F;&#x2F;      print(&quot;监听到滚动......当前滚动位置：$&#123;_scrollController.offset&#125;&quot;);</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        _isShowFloatingButton &#x3D; _scrollController.offset &gt; 800;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: NotificationListener(</span><br><span class=\"line\">        onNotification: (ScrollNotification notification)&#123;</span><br><span class=\"line\">          &#x2F;&#x2F;开始滚动的通知</span><br><span class=\"line\">          if(notification is ScrollStartNotification)&#123;</span><br><span class=\"line\">            print(&quot;开始滚动.....&quot;);</span><br><span class=\"line\">          &#125;else if(notification is ScrollUpdateNotification)&#123;</span><br><span class=\"line\">            print(&quot;正在滚动中.....总体位置：$&#123;notification.metrics.maxScrollExtent&#125; ,当前位置$&#123;notification.metrics.pixels&#125;&quot;);</span><br><span class=\"line\">          &#125;else if(notification is ScrollEndNotification)&#123;</span><br><span class=\"line\">            print(&quot;结束滚动....&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: ListView.builder(</span><br><span class=\"line\">          controller: _scrollController,</span><br><span class=\"line\">          itemBuilder: (BuildContext ctx,int index)&#123;</span><br><span class=\"line\">            return ListTile(</span><br><span class=\"line\">              leading: Icon(Icons.people),</span><br><span class=\"line\">              title: Text(&quot;联系人$index&quot;),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemCount: 100,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: (_isShowFloatingButton ? FloatingActionButton(</span><br><span class=\"line\">          child: Icon(Icons.arrow_upward),</span><br><span class=\"line\">          onPressed: ()&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;滚动到顶部</span><br><span class=\"line\">            _scrollController.animateTo(0, duration: Duration(milliseconds:250), curve: Curves.easeIn</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ) : null),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一：ListView组件的使用\"><a href=\"#一：ListView组件的使用\" class=\"headerlink\" title=\"一：ListView组件的使用\"></a>一：ListView组件的使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;富文本&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView.separated(</span><br><span class=\"line\">        itemBuilder: (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">          return ListTile(</span><br><span class=\"line\">            title: Text(&quot;联系人$index&quot;,style: TextStyle(backgroundColor: Colors.blue),),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        separatorBuilder: (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">          return Divider(</span><br><span class=\"line\">            color: Colors.red,</span><br><span class=\"line\">            indent: 60,   &#x2F;&#x2F;前边的距离</span><br><span class=\"line\">            endIndent: 100,   &#x2F;&#x2F;后边的距离</span><br><span class=\"line\">            height: 5,       &#x2F;&#x2F;分割线所占的高度</span><br><span class=\"line\">            thickness: 10,    &#x2F;&#x2F;分割线的厚度，即高度</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        itemCount: 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody3 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView.builder(</span><br><span class=\"line\">        itemExtent: 80,   &#x2F;&#x2F;项的高度，或者宽度</span><br><span class=\"line\">&#x2F;&#x2F;        scrollDirection: Axis.horizontal,</span><br><span class=\"line\">&#x2F;&#x2F;        reverse: true,   &#x2F;&#x2F;列表数据反转</span><br><span class=\"line\">        itemCount: 100,</span><br><span class=\"line\">        itemBuilder: (BuildContext ctx, int index) &#123;</span><br><span class=\"line\">          return ListTile(</span><br><span class=\"line\">            leading: Icon(Icons.people),</span><br><span class=\"line\">            trailing: Icon(Icons.delete),</span><br><span class=\"line\">            title: Text(&quot;联系人 $index&quot;),</span><br><span class=\"line\">            subtitle: Text(&quot;电话号码 18811112222&quot;),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody2 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView(</span><br><span class=\"line\">      children: List.generate(100, (index)&#123;</span><br><span class=\"line\">        return Text(&quot;Hello world $index&quot;,style: TextStyle(fontSize: 30),);</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody1 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return ListView(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        Text(&quot;hello world 1&quot;),</span><br><span class=\"line\">        Text(&quot;hello world 2&quot;),</span><br><span class=\"line\">        Text(&quot;hello world 3&quot;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二：GridView的使用\"><a href=\"#二：GridView的使用\" class=\"headerlink\" title=\"二：GridView的使用\"></a>二：GridView的使用</h1><p>效果图：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_001.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Padding(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(horizontal:10),  &#x2F;&#x2F;对称间距，水平方向上间距10个点</span><br><span class=\"line\">      child: GridView.builder(</span><br><span class=\"line\">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">              crossAxisCount: 3,</span><br><span class=\"line\">              mainAxisSpacing: 10,</span><br><span class=\"line\">              crossAxisSpacing: 10</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          itemBuilder: (BuildContext ctx,int index)&#123;</span><br><span class=\"line\">            return Container(</span><br><span class=\"line\">              color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理： SliverGridDelegateWithMaxCrossAxisExtent(最大交叉轴)</span><br><span class=\"line\">class HYContentBody2 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GridView(</span><br><span class=\"line\">        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(</span><br><span class=\"line\">            maxCrossAxisExtent: 200,  &#x2F;&#x2F;交叉轴的数量</span><br><span class=\"line\">            mainAxisSpacing: 10, &#x2F;&#x2F;主轴上的间距</span><br><span class=\"line\">            crossAxisSpacing: 10,  &#x2F;&#x2F;交叉轴上的间距</span><br><span class=\"line\">            childAspectRatio: 0.8 &#x2F;&#x2F;宽高比</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        children: List.generate(100, (index)&#123;</span><br><span class=\"line\">          return Container(</span><br><span class=\"line\">            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理： SliverGridDelegateWithFixedCrossAxisCount (固定轴上数量)</span><br><span class=\"line\">class HYContentBody1 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GridView(</span><br><span class=\"line\">        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">            crossAxisCount: 3,  &#x2F;&#x2F;交叉轴的数量</span><br><span class=\"line\">            crossAxisSpacing: 10,  &#x2F;&#x2F;交叉轴上的间距</span><br><span class=\"line\">            mainAxisSpacing: 20,  &#x2F;&#x2F;主轴上的间距</span><br><span class=\"line\">            childAspectRatio:0.7  &#x2F;&#x2F;宽高比例</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        children: List.generate(100, (index)&#123;</span><br><span class=\"line\">          return Container(</span><br><span class=\"line\">            color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三，自定义滚动view-CustomScrollView\"><a href=\"#三，自定义滚动view-CustomScrollView\" class=\"headerlink\" title=\"三，自定义滚动view CustomScrollView\"></a>三，自定义滚动view CustomScrollView</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_002.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">&#x2F;&#x2F;      appBar: AppBar(</span><br><span class=\"line\">&#x2F;&#x2F;        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">&#x2F;&#x2F;      ),</span><br><span class=\"line\">      body: HYContentBody(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYContentBody extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return CustomScrollView(</span><br><span class=\"line\">      slivers: &lt;Widget&gt;[</span><br><span class=\"line\">        SliverAppBar(</span><br><span class=\"line\">&#x2F;&#x2F;          title: Text(&quot;这是title&quot;),</span><br><span class=\"line\">          expandedHeight: 200,</span><br><span class=\"line\">          flexibleSpace: FlexibleSpaceBar(</span><br><span class=\"line\">            title: Text(&quot;hello&quot;),</span><br><span class=\"line\">            background: Image.asset(&quot;assets&#x2F;images&#x2F;xingkong.jpeg&quot;,fit:BoxFit.fill),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        SliverGrid(</span><br><span class=\"line\">          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class=\"line\">              crossAxisCount: 4,</span><br><span class=\"line\">              mainAxisSpacing: 10,</span><br><span class=\"line\">              crossAxisSpacing: 10,</span><br><span class=\"line\">              childAspectRatio: 1.5</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          delegate: SliverChildBuilderDelegate(</span><br><span class=\"line\">                  (BuildContext ctx, int index)&#123;</span><br><span class=\"line\">                return Container(</span><br><span class=\"line\">                  color: Color.fromARGB(255, Random().nextInt(256), Random().nextInt(256), Random().nextInt(256)),</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              childCount: 8</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        SliverList(</span><br><span class=\"line\">          delegate: SliverChildBuilderDelegate(</span><br><span class=\"line\">                  (BuildContext ctx,int index) &#123;</span><br><span class=\"line\">                return ListTile(</span><br><span class=\"line\">                  title: Text(&quot;联系人 $index&quot;),</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              childCount: 20</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四：滚动监听\"><a href=\"#四：滚动监听\" class=\"headerlink\" title=\"四：滚动监听\"></a>四：滚动监听</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/12-%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/12_003.png\" alt=\"图1\"></p>\n<p>实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:ffi&#39;;</span><br><span class=\"line\">import &#39;dart:math&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      home: HYHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYHomePageState createState() &#x3D;&gt; _HYHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYHomePageState extends State&lt;HYHomePage&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ScrollController _scrollController &#x3D; new ScrollController(initialScrollOffset: 100);</span><br><span class=\"line\"></span><br><span class=\"line\">  bool _isShowFloatingButton &#x3D; false;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">&#x2F;&#x2F;      print(&quot;监听到滚动......当前滚动位置：$&#123;_scrollController.offset&#125;&quot;);</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        _isShowFloatingButton &#x3D; _scrollController.offset &gt; 800;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: NotificationListener(</span><br><span class=\"line\">        onNotification: (ScrollNotification notification)&#123;</span><br><span class=\"line\">          &#x2F;&#x2F;开始滚动的通知</span><br><span class=\"line\">          if(notification is ScrollStartNotification)&#123;</span><br><span class=\"line\">            print(&quot;开始滚动.....&quot;);</span><br><span class=\"line\">          &#125;else if(notification is ScrollUpdateNotification)&#123;</span><br><span class=\"line\">            print(&quot;正在滚动中.....总体位置：$&#123;notification.metrics.maxScrollExtent&#125; ,当前位置$&#123;notification.metrics.pixels&#125;&quot;);</span><br><span class=\"line\">          &#125;else if(notification is ScrollEndNotification)&#123;</span><br><span class=\"line\">            print(&quot;结束滚动....&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: ListView.builder(</span><br><span class=\"line\">          controller: _scrollController,</span><br><span class=\"line\">          itemBuilder: (BuildContext ctx,int index)&#123;</span><br><span class=\"line\">            return ListTile(</span><br><span class=\"line\">              leading: Icon(Icons.people),</span><br><span class=\"line\">              title: Text(&quot;联系人$index&quot;),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemCount: 100,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: (_isShowFloatingButton ? FloatingActionButton(</span><br><span class=\"line\">          child: Icon(Icons.arrow_upward),</span><br><span class=\"line\">          onPressed: ()&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;滚动到顶部</span><br><span class=\"line\">            _scrollController.animateTo(0, duration: Duration(milliseconds:250), curve: Curves.easeIn</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ) : null),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"13-Dart中的异步","toc":true,"date":"2020-09-18T14:12:12.000Z","_content":"\n\n# 一. Dart的异步模型\n### 1.1. Dart是单线程的\n\n##### 1.1.1. 程序中的耗时操作\n\n开发中的耗时操作：\n\n- 在开发中，我们经常会遇到一些耗时的操作需要完成，比如网络请求、文件读取等等；\n\n- 如果我们的主线程一直在等待这些耗时的操作完成，那么就会进行阻塞，无法响应其它事件，比如用户的点击；\n\n- 显然，我们不能这么干！！\n\n如何处理耗时的操作呢？\n\n针对如何处理耗时的操作，不同的语言有不同的处理方式。\n\n- 处理方式一： 多线程，比如Java、C++，我们普遍的做法是开启一个新的线程（Thread），在新的线程中完成这些异步的操作，再通过线程间通信的方式，将拿到的数据传递给主线程。\n\n- 处理方式二： 单线程+事件循环，比如JavaScript、Dart都是基于单线程加事件循环来完成耗时操作的处理。不过单线程如何能进行耗时的操作呢？！\n\n##### 1.1.2. 单线程的异步操作\n\n我之前碰到很多开发者都对单线程的异步操作充满了问号？？？\n\n![图1](13-Dart中的异步/13_001.png)\n\n其实它们并不冲突：\n\n- 因为我们的一个应用程序大部分时间都是处于空闲的状态的，并不是无限制的在和用户进行交互。\n- 比如等待用户点击、网络请求数据的返回、文件读写的IO操作，这些等待的行为并不会阻塞我们的线程；\n- 这是因为类似于网络请求、文件读写的IO，我们都可以基于非阻塞调用；\n\n**阻塞式调用和非阻塞式调用**\n\n如果想搞懂这个点，我们需要知道操作系统中的**阻塞式调用**和**非阻塞式调用**的概念。\n\n阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。\n\n- 阻塞式调用： 调用结果返回之前，当前线程会被挂起，调用线程只有在得到调用结果之后才会继续执行。\n- 非阻塞式调用： 调用执行之后，当前线程不会停止执行，只需要过一段时间来检查一下有没有结果返回即可。\n\n我们用一个生活中的例子来模拟：\n\n你中午饿了，需要点一份外卖，点外卖的动作就是我们的调用，拿到最后点的外卖就是我们要等待的结果。\n\n- 阻塞式调用： 点了外卖，不再做任何事情，就是在傻傻的等待，你的线程停止了任何其他的工作。\n- 非阻塞式调用： 点了外卖，继续做其他事情：继续工作、打把游戏，你的线程没有继续执行其他事情，只需要偶尔去看一下有没有人敲门，外卖有没有送到即可。\n\n而我们开发中的很多耗时操作，都可以基于这样的 非阻塞式调用：\n\n- 比如网络请求本身使用了Socket通信，而Socket本身提供了select模型，可以进行非阻塞方式的工作；\n- 比如文件读写的IO操作，我们可以使用操作系统提供的基于事件的回调机制；\n\n这些操作都不会阻塞我们单线程的继续执行，我们的线程在等待的过程中可以继续去做别的事情：喝杯咖啡、打把游戏，等真正有了响应，再去进行对应的处理即可。\n\n这时，我们可能有两个问题：\n\n- 问题一： 如果在多核CPU中，单线程是不是就没有充分利用CPU呢？这个问题，我会放在后面来讲解。\n- 问题二： 单线程是如何来处理网络通信、IO操作它们返回的结果呢？答案就是事件循环（Event Loop）。\n\n### 1.2. Dart事件循环\n\n##### 1.2.1. 什么是事件循环\n\n单线程模型中主要就是在维护着一个事件循环（Event Loop）。\n\n事件循环是什么呢？\n\n- 事实上事件循环并不复杂，它就是将需要处理的一系列事件（包括点击事件、IO事件、网络事件）放在一个事件队列（Event Queue）中。\n- 不断的从事件队列（Event Queue）中取出事件，并执行其对应需要执行的代码块，直到事件队列清空位置。\n\n我们来写一个事件循环的伪代码：\n\n![图1](13-Dart中的异步/13_002.png)\n\n当我们有一些事件时，比如点击事件、IO事件、网络事件时，它们就会被加入到eventLoop中，当发现事件队列不为空时发现，就会取出事件，并且执行。\n\n- 齿轮就是我们的事件循环，它会从队列中一次取出事件来执行。\n\n![图1](13-Dart中的异步/13_003.png)\n\n##### 1.2.2. 事件循环代码模拟\n\n这里我们来看一段伪代码，理解点击事件和网络请求的事件是如何被执行的：\n\n这是一段Flutter代码，很多东西大家可能不是特别理解，但是耐心阅读你会读懂我们在做什么。\n\n一个按钮RaisedButton，当发生点击时执行onPressed函数。\n\nonPressed函数中，我们发送了一个网络请求，请求成功后会执行then中的回调函数。\n\n![图1](13-Dart中的异步/13_004.png)\n\n这些代码是如何放在事件循环中执行呢？\n\n1、当用户发生点击的时候，onPressed回调函数被放入事件循环中执行，执行的过程中发送了一个网络请求。\n2、网络请求发出去后，该事件循环不会被阻塞，而是发现要执行的onPressed函数已经结束，会将它丢弃掉。\n3、网络请求成功后，会执行then中传入的回调函数，这也是一个事件，该事件被放入到事件循环中执行，执行完毕后，事件循环将其丢弃。\n\n尽管onPressed和then中的回调有一些差异，但是它们对于事件循环来说，都是告诉它：我有一段代码需要执行，快点帮我完成。\n\n# 二. Dart的异步操作\n\n![图1](13-Dart中的异步/13_005.png)\n\n### 2.1. 认识Future\n\n##### 2.1.1. 同步的网络请求\n\n我们先来看一个例子吧：\n\n- 在这个例子中，我使用getNetworkData来模拟了一个网络请求；\n- 该网络请求需要3秒钟的时间，之后返回数据；\n\n![图1](13-Dart中的异步/13_006.png)\n\n这段代码会运行怎么的结果呢？\n\n- getNetworkData会阻塞main函数的执行\n\n![图1](13-Dart中的异步/13_007.png)\n\n显然，上面的代码不是我们想要的执行效果，因为网络请求阻塞了main函数，那么意味着其后所有的代码都无法正常的继续执行。\n\n##### 2.1.2. 异步的网络请求\n我们来对我们上面的代码进行改进，代码如下：\n\n- 和刚才的代码唯一的区别在于我使用了Future对象来将耗时的操作放在了其中传入的函数中；\n- 稍后，我们会讲解它具体的一些API，我们就暂时知道我创建了一个Future实例即可；\n\n![图1](13-Dart中的异步/13_008.png)\n\n\n我们来看一下代码的运行结果：\n\n- 1、这一次的代码顺序执行，没有出现任何的阻塞现象；\n- 2、和之前直接打印结果不同，这次我们打印了一个Future实例；\n- 结论：我们将一个耗时的操作隔离了起来，这个操作不会再影响我们的主线程执行了。\n- 问题：我们如何去拿到最终的结果呢？\n\n![图1](13-Dart中的异步/13_009.png)\n\n获取Future得到的结果\n\n有了Future之后，如何去获取请求到的结果：通过.then的回调：\n\n![图1](13-Dart中的异步/13_010.png)\n\n上面代码的执行结果：\n\n![图1](13-Dart中的异步/13_011.png)\n\n**执行中出现异常**\n\n如果调用过程中出现了异常，拿不到结果，如何获取到异常的信息呢？\n\n![图1](13-Dart中的异步/13_012.png)\n\n上面代码的执行结果：\n\n![图1](13-Dart中的异步/13_013.png)\n\n##### 2.1.3. Future使用补充\n\n**补充一：上面案例的小结**\n我们通过一个案例来学习了一些Future的使用过程：\n\n- 1、创建一个Future（可能是我们创建的，也可能是调用内部API或者第三方API获取到的一个Future，总之你需要获取到一个Future实例，Future通常会对一些异步的操作进行封装）；\n- 2、通过.then(成功回调函数)的方式来监听Future内部执行完成时获取到的结果；\n- 3、通过.catchError(失败或异常回调函数)的方式来监听Future内部执行失败或者出现异常时的错误信息；\n\n**补充二：Future的两种状态**\n事实上Future在执行的整个过程中，我们通常把它划分成了两种状态：\n\n状态一：未完成状态（uncompleted）\n\n - 执行Future内部的操作时（在上面的案例中就是具体的网络请求过程，我们使用了延迟来模拟），我们称这个过程为未完成状态\n\n状态二：完成状态（completed）\n\n - 当Future内部的操作执行完成，通常会返回一个值，或者抛出一个异常。\n这两种情况，我们都称Future为完成状态。\n\nDart官网有对这两种状态解析，之所以贴出来是区别于Promise的三种状态\n\n![图1](13-Dart中的异步/13_014.png)\n\n**补充三：Future的链式调用**\n\n上面代码我们可以进行如下的改进：\n \n - 我们可以在then中继续返回值，会在下一个链式的then调用回调函数中拿到返回的结果\n\n![图1](13-Dart中的异步/13_015.png)\n\n\n打印结果：\n\n![图1](13-Dart中的异步/13_016.png)\n\n**补充四：Future其他API**\n\nFuture.value(value)\n\n - 直接获取一个完成的Future，该Future会直接调用then的回调函数\n\n![图1](13-Dart中的异步/13_017.png)\n\n打印结果如下：\n\n![图1](13-Dart中的异步/13_018.png)\n\n疑惑：为什么立即执行，但是哈哈哈是在最后打印的呢？\n\n - 这是因为Future中的then会作为新的任务会加入到事件队列中（Event Queue），加入之后你肯定需要排队执行了\n\n*Future.error(object)*\n\n - 直接获取一个完成的Future，但是是一个发生异常的Future，该Future会直接调用catchError的回调函数\n\n![图1](13-Dart中的异步/13_019.png)\n\n打印结果如下：\n\n![图1](13-Dart中的异步/13_020.png)\n\n*Future.delayed(时间, 回调函数)*\n\n - 在延迟一定时间时执行回调函数，执行完回调函数后会执行then的回调；\n - 之前的案例，我们也可以使用它来模拟，但是直接学习这个API会让大家更加疑惑；\n\n![图1](13-Dart中的异步/13_021.png)\n\n### 2.2. await、async\n\n##### 2.2.1. 理论概念理解\n\n如果你已经完全搞懂了Future，那么学习await、async应该没有什么难度。\n\nawait、async是什么呢？\n\n- 它们是Dart中的关键字（你这不是废话吗？废话也还是要强调的，万一你用它做变量名呢，无辜脸。）\n- 它们可以让我们用同步的代码格式，去实现异步的调用过程。\n- 并且，通常一个async的函数会返回一个Future（别着急，马上就看到代码了）。\n\n我们已经知道，Future可以做到不阻塞我们的线程，让线程继续执行，并且在完成某个操作时改变自己的状态，并且回调then或者errorCatch回调。\n\n如何生成一个Future呢？\n\n - 1、通过我们前面学习的Future构造函数，或者后面学习的Future其他API都可以。\n - 2、还有一种就是通过async的函数。\n\n##### 2.2.2. 案例代码演练\n\nTalk is cheap. Show me the code.\n\n我们来对之前的Future异步处理代码进行改造，改成await、async的形式。\n\n我们知道，如果直接这样写代码，代码是不能正常执行的：\n\n - 因为Future.delayed返回的是一个Future对象，我们不能把它看成同步的返回数据：\"network data\"去使用\n - 也就是我们不能把这个异步的代码当做同步一样去使用！\n\n![图1](13-Dart中的异步/13_022.png)\n\n现在我使用await修改下面这句代码：\n\n - 你会发现，我在Future.delayed函数前加了一个await。\n - 一旦有了这个关键字，那么这个操作就会等待Future.delayed的执行完毕，并且等待它的结果。\n\n![图1](13-Dart中的异步/13_023.png)\n\n修改后执行代码，会看到如下的错误：\n\n - 错误非常明显：await关键字必须存在于async函数中。\n - 所以我们需要将getNetworkData函数定义成async函数。\n\n![图1](13-Dart中的异步/13_024.png)\n\n继续修改代码如下：\n\n也非常简单，只需要在函数的()后面加上一个async关键字就可以了\n\n![图1](13-Dart中的异步/13_025.png)\n\n运行代码，依然报错（心想：你妹啊）：\n\n - 错误非常明显：使用async标记的函数，必须返回一个Future对象。\n - 所以我们需要继续修改代码，将返回值写成一个Future。\n\n继续修改代码如下：\n\n![图1](13-Dart中的异步/13_026.png)\n\n这段代码应该是我们理想当中执行的代码了\n\n - 我们现在可以像同步代码一样去使用Future异步返回的结果；\n - 等待拿到结果之后和其他数据进行拼接，然后一起返回；\n - 返回的时候并不需要包装一个Future，直接返回即可，但是返回值会默认被包装在一个Future中；\n\n### 2.3. 读取json案例\n\n我这里给出了一个在Flutter项目中，读取一个本地的json文件，并且转换成模型对象，返回出去的案例；\n\n这个案例作为大家学习前面Future和await、async的一个参考，我并不打算展开来讲，因为需要用到Flutter的相关知识；\n\n后面我会在后面的案例中再次讲解它在Flutter中我使用的过程中；\n\n读取json案例代码（了解一下即可）\n\n```\nimport 'package:flutter/services.dart' show rootBundle;\nimport 'dart:convert';\nimport 'dart:async';\n\nmain(List<String> args) {\n  getAnchors().then((anchors) {\n    print(anchors);\n  });\n}\n\nclass Anchor {\n  String nickname;\n  String roomName;\n  String imageUrl;\n\n  Anchor({\n    this.nickname,\n    this.roomName,\n    this.imageUrl\n  });\n\n  Anchor.withMap(Map<String, dynamic> parsedMap) {\n    this.nickname = parsedMap[\"nickname\"];\n    this.roomName = parsedMap[\"roomName\"];\n    this.imageUrl = parsedMap[\"roomSrc\"];\n  }\n}\n\nFuture<List<Anchor>> getAnchors() async {\n  // 1.读取json文件\n  String jsonString = await rootBundle.loadString(\"assets/yz.json\");\n\n  // 2.转成List或Map类型\n  final jsonResult = json.decode(jsonString);\n\n  // 3.遍历List，并且转成Anchor对象放到另一个List中\n  List<Anchor> anchors = new List();\n  for (Map<String, dynamic> map in jsonResult) {\n    anchors.add(Anchor.withMap(map));\n  }\n  return anchors;\n}\n```\n\n\n# 三. Dart的异步补充\n\n### 3.1. 任务执行顺序\n\n##### 3.1.1. 认识微任务队列\n\n在前面学习学习中，我们知道Dart中有一个事件循环（Event Loop）来执行我们的代码，里面存在一个事件队列（Event Queue），事件循环不断从事件队列中取出事件执行。\n\n但是如果我们严格来划分的话，在Dart中还存在另一个队列：微任务队列（Microtask Queue）。\n\n - 微任务队列的优先级要高于事件队列；\n - 也就是说事件循环都是优先执行微任务队列中的任务，再执行 事件队列 中的任务；\n\n那么在Flutter开发中，哪些是放在事件队列，哪些是放在微任务队列呢？\n\n - 所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘制事件等；\n - 而微任务通常来源于Dart内部，并且微任务非常少。这是因为如果微任务非常多，就会造成事件队列排不上队，会阻塞任务队列的执行（比如用户点击没有反应的情况）；\n\n说到这里，你可能已经有点凌乱了，在Dart的单线程中，代码到底是怎样执行的呢？\n\n - 1、Dart的入口是main函数，所以main函数中的代码会优先执行；\n - 2、main函数执行完后，会启动一个事件循环（Event Loop）就会启动，启动后开始执行队列中的任务；\n - 3、首先，会按照先进先出的顺序，执行 微任务队列（Microtask Queue）中的所有任务；\n - 4、其次，会按照先进先出的顺序，执行 事件队列（Event Queue）中的所有任务；\n\n![图1](13-Dart中的异步/13_027.png)\n\n##### 3.1.2. 如何创建微任务\n\n在开发中，我们可以通过dart中async下的scheduleMicrotask来创建一个微任务：\n\n![图1](13-Dart中的异步/13_028.png)\n\n在开发中，如果我们有一个任务不希望它放在Event Queue中依次排队，那么就可以创建一个微任务了。\n\nFuture的代码是加入到事件队列还是微任务队列呢？\n\nFuture中通常有两个函数执行体：\n\n - Future构造函数传入的函数体\n - then的函数体（catchError等同看待）\n\n那么它们是加入到什么队列中的呢？\n\nFuture构造函数传入的函数体放在事件队列中\n\nthen的函数体要分成三种情况：\n\n - 情况一：Future没有执行完成（有任务需要执行），那么then会直接被添加到Future的函数执行体后；\n - 情况二：如果Future执行完后就then，该then的函数体被放到如微任务队列，当前Future执行完后执行微任务队列；\n - 情况三：如果Future世链式调用，意味着then未执行完，下一个then不会执行；\n\n```\n// future_1加入到eventqueue中，紧随其后then_1被加入到eventqueue中\nFuture(() => print(\"future_1\")).then((_) => print(\"then_1\"));\n\n// Future没有函数执行体，then_2被加入到microtaskqueue中\nFuture(() => null).then((_) => print(\"then_2\"));\n\n// future_3、then_3_a、then_3_b依次加入到eventqueue中\nFuture(() => print(\"future_3\")).then((_) => print(\"then_3_a\")).then((_) => print(\"then_3_b\"));\n```\n\n##### 3.1.3. 代码执行顺序\n\n我们根据前面的规则来学习一个极的代码执行顺序案例：\n\n![图1](13-Dart中的异步/13_029.png)\n\n\n![图1](13-Dart中的异步/13_030.png)\n\n代码分析：\n\n - 1、main函数先执行，所以main start和main end先执行，没有任何问题；\n - 2、main函数执行过程中，会将一些任务分别加入到EventQueue和MicrotaskQueue中；\n - 3、task7通过scheduleMicrotask函数调用，所以它被最早加入到MicrotaskQueue，会被先执行；\n - 4、然后开始执行EventQueue，task1被添加到EventQueue中被执行；\n - 5、通过final future = Future(() => null);创建的future的then被添加到微任务中，微任务直接被优先执行，所以会执行task6；\n - 6、一次在EventQueue中添加task2、task3、task5被执行；\n - 7、task3的打印执行完后，调用scheduleMicrotask，那么在执行完这次的EventQueue后会执行，所以在task5后执行task4（注意：scheduleMicrotask的调用是作为task3的一部分代码，所以task4是要在task5之后执行的）\n - 8、task8、task9、task10一次添加到EventQueue被执行；\n\n事实上，上面的代码执行顺序有可能出现在面试中，我们开发中通常不会出现这种复杂的嵌套，并且需要完全搞清楚它的执行顺序；\n\n但是，了解上面的代码执行顺序，会让你对EventQueue和microtaskQueue有更加深刻的理解。\n\n### 3.2. 多核CPU的利用\n\n##### 3.2.1. Isolate的理解\n\n在Dart中，有一个Isolate的概念，它是什么呢？\n\n- 我们已经知道Dart是单线程的，这个线程有自己可以访问的内存空间以及需要运行的事件循环；\n- 我们可以将这个空间系统称之为是一个Isolate；\n- 比如Flutter中就有一个Root Isolate，负责运行Flutter的代码，比如UI渲染、用户交互等等；\n\n在 Isolate 中，资源隔离做得非常好，每个 Isolate 都有自己的 Event Loop 与 Queue，\n\n- Isolate 之间不共享任何资源，只能依靠消息机制通信，因此也就没有资源抢占问题。\n\n但是，如果只有一个Isolate，那么意味着我们只能永远利用一个线程，这对于多核CPU来说，是一种资源的浪费。\n\n如果在开发中，我们有非常多耗时的计算，完全可以自己创建Isolate，在独立的Isolate中完成想要的计算操作。\n\n**如何创建Isolate呢？**\n\n创建Isolate是比较简单的，我们通过Isolate.spawn就可以创建了：\n\n![图1](13-Dart中的异步/13_031.png)\n\n##### 3.2.2. Isolate通信机制\n\n但是在真实开发中，我们不会只是简单的开启一个新的Isolate，而不关心它的运行结果：\n\n - 我们需要新的Isolate进行计算，并且将计算结果告知Main Isolate（也就是默认开启的Isolate）；\n - Isolate 通过发送管道（SendPort）实现消息通信机制；\n - 我们可以在启动并发Isolate时将Main Isolate的发送管道作为参数传递给它；\n - 并发在执行完毕时，可以利用这个管道给Main Isolate发送消息；\n\n![图1](13-Dart中的异步/13_032.png)\n\n但是我们上面的通信变成了单向通信，如果需要双向通信呢？\n\n- 事实上双向通信的代码会比较麻烦；\n- Flutter提供了支持并发计算的compute函数，它内部封装了Isolate的创建和双向通信；\n- 利用它我们可以充分利用多核心CPU，并且使用起来也非常简单；\n\n注意：下面的代码不是dart的API，而是Flutter的API，所以只有在Flutter项目中才能运行\n\n\n![图1](13-Dart中的异步/13_033.png)\n\n","source":"_posts/flutter/flutter框架一/13-Dart中的异步.md","raw":"---\ntitle: 13-Dart中的异步\ntoc: true\ndate: 2020-09-18 22:12:12\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. Dart的异步模型\n### 1.1. Dart是单线程的\n\n##### 1.1.1. 程序中的耗时操作\n\n开发中的耗时操作：\n\n- 在开发中，我们经常会遇到一些耗时的操作需要完成，比如网络请求、文件读取等等；\n\n- 如果我们的主线程一直在等待这些耗时的操作完成，那么就会进行阻塞，无法响应其它事件，比如用户的点击；\n\n- 显然，我们不能这么干！！\n\n如何处理耗时的操作呢？\n\n针对如何处理耗时的操作，不同的语言有不同的处理方式。\n\n- 处理方式一： 多线程，比如Java、C++，我们普遍的做法是开启一个新的线程（Thread），在新的线程中完成这些异步的操作，再通过线程间通信的方式，将拿到的数据传递给主线程。\n\n- 处理方式二： 单线程+事件循环，比如JavaScript、Dart都是基于单线程加事件循环来完成耗时操作的处理。不过单线程如何能进行耗时的操作呢？！\n\n##### 1.1.2. 单线程的异步操作\n\n我之前碰到很多开发者都对单线程的异步操作充满了问号？？？\n\n![图1](13-Dart中的异步/13_001.png)\n\n其实它们并不冲突：\n\n- 因为我们的一个应用程序大部分时间都是处于空闲的状态的，并不是无限制的在和用户进行交互。\n- 比如等待用户点击、网络请求数据的返回、文件读写的IO操作，这些等待的行为并不会阻塞我们的线程；\n- 这是因为类似于网络请求、文件读写的IO，我们都可以基于非阻塞调用；\n\n**阻塞式调用和非阻塞式调用**\n\n如果想搞懂这个点，我们需要知道操作系统中的**阻塞式调用**和**非阻塞式调用**的概念。\n\n阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。\n\n- 阻塞式调用： 调用结果返回之前，当前线程会被挂起，调用线程只有在得到调用结果之后才会继续执行。\n- 非阻塞式调用： 调用执行之后，当前线程不会停止执行，只需要过一段时间来检查一下有没有结果返回即可。\n\n我们用一个生活中的例子来模拟：\n\n你中午饿了，需要点一份外卖，点外卖的动作就是我们的调用，拿到最后点的外卖就是我们要等待的结果。\n\n- 阻塞式调用： 点了外卖，不再做任何事情，就是在傻傻的等待，你的线程停止了任何其他的工作。\n- 非阻塞式调用： 点了外卖，继续做其他事情：继续工作、打把游戏，你的线程没有继续执行其他事情，只需要偶尔去看一下有没有人敲门，外卖有没有送到即可。\n\n而我们开发中的很多耗时操作，都可以基于这样的 非阻塞式调用：\n\n- 比如网络请求本身使用了Socket通信，而Socket本身提供了select模型，可以进行非阻塞方式的工作；\n- 比如文件读写的IO操作，我们可以使用操作系统提供的基于事件的回调机制；\n\n这些操作都不会阻塞我们单线程的继续执行，我们的线程在等待的过程中可以继续去做别的事情：喝杯咖啡、打把游戏，等真正有了响应，再去进行对应的处理即可。\n\n这时，我们可能有两个问题：\n\n- 问题一： 如果在多核CPU中，单线程是不是就没有充分利用CPU呢？这个问题，我会放在后面来讲解。\n- 问题二： 单线程是如何来处理网络通信、IO操作它们返回的结果呢？答案就是事件循环（Event Loop）。\n\n### 1.2. Dart事件循环\n\n##### 1.2.1. 什么是事件循环\n\n单线程模型中主要就是在维护着一个事件循环（Event Loop）。\n\n事件循环是什么呢？\n\n- 事实上事件循环并不复杂，它就是将需要处理的一系列事件（包括点击事件、IO事件、网络事件）放在一个事件队列（Event Queue）中。\n- 不断的从事件队列（Event Queue）中取出事件，并执行其对应需要执行的代码块，直到事件队列清空位置。\n\n我们来写一个事件循环的伪代码：\n\n![图1](13-Dart中的异步/13_002.png)\n\n当我们有一些事件时，比如点击事件、IO事件、网络事件时，它们就会被加入到eventLoop中，当发现事件队列不为空时发现，就会取出事件，并且执行。\n\n- 齿轮就是我们的事件循环，它会从队列中一次取出事件来执行。\n\n![图1](13-Dart中的异步/13_003.png)\n\n##### 1.2.2. 事件循环代码模拟\n\n这里我们来看一段伪代码，理解点击事件和网络请求的事件是如何被执行的：\n\n这是一段Flutter代码，很多东西大家可能不是特别理解，但是耐心阅读你会读懂我们在做什么。\n\n一个按钮RaisedButton，当发生点击时执行onPressed函数。\n\nonPressed函数中，我们发送了一个网络请求，请求成功后会执行then中的回调函数。\n\n![图1](13-Dart中的异步/13_004.png)\n\n这些代码是如何放在事件循环中执行呢？\n\n1、当用户发生点击的时候，onPressed回调函数被放入事件循环中执行，执行的过程中发送了一个网络请求。\n2、网络请求发出去后，该事件循环不会被阻塞，而是发现要执行的onPressed函数已经结束，会将它丢弃掉。\n3、网络请求成功后，会执行then中传入的回调函数，这也是一个事件，该事件被放入到事件循环中执行，执行完毕后，事件循环将其丢弃。\n\n尽管onPressed和then中的回调有一些差异，但是它们对于事件循环来说，都是告诉它：我有一段代码需要执行，快点帮我完成。\n\n# 二. Dart的异步操作\n\n![图1](13-Dart中的异步/13_005.png)\n\n### 2.1. 认识Future\n\n##### 2.1.1. 同步的网络请求\n\n我们先来看一个例子吧：\n\n- 在这个例子中，我使用getNetworkData来模拟了一个网络请求；\n- 该网络请求需要3秒钟的时间，之后返回数据；\n\n![图1](13-Dart中的异步/13_006.png)\n\n这段代码会运行怎么的结果呢？\n\n- getNetworkData会阻塞main函数的执行\n\n![图1](13-Dart中的异步/13_007.png)\n\n显然，上面的代码不是我们想要的执行效果，因为网络请求阻塞了main函数，那么意味着其后所有的代码都无法正常的继续执行。\n\n##### 2.1.2. 异步的网络请求\n我们来对我们上面的代码进行改进，代码如下：\n\n- 和刚才的代码唯一的区别在于我使用了Future对象来将耗时的操作放在了其中传入的函数中；\n- 稍后，我们会讲解它具体的一些API，我们就暂时知道我创建了一个Future实例即可；\n\n![图1](13-Dart中的异步/13_008.png)\n\n\n我们来看一下代码的运行结果：\n\n- 1、这一次的代码顺序执行，没有出现任何的阻塞现象；\n- 2、和之前直接打印结果不同，这次我们打印了一个Future实例；\n- 结论：我们将一个耗时的操作隔离了起来，这个操作不会再影响我们的主线程执行了。\n- 问题：我们如何去拿到最终的结果呢？\n\n![图1](13-Dart中的异步/13_009.png)\n\n获取Future得到的结果\n\n有了Future之后，如何去获取请求到的结果：通过.then的回调：\n\n![图1](13-Dart中的异步/13_010.png)\n\n上面代码的执行结果：\n\n![图1](13-Dart中的异步/13_011.png)\n\n**执行中出现异常**\n\n如果调用过程中出现了异常，拿不到结果，如何获取到异常的信息呢？\n\n![图1](13-Dart中的异步/13_012.png)\n\n上面代码的执行结果：\n\n![图1](13-Dart中的异步/13_013.png)\n\n##### 2.1.3. Future使用补充\n\n**补充一：上面案例的小结**\n我们通过一个案例来学习了一些Future的使用过程：\n\n- 1、创建一个Future（可能是我们创建的，也可能是调用内部API或者第三方API获取到的一个Future，总之你需要获取到一个Future实例，Future通常会对一些异步的操作进行封装）；\n- 2、通过.then(成功回调函数)的方式来监听Future内部执行完成时获取到的结果；\n- 3、通过.catchError(失败或异常回调函数)的方式来监听Future内部执行失败或者出现异常时的错误信息；\n\n**补充二：Future的两种状态**\n事实上Future在执行的整个过程中，我们通常把它划分成了两种状态：\n\n状态一：未完成状态（uncompleted）\n\n - 执行Future内部的操作时（在上面的案例中就是具体的网络请求过程，我们使用了延迟来模拟），我们称这个过程为未完成状态\n\n状态二：完成状态（completed）\n\n - 当Future内部的操作执行完成，通常会返回一个值，或者抛出一个异常。\n这两种情况，我们都称Future为完成状态。\n\nDart官网有对这两种状态解析，之所以贴出来是区别于Promise的三种状态\n\n![图1](13-Dart中的异步/13_014.png)\n\n**补充三：Future的链式调用**\n\n上面代码我们可以进行如下的改进：\n \n - 我们可以在then中继续返回值，会在下一个链式的then调用回调函数中拿到返回的结果\n\n![图1](13-Dart中的异步/13_015.png)\n\n\n打印结果：\n\n![图1](13-Dart中的异步/13_016.png)\n\n**补充四：Future其他API**\n\nFuture.value(value)\n\n - 直接获取一个完成的Future，该Future会直接调用then的回调函数\n\n![图1](13-Dart中的异步/13_017.png)\n\n打印结果如下：\n\n![图1](13-Dart中的异步/13_018.png)\n\n疑惑：为什么立即执行，但是哈哈哈是在最后打印的呢？\n\n - 这是因为Future中的then会作为新的任务会加入到事件队列中（Event Queue），加入之后你肯定需要排队执行了\n\n*Future.error(object)*\n\n - 直接获取一个完成的Future，但是是一个发生异常的Future，该Future会直接调用catchError的回调函数\n\n![图1](13-Dart中的异步/13_019.png)\n\n打印结果如下：\n\n![图1](13-Dart中的异步/13_020.png)\n\n*Future.delayed(时间, 回调函数)*\n\n - 在延迟一定时间时执行回调函数，执行完回调函数后会执行then的回调；\n - 之前的案例，我们也可以使用它来模拟，但是直接学习这个API会让大家更加疑惑；\n\n![图1](13-Dart中的异步/13_021.png)\n\n### 2.2. await、async\n\n##### 2.2.1. 理论概念理解\n\n如果你已经完全搞懂了Future，那么学习await、async应该没有什么难度。\n\nawait、async是什么呢？\n\n- 它们是Dart中的关键字（你这不是废话吗？废话也还是要强调的，万一你用它做变量名呢，无辜脸。）\n- 它们可以让我们用同步的代码格式，去实现异步的调用过程。\n- 并且，通常一个async的函数会返回一个Future（别着急，马上就看到代码了）。\n\n我们已经知道，Future可以做到不阻塞我们的线程，让线程继续执行，并且在完成某个操作时改变自己的状态，并且回调then或者errorCatch回调。\n\n如何生成一个Future呢？\n\n - 1、通过我们前面学习的Future构造函数，或者后面学习的Future其他API都可以。\n - 2、还有一种就是通过async的函数。\n\n##### 2.2.2. 案例代码演练\n\nTalk is cheap. Show me the code.\n\n我们来对之前的Future异步处理代码进行改造，改成await、async的形式。\n\n我们知道，如果直接这样写代码，代码是不能正常执行的：\n\n - 因为Future.delayed返回的是一个Future对象，我们不能把它看成同步的返回数据：\"network data\"去使用\n - 也就是我们不能把这个异步的代码当做同步一样去使用！\n\n![图1](13-Dart中的异步/13_022.png)\n\n现在我使用await修改下面这句代码：\n\n - 你会发现，我在Future.delayed函数前加了一个await。\n - 一旦有了这个关键字，那么这个操作就会等待Future.delayed的执行完毕，并且等待它的结果。\n\n![图1](13-Dart中的异步/13_023.png)\n\n修改后执行代码，会看到如下的错误：\n\n - 错误非常明显：await关键字必须存在于async函数中。\n - 所以我们需要将getNetworkData函数定义成async函数。\n\n![图1](13-Dart中的异步/13_024.png)\n\n继续修改代码如下：\n\n也非常简单，只需要在函数的()后面加上一个async关键字就可以了\n\n![图1](13-Dart中的异步/13_025.png)\n\n运行代码，依然报错（心想：你妹啊）：\n\n - 错误非常明显：使用async标记的函数，必须返回一个Future对象。\n - 所以我们需要继续修改代码，将返回值写成一个Future。\n\n继续修改代码如下：\n\n![图1](13-Dart中的异步/13_026.png)\n\n这段代码应该是我们理想当中执行的代码了\n\n - 我们现在可以像同步代码一样去使用Future异步返回的结果；\n - 等待拿到结果之后和其他数据进行拼接，然后一起返回；\n - 返回的时候并不需要包装一个Future，直接返回即可，但是返回值会默认被包装在一个Future中；\n\n### 2.3. 读取json案例\n\n我这里给出了一个在Flutter项目中，读取一个本地的json文件，并且转换成模型对象，返回出去的案例；\n\n这个案例作为大家学习前面Future和await、async的一个参考，我并不打算展开来讲，因为需要用到Flutter的相关知识；\n\n后面我会在后面的案例中再次讲解它在Flutter中我使用的过程中；\n\n读取json案例代码（了解一下即可）\n\n```\nimport 'package:flutter/services.dart' show rootBundle;\nimport 'dart:convert';\nimport 'dart:async';\n\nmain(List<String> args) {\n  getAnchors().then((anchors) {\n    print(anchors);\n  });\n}\n\nclass Anchor {\n  String nickname;\n  String roomName;\n  String imageUrl;\n\n  Anchor({\n    this.nickname,\n    this.roomName,\n    this.imageUrl\n  });\n\n  Anchor.withMap(Map<String, dynamic> parsedMap) {\n    this.nickname = parsedMap[\"nickname\"];\n    this.roomName = parsedMap[\"roomName\"];\n    this.imageUrl = parsedMap[\"roomSrc\"];\n  }\n}\n\nFuture<List<Anchor>> getAnchors() async {\n  // 1.读取json文件\n  String jsonString = await rootBundle.loadString(\"assets/yz.json\");\n\n  // 2.转成List或Map类型\n  final jsonResult = json.decode(jsonString);\n\n  // 3.遍历List，并且转成Anchor对象放到另一个List中\n  List<Anchor> anchors = new List();\n  for (Map<String, dynamic> map in jsonResult) {\n    anchors.add(Anchor.withMap(map));\n  }\n  return anchors;\n}\n```\n\n\n# 三. Dart的异步补充\n\n### 3.1. 任务执行顺序\n\n##### 3.1.1. 认识微任务队列\n\n在前面学习学习中，我们知道Dart中有一个事件循环（Event Loop）来执行我们的代码，里面存在一个事件队列（Event Queue），事件循环不断从事件队列中取出事件执行。\n\n但是如果我们严格来划分的话，在Dart中还存在另一个队列：微任务队列（Microtask Queue）。\n\n - 微任务队列的优先级要高于事件队列；\n - 也就是说事件循环都是优先执行微任务队列中的任务，再执行 事件队列 中的任务；\n\n那么在Flutter开发中，哪些是放在事件队列，哪些是放在微任务队列呢？\n\n - 所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘制事件等；\n - 而微任务通常来源于Dart内部，并且微任务非常少。这是因为如果微任务非常多，就会造成事件队列排不上队，会阻塞任务队列的执行（比如用户点击没有反应的情况）；\n\n说到这里，你可能已经有点凌乱了，在Dart的单线程中，代码到底是怎样执行的呢？\n\n - 1、Dart的入口是main函数，所以main函数中的代码会优先执行；\n - 2、main函数执行完后，会启动一个事件循环（Event Loop）就会启动，启动后开始执行队列中的任务；\n - 3、首先，会按照先进先出的顺序，执行 微任务队列（Microtask Queue）中的所有任务；\n - 4、其次，会按照先进先出的顺序，执行 事件队列（Event Queue）中的所有任务；\n\n![图1](13-Dart中的异步/13_027.png)\n\n##### 3.1.2. 如何创建微任务\n\n在开发中，我们可以通过dart中async下的scheduleMicrotask来创建一个微任务：\n\n![图1](13-Dart中的异步/13_028.png)\n\n在开发中，如果我们有一个任务不希望它放在Event Queue中依次排队，那么就可以创建一个微任务了。\n\nFuture的代码是加入到事件队列还是微任务队列呢？\n\nFuture中通常有两个函数执行体：\n\n - Future构造函数传入的函数体\n - then的函数体（catchError等同看待）\n\n那么它们是加入到什么队列中的呢？\n\nFuture构造函数传入的函数体放在事件队列中\n\nthen的函数体要分成三种情况：\n\n - 情况一：Future没有执行完成（有任务需要执行），那么then会直接被添加到Future的函数执行体后；\n - 情况二：如果Future执行完后就then，该then的函数体被放到如微任务队列，当前Future执行完后执行微任务队列；\n - 情况三：如果Future世链式调用，意味着then未执行完，下一个then不会执行；\n\n```\n// future_1加入到eventqueue中，紧随其后then_1被加入到eventqueue中\nFuture(() => print(\"future_1\")).then((_) => print(\"then_1\"));\n\n// Future没有函数执行体，then_2被加入到microtaskqueue中\nFuture(() => null).then((_) => print(\"then_2\"));\n\n// future_3、then_3_a、then_3_b依次加入到eventqueue中\nFuture(() => print(\"future_3\")).then((_) => print(\"then_3_a\")).then((_) => print(\"then_3_b\"));\n```\n\n##### 3.1.3. 代码执行顺序\n\n我们根据前面的规则来学习一个极的代码执行顺序案例：\n\n![图1](13-Dart中的异步/13_029.png)\n\n\n![图1](13-Dart中的异步/13_030.png)\n\n代码分析：\n\n - 1、main函数先执行，所以main start和main end先执行，没有任何问题；\n - 2、main函数执行过程中，会将一些任务分别加入到EventQueue和MicrotaskQueue中；\n - 3、task7通过scheduleMicrotask函数调用，所以它被最早加入到MicrotaskQueue，会被先执行；\n - 4、然后开始执行EventQueue，task1被添加到EventQueue中被执行；\n - 5、通过final future = Future(() => null);创建的future的then被添加到微任务中，微任务直接被优先执行，所以会执行task6；\n - 6、一次在EventQueue中添加task2、task3、task5被执行；\n - 7、task3的打印执行完后，调用scheduleMicrotask，那么在执行完这次的EventQueue后会执行，所以在task5后执行task4（注意：scheduleMicrotask的调用是作为task3的一部分代码，所以task4是要在task5之后执行的）\n - 8、task8、task9、task10一次添加到EventQueue被执行；\n\n事实上，上面的代码执行顺序有可能出现在面试中，我们开发中通常不会出现这种复杂的嵌套，并且需要完全搞清楚它的执行顺序；\n\n但是，了解上面的代码执行顺序，会让你对EventQueue和microtaskQueue有更加深刻的理解。\n\n### 3.2. 多核CPU的利用\n\n##### 3.2.1. Isolate的理解\n\n在Dart中，有一个Isolate的概念，它是什么呢？\n\n- 我们已经知道Dart是单线程的，这个线程有自己可以访问的内存空间以及需要运行的事件循环；\n- 我们可以将这个空间系统称之为是一个Isolate；\n- 比如Flutter中就有一个Root Isolate，负责运行Flutter的代码，比如UI渲染、用户交互等等；\n\n在 Isolate 中，资源隔离做得非常好，每个 Isolate 都有自己的 Event Loop 与 Queue，\n\n- Isolate 之间不共享任何资源，只能依靠消息机制通信，因此也就没有资源抢占问题。\n\n但是，如果只有一个Isolate，那么意味着我们只能永远利用一个线程，这对于多核CPU来说，是一种资源的浪费。\n\n如果在开发中，我们有非常多耗时的计算，完全可以自己创建Isolate，在独立的Isolate中完成想要的计算操作。\n\n**如何创建Isolate呢？**\n\n创建Isolate是比较简单的，我们通过Isolate.spawn就可以创建了：\n\n![图1](13-Dart中的异步/13_031.png)\n\n##### 3.2.2. Isolate通信机制\n\n但是在真实开发中，我们不会只是简单的开启一个新的Isolate，而不关心它的运行结果：\n\n - 我们需要新的Isolate进行计算，并且将计算结果告知Main Isolate（也就是默认开启的Isolate）；\n - Isolate 通过发送管道（SendPort）实现消息通信机制；\n - 我们可以在启动并发Isolate时将Main Isolate的发送管道作为参数传递给它；\n - 并发在执行完毕时，可以利用这个管道给Main Isolate发送消息；\n\n![图1](13-Dart中的异步/13_032.png)\n\n但是我们上面的通信变成了单向通信，如果需要双向通信呢？\n\n- 事实上双向通信的代码会比较麻烦；\n- Flutter提供了支持并发计算的compute函数，它内部封装了Isolate的创建和双向通信；\n- 利用它我们可以充分利用多核心CPU，并且使用起来也非常简单；\n\n注意：下面的代码不是dart的API，而是Flutter的API，所以只有在Flutter项目中才能运行\n\n\n![图1](13-Dart中的异步/13_033.png)\n\n","slug":"flutter/flutter框架一/13-Dart中的异步","published":1,"updated":"2020-09-24T02:03:40.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengi002bu3s6egnadjoo","content":"<h1 id=\"一-Dart的异步模型\"><a href=\"#一-Dart的异步模型\" class=\"headerlink\" title=\"一. Dart的异步模型\"></a>一. Dart的异步模型</h1><h3 id=\"1-1-Dart是单线程的\"><a href=\"#1-1-Dart是单线程的\" class=\"headerlink\" title=\"1.1. Dart是单线程的\"></a>1.1. Dart是单线程的</h3><h5 id=\"1-1-1-程序中的耗时操作\"><a href=\"#1-1-1-程序中的耗时操作\" class=\"headerlink\" title=\"1.1.1. 程序中的耗时操作\"></a>1.1.1. 程序中的耗时操作</h5><p>开发中的耗时操作：</p>\n<ul>\n<li><p>在开发中，我们经常会遇到一些耗时的操作需要完成，比如网络请求、文件读取等等；</p>\n</li>\n<li><p>如果我们的主线程一直在等待这些耗时的操作完成，那么就会进行阻塞，无法响应其它事件，比如用户的点击；</p>\n</li>\n<li><p>显然，我们不能这么干！！</p>\n</li>\n</ul>\n<p>如何处理耗时的操作呢？</p>\n<p>针对如何处理耗时的操作，不同的语言有不同的处理方式。</p>\n<ul>\n<li><p>处理方式一： 多线程，比如Java、C++，我们普遍的做法是开启一个新的线程（Thread），在新的线程中完成这些异步的操作，再通过线程间通信的方式，将拿到的数据传递给主线程。</p>\n</li>\n<li><p>处理方式二： 单线程+事件循环，比如JavaScript、Dart都是基于单线程加事件循环来完成耗时操作的处理。不过单线程如何能进行耗时的操作呢？！</p>\n</li>\n</ul>\n<h5 id=\"1-1-2-单线程的异步操作\"><a href=\"#1-1-2-单线程的异步操作\" class=\"headerlink\" title=\"1.1.2. 单线程的异步操作\"></a>1.1.2. 单线程的异步操作</h5><p>我之前碰到很多开发者都对单线程的异步操作充满了问号？？？</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_001.png\" alt=\"图1\"></p>\n<p>其实它们并不冲突：</p>\n<ul>\n<li>因为我们的一个应用程序大部分时间都是处于空闲的状态的，并不是无限制的在和用户进行交互。</li>\n<li>比如等待用户点击、网络请求数据的返回、文件读写的IO操作，这些等待的行为并不会阻塞我们的线程；</li>\n<li>这是因为类似于网络请求、文件读写的IO，我们都可以基于非阻塞调用；</li>\n</ul>\n<p><strong>阻塞式调用和非阻塞式调用</strong></p>\n<p>如果想搞懂这个点，我们需要知道操作系统中的<strong>阻塞式调用</strong>和<strong>非阻塞式调用</strong>的概念。</p>\n<p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>\n<ul>\n<li>阻塞式调用： 调用结果返回之前，当前线程会被挂起，调用线程只有在得到调用结果之后才会继续执行。</li>\n<li>非阻塞式调用： 调用执行之后，当前线程不会停止执行，只需要过一段时间来检查一下有没有结果返回即可。</li>\n</ul>\n<p>我们用一个生活中的例子来模拟：</p>\n<p>你中午饿了，需要点一份外卖，点外卖的动作就是我们的调用，拿到最后点的外卖就是我们要等待的结果。</p>\n<ul>\n<li>阻塞式调用： 点了外卖，不再做任何事情，就是在傻傻的等待，你的线程停止了任何其他的工作。</li>\n<li>非阻塞式调用： 点了外卖，继续做其他事情：继续工作、打把游戏，你的线程没有继续执行其他事情，只需要偶尔去看一下有没有人敲门，外卖有没有送到即可。</li>\n</ul>\n<p>而我们开发中的很多耗时操作，都可以基于这样的 非阻塞式调用：</p>\n<ul>\n<li>比如网络请求本身使用了Socket通信，而Socket本身提供了select模型，可以进行非阻塞方式的工作；</li>\n<li>比如文件读写的IO操作，我们可以使用操作系统提供的基于事件的回调机制；</li>\n</ul>\n<p>这些操作都不会阻塞我们单线程的继续执行，我们的线程在等待的过程中可以继续去做别的事情：喝杯咖啡、打把游戏，等真正有了响应，再去进行对应的处理即可。</p>\n<p>这时，我们可能有两个问题：</p>\n<ul>\n<li>问题一： 如果在多核CPU中，单线程是不是就没有充分利用CPU呢？这个问题，我会放在后面来讲解。</li>\n<li>问题二： 单线程是如何来处理网络通信、IO操作它们返回的结果呢？答案就是事件循环（Event Loop）。</li>\n</ul>\n<h3 id=\"1-2-Dart事件循环\"><a href=\"#1-2-Dart事件循环\" class=\"headerlink\" title=\"1.2. Dart事件循环\"></a>1.2. Dart事件循环</h3><h5 id=\"1-2-1-什么是事件循环\"><a href=\"#1-2-1-什么是事件循环\" class=\"headerlink\" title=\"1.2.1. 什么是事件循环\"></a>1.2.1. 什么是事件循环</h5><p>单线程模型中主要就是在维护着一个事件循环（Event Loop）。</p>\n<p>事件循环是什么呢？</p>\n<ul>\n<li>事实上事件循环并不复杂，它就是将需要处理的一系列事件（包括点击事件、IO事件、网络事件）放在一个事件队列（Event Queue）中。</li>\n<li>不断的从事件队列（Event Queue）中取出事件，并执行其对应需要执行的代码块，直到事件队列清空位置。</li>\n</ul>\n<p>我们来写一个事件循环的伪代码：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_002.png\" alt=\"图1\"></p>\n<p>当我们有一些事件时，比如点击事件、IO事件、网络事件时，它们就会被加入到eventLoop中，当发现事件队列不为空时发现，就会取出事件，并且执行。</p>\n<ul>\n<li>齿轮就是我们的事件循环，它会从队列中一次取出事件来执行。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_003.png\" alt=\"图1\"></p>\n<h5 id=\"1-2-2-事件循环代码模拟\"><a href=\"#1-2-2-事件循环代码模拟\" class=\"headerlink\" title=\"1.2.2. 事件循环代码模拟\"></a>1.2.2. 事件循环代码模拟</h5><p>这里我们来看一段伪代码，理解点击事件和网络请求的事件是如何被执行的：</p>\n<p>这是一段Flutter代码，很多东西大家可能不是特别理解，但是耐心阅读你会读懂我们在做什么。</p>\n<p>一个按钮RaisedButton，当发生点击时执行onPressed函数。</p>\n<p>onPressed函数中，我们发送了一个网络请求，请求成功后会执行then中的回调函数。</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_004.png\" alt=\"图1\"></p>\n<p>这些代码是如何放在事件循环中执行呢？</p>\n<p>1、当用户发生点击的时候，onPressed回调函数被放入事件循环中执行，执行的过程中发送了一个网络请求。<br>2、网络请求发出去后，该事件循环不会被阻塞，而是发现要执行的onPressed函数已经结束，会将它丢弃掉。<br>3、网络请求成功后，会执行then中传入的回调函数，这也是一个事件，该事件被放入到事件循环中执行，执行完毕后，事件循环将其丢弃。</p>\n<p>尽管onPressed和then中的回调有一些差异，但是它们对于事件循环来说，都是告诉它：我有一段代码需要执行，快点帮我完成。</p>\n<h1 id=\"二-Dart的异步操作\"><a href=\"#二-Dart的异步操作\" class=\"headerlink\" title=\"二. Dart的异步操作\"></a>二. Dart的异步操作</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_005.png\" alt=\"图1\"></p>\n<h3 id=\"2-1-认识Future\"><a href=\"#2-1-认识Future\" class=\"headerlink\" title=\"2.1. 认识Future\"></a>2.1. 认识Future</h3><h5 id=\"2-1-1-同步的网络请求\"><a href=\"#2-1-1-同步的网络请求\" class=\"headerlink\" title=\"2.1.1. 同步的网络请求\"></a>2.1.1. 同步的网络请求</h5><p>我们先来看一个例子吧：</p>\n<ul>\n<li>在这个例子中，我使用getNetworkData来模拟了一个网络请求；</li>\n<li>该网络请求需要3秒钟的时间，之后返回数据；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_006.png\" alt=\"图1\"></p>\n<p>这段代码会运行怎么的结果呢？</p>\n<ul>\n<li>getNetworkData会阻塞main函数的执行</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_007.png\" alt=\"图1\"></p>\n<p>显然，上面的代码不是我们想要的执行效果，因为网络请求阻塞了main函数，那么意味着其后所有的代码都无法正常的继续执行。</p>\n<h5 id=\"2-1-2-异步的网络请求\"><a href=\"#2-1-2-异步的网络请求\" class=\"headerlink\" title=\"2.1.2. 异步的网络请求\"></a>2.1.2. 异步的网络请求</h5><p>我们来对我们上面的代码进行改进，代码如下：</p>\n<ul>\n<li>和刚才的代码唯一的区别在于我使用了Future对象来将耗时的操作放在了其中传入的函数中；</li>\n<li>稍后，我们会讲解它具体的一些API，我们就暂时知道我创建了一个Future实例即可；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_008.png\" alt=\"图1\"></p>\n<p>我们来看一下代码的运行结果：</p>\n<ul>\n<li>1、这一次的代码顺序执行，没有出现任何的阻塞现象；</li>\n<li>2、和之前直接打印结果不同，这次我们打印了一个Future实例；</li>\n<li>结论：我们将一个耗时的操作隔离了起来，这个操作不会再影响我们的主线程执行了。</li>\n<li>问题：我们如何去拿到最终的结果呢？</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_009.png\" alt=\"图1\"></p>\n<p>获取Future得到的结果</p>\n<p>有了Future之后，如何去获取请求到的结果：通过.then的回调：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_010.png\" alt=\"图1\"></p>\n<p>上面代码的执行结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_011.png\" alt=\"图1\"></p>\n<p><strong>执行中出现异常</strong></p>\n<p>如果调用过程中出现了异常，拿不到结果，如何获取到异常的信息呢？</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_012.png\" alt=\"图1\"></p>\n<p>上面代码的执行结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_013.png\" alt=\"图1\"></p>\n<h5 id=\"2-1-3-Future使用补充\"><a href=\"#2-1-3-Future使用补充\" class=\"headerlink\" title=\"2.1.3. Future使用补充\"></a>2.1.3. Future使用补充</h5><p><strong>补充一：上面案例的小结</strong><br>我们通过一个案例来学习了一些Future的使用过程：</p>\n<ul>\n<li>1、创建一个Future（可能是我们创建的，也可能是调用内部API或者第三方API获取到的一个Future，总之你需要获取到一个Future实例，Future通常会对一些异步的操作进行封装）；</li>\n<li>2、通过.then(成功回调函数)的方式来监听Future内部执行完成时获取到的结果；</li>\n<li>3、通过.catchError(失败或异常回调函数)的方式来监听Future内部执行失败或者出现异常时的错误信息；</li>\n</ul>\n<p><strong>补充二：Future的两种状态</strong><br>事实上Future在执行的整个过程中，我们通常把它划分成了两种状态：</p>\n<p>状态一：未完成状态（uncompleted）</p>\n<ul>\n<li>执行Future内部的操作时（在上面的案例中就是具体的网络请求过程，我们使用了延迟来模拟），我们称这个过程为未完成状态</li>\n</ul>\n<p>状态二：完成状态（completed）</p>\n<ul>\n<li>当Future内部的操作执行完成，通常会返回一个值，或者抛出一个异常。<br>这两种情况，我们都称Future为完成状态。</li>\n</ul>\n<p>Dart官网有对这两种状态解析，之所以贴出来是区别于Promise的三种状态</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_014.png\" alt=\"图1\"></p>\n<p><strong>补充三：Future的链式调用</strong></p>\n<p>上面代码我们可以进行如下的改进：</p>\n<ul>\n<li>我们可以在then中继续返回值，会在下一个链式的then调用回调函数中拿到返回的结果</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_015.png\" alt=\"图1\"></p>\n<p>打印结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_016.png\" alt=\"图1\"></p>\n<p><strong>补充四：Future其他API</strong></p>\n<p>Future.value(value)</p>\n<ul>\n<li>直接获取一个完成的Future，该Future会直接调用then的回调函数</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_017.png\" alt=\"图1\"></p>\n<p>打印结果如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_018.png\" alt=\"图1\"></p>\n<p>疑惑：为什么立即执行，但是哈哈哈是在最后打印的呢？</p>\n<ul>\n<li>这是因为Future中的then会作为新的任务会加入到事件队列中（Event Queue），加入之后你肯定需要排队执行了</li>\n</ul>\n<p><em>Future.error(object)</em></p>\n<ul>\n<li>直接获取一个完成的Future，但是是一个发生异常的Future，该Future会直接调用catchError的回调函数</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_019.png\" alt=\"图1\"></p>\n<p>打印结果如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_020.png\" alt=\"图1\"></p>\n<p><em>Future.delayed(时间, 回调函数)</em></p>\n<ul>\n<li>在延迟一定时间时执行回调函数，执行完回调函数后会执行then的回调；</li>\n<li>之前的案例，我们也可以使用它来模拟，但是直接学习这个API会让大家更加疑惑；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_021.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-await、async\"><a href=\"#2-2-await、async\" class=\"headerlink\" title=\"2.2. await、async\"></a>2.2. await、async</h3><h5 id=\"2-2-1-理论概念理解\"><a href=\"#2-2-1-理论概念理解\" class=\"headerlink\" title=\"2.2.1. 理论概念理解\"></a>2.2.1. 理论概念理解</h5><p>如果你已经完全搞懂了Future，那么学习await、async应该没有什么难度。</p>\n<p>await、async是什么呢？</p>\n<ul>\n<li>它们是Dart中的关键字（你这不是废话吗？废话也还是要强调的，万一你用它做变量名呢，无辜脸。）</li>\n<li>它们可以让我们用同步的代码格式，去实现异步的调用过程。</li>\n<li>并且，通常一个async的函数会返回一个Future（别着急，马上就看到代码了）。</li>\n</ul>\n<p>我们已经知道，Future可以做到不阻塞我们的线程，让线程继续执行，并且在完成某个操作时改变自己的状态，并且回调then或者errorCatch回调。</p>\n<p>如何生成一个Future呢？</p>\n<ul>\n<li>1、通过我们前面学习的Future构造函数，或者后面学习的Future其他API都可以。</li>\n<li>2、还有一种就是通过async的函数。</li>\n</ul>\n<h5 id=\"2-2-2-案例代码演练\"><a href=\"#2-2-2-案例代码演练\" class=\"headerlink\" title=\"2.2.2. 案例代码演练\"></a>2.2.2. 案例代码演练</h5><p>Talk is cheap. Show me the code.</p>\n<p>我们来对之前的Future异步处理代码进行改造，改成await、async的形式。</p>\n<p>我们知道，如果直接这样写代码，代码是不能正常执行的：</p>\n<ul>\n<li>因为Future.delayed返回的是一个Future对象，我们不能把它看成同步的返回数据：”network data”去使用</li>\n<li>也就是我们不能把这个异步的代码当做同步一样去使用！</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_022.png\" alt=\"图1\"></p>\n<p>现在我使用await修改下面这句代码：</p>\n<ul>\n<li>你会发现，我在Future.delayed函数前加了一个await。</li>\n<li>一旦有了这个关键字，那么这个操作就会等待Future.delayed的执行完毕，并且等待它的结果。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_023.png\" alt=\"图1\"></p>\n<p>修改后执行代码，会看到如下的错误：</p>\n<ul>\n<li>错误非常明显：await关键字必须存在于async函数中。</li>\n<li>所以我们需要将getNetworkData函数定义成async函数。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_024.png\" alt=\"图1\"></p>\n<p>继续修改代码如下：</p>\n<p>也非常简单，只需要在函数的()后面加上一个async关键字就可以了</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_025.png\" alt=\"图1\"></p>\n<p>运行代码，依然报错（心想：你妹啊）：</p>\n<ul>\n<li>错误非常明显：使用async标记的函数，必须返回一个Future对象。</li>\n<li>所以我们需要继续修改代码，将返回值写成一个Future。</li>\n</ul>\n<p>继续修改代码如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_026.png\" alt=\"图1\"></p>\n<p>这段代码应该是我们理想当中执行的代码了</p>\n<ul>\n<li>我们现在可以像同步代码一样去使用Future异步返回的结果；</li>\n<li>等待拿到结果之后和其他数据进行拼接，然后一起返回；</li>\n<li>返回的时候并不需要包装一个Future，直接返回即可，但是返回值会默认被包装在一个Future中；</li>\n</ul>\n<h3 id=\"2-3-读取json案例\"><a href=\"#2-3-读取json案例\" class=\"headerlink\" title=\"2.3. 读取json案例\"></a>2.3. 读取json案例</h3><p>我这里给出了一个在Flutter项目中，读取一个本地的json文件，并且转换成模型对象，返回出去的案例；</p>\n<p>这个案例作为大家学习前面Future和await、async的一个参考，我并不打算展开来讲，因为需要用到Flutter的相关知识；</p>\n<p>后面我会在后面的案例中再次讲解它在Flutter中我使用的过程中；</p>\n<p>读取json案例代码（了解一下即可）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;services.dart&#39; show rootBundle;</span><br><span class=\"line\">import &#39;dart:convert&#39;;</span><br><span class=\"line\">import &#39;dart:async&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">main(List&lt;String&gt; args) &#123;</span><br><span class=\"line\">  getAnchors().then((anchors) &#123;</span><br><span class=\"line\">    print(anchors);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Anchor &#123;</span><br><span class=\"line\">  String nickname;</span><br><span class=\"line\">  String roomName;</span><br><span class=\"line\">  String imageUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">  Anchor(&#123;</span><br><span class=\"line\">    this.nickname,</span><br><span class=\"line\">    this.roomName,</span><br><span class=\"line\">    this.imageUrl</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Anchor.withMap(Map&lt;String, dynamic&gt; parsedMap) &#123;</span><br><span class=\"line\">    this.nickname &#x3D; parsedMap[&quot;nickname&quot;];</span><br><span class=\"line\">    this.roomName &#x3D; parsedMap[&quot;roomName&quot;];</span><br><span class=\"line\">    this.imageUrl &#x3D; parsedMap[&quot;roomSrc&quot;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Future&lt;List&lt;Anchor&gt;&gt; getAnchors() async &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 1.读取json文件</span><br><span class=\"line\">  String jsonString &#x3D; await rootBundle.loadString(&quot;assets&#x2F;yz.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 2.转成List或Map类型</span><br><span class=\"line\">  final jsonResult &#x3D; json.decode(jsonString);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 3.遍历List，并且转成Anchor对象放到另一个List中</span><br><span class=\"line\">  List&lt;Anchor&gt; anchors &#x3D; new List();</span><br><span class=\"line\">  for (Map&lt;String, dynamic&gt; map in jsonResult) &#123;</span><br><span class=\"line\">    anchors.add(Anchor.withMap(map));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return anchors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三-Dart的异步补充\"><a href=\"#三-Dart的异步补充\" class=\"headerlink\" title=\"三. Dart的异步补充\"></a>三. Dart的异步补充</h1><h3 id=\"3-1-任务执行顺序\"><a href=\"#3-1-任务执行顺序\" class=\"headerlink\" title=\"3.1. 任务执行顺序\"></a>3.1. 任务执行顺序</h3><h5 id=\"3-1-1-认识微任务队列\"><a href=\"#3-1-1-认识微任务队列\" class=\"headerlink\" title=\"3.1.1. 认识微任务队列\"></a>3.1.1. 认识微任务队列</h5><p>在前面学习学习中，我们知道Dart中有一个事件循环（Event Loop）来执行我们的代码，里面存在一个事件队列（Event Queue），事件循环不断从事件队列中取出事件执行。</p>\n<p>但是如果我们严格来划分的话，在Dart中还存在另一个队列：微任务队列（Microtask Queue）。</p>\n<ul>\n<li>微任务队列的优先级要高于事件队列；</li>\n<li>也就是说事件循环都是优先执行微任务队列中的任务，再执行 事件队列 中的任务；</li>\n</ul>\n<p>那么在Flutter开发中，哪些是放在事件队列，哪些是放在微任务队列呢？</p>\n<ul>\n<li>所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘制事件等；</li>\n<li>而微任务通常来源于Dart内部，并且微任务非常少。这是因为如果微任务非常多，就会造成事件队列排不上队，会阻塞任务队列的执行（比如用户点击没有反应的情况）；</li>\n</ul>\n<p>说到这里，你可能已经有点凌乱了，在Dart的单线程中，代码到底是怎样执行的呢？</p>\n<ul>\n<li>1、Dart的入口是main函数，所以main函数中的代码会优先执行；</li>\n<li>2、main函数执行完后，会启动一个事件循环（Event Loop）就会启动，启动后开始执行队列中的任务；</li>\n<li>3、首先，会按照先进先出的顺序，执行 微任务队列（Microtask Queue）中的所有任务；</li>\n<li>4、其次，会按照先进先出的顺序，执行 事件队列（Event Queue）中的所有任务；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_027.png\" alt=\"图1\"></p>\n<h5 id=\"3-1-2-如何创建微任务\"><a href=\"#3-1-2-如何创建微任务\" class=\"headerlink\" title=\"3.1.2. 如何创建微任务\"></a>3.1.2. 如何创建微任务</h5><p>在开发中，我们可以通过dart中async下的scheduleMicrotask来创建一个微任务：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_028.png\" alt=\"图1\"></p>\n<p>在开发中，如果我们有一个任务不希望它放在Event Queue中依次排队，那么就可以创建一个微任务了。</p>\n<p>Future的代码是加入到事件队列还是微任务队列呢？</p>\n<p>Future中通常有两个函数执行体：</p>\n<ul>\n<li>Future构造函数传入的函数体</li>\n<li>then的函数体（catchError等同看待）</li>\n</ul>\n<p>那么它们是加入到什么队列中的呢？</p>\n<p>Future构造函数传入的函数体放在事件队列中</p>\n<p>then的函数体要分成三种情况：</p>\n<ul>\n<li>情况一：Future没有执行完成（有任务需要执行），那么then会直接被添加到Future的函数执行体后；</li>\n<li>情况二：如果Future执行完后就then，该then的函数体被放到如微任务队列，当前Future执行完后执行微任务队列；</li>\n<li>情况三：如果Future世链式调用，意味着then未执行完，下一个then不会执行；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; future_1加入到eventqueue中，紧随其后then_1被加入到eventqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; print(&quot;future_1&quot;)).then((_) &#x3D;&gt; print(&quot;then_1&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Future没有函数执行体，then_2被加入到microtaskqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; null).then((_) &#x3D;&gt; print(&quot;then_2&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; future_3、then_3_a、then_3_b依次加入到eventqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; print(&quot;future_3&quot;)).then((_) &#x3D;&gt; print(&quot;then_3_a&quot;)).then((_) &#x3D;&gt; print(&quot;then_3_b&quot;));</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-3-代码执行顺序\"><a href=\"#3-1-3-代码执行顺序\" class=\"headerlink\" title=\"3.1.3. 代码执行顺序\"></a>3.1.3. 代码执行顺序</h5><p>我们根据前面的规则来学习一个极的代码执行顺序案例：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_029.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_030.png\" alt=\"图1\"></p>\n<p>代码分析：</p>\n<ul>\n<li>1、main函数先执行，所以main start和main end先执行，没有任何问题；</li>\n<li>2、main函数执行过程中，会将一些任务分别加入到EventQueue和MicrotaskQueue中；</li>\n<li>3、task7通过scheduleMicrotask函数调用，所以它被最早加入到MicrotaskQueue，会被先执行；</li>\n<li>4、然后开始执行EventQueue，task1被添加到EventQueue中被执行；</li>\n<li>5、通过final future = Future(() =&gt; null);创建的future的then被添加到微任务中，微任务直接被优先执行，所以会执行task6；</li>\n<li>6、一次在EventQueue中添加task2、task3、task5被执行；</li>\n<li>7、task3的打印执行完后，调用scheduleMicrotask，那么在执行完这次的EventQueue后会执行，所以在task5后执行task4（注意：scheduleMicrotask的调用是作为task3的一部分代码，所以task4是要在task5之后执行的）</li>\n<li>8、task8、task9、task10一次添加到EventQueue被执行；</li>\n</ul>\n<p>事实上，上面的代码执行顺序有可能出现在面试中，我们开发中通常不会出现这种复杂的嵌套，并且需要完全搞清楚它的执行顺序；</p>\n<p>但是，了解上面的代码执行顺序，会让你对EventQueue和microtaskQueue有更加深刻的理解。</p>\n<h3 id=\"3-2-多核CPU的利用\"><a href=\"#3-2-多核CPU的利用\" class=\"headerlink\" title=\"3.2. 多核CPU的利用\"></a>3.2. 多核CPU的利用</h3><h5 id=\"3-2-1-Isolate的理解\"><a href=\"#3-2-1-Isolate的理解\" class=\"headerlink\" title=\"3.2.1. Isolate的理解\"></a>3.2.1. Isolate的理解</h5><p>在Dart中，有一个Isolate的概念，它是什么呢？</p>\n<ul>\n<li>我们已经知道Dart是单线程的，这个线程有自己可以访问的内存空间以及需要运行的事件循环；</li>\n<li>我们可以将这个空间系统称之为是一个Isolate；</li>\n<li>比如Flutter中就有一个Root Isolate，负责运行Flutter的代码，比如UI渲染、用户交互等等；</li>\n</ul>\n<p>在 Isolate 中，资源隔离做得非常好，每个 Isolate 都有自己的 Event Loop 与 Queue，</p>\n<ul>\n<li>Isolate 之间不共享任何资源，只能依靠消息机制通信，因此也就没有资源抢占问题。</li>\n</ul>\n<p>但是，如果只有一个Isolate，那么意味着我们只能永远利用一个线程，这对于多核CPU来说，是一种资源的浪费。</p>\n<p>如果在开发中，我们有非常多耗时的计算，完全可以自己创建Isolate，在独立的Isolate中完成想要的计算操作。</p>\n<p><strong>如何创建Isolate呢？</strong></p>\n<p>创建Isolate是比较简单的，我们通过Isolate.spawn就可以创建了：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_031.png\" alt=\"图1\"></p>\n<h5 id=\"3-2-2-Isolate通信机制\"><a href=\"#3-2-2-Isolate通信机制\" class=\"headerlink\" title=\"3.2.2. Isolate通信机制\"></a>3.2.2. Isolate通信机制</h5><p>但是在真实开发中，我们不会只是简单的开启一个新的Isolate，而不关心它的运行结果：</p>\n<ul>\n<li>我们需要新的Isolate进行计算，并且将计算结果告知Main Isolate（也就是默认开启的Isolate）；</li>\n<li>Isolate 通过发送管道（SendPort）实现消息通信机制；</li>\n<li>我们可以在启动并发Isolate时将Main Isolate的发送管道作为参数传递给它；</li>\n<li>并发在执行完毕时，可以利用这个管道给Main Isolate发送消息；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_032.png\" alt=\"图1\"></p>\n<p>但是我们上面的通信变成了单向通信，如果需要双向通信呢？</p>\n<ul>\n<li>事实上双向通信的代码会比较麻烦；</li>\n<li>Flutter提供了支持并发计算的compute函数，它内部封装了Isolate的创建和双向通信；</li>\n<li>利用它我们可以充分利用多核心CPU，并且使用起来也非常简单；</li>\n</ul>\n<p>注意：下面的代码不是dart的API，而是Flutter的API，所以只有在Flutter项目中才能运行</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_033.png\" alt=\"图1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Dart的异步模型\"><a href=\"#一-Dart的异步模型\" class=\"headerlink\" title=\"一. Dart的异步模型\"></a>一. Dart的异步模型</h1><h3 id=\"1-1-Dart是单线程的\"><a href=\"#1-1-Dart是单线程的\" class=\"headerlink\" title=\"1.1. Dart是单线程的\"></a>1.1. Dart是单线程的</h3><h5 id=\"1-1-1-程序中的耗时操作\"><a href=\"#1-1-1-程序中的耗时操作\" class=\"headerlink\" title=\"1.1.1. 程序中的耗时操作\"></a>1.1.1. 程序中的耗时操作</h5><p>开发中的耗时操作：</p>\n<ul>\n<li><p>在开发中，我们经常会遇到一些耗时的操作需要完成，比如网络请求、文件读取等等；</p>\n</li>\n<li><p>如果我们的主线程一直在等待这些耗时的操作完成，那么就会进行阻塞，无法响应其它事件，比如用户的点击；</p>\n</li>\n<li><p>显然，我们不能这么干！！</p>\n</li>\n</ul>\n<p>如何处理耗时的操作呢？</p>\n<p>针对如何处理耗时的操作，不同的语言有不同的处理方式。</p>\n<ul>\n<li><p>处理方式一： 多线程，比如Java、C++，我们普遍的做法是开启一个新的线程（Thread），在新的线程中完成这些异步的操作，再通过线程间通信的方式，将拿到的数据传递给主线程。</p>\n</li>\n<li><p>处理方式二： 单线程+事件循环，比如JavaScript、Dart都是基于单线程加事件循环来完成耗时操作的处理。不过单线程如何能进行耗时的操作呢？！</p>\n</li>\n</ul>\n<h5 id=\"1-1-2-单线程的异步操作\"><a href=\"#1-1-2-单线程的异步操作\" class=\"headerlink\" title=\"1.1.2. 单线程的异步操作\"></a>1.1.2. 单线程的异步操作</h5><p>我之前碰到很多开发者都对单线程的异步操作充满了问号？？？</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_001.png\" alt=\"图1\"></p>\n<p>其实它们并不冲突：</p>\n<ul>\n<li>因为我们的一个应用程序大部分时间都是处于空闲的状态的，并不是无限制的在和用户进行交互。</li>\n<li>比如等待用户点击、网络请求数据的返回、文件读写的IO操作，这些等待的行为并不会阻塞我们的线程；</li>\n<li>这是因为类似于网络请求、文件读写的IO，我们都可以基于非阻塞调用；</li>\n</ul>\n<p><strong>阻塞式调用和非阻塞式调用</strong></p>\n<p>如果想搞懂这个点，我们需要知道操作系统中的<strong>阻塞式调用</strong>和<strong>非阻塞式调用</strong>的概念。</p>\n<p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。</p>\n<ul>\n<li>阻塞式调用： 调用结果返回之前，当前线程会被挂起，调用线程只有在得到调用结果之后才会继续执行。</li>\n<li>非阻塞式调用： 调用执行之后，当前线程不会停止执行，只需要过一段时间来检查一下有没有结果返回即可。</li>\n</ul>\n<p>我们用一个生活中的例子来模拟：</p>\n<p>你中午饿了，需要点一份外卖，点外卖的动作就是我们的调用，拿到最后点的外卖就是我们要等待的结果。</p>\n<ul>\n<li>阻塞式调用： 点了外卖，不再做任何事情，就是在傻傻的等待，你的线程停止了任何其他的工作。</li>\n<li>非阻塞式调用： 点了外卖，继续做其他事情：继续工作、打把游戏，你的线程没有继续执行其他事情，只需要偶尔去看一下有没有人敲门，外卖有没有送到即可。</li>\n</ul>\n<p>而我们开发中的很多耗时操作，都可以基于这样的 非阻塞式调用：</p>\n<ul>\n<li>比如网络请求本身使用了Socket通信，而Socket本身提供了select模型，可以进行非阻塞方式的工作；</li>\n<li>比如文件读写的IO操作，我们可以使用操作系统提供的基于事件的回调机制；</li>\n</ul>\n<p>这些操作都不会阻塞我们单线程的继续执行，我们的线程在等待的过程中可以继续去做别的事情：喝杯咖啡、打把游戏，等真正有了响应，再去进行对应的处理即可。</p>\n<p>这时，我们可能有两个问题：</p>\n<ul>\n<li>问题一： 如果在多核CPU中，单线程是不是就没有充分利用CPU呢？这个问题，我会放在后面来讲解。</li>\n<li>问题二： 单线程是如何来处理网络通信、IO操作它们返回的结果呢？答案就是事件循环（Event Loop）。</li>\n</ul>\n<h3 id=\"1-2-Dart事件循环\"><a href=\"#1-2-Dart事件循环\" class=\"headerlink\" title=\"1.2. Dart事件循环\"></a>1.2. Dart事件循环</h3><h5 id=\"1-2-1-什么是事件循环\"><a href=\"#1-2-1-什么是事件循环\" class=\"headerlink\" title=\"1.2.1. 什么是事件循环\"></a>1.2.1. 什么是事件循环</h5><p>单线程模型中主要就是在维护着一个事件循环（Event Loop）。</p>\n<p>事件循环是什么呢？</p>\n<ul>\n<li>事实上事件循环并不复杂，它就是将需要处理的一系列事件（包括点击事件、IO事件、网络事件）放在一个事件队列（Event Queue）中。</li>\n<li>不断的从事件队列（Event Queue）中取出事件，并执行其对应需要执行的代码块，直到事件队列清空位置。</li>\n</ul>\n<p>我们来写一个事件循环的伪代码：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_002.png\" alt=\"图1\"></p>\n<p>当我们有一些事件时，比如点击事件、IO事件、网络事件时，它们就会被加入到eventLoop中，当发现事件队列不为空时发现，就会取出事件，并且执行。</p>\n<ul>\n<li>齿轮就是我们的事件循环，它会从队列中一次取出事件来执行。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_003.png\" alt=\"图1\"></p>\n<h5 id=\"1-2-2-事件循环代码模拟\"><a href=\"#1-2-2-事件循环代码模拟\" class=\"headerlink\" title=\"1.2.2. 事件循环代码模拟\"></a>1.2.2. 事件循环代码模拟</h5><p>这里我们来看一段伪代码，理解点击事件和网络请求的事件是如何被执行的：</p>\n<p>这是一段Flutter代码，很多东西大家可能不是特别理解，但是耐心阅读你会读懂我们在做什么。</p>\n<p>一个按钮RaisedButton，当发生点击时执行onPressed函数。</p>\n<p>onPressed函数中，我们发送了一个网络请求，请求成功后会执行then中的回调函数。</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_004.png\" alt=\"图1\"></p>\n<p>这些代码是如何放在事件循环中执行呢？</p>\n<p>1、当用户发生点击的时候，onPressed回调函数被放入事件循环中执行，执行的过程中发送了一个网络请求。<br>2、网络请求发出去后，该事件循环不会被阻塞，而是发现要执行的onPressed函数已经结束，会将它丢弃掉。<br>3、网络请求成功后，会执行then中传入的回调函数，这也是一个事件，该事件被放入到事件循环中执行，执行完毕后，事件循环将其丢弃。</p>\n<p>尽管onPressed和then中的回调有一些差异，但是它们对于事件循环来说，都是告诉它：我有一段代码需要执行，快点帮我完成。</p>\n<h1 id=\"二-Dart的异步操作\"><a href=\"#二-Dart的异步操作\" class=\"headerlink\" title=\"二. Dart的异步操作\"></a>二. Dart的异步操作</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_005.png\" alt=\"图1\"></p>\n<h3 id=\"2-1-认识Future\"><a href=\"#2-1-认识Future\" class=\"headerlink\" title=\"2.1. 认识Future\"></a>2.1. 认识Future</h3><h5 id=\"2-1-1-同步的网络请求\"><a href=\"#2-1-1-同步的网络请求\" class=\"headerlink\" title=\"2.1.1. 同步的网络请求\"></a>2.1.1. 同步的网络请求</h5><p>我们先来看一个例子吧：</p>\n<ul>\n<li>在这个例子中，我使用getNetworkData来模拟了一个网络请求；</li>\n<li>该网络请求需要3秒钟的时间，之后返回数据；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_006.png\" alt=\"图1\"></p>\n<p>这段代码会运行怎么的结果呢？</p>\n<ul>\n<li>getNetworkData会阻塞main函数的执行</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_007.png\" alt=\"图1\"></p>\n<p>显然，上面的代码不是我们想要的执行效果，因为网络请求阻塞了main函数，那么意味着其后所有的代码都无法正常的继续执行。</p>\n<h5 id=\"2-1-2-异步的网络请求\"><a href=\"#2-1-2-异步的网络请求\" class=\"headerlink\" title=\"2.1.2. 异步的网络请求\"></a>2.1.2. 异步的网络请求</h5><p>我们来对我们上面的代码进行改进，代码如下：</p>\n<ul>\n<li>和刚才的代码唯一的区别在于我使用了Future对象来将耗时的操作放在了其中传入的函数中；</li>\n<li>稍后，我们会讲解它具体的一些API，我们就暂时知道我创建了一个Future实例即可；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_008.png\" alt=\"图1\"></p>\n<p>我们来看一下代码的运行结果：</p>\n<ul>\n<li>1、这一次的代码顺序执行，没有出现任何的阻塞现象；</li>\n<li>2、和之前直接打印结果不同，这次我们打印了一个Future实例；</li>\n<li>结论：我们将一个耗时的操作隔离了起来，这个操作不会再影响我们的主线程执行了。</li>\n<li>问题：我们如何去拿到最终的结果呢？</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_009.png\" alt=\"图1\"></p>\n<p>获取Future得到的结果</p>\n<p>有了Future之后，如何去获取请求到的结果：通过.then的回调：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_010.png\" alt=\"图1\"></p>\n<p>上面代码的执行结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_011.png\" alt=\"图1\"></p>\n<p><strong>执行中出现异常</strong></p>\n<p>如果调用过程中出现了异常，拿不到结果，如何获取到异常的信息呢？</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_012.png\" alt=\"图1\"></p>\n<p>上面代码的执行结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_013.png\" alt=\"图1\"></p>\n<h5 id=\"2-1-3-Future使用补充\"><a href=\"#2-1-3-Future使用补充\" class=\"headerlink\" title=\"2.1.3. Future使用补充\"></a>2.1.3. Future使用补充</h5><p><strong>补充一：上面案例的小结</strong><br>我们通过一个案例来学习了一些Future的使用过程：</p>\n<ul>\n<li>1、创建一个Future（可能是我们创建的，也可能是调用内部API或者第三方API获取到的一个Future，总之你需要获取到一个Future实例，Future通常会对一些异步的操作进行封装）；</li>\n<li>2、通过.then(成功回调函数)的方式来监听Future内部执行完成时获取到的结果；</li>\n<li>3、通过.catchError(失败或异常回调函数)的方式来监听Future内部执行失败或者出现异常时的错误信息；</li>\n</ul>\n<p><strong>补充二：Future的两种状态</strong><br>事实上Future在执行的整个过程中，我们通常把它划分成了两种状态：</p>\n<p>状态一：未完成状态（uncompleted）</p>\n<ul>\n<li>执行Future内部的操作时（在上面的案例中就是具体的网络请求过程，我们使用了延迟来模拟），我们称这个过程为未完成状态</li>\n</ul>\n<p>状态二：完成状态（completed）</p>\n<ul>\n<li>当Future内部的操作执行完成，通常会返回一个值，或者抛出一个异常。<br>这两种情况，我们都称Future为完成状态。</li>\n</ul>\n<p>Dart官网有对这两种状态解析，之所以贴出来是区别于Promise的三种状态</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_014.png\" alt=\"图1\"></p>\n<p><strong>补充三：Future的链式调用</strong></p>\n<p>上面代码我们可以进行如下的改进：</p>\n<ul>\n<li>我们可以在then中继续返回值，会在下一个链式的then调用回调函数中拿到返回的结果</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_015.png\" alt=\"图1\"></p>\n<p>打印结果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_016.png\" alt=\"图1\"></p>\n<p><strong>补充四：Future其他API</strong></p>\n<p>Future.value(value)</p>\n<ul>\n<li>直接获取一个完成的Future，该Future会直接调用then的回调函数</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_017.png\" alt=\"图1\"></p>\n<p>打印结果如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_018.png\" alt=\"图1\"></p>\n<p>疑惑：为什么立即执行，但是哈哈哈是在最后打印的呢？</p>\n<ul>\n<li>这是因为Future中的then会作为新的任务会加入到事件队列中（Event Queue），加入之后你肯定需要排队执行了</li>\n</ul>\n<p><em>Future.error(object)</em></p>\n<ul>\n<li>直接获取一个完成的Future，但是是一个发生异常的Future，该Future会直接调用catchError的回调函数</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_019.png\" alt=\"图1\"></p>\n<p>打印结果如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_020.png\" alt=\"图1\"></p>\n<p><em>Future.delayed(时间, 回调函数)</em></p>\n<ul>\n<li>在延迟一定时间时执行回调函数，执行完回调函数后会执行then的回调；</li>\n<li>之前的案例，我们也可以使用它来模拟，但是直接学习这个API会让大家更加疑惑；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_021.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-await、async\"><a href=\"#2-2-await、async\" class=\"headerlink\" title=\"2.2. await、async\"></a>2.2. await、async</h3><h5 id=\"2-2-1-理论概念理解\"><a href=\"#2-2-1-理论概念理解\" class=\"headerlink\" title=\"2.2.1. 理论概念理解\"></a>2.2.1. 理论概念理解</h5><p>如果你已经完全搞懂了Future，那么学习await、async应该没有什么难度。</p>\n<p>await、async是什么呢？</p>\n<ul>\n<li>它们是Dart中的关键字（你这不是废话吗？废话也还是要强调的，万一你用它做变量名呢，无辜脸。）</li>\n<li>它们可以让我们用同步的代码格式，去实现异步的调用过程。</li>\n<li>并且，通常一个async的函数会返回一个Future（别着急，马上就看到代码了）。</li>\n</ul>\n<p>我们已经知道，Future可以做到不阻塞我们的线程，让线程继续执行，并且在完成某个操作时改变自己的状态，并且回调then或者errorCatch回调。</p>\n<p>如何生成一个Future呢？</p>\n<ul>\n<li>1、通过我们前面学习的Future构造函数，或者后面学习的Future其他API都可以。</li>\n<li>2、还有一种就是通过async的函数。</li>\n</ul>\n<h5 id=\"2-2-2-案例代码演练\"><a href=\"#2-2-2-案例代码演练\" class=\"headerlink\" title=\"2.2.2. 案例代码演练\"></a>2.2.2. 案例代码演练</h5><p>Talk is cheap. Show me the code.</p>\n<p>我们来对之前的Future异步处理代码进行改造，改成await、async的形式。</p>\n<p>我们知道，如果直接这样写代码，代码是不能正常执行的：</p>\n<ul>\n<li>因为Future.delayed返回的是一个Future对象，我们不能把它看成同步的返回数据：”network data”去使用</li>\n<li>也就是我们不能把这个异步的代码当做同步一样去使用！</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_022.png\" alt=\"图1\"></p>\n<p>现在我使用await修改下面这句代码：</p>\n<ul>\n<li>你会发现，我在Future.delayed函数前加了一个await。</li>\n<li>一旦有了这个关键字，那么这个操作就会等待Future.delayed的执行完毕，并且等待它的结果。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_023.png\" alt=\"图1\"></p>\n<p>修改后执行代码，会看到如下的错误：</p>\n<ul>\n<li>错误非常明显：await关键字必须存在于async函数中。</li>\n<li>所以我们需要将getNetworkData函数定义成async函数。</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_024.png\" alt=\"图1\"></p>\n<p>继续修改代码如下：</p>\n<p>也非常简单，只需要在函数的()后面加上一个async关键字就可以了</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_025.png\" alt=\"图1\"></p>\n<p>运行代码，依然报错（心想：你妹啊）：</p>\n<ul>\n<li>错误非常明显：使用async标记的函数，必须返回一个Future对象。</li>\n<li>所以我们需要继续修改代码，将返回值写成一个Future。</li>\n</ul>\n<p>继续修改代码如下：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_026.png\" alt=\"图1\"></p>\n<p>这段代码应该是我们理想当中执行的代码了</p>\n<ul>\n<li>我们现在可以像同步代码一样去使用Future异步返回的结果；</li>\n<li>等待拿到结果之后和其他数据进行拼接，然后一起返回；</li>\n<li>返回的时候并不需要包装一个Future，直接返回即可，但是返回值会默认被包装在一个Future中；</li>\n</ul>\n<h3 id=\"2-3-读取json案例\"><a href=\"#2-3-读取json案例\" class=\"headerlink\" title=\"2.3. 读取json案例\"></a>2.3. 读取json案例</h3><p>我这里给出了一个在Flutter项目中，读取一个本地的json文件，并且转换成模型对象，返回出去的案例；</p>\n<p>这个案例作为大家学习前面Future和await、async的一个参考，我并不打算展开来讲，因为需要用到Flutter的相关知识；</p>\n<p>后面我会在后面的案例中再次讲解它在Flutter中我使用的过程中；</p>\n<p>读取json案例代码（了解一下即可）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;services.dart&#39; show rootBundle;</span><br><span class=\"line\">import &#39;dart:convert&#39;;</span><br><span class=\"line\">import &#39;dart:async&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">main(List&lt;String&gt; args) &#123;</span><br><span class=\"line\">  getAnchors().then((anchors) &#123;</span><br><span class=\"line\">    print(anchors);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Anchor &#123;</span><br><span class=\"line\">  String nickname;</span><br><span class=\"line\">  String roomName;</span><br><span class=\"line\">  String imageUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">  Anchor(&#123;</span><br><span class=\"line\">    this.nickname,</span><br><span class=\"line\">    this.roomName,</span><br><span class=\"line\">    this.imageUrl</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Anchor.withMap(Map&lt;String, dynamic&gt; parsedMap) &#123;</span><br><span class=\"line\">    this.nickname &#x3D; parsedMap[&quot;nickname&quot;];</span><br><span class=\"line\">    this.roomName &#x3D; parsedMap[&quot;roomName&quot;];</span><br><span class=\"line\">    this.imageUrl &#x3D; parsedMap[&quot;roomSrc&quot;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Future&lt;List&lt;Anchor&gt;&gt; getAnchors() async &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 1.读取json文件</span><br><span class=\"line\">  String jsonString &#x3D; await rootBundle.loadString(&quot;assets&#x2F;yz.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 2.转成List或Map类型</span><br><span class=\"line\">  final jsonResult &#x3D; json.decode(jsonString);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 3.遍历List，并且转成Anchor对象放到另一个List中</span><br><span class=\"line\">  List&lt;Anchor&gt; anchors &#x3D; new List();</span><br><span class=\"line\">  for (Map&lt;String, dynamic&gt; map in jsonResult) &#123;</span><br><span class=\"line\">    anchors.add(Anchor.withMap(map));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return anchors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三-Dart的异步补充\"><a href=\"#三-Dart的异步补充\" class=\"headerlink\" title=\"三. Dart的异步补充\"></a>三. Dart的异步补充</h1><h3 id=\"3-1-任务执行顺序\"><a href=\"#3-1-任务执行顺序\" class=\"headerlink\" title=\"3.1. 任务执行顺序\"></a>3.1. 任务执行顺序</h3><h5 id=\"3-1-1-认识微任务队列\"><a href=\"#3-1-1-认识微任务队列\" class=\"headerlink\" title=\"3.1.1. 认识微任务队列\"></a>3.1.1. 认识微任务队列</h5><p>在前面学习学习中，我们知道Dart中有一个事件循环（Event Loop）来执行我们的代码，里面存在一个事件队列（Event Queue），事件循环不断从事件队列中取出事件执行。</p>\n<p>但是如果我们严格来划分的话，在Dart中还存在另一个队列：微任务队列（Microtask Queue）。</p>\n<ul>\n<li>微任务队列的优先级要高于事件队列；</li>\n<li>也就是说事件循环都是优先执行微任务队列中的任务，再执行 事件队列 中的任务；</li>\n</ul>\n<p>那么在Flutter开发中，哪些是放在事件队列，哪些是放在微任务队列呢？</p>\n<ul>\n<li>所有的外部事件任务都在事件队列中，如IO、计时器、点击、以及绘制事件等；</li>\n<li>而微任务通常来源于Dart内部，并且微任务非常少。这是因为如果微任务非常多，就会造成事件队列排不上队，会阻塞任务队列的执行（比如用户点击没有反应的情况）；</li>\n</ul>\n<p>说到这里，你可能已经有点凌乱了，在Dart的单线程中，代码到底是怎样执行的呢？</p>\n<ul>\n<li>1、Dart的入口是main函数，所以main函数中的代码会优先执行；</li>\n<li>2、main函数执行完后，会启动一个事件循环（Event Loop）就会启动，启动后开始执行队列中的任务；</li>\n<li>3、首先，会按照先进先出的顺序，执行 微任务队列（Microtask Queue）中的所有任务；</li>\n<li>4、其次，会按照先进先出的顺序，执行 事件队列（Event Queue）中的所有任务；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_027.png\" alt=\"图1\"></p>\n<h5 id=\"3-1-2-如何创建微任务\"><a href=\"#3-1-2-如何创建微任务\" class=\"headerlink\" title=\"3.1.2. 如何创建微任务\"></a>3.1.2. 如何创建微任务</h5><p>在开发中，我们可以通过dart中async下的scheduleMicrotask来创建一个微任务：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_028.png\" alt=\"图1\"></p>\n<p>在开发中，如果我们有一个任务不希望它放在Event Queue中依次排队，那么就可以创建一个微任务了。</p>\n<p>Future的代码是加入到事件队列还是微任务队列呢？</p>\n<p>Future中通常有两个函数执行体：</p>\n<ul>\n<li>Future构造函数传入的函数体</li>\n<li>then的函数体（catchError等同看待）</li>\n</ul>\n<p>那么它们是加入到什么队列中的呢？</p>\n<p>Future构造函数传入的函数体放在事件队列中</p>\n<p>then的函数体要分成三种情况：</p>\n<ul>\n<li>情况一：Future没有执行完成（有任务需要执行），那么then会直接被添加到Future的函数执行体后；</li>\n<li>情况二：如果Future执行完后就then，该then的函数体被放到如微任务队列，当前Future执行完后执行微任务队列；</li>\n<li>情况三：如果Future世链式调用，意味着then未执行完，下一个then不会执行；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; future_1加入到eventqueue中，紧随其后then_1被加入到eventqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; print(&quot;future_1&quot;)).then((_) &#x3D;&gt; print(&quot;then_1&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Future没有函数执行体，then_2被加入到microtaskqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; null).then((_) &#x3D;&gt; print(&quot;then_2&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; future_3、then_3_a、then_3_b依次加入到eventqueue中</span><br><span class=\"line\">Future(() &#x3D;&gt; print(&quot;future_3&quot;)).then((_) &#x3D;&gt; print(&quot;then_3_a&quot;)).then((_) &#x3D;&gt; print(&quot;then_3_b&quot;));</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-3-代码执行顺序\"><a href=\"#3-1-3-代码执行顺序\" class=\"headerlink\" title=\"3.1.3. 代码执行顺序\"></a>3.1.3. 代码执行顺序</h5><p>我们根据前面的规则来学习一个极的代码执行顺序案例：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_029.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_030.png\" alt=\"图1\"></p>\n<p>代码分析：</p>\n<ul>\n<li>1、main函数先执行，所以main start和main end先执行，没有任何问题；</li>\n<li>2、main函数执行过程中，会将一些任务分别加入到EventQueue和MicrotaskQueue中；</li>\n<li>3、task7通过scheduleMicrotask函数调用，所以它被最早加入到MicrotaskQueue，会被先执行；</li>\n<li>4、然后开始执行EventQueue，task1被添加到EventQueue中被执行；</li>\n<li>5、通过final future = Future(() =&gt; null);创建的future的then被添加到微任务中，微任务直接被优先执行，所以会执行task6；</li>\n<li>6、一次在EventQueue中添加task2、task3、task5被执行；</li>\n<li>7、task3的打印执行完后，调用scheduleMicrotask，那么在执行完这次的EventQueue后会执行，所以在task5后执行task4（注意：scheduleMicrotask的调用是作为task3的一部分代码，所以task4是要在task5之后执行的）</li>\n<li>8、task8、task9、task10一次添加到EventQueue被执行；</li>\n</ul>\n<p>事实上，上面的代码执行顺序有可能出现在面试中，我们开发中通常不会出现这种复杂的嵌套，并且需要完全搞清楚它的执行顺序；</p>\n<p>但是，了解上面的代码执行顺序，会让你对EventQueue和microtaskQueue有更加深刻的理解。</p>\n<h3 id=\"3-2-多核CPU的利用\"><a href=\"#3-2-多核CPU的利用\" class=\"headerlink\" title=\"3.2. 多核CPU的利用\"></a>3.2. 多核CPU的利用</h3><h5 id=\"3-2-1-Isolate的理解\"><a href=\"#3-2-1-Isolate的理解\" class=\"headerlink\" title=\"3.2.1. Isolate的理解\"></a>3.2.1. Isolate的理解</h5><p>在Dart中，有一个Isolate的概念，它是什么呢？</p>\n<ul>\n<li>我们已经知道Dart是单线程的，这个线程有自己可以访问的内存空间以及需要运行的事件循环；</li>\n<li>我们可以将这个空间系统称之为是一个Isolate；</li>\n<li>比如Flutter中就有一个Root Isolate，负责运行Flutter的代码，比如UI渲染、用户交互等等；</li>\n</ul>\n<p>在 Isolate 中，资源隔离做得非常好，每个 Isolate 都有自己的 Event Loop 与 Queue，</p>\n<ul>\n<li>Isolate 之间不共享任何资源，只能依靠消息机制通信，因此也就没有资源抢占问题。</li>\n</ul>\n<p>但是，如果只有一个Isolate，那么意味着我们只能永远利用一个线程，这对于多核CPU来说，是一种资源的浪费。</p>\n<p>如果在开发中，我们有非常多耗时的计算，完全可以自己创建Isolate，在独立的Isolate中完成想要的计算操作。</p>\n<p><strong>如何创建Isolate呢？</strong></p>\n<p>创建Isolate是比较简单的，我们通过Isolate.spawn就可以创建了：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_031.png\" alt=\"图1\"></p>\n<h5 id=\"3-2-2-Isolate通信机制\"><a href=\"#3-2-2-Isolate通信机制\" class=\"headerlink\" title=\"3.2.2. Isolate通信机制\"></a>3.2.2. Isolate通信机制</h5><p>但是在真实开发中，我们不会只是简单的开启一个新的Isolate，而不关心它的运行结果：</p>\n<ul>\n<li>我们需要新的Isolate进行计算，并且将计算结果告知Main Isolate（也就是默认开启的Isolate）；</li>\n<li>Isolate 通过发送管道（SendPort）实现消息通信机制；</li>\n<li>我们可以在启动并发Isolate时将Main Isolate的发送管道作为参数传递给它；</li>\n<li>并发在执行完毕时，可以利用这个管道给Main Isolate发送消息；</li>\n</ul>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_032.png\" alt=\"图1\"></p>\n<p>但是我们上面的通信变成了单向通信，如果需要双向通信呢？</p>\n<ul>\n<li>事实上双向通信的代码会比较麻烦；</li>\n<li>Flutter提供了支持并发计算的compute函数，它内部封装了Isolate的创建和双向通信；</li>\n<li>利用它我们可以充分利用多核心CPU，并且使用起来也非常简单；</li>\n</ul>\n<p>注意：下面的代码不是dart的API，而是Flutter的API，所以只有在Flutter项目中才能运行</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/13-Dart%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5/13_033.png\" alt=\"图1\"></p>\n"},{"title":"14-虚线和星星评分","toc":true,"date":"2020-09-18T14:12:21.000Z","_content":"\n\n我们需要封装的组件效果：\n\n![图1](14-虚线和星星评分/14_001.png)\n\n# 一，虚线的封装\n\n```\nimport 'package:flutter/material.dart';\n\nclass HYDashedLine extends StatelessWidget {\n  final Axis axis;\n  final double dashedWidth;\n  final double dashedHeight;\n  final int count;\n  final Color color;\n\n  HYDashedLine({\n    this.axis = Axis.horizontal,\n    this.dashedWidth = 1,\n    this.dashedHeight = 1,\n    this.count = 10,\n    this.color = Colors.red\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Flex(\n      direction: this.axis,\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: List.generate(this.count, (_){\n        return SizedBox(\n          width: this.dashedWidth,\n          height: this.dashedHeight,\n          child: DecoratedBox(\n            decoration:BoxDecoration(color: this.color),\n          ),\n        );\n      }),\n    );\n  }\n}\n```\n\n# 二， 星星评分的封装\n\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/**\n *  星星评分\n */\nclass HYStarRating extends StatefulWidget {\n  final double rating;    //当前分数\n  final double maxRating; //最大分数\n  final int count;        //星星数量\n  final double size;         //星星的大小\n  final Color unSelectedColor;  //未选中的颜色\n  final Color selectedColor;    //选中的颜色\n\n  final Widget unSelectedImage;   //未选中的图片\n  final Widget selectedImage;   //选中的图片\n\n  HYStarRating({\n    @required this.rating,\n    this.maxRating = 10,\n    this.count = 5,\n    this.size = 30,\n    this.unSelectedColor = const Color(0xffbbbbbb),\n    this.selectedColor = const Color(0xffff0000),\n    Widget unSelectedImage,\n    Widget selectedImage,\n  }):\n        this.unSelectedImage = unSelectedImage ?? Icon(Icons.star_border,size: size,color: unSelectedColor,),\n        this.selectedImage = selectedImage ?? Icon(Icons.star,size: size, color: selectedColor,);\n\n  @override\n  _HYStarRatingState createState() => _HYStarRatingState();\n}\n\nclass _HYStarRatingState extends State<HYStarRating> {\n  @override\n  Widget build(BuildContext context) {\n    return Stack(\n      children: <Widget>[\n        Row(\n          mainAxisSize: MainAxisSize.min,\n          children: buildUnSelectedStar(),\n        ),\n        Row(\n          mainAxisSize: MainAxisSize.min,\n          children: buildSelectedStar(),\n        ),\n      ],\n    );\n  }\n\n  //未选中的星星组件列表集合\n  List<Widget> buildUnSelectedStar(){\n    return List.generate(this.widget.count, (index){\n      return widget.unSelectedImage;\n    });\n  }\n\n  //选中的星星组件列表集合\n  List<Widget> buildSelectedStar(){\n    final star = widget.selectedImage;\n    //1. 创建stars\n    List<Widget> stars = [];\n\n    //2. 创建满填充的star\n    double oneValue = widget.maxRating / widget.count;\n    int entireCount = (widget.rating / oneValue).floor();  //floor(): 向下取整\n    for(int i = 0; i < entireCount; i++){\n      stars.add(star);\n    }\n\n    //3. 创建部分填充star\n    double leftWidth = ((widget.rating - oneValue * entireCount)/oneValue) * widget.size;\n\n    final halfStar = ClipRect(\n      clipper: HYStarClipper(leftWidth),\n      child: star,\n    );\n    stars.add(halfStar);\n\n    return stars;\n  }\n}\n\nclass HYStarClipper extends CustomClipper<Rect> {\n  double width;\n\n  HYStarClipper(this.width);\n\n  @override\n  Rect getClip(Size size) {\n    return Rect.fromLTRB(0, 0, width, size.height);\n  }\n\n  //是否重新裁剪\n  @override\n  bool shouldReclip(HYStarClipper oldClipper) {\n    //宽度不一致，重新裁剪\n    return oldClipper.width != this.width;\n  }\n }\n ```\n","source":"_posts/flutter/flutter框架一/14-虚线和星星评分.md","raw":"---\ntitle: 14-虚线和星星评分\ntoc: true\ndate: 2020-09-18 22:12:21\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n我们需要封装的组件效果：\n\n![图1](14-虚线和星星评分/14_001.png)\n\n# 一，虚线的封装\n\n```\nimport 'package:flutter/material.dart';\n\nclass HYDashedLine extends StatelessWidget {\n  final Axis axis;\n  final double dashedWidth;\n  final double dashedHeight;\n  final int count;\n  final Color color;\n\n  HYDashedLine({\n    this.axis = Axis.horizontal,\n    this.dashedWidth = 1,\n    this.dashedHeight = 1,\n    this.count = 10,\n    this.color = Colors.red\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Flex(\n      direction: this.axis,\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: List.generate(this.count, (_){\n        return SizedBox(\n          width: this.dashedWidth,\n          height: this.dashedHeight,\n          child: DecoratedBox(\n            decoration:BoxDecoration(color: this.color),\n          ),\n        );\n      }),\n    );\n  }\n}\n```\n\n# 二， 星星评分的封装\n\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/**\n *  星星评分\n */\nclass HYStarRating extends StatefulWidget {\n  final double rating;    //当前分数\n  final double maxRating; //最大分数\n  final int count;        //星星数量\n  final double size;         //星星的大小\n  final Color unSelectedColor;  //未选中的颜色\n  final Color selectedColor;    //选中的颜色\n\n  final Widget unSelectedImage;   //未选中的图片\n  final Widget selectedImage;   //选中的图片\n\n  HYStarRating({\n    @required this.rating,\n    this.maxRating = 10,\n    this.count = 5,\n    this.size = 30,\n    this.unSelectedColor = const Color(0xffbbbbbb),\n    this.selectedColor = const Color(0xffff0000),\n    Widget unSelectedImage,\n    Widget selectedImage,\n  }):\n        this.unSelectedImage = unSelectedImage ?? Icon(Icons.star_border,size: size,color: unSelectedColor,),\n        this.selectedImage = selectedImage ?? Icon(Icons.star,size: size, color: selectedColor,);\n\n  @override\n  _HYStarRatingState createState() => _HYStarRatingState();\n}\n\nclass _HYStarRatingState extends State<HYStarRating> {\n  @override\n  Widget build(BuildContext context) {\n    return Stack(\n      children: <Widget>[\n        Row(\n          mainAxisSize: MainAxisSize.min,\n          children: buildUnSelectedStar(),\n        ),\n        Row(\n          mainAxisSize: MainAxisSize.min,\n          children: buildSelectedStar(),\n        ),\n      ],\n    );\n  }\n\n  //未选中的星星组件列表集合\n  List<Widget> buildUnSelectedStar(){\n    return List.generate(this.widget.count, (index){\n      return widget.unSelectedImage;\n    });\n  }\n\n  //选中的星星组件列表集合\n  List<Widget> buildSelectedStar(){\n    final star = widget.selectedImage;\n    //1. 创建stars\n    List<Widget> stars = [];\n\n    //2. 创建满填充的star\n    double oneValue = widget.maxRating / widget.count;\n    int entireCount = (widget.rating / oneValue).floor();  //floor(): 向下取整\n    for(int i = 0; i < entireCount; i++){\n      stars.add(star);\n    }\n\n    //3. 创建部分填充star\n    double leftWidth = ((widget.rating - oneValue * entireCount)/oneValue) * widget.size;\n\n    final halfStar = ClipRect(\n      clipper: HYStarClipper(leftWidth),\n      child: star,\n    );\n    stars.add(halfStar);\n\n    return stars;\n  }\n}\n\nclass HYStarClipper extends CustomClipper<Rect> {\n  double width;\n\n  HYStarClipper(this.width);\n\n  @override\n  Rect getClip(Size size) {\n    return Rect.fromLTRB(0, 0, width, size.height);\n  }\n\n  //是否重新裁剪\n  @override\n  bool shouldReclip(HYStarClipper oldClipper) {\n    //宽度不一致，重新裁剪\n    return oldClipper.width != this.width;\n  }\n }\n ```\n","slug":"flutter/flutter框架一/14-虚线和星星评分","published":1,"updated":"2020-09-24T10:50:10.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengj002eu3s6eo41fwna","content":"<p>我们需要封装的组件效果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/14-%E8%99%9A%E7%BA%BF%E5%92%8C%E6%98%9F%E6%98%9F%E8%AF%84%E5%88%86/14_001.png\" alt=\"图1\"></p>\n<h1 id=\"一，虚线的封装\"><a href=\"#一，虚线的封装\" class=\"headerlink\" title=\"一，虚线的封装\"></a>一，虚线的封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYDashedLine extends StatelessWidget &#123;</span><br><span class=\"line\">  final Axis axis;</span><br><span class=\"line\">  final double dashedWidth;</span><br><span class=\"line\">  final double dashedHeight;</span><br><span class=\"line\">  final int count;</span><br><span class=\"line\">  final Color color;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYDashedLine(&#123;</span><br><span class=\"line\">    this.axis &#x3D; Axis.horizontal,</span><br><span class=\"line\">    this.dashedWidth &#x3D; 1,</span><br><span class=\"line\">    this.dashedHeight &#x3D; 1,</span><br><span class=\"line\">    this.count &#x3D; 10,</span><br><span class=\"line\">    this.color &#x3D; Colors.red</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Flex(</span><br><span class=\"line\">      direction: this.axis,</span><br><span class=\"line\">      mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">      children: List.generate(this.count, (_)&#123;</span><br><span class=\"line\">        return SizedBox(</span><br><span class=\"line\">          width: this.dashedWidth,</span><br><span class=\"line\">          height: this.dashedHeight,</span><br><span class=\"line\">          child: DecoratedBox(</span><br><span class=\"line\">            decoration:BoxDecoration(color: this.color),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，-星星评分的封装\"><a href=\"#二，-星星评分的封装\" class=\"headerlink\" title=\"二， 星星评分的封装\"></a>二， 星星评分的封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;cupertino.dart&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  星星评分</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class HYStarRating extends StatefulWidget &#123;</span><br><span class=\"line\">  final double rating;    &#x2F;&#x2F;当前分数</span><br><span class=\"line\">  final double maxRating; &#x2F;&#x2F;最大分数</span><br><span class=\"line\">  final int count;        &#x2F;&#x2F;星星数量</span><br><span class=\"line\">  final double size;         &#x2F;&#x2F;星星的大小</span><br><span class=\"line\">  final Color unSelectedColor;  &#x2F;&#x2F;未选中的颜色</span><br><span class=\"line\">  final Color selectedColor;    &#x2F;&#x2F;选中的颜色</span><br><span class=\"line\"></span><br><span class=\"line\">  final Widget unSelectedImage;   &#x2F;&#x2F;未选中的图片</span><br><span class=\"line\">  final Widget selectedImage;   &#x2F;&#x2F;选中的图片</span><br><span class=\"line\"></span><br><span class=\"line\">  HYStarRating(&#123;</span><br><span class=\"line\">    @required this.rating,</span><br><span class=\"line\">    this.maxRating &#x3D; 10,</span><br><span class=\"line\">    this.count &#x3D; 5,</span><br><span class=\"line\">    this.size &#x3D; 30,</span><br><span class=\"line\">    this.unSelectedColor &#x3D; const Color(0xffbbbbbb),</span><br><span class=\"line\">    this.selectedColor &#x3D; const Color(0xffff0000),</span><br><span class=\"line\">    Widget unSelectedImage,</span><br><span class=\"line\">    Widget selectedImage,</span><br><span class=\"line\">  &#125;):</span><br><span class=\"line\">        this.unSelectedImage &#x3D; unSelectedImage ?? Icon(Icons.star_border,size: size,color: unSelectedColor,),</span><br><span class=\"line\">        this.selectedImage &#x3D; selectedImage ?? Icon(Icons.star,size: size, color: selectedColor,);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYStarRatingState createState() &#x3D;&gt; _HYStarRatingState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYStarRatingState extends State&lt;HYStarRating&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Stack(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        Row(</span><br><span class=\"line\">          mainAxisSize: MainAxisSize.min,</span><br><span class=\"line\">          children: buildUnSelectedStar(),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Row(</span><br><span class=\"line\">          mainAxisSize: MainAxisSize.min,</span><br><span class=\"line\">          children: buildSelectedStar(),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;未选中的星星组件列表集合</span><br><span class=\"line\">  List&lt;Widget&gt; buildUnSelectedStar()&#123;</span><br><span class=\"line\">    return List.generate(this.widget.count, (index)&#123;</span><br><span class=\"line\">      return widget.unSelectedImage;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;选中的星星组件列表集合</span><br><span class=\"line\">  List&lt;Widget&gt; buildSelectedStar()&#123;</span><br><span class=\"line\">    final star &#x3D; widget.selectedImage;</span><br><span class=\"line\">    &#x2F;&#x2F;1. 创建stars</span><br><span class=\"line\">    List&lt;Widget&gt; stars &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2. 创建满填充的star</span><br><span class=\"line\">    double oneValue &#x3D; widget.maxRating &#x2F; widget.count;</span><br><span class=\"line\">    int entireCount &#x3D; (widget.rating &#x2F; oneValue).floor();  &#x2F;&#x2F;floor(): 向下取整</span><br><span class=\"line\">    for(int i &#x3D; 0; i &lt; entireCount; i++)&#123;</span><br><span class=\"line\">      stars.add(star);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3. 创建部分填充star</span><br><span class=\"line\">    double leftWidth &#x3D; ((widget.rating - oneValue * entireCount)&#x2F;oneValue) * widget.size;</span><br><span class=\"line\"></span><br><span class=\"line\">    final halfStar &#x3D; ClipRect(</span><br><span class=\"line\">      clipper: HYStarClipper(leftWidth),</span><br><span class=\"line\">      child: star,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    stars.add(halfStar);</span><br><span class=\"line\"></span><br><span class=\"line\">    return stars;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYStarClipper extends CustomClipper&lt;Rect&gt; &#123;</span><br><span class=\"line\">  double width;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYStarClipper(this.width);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Rect getClip(Size size) &#123;</span><br><span class=\"line\">    return Rect.fromLTRB(0, 0, width, size.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;是否重新裁剪</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  bool shouldReclip(HYStarClipper oldClipper) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;宽度不一致，重新裁剪</span><br><span class=\"line\">    return oldClipper.width !&#x3D; this.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我们需要封装的组件效果：</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/14-%E8%99%9A%E7%BA%BF%E5%92%8C%E6%98%9F%E6%98%9F%E8%AF%84%E5%88%86/14_001.png\" alt=\"图1\"></p>\n<h1 id=\"一，虚线的封装\"><a href=\"#一，虚线的封装\" class=\"headerlink\" title=\"一，虚线的封装\"></a>一，虚线的封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYDashedLine extends StatelessWidget &#123;</span><br><span class=\"line\">  final Axis axis;</span><br><span class=\"line\">  final double dashedWidth;</span><br><span class=\"line\">  final double dashedHeight;</span><br><span class=\"line\">  final int count;</span><br><span class=\"line\">  final Color color;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYDashedLine(&#123;</span><br><span class=\"line\">    this.axis &#x3D; Axis.horizontal,</span><br><span class=\"line\">    this.dashedWidth &#x3D; 1,</span><br><span class=\"line\">    this.dashedHeight &#x3D; 1,</span><br><span class=\"line\">    this.count &#x3D; 10,</span><br><span class=\"line\">    this.color &#x3D; Colors.red</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Flex(</span><br><span class=\"line\">      direction: this.axis,</span><br><span class=\"line\">      mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">      children: List.generate(this.count, (_)&#123;</span><br><span class=\"line\">        return SizedBox(</span><br><span class=\"line\">          width: this.dashedWidth,</span><br><span class=\"line\">          height: this.dashedHeight,</span><br><span class=\"line\">          child: DecoratedBox(</span><br><span class=\"line\">            decoration:BoxDecoration(color: this.color),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，-星星评分的封装\"><a href=\"#二，-星星评分的封装\" class=\"headerlink\" title=\"二， 星星评分的封装\"></a>二， 星星评分的封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;cupertino.dart&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  星星评分</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class HYStarRating extends StatefulWidget &#123;</span><br><span class=\"line\">  final double rating;    &#x2F;&#x2F;当前分数</span><br><span class=\"line\">  final double maxRating; &#x2F;&#x2F;最大分数</span><br><span class=\"line\">  final int count;        &#x2F;&#x2F;星星数量</span><br><span class=\"line\">  final double size;         &#x2F;&#x2F;星星的大小</span><br><span class=\"line\">  final Color unSelectedColor;  &#x2F;&#x2F;未选中的颜色</span><br><span class=\"line\">  final Color selectedColor;    &#x2F;&#x2F;选中的颜色</span><br><span class=\"line\"></span><br><span class=\"line\">  final Widget unSelectedImage;   &#x2F;&#x2F;未选中的图片</span><br><span class=\"line\">  final Widget selectedImage;   &#x2F;&#x2F;选中的图片</span><br><span class=\"line\"></span><br><span class=\"line\">  HYStarRating(&#123;</span><br><span class=\"line\">    @required this.rating,</span><br><span class=\"line\">    this.maxRating &#x3D; 10,</span><br><span class=\"line\">    this.count &#x3D; 5,</span><br><span class=\"line\">    this.size &#x3D; 30,</span><br><span class=\"line\">    this.unSelectedColor &#x3D; const Color(0xffbbbbbb),</span><br><span class=\"line\">    this.selectedColor &#x3D; const Color(0xffff0000),</span><br><span class=\"line\">    Widget unSelectedImage,</span><br><span class=\"line\">    Widget selectedImage,</span><br><span class=\"line\">  &#125;):</span><br><span class=\"line\">        this.unSelectedImage &#x3D; unSelectedImage ?? Icon(Icons.star_border,size: size,color: unSelectedColor,),</span><br><span class=\"line\">        this.selectedImage &#x3D; selectedImage ?? Icon(Icons.star,size: size, color: selectedColor,);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYStarRatingState createState() &#x3D;&gt; _HYStarRatingState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYStarRatingState extends State&lt;HYStarRating&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Stack(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        Row(</span><br><span class=\"line\">          mainAxisSize: MainAxisSize.min,</span><br><span class=\"line\">          children: buildUnSelectedStar(),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Row(</span><br><span class=\"line\">          mainAxisSize: MainAxisSize.min,</span><br><span class=\"line\">          children: buildSelectedStar(),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;未选中的星星组件列表集合</span><br><span class=\"line\">  List&lt;Widget&gt; buildUnSelectedStar()&#123;</span><br><span class=\"line\">    return List.generate(this.widget.count, (index)&#123;</span><br><span class=\"line\">      return widget.unSelectedImage;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;选中的星星组件列表集合</span><br><span class=\"line\">  List&lt;Widget&gt; buildSelectedStar()&#123;</span><br><span class=\"line\">    final star &#x3D; widget.selectedImage;</span><br><span class=\"line\">    &#x2F;&#x2F;1. 创建stars</span><br><span class=\"line\">    List&lt;Widget&gt; stars &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2. 创建满填充的star</span><br><span class=\"line\">    double oneValue &#x3D; widget.maxRating &#x2F; widget.count;</span><br><span class=\"line\">    int entireCount &#x3D; (widget.rating &#x2F; oneValue).floor();  &#x2F;&#x2F;floor(): 向下取整</span><br><span class=\"line\">    for(int i &#x3D; 0; i &lt; entireCount; i++)&#123;</span><br><span class=\"line\">      stars.add(star);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3. 创建部分填充star</span><br><span class=\"line\">    double leftWidth &#x3D; ((widget.rating - oneValue * entireCount)&#x2F;oneValue) * widget.size;</span><br><span class=\"line\"></span><br><span class=\"line\">    final halfStar &#x3D; ClipRect(</span><br><span class=\"line\">      clipper: HYStarClipper(leftWidth),</span><br><span class=\"line\">      child: star,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    stars.add(halfStar);</span><br><span class=\"line\"></span><br><span class=\"line\">    return stars;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYStarClipper extends CustomClipper&lt;Rect&gt; &#123;</span><br><span class=\"line\">  double width;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYStarClipper(this.width);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Rect getClip(Size size) &#123;</span><br><span class=\"line\">    return Rect.fromLTRB(0, 0, width, size.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;是否重新裁剪</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  bool shouldReclip(HYStarClipper oldClipper) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;宽度不一致，重新裁剪</span><br><span class=\"line\">    return oldClipper.width !&#x3D; this.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"15-豆瓣首页的实现","toc":true,"date":"2020-09-18T14:12:32.000Z","_content":"\n\n先来看一下，豆瓣首页的效果\n\n![图1](15-豆瓣首页的实现/15_001.png)\n\n通过上边的页面，我们可以通过下边的步骤，进行实现：\n\n- 1， 需要实现底部的tabbar\n- 2，通用请求工具封装\n- 3，页面请求工具封装\n- 4，首页item项的封装\n\n# 一， 底部tabbar的实现\n\n### 1.1， 首页代码\n\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:learn_flutter/douban/pages/main/bottom_bar_item.dart';\nimport 'package:learn_flutter/douban/pages/main/initialize_items.dart';\nimport 'package:learn_flutter/douban/widgets/dashed_line.dart';\nimport 'package:learn_flutter/douban/widgets/star_rating.dart';\n\nvoid main(){\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        primaryColor: Colors.green,\n        primaryColorLight: Colors.transparent,\n        splashColor: Colors.transparent\n      ),\n      home: HYMainPage()\n    );\n  }\n}\n\nclass HYMainPage extends StatefulWidget {\n  @override\n  _HYMainPageState createState() => _HYMainPageState();\n}\n\nclass _HYMainPageState extends State<HYMainPage> {\n  int _currentIndex = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: IndexedStack(\n        index: _currentIndex,\n        children: pages\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _currentIndex,\n        type: BottomNavigationBarType.fixed,\n        selectedFontSize: 12,               //选中的字体大小\n        unselectedFontSize: 12,             //未选中的字体大小\n        selectedItemColor: Colors.green,      //选中的颜色\n        unselectedItemColor: Colors.black, //未选中的颜色\n        items: items,\n        onTap: (index){\n          setState(() {\n            _currentIndex = index;\n          });\n        },\n      ),\n    );\n  }\n}\n\n```\n\n### 1.2，初始化项封装\n\n```\nimport 'package:flutter/material.dart';\n\nimport 'bottom_bar_item.dart';\nimport '../home/home_page.dart';\nimport '../subject/subject_page.dart';\n\n\nList<HYBottomBarItem> items = [\n  HYBottomBarItem(\"home\",\"首页\"),\n  HYBottomBarItem(\"subject\",\"书音影\"),\n  HYBottomBarItem(\"group\",\"小组\"),\n  HYBottomBarItem(\"mall\",\"市集\"),\n  HYBottomBarItem(\"profile\",\"我的\"),\n];\n\nList<Widget> pages = [\n  HYHomePage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n];\n1.3，底部tabbarItem的封装\nimport 'package:flutter/material.dart';\n\nclass HYBottomBarItem extends BottomNavigationBarItem {\n  HYBottomBarItem(String iconName, String title): super(\n    title: Text(title),\n    icon: Image.asset(\"assets/images/tabbar/${iconName}.png\",width: 30,height: 30,),\n    activeIcon: Image.asset(\"assets/images/tabbar/${iconName}_active.png\" ,width: 30,height: 30,),\n  );\n}\n\n```\n\n# 二，通用请求工具的封装\n\n### 2.1, 请求工具的实现\n\n```\nimport 'package:dio/dio.dart';\nimport 'http_config.dart';\nclass HttpRequest{\n  static BaseOptions baseOptions = BaseOptions(baseUrl: HttpConfig.baseURL, connectTimeout: HttpConfig.timeout);\n  static Dio dio = Dio(baseOptions);\n  static Future request(String url,\n      {String method = \"get\", Map<String,dynamic> params, Interceptor inter}) async {\n\n    //1.创建单独配置\n    final options = Options(method: method);\n\n    //全局拦截器\n    //创建默认的全局拦截器\n    Interceptor defaultInter = InterceptorsWrapper(\n      onRequest: (options){\n        print(\"请求拦截\");\n        return options;\n      },\n      onResponse: (response){\n        print(\"响应拦截\");\n        return response;\n      },\n      onError: (err){\n        print(\"错误拦截\");\n        return err;\n      }\n    );\n\n    List<Interceptor> inters = [defaultInter];\n    //请求单独的拦截器(传过来的)\n    if(inter != null){\n      inters.add(inter);\n    }\n    dio.interceptors.addAll(inters);\n\n    //2.发送网络请求\n    try{\n      Response response = await dio.request(url,queryParameters: params,options: options);\n      return response.data;\n    } on DioError catch(e){\n      return Future.error(e);\n    }\n  }\n}\n```\n\n### 2.1, 配置类\n\n```\nclass HttpConfig{\n  static const String baseURL = \"https://douban-api.uieee.com/v2\";\n  static const int timeout = 10000;\n}\n\nclass HomeConfig{\n  static const int count = 20;\n}\n\n```\n\n# 三，首页请求工具封装\n\n![图1](15-豆瓣首页的实现/15_002.png)\n\n# 四，首页Item的实现\n\n![图1](15-豆瓣首页的实现/15_003.png)\n\n首页item, 我们可以分为上中下三块，可以使用Column包裹\n\n![图1](15-豆瓣首页的实现/15_004.png)\n\n\n中间部分，我们可以通过Row包括， 电影信息这块，我们可以通过Column包裹\n实现代码如下：\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:learn_flutter/douban/model/home_model.dart';\nimport 'package:learn_flutter/douban/utils/log.dart';\nimport 'package:learn_flutter/douban/widgets/dashed_line.dart';\nimport 'package:learn_flutter/douban/widgets/star_rating.dart';\n\nclass HYHomeMovieItem extends StatelessWidget {\n  final MovieItem item;\n\n  HYHomeMovieItem(this.item);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.all(8),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        border: Border(\n          bottom: BorderSide(width: 10,color: Color(0xffe2e2e2))\n        )\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          buildHeader(),\n          SizedBox(height:8),\n          buildContent(),\n          SizedBox(height:8),\n          buildFooter(),\n        ],\n      ),\n    );\n  }\n\n  //1.构建header\n  Widget buildHeader(){\n    return Container(\n      padding: EdgeInsets.fromLTRB(9, 4, 9, 4),\n      decoration: BoxDecoration(\n        color: Color.fromARGB(255, 238, 205, 144),\n        borderRadius: BorderRadius.circular(3),\n      ),\n      child: Text(\n        \"No.${item.rank}\",\n        style: TextStyle(\n          fontSize: 18,\n          color: Color.fromARGB(255, 131, 95, 36)\n        ),\n      ),\n    );\n  }\n\n  //2.构建内容\n  Widget buildContent(){\n    return Container(\n      height: 150,\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          buildContentImage(),\n          SizedBox(width: 8,),\n          buildContentInfo(),\n          SizedBox(width: 8,),\n          buildContentDashedLine(),\n          SizedBox(width: 8,),\n          buildContentWish()\n        ],\n      ),\n    );\n  }\n\n  //2.1 构建内容 - 图片\n  Widget buildContentImage() {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(5),\n      child: Image.network(item.imageURL, width: 100,),\n    );\n  }\n\n  //2.2 构建内容信息\n  Widget buildContentInfo(){\n    return Expanded(\n      child: Container(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: <Widget>[\n            buildContentInfoTitle(),\n            SizedBox(height: 5,),\n            buildContentInfoRating(),\n            SizedBox(height: 5,),\n            buildContentInfoDesc(),\n          ],\n        ),\n      ),\n    );\n  }\n\n  //2.2.1 构建内容信息 - 标题\n  Widget buildContentInfoTitle(){\n//    hyLog(\"hylog test\",StackTrace.current);\n    return Text.rich(\n        TextSpan(\n          children: [\n            WidgetSpan(\n              child: Icon(Icons.play_circle_outline,color: Colors.pink, size: 30,),\n              baseline: TextBaseline.ideographic,\n              alignment: PlaceholderAlignment.middle\n            ),\n            ...item.title.runes.map((rune){\n              return WidgetSpan(\n                  baseline: TextBaseline.ideographic,\n                  alignment: PlaceholderAlignment.middle,\n                  child: Text(\n                    new String.fromCharCode(rune),\n                    style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold)\n              ));\n            }).toList(),\n            WidgetSpan(\n              baseline: TextBaseline.ideographic,\n              alignment: PlaceholderAlignment.middle,\n              child: Text(\n                  \"(${item.playDate})\",\n                  style: TextStyle(fontSize: 12,color: Color(0xffbbbbbb))\n              )\n            ),\n          ]\n        )\n    );\n  }\n\n  //2.2.2 构建内容信息 - 评分\n  Widget buildContentInfoRating(){\n    return FittedBox(\n      child: Row(\n        children: <Widget>[\n          HYStarRating(\n            rating: item.rating,\n            size: 20,\n          ),\n          SizedBox(width: 5,),\n          Text(\"${item.rating}\",style: TextStyle(color: Color(0xffbbbbbb)),)\n        ],\n      ),\n    );\n  }\n\n  //2.2.3 构建内容信息 - 描述\n  Widget buildContentInfoDesc(){\n    final genresString = item.genres.join(\" \");\n    final directorString = item.director.name;\n    final actorString = item.casts.map((item) => item.name).join(\" \");\n\n    return Text(\n      \"${genresString} / ${directorString} / ${actorString}\",\n      maxLines: 2,\n      overflow: TextOverflow.ellipsis,\n      style: TextStyle(fontSize: 16),\n    );\n  }\n\n  //2.3 构建分割线\n  Widget buildContentDashedLine(){\n    return Container(\n      width: 10,\n      height: 100,\n      child: HYDashedLine(\n        axis: Axis.vertical,\n        dashedWidth: 1,\n        dashedHeight: 5,\n        color: Colors.red\n      ),\n    );\n  }\n\n  //2.4 构建想看\n  Widget buildContentWish(){\n    return Container(\n      width: 60,\n      child: Column(\n        children: <Widget>[\n          SizedBox(height: 20,),\n          Image.asset(\"assets/images/home/wish.png\",width: 30,height: 30,),\n          Text(\"想看\",style: TextStyle(fontSize: 16,color:Color.fromARGB(255, 235, 170, 60)),)\n        ],\n      ),\n    );\n  }\n\n  //3. 构建电影简介(原生名称)\n  Widget buildFooter(){\n    return Container(\n      padding: EdgeInsets.all(12),\n      width: double.infinity,\n      decoration: BoxDecoration(\n        color: Color(0xfff2f2f2),\n        borderRadius: BorderRadius.circular(5),\n      ),\n      child: Text(item.origianlTitle,style: TextStyle(fontSize: 18,color: Colors.black54),),\n    );\n  }\n}\n```\n","source":"_posts/flutter/flutter框架一/15-豆瓣首页的实现.md","raw":"---\ntitle: 15-豆瓣首页的实现\ntoc: true\ndate: 2020-09-18 22:12:32\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n先来看一下，豆瓣首页的效果\n\n![图1](15-豆瓣首页的实现/15_001.png)\n\n通过上边的页面，我们可以通过下边的步骤，进行实现：\n\n- 1， 需要实现底部的tabbar\n- 2，通用请求工具封装\n- 3，页面请求工具封装\n- 4，首页item项的封装\n\n# 一， 底部tabbar的实现\n\n### 1.1， 首页代码\n\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:learn_flutter/douban/pages/main/bottom_bar_item.dart';\nimport 'package:learn_flutter/douban/pages/main/initialize_items.dart';\nimport 'package:learn_flutter/douban/widgets/dashed_line.dart';\nimport 'package:learn_flutter/douban/widgets/star_rating.dart';\n\nvoid main(){\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        primaryColor: Colors.green,\n        primaryColorLight: Colors.transparent,\n        splashColor: Colors.transparent\n      ),\n      home: HYMainPage()\n    );\n  }\n}\n\nclass HYMainPage extends StatefulWidget {\n  @override\n  _HYMainPageState createState() => _HYMainPageState();\n}\n\nclass _HYMainPageState extends State<HYMainPage> {\n  int _currentIndex = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: IndexedStack(\n        index: _currentIndex,\n        children: pages\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _currentIndex,\n        type: BottomNavigationBarType.fixed,\n        selectedFontSize: 12,               //选中的字体大小\n        unselectedFontSize: 12,             //未选中的字体大小\n        selectedItemColor: Colors.green,      //选中的颜色\n        unselectedItemColor: Colors.black, //未选中的颜色\n        items: items,\n        onTap: (index){\n          setState(() {\n            _currentIndex = index;\n          });\n        },\n      ),\n    );\n  }\n}\n\n```\n\n### 1.2，初始化项封装\n\n```\nimport 'package:flutter/material.dart';\n\nimport 'bottom_bar_item.dart';\nimport '../home/home_page.dart';\nimport '../subject/subject_page.dart';\n\n\nList<HYBottomBarItem> items = [\n  HYBottomBarItem(\"home\",\"首页\"),\n  HYBottomBarItem(\"subject\",\"书音影\"),\n  HYBottomBarItem(\"group\",\"小组\"),\n  HYBottomBarItem(\"mall\",\"市集\"),\n  HYBottomBarItem(\"profile\",\"我的\"),\n];\n\nList<Widget> pages = [\n  HYHomePage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n  HYSubjectPage(),\n];\n1.3，底部tabbarItem的封装\nimport 'package:flutter/material.dart';\n\nclass HYBottomBarItem extends BottomNavigationBarItem {\n  HYBottomBarItem(String iconName, String title): super(\n    title: Text(title),\n    icon: Image.asset(\"assets/images/tabbar/${iconName}.png\",width: 30,height: 30,),\n    activeIcon: Image.asset(\"assets/images/tabbar/${iconName}_active.png\" ,width: 30,height: 30,),\n  );\n}\n\n```\n\n# 二，通用请求工具的封装\n\n### 2.1, 请求工具的实现\n\n```\nimport 'package:dio/dio.dart';\nimport 'http_config.dart';\nclass HttpRequest{\n  static BaseOptions baseOptions = BaseOptions(baseUrl: HttpConfig.baseURL, connectTimeout: HttpConfig.timeout);\n  static Dio dio = Dio(baseOptions);\n  static Future request(String url,\n      {String method = \"get\", Map<String,dynamic> params, Interceptor inter}) async {\n\n    //1.创建单独配置\n    final options = Options(method: method);\n\n    //全局拦截器\n    //创建默认的全局拦截器\n    Interceptor defaultInter = InterceptorsWrapper(\n      onRequest: (options){\n        print(\"请求拦截\");\n        return options;\n      },\n      onResponse: (response){\n        print(\"响应拦截\");\n        return response;\n      },\n      onError: (err){\n        print(\"错误拦截\");\n        return err;\n      }\n    );\n\n    List<Interceptor> inters = [defaultInter];\n    //请求单独的拦截器(传过来的)\n    if(inter != null){\n      inters.add(inter);\n    }\n    dio.interceptors.addAll(inters);\n\n    //2.发送网络请求\n    try{\n      Response response = await dio.request(url,queryParameters: params,options: options);\n      return response.data;\n    } on DioError catch(e){\n      return Future.error(e);\n    }\n  }\n}\n```\n\n### 2.1, 配置类\n\n```\nclass HttpConfig{\n  static const String baseURL = \"https://douban-api.uieee.com/v2\";\n  static const int timeout = 10000;\n}\n\nclass HomeConfig{\n  static const int count = 20;\n}\n\n```\n\n# 三，首页请求工具封装\n\n![图1](15-豆瓣首页的实现/15_002.png)\n\n# 四，首页Item的实现\n\n![图1](15-豆瓣首页的实现/15_003.png)\n\n首页item, 我们可以分为上中下三块，可以使用Column包裹\n\n![图1](15-豆瓣首页的实现/15_004.png)\n\n\n中间部分，我们可以通过Row包括， 电影信息这块，我们可以通过Column包裹\n实现代码如下：\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:learn_flutter/douban/model/home_model.dart';\nimport 'package:learn_flutter/douban/utils/log.dart';\nimport 'package:learn_flutter/douban/widgets/dashed_line.dart';\nimport 'package:learn_flutter/douban/widgets/star_rating.dart';\n\nclass HYHomeMovieItem extends StatelessWidget {\n  final MovieItem item;\n\n  HYHomeMovieItem(this.item);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      padding: EdgeInsets.all(8),\n      decoration: BoxDecoration(\n        color: Colors.white,\n        border: Border(\n          bottom: BorderSide(width: 10,color: Color(0xffe2e2e2))\n        )\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          buildHeader(),\n          SizedBox(height:8),\n          buildContent(),\n          SizedBox(height:8),\n          buildFooter(),\n        ],\n      ),\n    );\n  }\n\n  //1.构建header\n  Widget buildHeader(){\n    return Container(\n      padding: EdgeInsets.fromLTRB(9, 4, 9, 4),\n      decoration: BoxDecoration(\n        color: Color.fromARGB(255, 238, 205, 144),\n        borderRadius: BorderRadius.circular(3),\n      ),\n      child: Text(\n        \"No.${item.rank}\",\n        style: TextStyle(\n          fontSize: 18,\n          color: Color.fromARGB(255, 131, 95, 36)\n        ),\n      ),\n    );\n  }\n\n  //2.构建内容\n  Widget buildContent(){\n    return Container(\n      height: 150,\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          buildContentImage(),\n          SizedBox(width: 8,),\n          buildContentInfo(),\n          SizedBox(width: 8,),\n          buildContentDashedLine(),\n          SizedBox(width: 8,),\n          buildContentWish()\n        ],\n      ),\n    );\n  }\n\n  //2.1 构建内容 - 图片\n  Widget buildContentImage() {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(5),\n      child: Image.network(item.imageURL, width: 100,),\n    );\n  }\n\n  //2.2 构建内容信息\n  Widget buildContentInfo(){\n    return Expanded(\n      child: Container(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: <Widget>[\n            buildContentInfoTitle(),\n            SizedBox(height: 5,),\n            buildContentInfoRating(),\n            SizedBox(height: 5,),\n            buildContentInfoDesc(),\n          ],\n        ),\n      ),\n    );\n  }\n\n  //2.2.1 构建内容信息 - 标题\n  Widget buildContentInfoTitle(){\n//    hyLog(\"hylog test\",StackTrace.current);\n    return Text.rich(\n        TextSpan(\n          children: [\n            WidgetSpan(\n              child: Icon(Icons.play_circle_outline,color: Colors.pink, size: 30,),\n              baseline: TextBaseline.ideographic,\n              alignment: PlaceholderAlignment.middle\n            ),\n            ...item.title.runes.map((rune){\n              return WidgetSpan(\n                  baseline: TextBaseline.ideographic,\n                  alignment: PlaceholderAlignment.middle,\n                  child: Text(\n                    new String.fromCharCode(rune),\n                    style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold)\n              ));\n            }).toList(),\n            WidgetSpan(\n              baseline: TextBaseline.ideographic,\n              alignment: PlaceholderAlignment.middle,\n              child: Text(\n                  \"(${item.playDate})\",\n                  style: TextStyle(fontSize: 12,color: Color(0xffbbbbbb))\n              )\n            ),\n          ]\n        )\n    );\n  }\n\n  //2.2.2 构建内容信息 - 评分\n  Widget buildContentInfoRating(){\n    return FittedBox(\n      child: Row(\n        children: <Widget>[\n          HYStarRating(\n            rating: item.rating,\n            size: 20,\n          ),\n          SizedBox(width: 5,),\n          Text(\"${item.rating}\",style: TextStyle(color: Color(0xffbbbbbb)),)\n        ],\n      ),\n    );\n  }\n\n  //2.2.3 构建内容信息 - 描述\n  Widget buildContentInfoDesc(){\n    final genresString = item.genres.join(\" \");\n    final directorString = item.director.name;\n    final actorString = item.casts.map((item) => item.name).join(\" \");\n\n    return Text(\n      \"${genresString} / ${directorString} / ${actorString}\",\n      maxLines: 2,\n      overflow: TextOverflow.ellipsis,\n      style: TextStyle(fontSize: 16),\n    );\n  }\n\n  //2.3 构建分割线\n  Widget buildContentDashedLine(){\n    return Container(\n      width: 10,\n      height: 100,\n      child: HYDashedLine(\n        axis: Axis.vertical,\n        dashedWidth: 1,\n        dashedHeight: 5,\n        color: Colors.red\n      ),\n    );\n  }\n\n  //2.4 构建想看\n  Widget buildContentWish(){\n    return Container(\n      width: 60,\n      child: Column(\n        children: <Widget>[\n          SizedBox(height: 20,),\n          Image.asset(\"assets/images/home/wish.png\",width: 30,height: 30,),\n          Text(\"想看\",style: TextStyle(fontSize: 16,color:Color.fromARGB(255, 235, 170, 60)),)\n        ],\n      ),\n    );\n  }\n\n  //3. 构建电影简介(原生名称)\n  Widget buildFooter(){\n    return Container(\n      padding: EdgeInsets.all(12),\n      width: double.infinity,\n      decoration: BoxDecoration(\n        color: Color(0xfff2f2f2),\n        borderRadius: BorderRadius.circular(5),\n      ),\n      child: Text(item.origianlTitle,style: TextStyle(fontSize: 18,color: Colors.black54),),\n    );\n  }\n}\n```\n","slug":"flutter/flutter框架一/15-豆瓣首页的实现","published":1,"updated":"2020-09-24T10:54:36.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengk002gu3s60fd0bvgd","content":"<p>先来看一下，豆瓣首页的效果</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_001.png\" alt=\"图1\"></p>\n<p>通过上边的页面，我们可以通过下边的步骤，进行实现：</p>\n<ul>\n<li>1， 需要实现底部的tabbar</li>\n<li>2，通用请求工具封装</li>\n<li>3，页面请求工具封装</li>\n<li>4，首页item项的封装</li>\n</ul>\n<h1 id=\"一，-底部tabbar的实现\"><a href=\"#一，-底部tabbar的实现\" class=\"headerlink\" title=\"一， 底部tabbar的实现\"></a>一， 底部tabbar的实现</h1><h3 id=\"1-1，-首页代码\"><a href=\"#1-1，-首页代码\" class=\"headerlink\" title=\"1.1， 首页代码\"></a>1.1， 首页代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;cupertino.dart&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;pages&#x2F;main&#x2F;bottom_bar_item.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;pages&#x2F;main&#x2F;initialize_items.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;dashed_line.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;star_rating.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()&#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.green,</span><br><span class=\"line\">        primaryColorLight: Colors.transparent,</span><br><span class=\"line\">        splashColor: Colors.transparent</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: HYMainPage()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYMainPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYMainPageState createState() &#x3D;&gt; _HYMainPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYMainPageState extends State&lt;HYMainPage&gt; &#123;</span><br><span class=\"line\">  int _currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: IndexedStack(</span><br><span class=\"line\">        index: _currentIndex,</span><br><span class=\"line\">        children: pages</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">        currentIndex: _currentIndex,</span><br><span class=\"line\">        type: BottomNavigationBarType.fixed,</span><br><span class=\"line\">        selectedFontSize: 12,               &#x2F;&#x2F;选中的字体大小</span><br><span class=\"line\">        unselectedFontSize: 12,             &#x2F;&#x2F;未选中的字体大小</span><br><span class=\"line\">        selectedItemColor: Colors.green,      &#x2F;&#x2F;选中的颜色</span><br><span class=\"line\">        unselectedItemColor: Colors.black, &#x2F;&#x2F;未选中的颜色</span><br><span class=\"line\">        items: items,</span><br><span class=\"line\">        onTap: (index)&#123;</span><br><span class=\"line\">          setState(() &#123;</span><br><span class=\"line\">            _currentIndex &#x3D; index;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2，初始化项封装\"><a href=\"#1-2，初始化项封装\" class=\"headerlink\" title=\"1.2，初始化项封装\"></a>1.2，初始化项封装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;bottom_bar_item.dart&#39;;</span><br><span class=\"line\">import &#39;..&#x2F;home&#x2F;home_page.dart&#39;;</span><br><span class=\"line\">import &#39;..&#x2F;subject&#x2F;subject_page.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;HYBottomBarItem&gt; items &#x3D; [</span><br><span class=\"line\">  HYBottomBarItem(&quot;home&quot;,&quot;首页&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;subject&quot;,&quot;书音影&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;group&quot;,&quot;小组&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;mall&quot;,&quot;市集&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;profile&quot;,&quot;我的&quot;),</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Widget&gt; pages &#x3D; [</span><br><span class=\"line\">  HYHomePage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">];</span><br><span class=\"line\">1.3，底部tabbarItem的封装</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYBottomBarItem extends BottomNavigationBarItem &#123;</span><br><span class=\"line\">  HYBottomBarItem(String iconName, String title): super(</span><br><span class=\"line\">    title: Text(title),</span><br><span class=\"line\">    icon: Image.asset(&quot;assets&#x2F;images&#x2F;tabbar&#x2F;$&#123;iconName&#125;.png&quot;,width: 30,height: 30,),</span><br><span class=\"line\">    activeIcon: Image.asset(&quot;assets&#x2F;images&#x2F;tabbar&#x2F;$&#123;iconName&#125;_active.png&quot; ,width: 30,height: 30,),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，通用请求工具的封装\"><a href=\"#二，通用请求工具的封装\" class=\"headerlink\" title=\"二，通用请求工具的封装\"></a>二，通用请求工具的封装</h1><h3 id=\"2-1-请求工具的实现\"><a href=\"#2-1-请求工具的实现\" class=\"headerlink\" title=\"2.1, 请求工具的实现\"></a>2.1, 请求工具的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:dio&#x2F;dio.dart&#39;;</span><br><span class=\"line\">import &#39;http_config.dart&#39;;</span><br><span class=\"line\">class HttpRequest&#123;</span><br><span class=\"line\">  static BaseOptions baseOptions &#x3D; BaseOptions(baseUrl: HttpConfig.baseURL, connectTimeout: HttpConfig.timeout);</span><br><span class=\"line\">  static Dio dio &#x3D; Dio(baseOptions);</span><br><span class=\"line\">  static Future request(String url,</span><br><span class=\"line\">      &#123;String method &#x3D; &quot;get&quot;, Map&lt;String,dynamic&gt; params, Interceptor inter&#125;) async &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1.创建单独配置</span><br><span class=\"line\">    final options &#x3D; Options(method: method);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;全局拦截器</span><br><span class=\"line\">    &#x2F;&#x2F;创建默认的全局拦截器</span><br><span class=\"line\">    Interceptor defaultInter &#x3D; InterceptorsWrapper(</span><br><span class=\"line\">      onRequest: (options)&#123;</span><br><span class=\"line\">        print(&quot;请求拦截&quot;);</span><br><span class=\"line\">        return options;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onResponse: (response)&#123;</span><br><span class=\"line\">        print(&quot;响应拦截&quot;);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onError: (err)&#123;</span><br><span class=\"line\">        print(&quot;错误拦截&quot;);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Interceptor&gt; inters &#x3D; [defaultInter];</span><br><span class=\"line\">    &#x2F;&#x2F;请求单独的拦截器(传过来的)</span><br><span class=\"line\">    if(inter !&#x3D; null)&#123;</span><br><span class=\"line\">      inters.add(inter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dio.interceptors.addAll(inters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2.发送网络请求</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">      Response response &#x3D; await dio.request(url,queryParameters: params,options: options);</span><br><span class=\"line\">      return response.data;</span><br><span class=\"line\">    &#125; on DioError catch(e)&#123;</span><br><span class=\"line\">      return Future.error(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-配置类\"><a href=\"#2-1-配置类\" class=\"headerlink\" title=\"2.1, 配置类\"></a>2.1, 配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HttpConfig&#123;</span><br><span class=\"line\">  static const String baseURL &#x3D; &quot;https:&#x2F;&#x2F;douban-api.uieee.com&#x2F;v2&quot;;</span><br><span class=\"line\">  static const int timeout &#x3D; 10000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeConfig&#123;</span><br><span class=\"line\">  static const int count &#x3D; 20;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三，首页请求工具封装\"><a href=\"#三，首页请求工具封装\" class=\"headerlink\" title=\"三，首页请求工具封装\"></a>三，首页请求工具封装</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_002.png\" alt=\"图1\"></p>\n<h1 id=\"四，首页Item的实现\"><a href=\"#四，首页Item的实现\" class=\"headerlink\" title=\"四，首页Item的实现\"></a>四，首页Item的实现</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_003.png\" alt=\"图1\"></p>\n<p>首页item, 我们可以分为上中下三块，可以使用Column包裹</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_004.png\" alt=\"图1\"></p>\n<p>中间部分，我们可以通过Row包括， 电影信息这块，我们可以通过Column包裹<br>实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;model&#x2F;home_model.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;utils&#x2F;log.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;dashed_line.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;star_rating.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomeMovieItem extends StatelessWidget &#123;</span><br><span class=\"line\">  final MovieItem item;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYHomeMovieItem(this.item);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.all(8),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        border: Border(</span><br><span class=\"line\">          bottom: BorderSide(width: 10,color: Color(0xffe2e2e2))</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          buildHeader(),</span><br><span class=\"line\">          SizedBox(height:8),</span><br><span class=\"line\">          buildContent(),</span><br><span class=\"line\">          SizedBox(height:8),</span><br><span class=\"line\">          buildFooter(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;1.构建header</span><br><span class=\"line\">  Widget buildHeader()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.fromLTRB(9, 4, 9, 4),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Color.fromARGB(255, 238, 205, 144),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(3),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        &quot;No.$&#123;item.rank&#125;&quot;,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">          fontSize: 18,</span><br><span class=\"line\">          color: Color.fromARGB(255, 131, 95, 36)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.构建内容</span><br><span class=\"line\">  Widget buildContent()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 150,</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          buildContentImage(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentInfo(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentDashedLine(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentWish()</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.1 构建内容 - 图片</span><br><span class=\"line\">  Widget buildContentImage() &#123;</span><br><span class=\"line\">    return ClipRRect(</span><br><span class=\"line\">      borderRadius: BorderRadius.circular(5),</span><br><span class=\"line\">      child: Image.network(item.imageURL, width: 100,),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2 构建内容信息</span><br><span class=\"line\">  Widget buildContentInfo()&#123;</span><br><span class=\"line\">    return Expanded(</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            buildContentInfoTitle(),</span><br><span class=\"line\">            SizedBox(height: 5,),</span><br><span class=\"line\">            buildContentInfoRating(),</span><br><span class=\"line\">            SizedBox(height: 5,),</span><br><span class=\"line\">            buildContentInfoDesc(),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.1 构建内容信息 - 标题</span><br><span class=\"line\">  Widget buildContentInfoTitle()&#123;</span><br><span class=\"line\">&#x2F;&#x2F;    hyLog(&quot;hylog test&quot;,StackTrace.current);</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">        TextSpan(</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            WidgetSpan(</span><br><span class=\"line\">              child: Icon(Icons.play_circle_outline,color: Colors.pink, size: 30,),</span><br><span class=\"line\">              baseline: TextBaseline.ideographic,</span><br><span class=\"line\">              alignment: PlaceholderAlignment.middle</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ...item.title.runes.map((rune)&#123;</span><br><span class=\"line\">              return WidgetSpan(</span><br><span class=\"line\">                  baseline: TextBaseline.ideographic,</span><br><span class=\"line\">                  alignment: PlaceholderAlignment.middle,</span><br><span class=\"line\">                  child: Text(</span><br><span class=\"line\">                    new String.fromCharCode(rune),</span><br><span class=\"line\">                    style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold)</span><br><span class=\"line\">              ));</span><br><span class=\"line\">            &#125;).toList(),</span><br><span class=\"line\">            WidgetSpan(</span><br><span class=\"line\">              baseline: TextBaseline.ideographic,</span><br><span class=\"line\">              alignment: PlaceholderAlignment.middle,</span><br><span class=\"line\">              child: Text(</span><br><span class=\"line\">                  &quot;($&#123;item.playDate&#125;)&quot;,</span><br><span class=\"line\">                  style: TextStyle(fontSize: 12,color: Color(0xffbbbbbb))</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.2 构建内容信息 - 评分</span><br><span class=\"line\">  Widget buildContentInfoRating()&#123;</span><br><span class=\"line\">    return FittedBox(</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HYStarRating(</span><br><span class=\"line\">            rating: item.rating,</span><br><span class=\"line\">            size: 20,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          SizedBox(width: 5,),</span><br><span class=\"line\">          Text(&quot;$&#123;item.rating&#125;&quot;,style: TextStyle(color: Color(0xffbbbbbb)),)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.3 构建内容信息 - 描述</span><br><span class=\"line\">  Widget buildContentInfoDesc()&#123;</span><br><span class=\"line\">    final genresString &#x3D; item.genres.join(&quot; &quot;);</span><br><span class=\"line\">    final directorString &#x3D; item.director.name;</span><br><span class=\"line\">    final actorString &#x3D; item.casts.map((item) &#x3D;&gt; item.name).join(&quot; &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return Text(</span><br><span class=\"line\">      &quot;$&#123;genresString&#125; &#x2F; $&#123;directorString&#125; &#x2F; $&#123;actorString&#125;&quot;,</span><br><span class=\"line\">      maxLines: 2,</span><br><span class=\"line\">      overflow: TextOverflow.ellipsis,</span><br><span class=\"line\">      style: TextStyle(fontSize: 16),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.3 构建分割线</span><br><span class=\"line\">  Widget buildContentDashedLine()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 10,</span><br><span class=\"line\">      height: 100,</span><br><span class=\"line\">      child: HYDashedLine(</span><br><span class=\"line\">        axis: Axis.vertical,</span><br><span class=\"line\">        dashedWidth: 1,</span><br><span class=\"line\">        dashedHeight: 5,</span><br><span class=\"line\">        color: Colors.red</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.4 构建想看</span><br><span class=\"line\">  Widget buildContentWish()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 60,</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Image.asset(&quot;assets&#x2F;images&#x2F;home&#x2F;wish.png&quot;,width: 30,height: 30,),</span><br><span class=\"line\">          Text(&quot;想看&quot;,style: TextStyle(fontSize: 16,color:Color.fromARGB(255, 235, 170, 60)),)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;3. 构建电影简介(原生名称)</span><br><span class=\"line\">  Widget buildFooter()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.all(12),</span><br><span class=\"line\">      width: double.infinity,</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Color(0xfff2f2f2),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(5),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Text(item.origianlTitle,style: TextStyle(fontSize: 18,color: Colors.black54),),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>先来看一下，豆瓣首页的效果</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_001.png\" alt=\"图1\"></p>\n<p>通过上边的页面，我们可以通过下边的步骤，进行实现：</p>\n<ul>\n<li>1， 需要实现底部的tabbar</li>\n<li>2，通用请求工具封装</li>\n<li>3，页面请求工具封装</li>\n<li>4，首页item项的封装</li>\n</ul>\n<h1 id=\"一，-底部tabbar的实现\"><a href=\"#一，-底部tabbar的实现\" class=\"headerlink\" title=\"一， 底部tabbar的实现\"></a>一， 底部tabbar的实现</h1><h3 id=\"1-1，-首页代码\"><a href=\"#1-1，-首页代码\" class=\"headerlink\" title=\"1.1， 首页代码\"></a>1.1， 首页代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;cupertino.dart&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;pages&#x2F;main&#x2F;bottom_bar_item.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;pages&#x2F;main&#x2F;initialize_items.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;dashed_line.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;star_rating.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()&#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: false,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.green,</span><br><span class=\"line\">        primaryColorLight: Colors.transparent,</span><br><span class=\"line\">        splashColor: Colors.transparent</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: HYMainPage()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYMainPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYMainPageState createState() &#x3D;&gt; _HYMainPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYMainPageState extends State&lt;HYMainPage&gt; &#123;</span><br><span class=\"line\">  int _currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: IndexedStack(</span><br><span class=\"line\">        index: _currentIndex,</span><br><span class=\"line\">        children: pages</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">        currentIndex: _currentIndex,</span><br><span class=\"line\">        type: BottomNavigationBarType.fixed,</span><br><span class=\"line\">        selectedFontSize: 12,               &#x2F;&#x2F;选中的字体大小</span><br><span class=\"line\">        unselectedFontSize: 12,             &#x2F;&#x2F;未选中的字体大小</span><br><span class=\"line\">        selectedItemColor: Colors.green,      &#x2F;&#x2F;选中的颜色</span><br><span class=\"line\">        unselectedItemColor: Colors.black, &#x2F;&#x2F;未选中的颜色</span><br><span class=\"line\">        items: items,</span><br><span class=\"line\">        onTap: (index)&#123;</span><br><span class=\"line\">          setState(() &#123;</span><br><span class=\"line\">            _currentIndex &#x3D; index;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2，初始化项封装\"><a href=\"#1-2，初始化项封装\" class=\"headerlink\" title=\"1.2，初始化项封装\"></a>1.2，初始化项封装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#39;bottom_bar_item.dart&#39;;</span><br><span class=\"line\">import &#39;..&#x2F;home&#x2F;home_page.dart&#39;;</span><br><span class=\"line\">import &#39;..&#x2F;subject&#x2F;subject_page.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;HYBottomBarItem&gt; items &#x3D; [</span><br><span class=\"line\">  HYBottomBarItem(&quot;home&quot;,&quot;首页&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;subject&quot;,&quot;书音影&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;group&quot;,&quot;小组&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;mall&quot;,&quot;市集&quot;),</span><br><span class=\"line\">  HYBottomBarItem(&quot;profile&quot;,&quot;我的&quot;),</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Widget&gt; pages &#x3D; [</span><br><span class=\"line\">  HYHomePage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">  HYSubjectPage(),</span><br><span class=\"line\">];</span><br><span class=\"line\">1.3，底部tabbarItem的封装</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYBottomBarItem extends BottomNavigationBarItem &#123;</span><br><span class=\"line\">  HYBottomBarItem(String iconName, String title): super(</span><br><span class=\"line\">    title: Text(title),</span><br><span class=\"line\">    icon: Image.asset(&quot;assets&#x2F;images&#x2F;tabbar&#x2F;$&#123;iconName&#125;.png&quot;,width: 30,height: 30,),</span><br><span class=\"line\">    activeIcon: Image.asset(&quot;assets&#x2F;images&#x2F;tabbar&#x2F;$&#123;iconName&#125;_active.png&quot; ,width: 30,height: 30,),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二，通用请求工具的封装\"><a href=\"#二，通用请求工具的封装\" class=\"headerlink\" title=\"二，通用请求工具的封装\"></a>二，通用请求工具的封装</h1><h3 id=\"2-1-请求工具的实现\"><a href=\"#2-1-请求工具的实现\" class=\"headerlink\" title=\"2.1, 请求工具的实现\"></a>2.1, 请求工具的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:dio&#x2F;dio.dart&#39;;</span><br><span class=\"line\">import &#39;http_config.dart&#39;;</span><br><span class=\"line\">class HttpRequest&#123;</span><br><span class=\"line\">  static BaseOptions baseOptions &#x3D; BaseOptions(baseUrl: HttpConfig.baseURL, connectTimeout: HttpConfig.timeout);</span><br><span class=\"line\">  static Dio dio &#x3D; Dio(baseOptions);</span><br><span class=\"line\">  static Future request(String url,</span><br><span class=\"line\">      &#123;String method &#x3D; &quot;get&quot;, Map&lt;String,dynamic&gt; params, Interceptor inter&#125;) async &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1.创建单独配置</span><br><span class=\"line\">    final options &#x3D; Options(method: method);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;全局拦截器</span><br><span class=\"line\">    &#x2F;&#x2F;创建默认的全局拦截器</span><br><span class=\"line\">    Interceptor defaultInter &#x3D; InterceptorsWrapper(</span><br><span class=\"line\">      onRequest: (options)&#123;</span><br><span class=\"line\">        print(&quot;请求拦截&quot;);</span><br><span class=\"line\">        return options;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onResponse: (response)&#123;</span><br><span class=\"line\">        print(&quot;响应拦截&quot;);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onError: (err)&#123;</span><br><span class=\"line\">        print(&quot;错误拦截&quot;);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Interceptor&gt; inters &#x3D; [defaultInter];</span><br><span class=\"line\">    &#x2F;&#x2F;请求单独的拦截器(传过来的)</span><br><span class=\"line\">    if(inter !&#x3D; null)&#123;</span><br><span class=\"line\">      inters.add(inter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dio.interceptors.addAll(inters);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2.发送网络请求</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">      Response response &#x3D; await dio.request(url,queryParameters: params,options: options);</span><br><span class=\"line\">      return response.data;</span><br><span class=\"line\">    &#125; on DioError catch(e)&#123;</span><br><span class=\"line\">      return Future.error(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-配置类\"><a href=\"#2-1-配置类\" class=\"headerlink\" title=\"2.1, 配置类\"></a>2.1, 配置类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HttpConfig&#123;</span><br><span class=\"line\">  static const String baseURL &#x3D; &quot;https:&#x2F;&#x2F;douban-api.uieee.com&#x2F;v2&quot;;</span><br><span class=\"line\">  static const int timeout &#x3D; 10000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeConfig&#123;</span><br><span class=\"line\">  static const int count &#x3D; 20;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三，首页请求工具封装\"><a href=\"#三，首页请求工具封装\" class=\"headerlink\" title=\"三，首页请求工具封装\"></a>三，首页请求工具封装</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_002.png\" alt=\"图1\"></p>\n<h1 id=\"四，首页Item的实现\"><a href=\"#四，首页Item的实现\" class=\"headerlink\" title=\"四，首页Item的实现\"></a>四，首页Item的实现</h1><p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_003.png\" alt=\"图1\"></p>\n<p>首页item, 我们可以分为上中下三块，可以使用Column包裹</p>\n<p><img src=\"/2020/09/18/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/15-%E8%B1%86%E7%93%A3%E9%A6%96%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/15_004.png\" alt=\"图1\"></p>\n<p>中间部分，我们可以通过Row包括， 电影信息这块，我们可以通过Column包裹<br>实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;model&#x2F;home_model.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;utils&#x2F;log.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;dashed_line.dart&#39;;</span><br><span class=\"line\">import &#39;package:learn_flutter&#x2F;douban&#x2F;widgets&#x2F;star_rating.dart&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomeMovieItem extends StatelessWidget &#123;</span><br><span class=\"line\">  final MovieItem item;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYHomeMovieItem(this.item);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.all(8),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        border: Border(</span><br><span class=\"line\">          bottom: BorderSide(width: 10,color: Color(0xffe2e2e2))</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          buildHeader(),</span><br><span class=\"line\">          SizedBox(height:8),</span><br><span class=\"line\">          buildContent(),</span><br><span class=\"line\">          SizedBox(height:8),</span><br><span class=\"line\">          buildFooter(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;1.构建header</span><br><span class=\"line\">  Widget buildHeader()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.fromLTRB(9, 4, 9, 4),</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Color.fromARGB(255, 238, 205, 144),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(3),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        &quot;No.$&#123;item.rank&#125;&quot;,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">          fontSize: 18,</span><br><span class=\"line\">          color: Color.fromARGB(255, 131, 95, 36)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.构建内容</span><br><span class=\"line\">  Widget buildContent()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 150,</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          buildContentImage(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentInfo(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentDashedLine(),</span><br><span class=\"line\">          SizedBox(width: 8,),</span><br><span class=\"line\">          buildContentWish()</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.1 构建内容 - 图片</span><br><span class=\"line\">  Widget buildContentImage() &#123;</span><br><span class=\"line\">    return ClipRRect(</span><br><span class=\"line\">      borderRadius: BorderRadius.circular(5),</span><br><span class=\"line\">      child: Image.network(item.imageURL, width: 100,),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2 构建内容信息</span><br><span class=\"line\">  Widget buildContentInfo()&#123;</span><br><span class=\"line\">    return Expanded(</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            buildContentInfoTitle(),</span><br><span class=\"line\">            SizedBox(height: 5,),</span><br><span class=\"line\">            buildContentInfoRating(),</span><br><span class=\"line\">            SizedBox(height: 5,),</span><br><span class=\"line\">            buildContentInfoDesc(),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.1 构建内容信息 - 标题</span><br><span class=\"line\">  Widget buildContentInfoTitle()&#123;</span><br><span class=\"line\">&#x2F;&#x2F;    hyLog(&quot;hylog test&quot;,StackTrace.current);</span><br><span class=\"line\">    return Text.rich(</span><br><span class=\"line\">        TextSpan(</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            WidgetSpan(</span><br><span class=\"line\">              child: Icon(Icons.play_circle_outline,color: Colors.pink, size: 30,),</span><br><span class=\"line\">              baseline: TextBaseline.ideographic,</span><br><span class=\"line\">              alignment: PlaceholderAlignment.middle</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            ...item.title.runes.map((rune)&#123;</span><br><span class=\"line\">              return WidgetSpan(</span><br><span class=\"line\">                  baseline: TextBaseline.ideographic,</span><br><span class=\"line\">                  alignment: PlaceholderAlignment.middle,</span><br><span class=\"line\">                  child: Text(</span><br><span class=\"line\">                    new String.fromCharCode(rune),</span><br><span class=\"line\">                    style: TextStyle(fontSize: 16,fontWeight: FontWeight.bold)</span><br><span class=\"line\">              ));</span><br><span class=\"line\">            &#125;).toList(),</span><br><span class=\"line\">            WidgetSpan(</span><br><span class=\"line\">              baseline: TextBaseline.ideographic,</span><br><span class=\"line\">              alignment: PlaceholderAlignment.middle,</span><br><span class=\"line\">              child: Text(</span><br><span class=\"line\">                  &quot;($&#123;item.playDate&#125;)&quot;,</span><br><span class=\"line\">                  style: TextStyle(fontSize: 12,color: Color(0xffbbbbbb))</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.2 构建内容信息 - 评分</span><br><span class=\"line\">  Widget buildContentInfoRating()&#123;</span><br><span class=\"line\">    return FittedBox(</span><br><span class=\"line\">      child: Row(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HYStarRating(</span><br><span class=\"line\">            rating: item.rating,</span><br><span class=\"line\">            size: 20,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          SizedBox(width: 5,),</span><br><span class=\"line\">          Text(&quot;$&#123;item.rating&#125;&quot;,style: TextStyle(color: Color(0xffbbbbbb)),)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.2.3 构建内容信息 - 描述</span><br><span class=\"line\">  Widget buildContentInfoDesc()&#123;</span><br><span class=\"line\">    final genresString &#x3D; item.genres.join(&quot; &quot;);</span><br><span class=\"line\">    final directorString &#x3D; item.director.name;</span><br><span class=\"line\">    final actorString &#x3D; item.casts.map((item) &#x3D;&gt; item.name).join(&quot; &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return Text(</span><br><span class=\"line\">      &quot;$&#123;genresString&#125; &#x2F; $&#123;directorString&#125; &#x2F; $&#123;actorString&#125;&quot;,</span><br><span class=\"line\">      maxLines: 2,</span><br><span class=\"line\">      overflow: TextOverflow.ellipsis,</span><br><span class=\"line\">      style: TextStyle(fontSize: 16),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.3 构建分割线</span><br><span class=\"line\">  Widget buildContentDashedLine()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 10,</span><br><span class=\"line\">      height: 100,</span><br><span class=\"line\">      child: HYDashedLine(</span><br><span class=\"line\">        axis: Axis.vertical,</span><br><span class=\"line\">        dashedWidth: 1,</span><br><span class=\"line\">        dashedHeight: 5,</span><br><span class=\"line\">        color: Colors.red</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;2.4 构建想看</span><br><span class=\"line\">  Widget buildContentWish()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 60,</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Image.asset(&quot;assets&#x2F;images&#x2F;home&#x2F;wish.png&quot;,width: 30,height: 30,),</span><br><span class=\"line\">          Text(&quot;想看&quot;,style: TextStyle(fontSize: 16,color:Color.fromARGB(255, 235, 170, 60)),)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;3. 构建电影简介(原生名称)</span><br><span class=\"line\">  Widget buildFooter()&#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      padding: EdgeInsets.all(12),</span><br><span class=\"line\">      width: double.infinity,</span><br><span class=\"line\">      decoration: BoxDecoration(</span><br><span class=\"line\">        color: Color(0xfff2f2f2),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(5),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      child: Text(item.origianlTitle,style: TextStyle(fontSize: 18,color: Colors.black54),),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"16-Flutter的Widget-Element-RenderObject","toc":true,"date":"2020-09-24T10:55:19.000Z","_content":"\n\n# 一. Flutter的渲染流程\n\n### 1.1. Widget-Element-RenderObject关系\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_001.png)\n\n### 1.2. Widget是什么？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_002.png)\n\n官方对Widget的说明：\n\n- Flutter的Widgets的灵感来自React，中心思想是构造你的UI使用这些Widgets。\n- Widget使用配置和状态，描述这个View（界面）应该长什么样子。\n- 当一个Widget发生改变时，Widget就会重新build它的描述，框架会和之前的描述进行对比，来决定使用最小的改变（minimal changes）在渲染树中，从一个状态到另一个状态。\n\n自己的理解：\n\n- Widget就是一个个描述文件，这些描述文件在我们进行状态改变时会不断的build。\n- 但是对于渲染对象来说，只会使用最小的开销来更新渲染界面。\n\n### 1.3. Element是什么？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_003.png)\n\n官方对Element的描述：\n\n- Element是一个Widget的实例，在树中详细的位置。\n- Widget描述和配置子树的样子，而Element实际去配置在Element树中特定的位置。\n\n### 1.4. RenderObject\n\n官方对RenderObject的描述：\n\n- 渲染树上的一个对象\n- RenderObject层是渲染库的核心。\n\n# 二. 对象的创建过程\n\n我们这里以Padding为例，Padding用来设置内边距\n\n### 2.1. Widget\n\nPadding是一个Widget，并且继承自SingleChildRenderObjectWidget\n\n继承关系如下：\n\n**Padding -> SingleChildRenderObjectWidget -> RenderObjectWidget -> Widget**\n\n我们之前在创建Widget时，经常使用StatelessWidget和StatefulWidget，这种Widget只是将其他的Widget在build方法中组装起来，并不是一个真正可以渲染的Widget（在之前的课程中其实有提到）。\n\n在Padding的类中，我们找不到任何和渲染相关的代码，这是因为Padding仅仅作为一个配置信息，这个配置信息会随着我们设置的属性不同，频繁的销毁和创建。\n\n**问题：频繁的销毁和创建会不会影响Flutter的性能呢？**\n\n请看Dart的垃圾回收\n\n那么真正的渲染相关的代码在哪里执行呢？\n\n - RenderObject\n\n### 2.2. RenderObject\n\n我们来看Padding里面的代码，有一个非常重要的方法：\n\n - 这个方法其实是来自RenderObjectWidget的类，在这个类中它是一个抽象方法；\n - 抽象方法是必须被子类实现的，但是它的子类SingleChildRenderObjectWidget也是一个抽象类，所以可以不实现父类的抽象方法\n - 但是Padding不是一个抽象类，必须在这里实现对应的抽象方法，而它的实现就是下面的实现\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_004.png)\n\n上面的代码创建了什么呢？RenderPadding\n\nRenderPadding的继承关系是什么呢？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_005.png)\n\n我们来具体查看一下RenderPadding的源代码：\n\n - 如果传入的_padding和原来保存的value一样，那么直接return；\n - 如果不一致，调用_markNeedResolution，而_markNeedResolution内部调用了markNeedsLayout；\n - 而markNeedsLayout的目的就是标记在下一帧绘制时，需要重新布局performLayout；\n - 如果我们找的是Opacity，那么RenderOpacity是调用markNeedsPaint，RenderOpacity中是有一个paint方法的；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_006.png)\n\n### 2.3. Element\n\n**我们来思考一个问题：**\n\n - 之前我们写的大量的Widget在树结构中存在引用关系，但是Widget会被不断的销毁和重建，那么意味着这棵树非常不稳定；\n - 那么由谁来维系整个Flutter应用程序的树形结构的稳定呢？\n - 答案就是Element。\n - 官方的描述：Element是一个Widget的实例，在树中详细的位置。\n\n**Element什么时候创建？**\n\n在每一次创建Widget的时候，会创建一个对应的Element，然后将该元素插入树中。\n\n - Element保存着对Widget的引用；\n\n在SingleChildRenderObjectWidget中，我们可以找到如下代码：\n \n - 在Widget中，Element被创建，并且在创建时，将this（Widget）传入了；\n - Element就保存了对Widget的应用；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_007.png)\n\n在创建完一个Element之后，Framework会调用mount方法来将Element插入到树中具体的位置：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_008.png)\n\n在调用mount方法时，会同时使用Widget来创建RenderObject，并且保持对RenderObject的引用：\n\n - _renderObject = widget.createRenderObject(this);\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_009.png)\n\n\n但是，如果你去看类似于Text这种组合类的Widget，它也会执行mount方法，但是mount方法中并没有调用createRenderObject这样的方法。\n\n - 我们发现ComponentElement最主要的目的是挂载之后，调用_firstBuild方法\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_010.png)\n\n如果是一个StatefulWidget，则创建出来的是一个StatefulElement\n\n我们来看一下StatefulElement的构造器：\n\n - 调用widget的createState()\n - 所以StatefulElement对创建出来的State是有一个引用的\n - 而_state又对widget有一个引用\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_011.png)\n\n而调用build的时候，本质上调用的是_state中的build方法：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_012.png)\n\n### 2.4. build的context是什么\n\n在StatelessElement中，我们发现是将this传入，所以本质上BuildContext就是当前的Element\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_013.png)\n\n我们来看一下继承关系图：\n\n - Element是实现了BuildContext类（隐式接口）\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_014.png)\n\n\n在StatefulElement中，build方法也是类似，调用state的build方式时，传入的是this\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_015.png)\n\n### 2.5. 创建过程小结\n\nWidget只是描述了配置信息：\n\n - 其中包含createElement方法用于创建Element\n - 也包含createRenderObject，但是不是自己在调用\n\nElement是真正保存树结构的对象：\n\n - 创建出来后会由framework调用mount方法；\n - 在mount方法中会调用widget的createRenderObject对象；\n - 并且Element对widget和RenderObject都有引用；\n \nRenderObject是真正渲染的对象：\n\n - 其中有markNeedsLayout performLayout markNeedsPaint paint等方法\n\n# 三. Widget的key\n\n在我们创建Widget的时候，总是会看到一个key的参数，它又是做什么的呢？\n\n### 3.1. key的案例需求\n\n我们一起来做一个key的案例需求\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_016.png)\n\n\nhome界面的基本代码：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_017.png)\n\n注意：待会儿我们会修改返回的ListItem为ListItemLess或者ListItemFul\n\n### 3.2. StatelessWidget的实现\n\n我们先对ListItem使用一个StatelessWidget进行实现：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_018.png)\n\n它的实现效果是每删除一个，所有的颜色都会发现一次变化\n\n - 原因非常简单，删除之后调用setState，会重新build，重新build出来的新的StatelessWidget会重新生成一个新的随机颜色\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_019.png)\n\n### 3.3. StatefulWidget的实现（没有key）\n\n我们对ListItem使用StatefulWidget来实现\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_020.png)\n\n我们发现一个很奇怪的现象，颜色不变化，但是数据向上移动了\n\n - 这是因为在删除第一条数据的时候，Widget对应的Element并没有改变；\n - 而Element中对应的State引用也没有发生改变；\n - 在更新Widget的时候，Widget使用了没有改变的Element中的State；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_021.png)\n\n### 3.4. StatefulWidget的实现（随机key）\n\n我们使用一个随机的key\n\nListItemFul的修改如下：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_021.png)\n\nhome界面代码修改如下：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_022.png)\n\n这一次我们发现，每次删除都会出现随机颜色的现象：\n\n - 这是因为修改了key之后，Element会强制刷新，那么对应的State也会重新创建\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_023.png)\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_024.png)\n\n\n### 3.5. StatefulWidget的实现（name为key）\n\n这次，我们将name作为key来看一下结果：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_025.png)\n\n\n\n我们理想中的效果：\n\n - 因为这是在更新widget的过程中根据key进行了diff算法\n - 在前后进行对比时，发现bbb对应的Element和ccc对应的Element会继续使用，那么就会删除之前aaa对应的Element，而不是直接删除最后一个Element\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_026.png)\n\n### 3.6. Key的分类\n\nKey本身是一个抽象，不过它也有一个工厂构造器，创建出来一个ValueKey\n\n直接子类主要有：LocalKey和GlobalKey\n\n - LocalKey，它应用于具有相同父Element的Widget进行比较，也是diff算法的核心所在；\n - GlobalKey，通常我们会使用GlobalKey某个Widget对应的Widget或State或Element\n\n##### 3.6.1. LocalKey\n\nLocalKey有三个子类\n\nValueKey:\n\n - ValueKey是当我们以特定的值作为key时使用，比如一个字符串、数字等等\n\nObjectKey:\n\n - 如果两个学生，他们的名字一样，使用name作为他们的key就不合适了\n - 我们可以创建出一个学生对象，使用对象来作为key\n\nUniqueKey:\n\n - 如果我们要确保key的唯一性，可以使用UniqueKey；\n - 比如我们之前使用随机数来保证key的不同，这里我们就可以换成UniqueKey；\n\n##### 3.6.2. GlobalKey\n\nGlobalKey可以帮助我们访问某个Widget的信息，包括Widget或State或Element等对象\n\n我们来看下面的例子：我希望可以在HYHomePage中直接访问HYHomeContent中的内容\n\n\n```\nclass HYHomePage extends StatelessWidget {\n  final GlobalKey<_HYHomeContentState> homeKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: HYHomeContent(key: homeKey),\n      floatingActionButton: FloatingActionButton(\n        child: Icon(Icons.data_usage),\n        onPressed: () {\n          print(\"${homeKey.currentState.value}\");\n          print(\"${homeKey.currentState.widget.name}\");\n          print(\"${homeKey.currentContext}\");\n        },\n      ),\n    );\n  }\n}\n\nclass HYHomeContent extends StatefulWidget {\n  final String name = \"123\";\n\n  HYHomeContent({Key key}): super(key: key);\n\n  @override\n  _HYHomeContentState createState() => _HYHomeContentState();\n}\n\nclass _HYHomeContentState extends State<HYHomeContent> {\n  final String value = \"abc\";\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n\n```","source":"_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject.md","raw":"---\ntitle: 16-Flutter的Widget-Element-RenderObject\ntoc: true\ndate: 2020-09-24 18:55:19\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. Flutter的渲染流程\n\n### 1.1. Widget-Element-RenderObject关系\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_001.png)\n\n### 1.2. Widget是什么？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_002.png)\n\n官方对Widget的说明：\n\n- Flutter的Widgets的灵感来自React，中心思想是构造你的UI使用这些Widgets。\n- Widget使用配置和状态，描述这个View（界面）应该长什么样子。\n- 当一个Widget发生改变时，Widget就会重新build它的描述，框架会和之前的描述进行对比，来决定使用最小的改变（minimal changes）在渲染树中，从一个状态到另一个状态。\n\n自己的理解：\n\n- Widget就是一个个描述文件，这些描述文件在我们进行状态改变时会不断的build。\n- 但是对于渲染对象来说，只会使用最小的开销来更新渲染界面。\n\n### 1.3. Element是什么？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_003.png)\n\n官方对Element的描述：\n\n- Element是一个Widget的实例，在树中详细的位置。\n- Widget描述和配置子树的样子，而Element实际去配置在Element树中特定的位置。\n\n### 1.4. RenderObject\n\n官方对RenderObject的描述：\n\n- 渲染树上的一个对象\n- RenderObject层是渲染库的核心。\n\n# 二. 对象的创建过程\n\n我们这里以Padding为例，Padding用来设置内边距\n\n### 2.1. Widget\n\nPadding是一个Widget，并且继承自SingleChildRenderObjectWidget\n\n继承关系如下：\n\n**Padding -> SingleChildRenderObjectWidget -> RenderObjectWidget -> Widget**\n\n我们之前在创建Widget时，经常使用StatelessWidget和StatefulWidget，这种Widget只是将其他的Widget在build方法中组装起来，并不是一个真正可以渲染的Widget（在之前的课程中其实有提到）。\n\n在Padding的类中，我们找不到任何和渲染相关的代码，这是因为Padding仅仅作为一个配置信息，这个配置信息会随着我们设置的属性不同，频繁的销毁和创建。\n\n**问题：频繁的销毁和创建会不会影响Flutter的性能呢？**\n\n请看Dart的垃圾回收\n\n那么真正的渲染相关的代码在哪里执行呢？\n\n - RenderObject\n\n### 2.2. RenderObject\n\n我们来看Padding里面的代码，有一个非常重要的方法：\n\n - 这个方法其实是来自RenderObjectWidget的类，在这个类中它是一个抽象方法；\n - 抽象方法是必须被子类实现的，但是它的子类SingleChildRenderObjectWidget也是一个抽象类，所以可以不实现父类的抽象方法\n - 但是Padding不是一个抽象类，必须在这里实现对应的抽象方法，而它的实现就是下面的实现\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_004.png)\n\n上面的代码创建了什么呢？RenderPadding\n\nRenderPadding的继承关系是什么呢？\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_005.png)\n\n我们来具体查看一下RenderPadding的源代码：\n\n - 如果传入的_padding和原来保存的value一样，那么直接return；\n - 如果不一致，调用_markNeedResolution，而_markNeedResolution内部调用了markNeedsLayout；\n - 而markNeedsLayout的目的就是标记在下一帧绘制时，需要重新布局performLayout；\n - 如果我们找的是Opacity，那么RenderOpacity是调用markNeedsPaint，RenderOpacity中是有一个paint方法的；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_006.png)\n\n### 2.3. Element\n\n**我们来思考一个问题：**\n\n - 之前我们写的大量的Widget在树结构中存在引用关系，但是Widget会被不断的销毁和重建，那么意味着这棵树非常不稳定；\n - 那么由谁来维系整个Flutter应用程序的树形结构的稳定呢？\n - 答案就是Element。\n - 官方的描述：Element是一个Widget的实例，在树中详细的位置。\n\n**Element什么时候创建？**\n\n在每一次创建Widget的时候，会创建一个对应的Element，然后将该元素插入树中。\n\n - Element保存着对Widget的引用；\n\n在SingleChildRenderObjectWidget中，我们可以找到如下代码：\n \n - 在Widget中，Element被创建，并且在创建时，将this（Widget）传入了；\n - Element就保存了对Widget的应用；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_007.png)\n\n在创建完一个Element之后，Framework会调用mount方法来将Element插入到树中具体的位置：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_008.png)\n\n在调用mount方法时，会同时使用Widget来创建RenderObject，并且保持对RenderObject的引用：\n\n - _renderObject = widget.createRenderObject(this);\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_009.png)\n\n\n但是，如果你去看类似于Text这种组合类的Widget，它也会执行mount方法，但是mount方法中并没有调用createRenderObject这样的方法。\n\n - 我们发现ComponentElement最主要的目的是挂载之后，调用_firstBuild方法\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_010.png)\n\n如果是一个StatefulWidget，则创建出来的是一个StatefulElement\n\n我们来看一下StatefulElement的构造器：\n\n - 调用widget的createState()\n - 所以StatefulElement对创建出来的State是有一个引用的\n - 而_state又对widget有一个引用\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_011.png)\n\n而调用build的时候，本质上调用的是_state中的build方法：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_012.png)\n\n### 2.4. build的context是什么\n\n在StatelessElement中，我们发现是将this传入，所以本质上BuildContext就是当前的Element\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_013.png)\n\n我们来看一下继承关系图：\n\n - Element是实现了BuildContext类（隐式接口）\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_014.png)\n\n\n在StatefulElement中，build方法也是类似，调用state的build方式时，传入的是this\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_015.png)\n\n### 2.5. 创建过程小结\n\nWidget只是描述了配置信息：\n\n - 其中包含createElement方法用于创建Element\n - 也包含createRenderObject，但是不是自己在调用\n\nElement是真正保存树结构的对象：\n\n - 创建出来后会由framework调用mount方法；\n - 在mount方法中会调用widget的createRenderObject对象；\n - 并且Element对widget和RenderObject都有引用；\n \nRenderObject是真正渲染的对象：\n\n - 其中有markNeedsLayout performLayout markNeedsPaint paint等方法\n\n# 三. Widget的key\n\n在我们创建Widget的时候，总是会看到一个key的参数，它又是做什么的呢？\n\n### 3.1. key的案例需求\n\n我们一起来做一个key的案例需求\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_016.png)\n\n\nhome界面的基本代码：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_017.png)\n\n注意：待会儿我们会修改返回的ListItem为ListItemLess或者ListItemFul\n\n### 3.2. StatelessWidget的实现\n\n我们先对ListItem使用一个StatelessWidget进行实现：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_018.png)\n\n它的实现效果是每删除一个，所有的颜色都会发现一次变化\n\n - 原因非常简单，删除之后调用setState，会重新build，重新build出来的新的StatelessWidget会重新生成一个新的随机颜色\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_019.png)\n\n### 3.3. StatefulWidget的实现（没有key）\n\n我们对ListItem使用StatefulWidget来实现\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_020.png)\n\n我们发现一个很奇怪的现象，颜色不变化，但是数据向上移动了\n\n - 这是因为在删除第一条数据的时候，Widget对应的Element并没有改变；\n - 而Element中对应的State引用也没有发生改变；\n - 在更新Widget的时候，Widget使用了没有改变的Element中的State；\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_021.png)\n\n### 3.4. StatefulWidget的实现（随机key）\n\n我们使用一个随机的key\n\nListItemFul的修改如下：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_021.png)\n\nhome界面代码修改如下：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_022.png)\n\n这一次我们发现，每次删除都会出现随机颜色的现象：\n\n - 这是因为修改了key之后，Element会强制刷新，那么对应的State也会重新创建\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_023.png)\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_024.png)\n\n\n### 3.5. StatefulWidget的实现（name为key）\n\n这次，我们将name作为key来看一下结果：\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_025.png)\n\n\n\n我们理想中的效果：\n\n - 因为这是在更新widget的过程中根据key进行了diff算法\n - 在前后进行对比时，发现bbb对应的Element和ccc对应的Element会继续使用，那么就会删除之前aaa对应的Element，而不是直接删除最后一个Element\n\n![图1](16-Flutter的Widget-Element-RenderObject/16_026.png)\n\n### 3.6. Key的分类\n\nKey本身是一个抽象，不过它也有一个工厂构造器，创建出来一个ValueKey\n\n直接子类主要有：LocalKey和GlobalKey\n\n - LocalKey，它应用于具有相同父Element的Widget进行比较，也是diff算法的核心所在；\n - GlobalKey，通常我们会使用GlobalKey某个Widget对应的Widget或State或Element\n\n##### 3.6.1. LocalKey\n\nLocalKey有三个子类\n\nValueKey:\n\n - ValueKey是当我们以特定的值作为key时使用，比如一个字符串、数字等等\n\nObjectKey:\n\n - 如果两个学生，他们的名字一样，使用name作为他们的key就不合适了\n - 我们可以创建出一个学生对象，使用对象来作为key\n\nUniqueKey:\n\n - 如果我们要确保key的唯一性，可以使用UniqueKey；\n - 比如我们之前使用随机数来保证key的不同，这里我们就可以换成UniqueKey；\n\n##### 3.6.2. GlobalKey\n\nGlobalKey可以帮助我们访问某个Widget的信息，包括Widget或State或Element等对象\n\n我们来看下面的例子：我希望可以在HYHomePage中直接访问HYHomeContent中的内容\n\n\n```\nclass HYHomePage extends StatelessWidget {\n  final GlobalKey<_HYHomeContentState> homeKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"列表测试\"),\n      ),\n      body: HYHomeContent(key: homeKey),\n      floatingActionButton: FloatingActionButton(\n        child: Icon(Icons.data_usage),\n        onPressed: () {\n          print(\"${homeKey.currentState.value}\");\n          print(\"${homeKey.currentState.widget.name}\");\n          print(\"${homeKey.currentContext}\");\n        },\n      ),\n    );\n  }\n}\n\nclass HYHomeContent extends StatefulWidget {\n  final String name = \"123\";\n\n  HYHomeContent({Key key}): super(key: key);\n\n  @override\n  _HYHomeContentState createState() => _HYHomeContentState();\n}\n\nclass _HYHomeContentState extends State<HYHomeContent> {\n  final String value = \"abc\";\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n\n```","slug":"flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject","published":1,"updated":"2020-09-24T11:23:20.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengl002ju3s6ausa1irz","content":"<h1 id=\"一-Flutter的渲染流程\"><a href=\"#一-Flutter的渲染流程\" class=\"headerlink\" title=\"一. Flutter的渲染流程\"></a>一. Flutter的渲染流程</h1><h3 id=\"1-1-Widget-Element-RenderObject关系\"><a href=\"#1-1-Widget-Element-RenderObject关系\" class=\"headerlink\" title=\"1.1. Widget-Element-RenderObject关系\"></a>1.1. Widget-Element-RenderObject关系</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-Widget是什么？\"><a href=\"#1-2-Widget是什么？\" class=\"headerlink\" title=\"1.2. Widget是什么？\"></a>1.2. Widget是什么？</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_002.png\" alt=\"图1\"></p>\n<p>官方对Widget的说明：</p>\n<ul>\n<li>Flutter的Widgets的灵感来自React，中心思想是构造你的UI使用这些Widgets。</li>\n<li>Widget使用配置和状态，描述这个View（界面）应该长什么样子。</li>\n<li>当一个Widget发生改变时，Widget就会重新build它的描述，框架会和之前的描述进行对比，来决定使用最小的改变（minimal changes）在渲染树中，从一个状态到另一个状态。</li>\n</ul>\n<p>自己的理解：</p>\n<ul>\n<li>Widget就是一个个描述文件，这些描述文件在我们进行状态改变时会不断的build。</li>\n<li>但是对于渲染对象来说，只会使用最小的开销来更新渲染界面。</li>\n</ul>\n<h3 id=\"1-3-Element是什么？\"><a href=\"#1-3-Element是什么？\" class=\"headerlink\" title=\"1.3. Element是什么？\"></a>1.3. Element是什么？</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_003.png\" alt=\"图1\"></p>\n<p>官方对Element的描述：</p>\n<ul>\n<li>Element是一个Widget的实例，在树中详细的位置。</li>\n<li>Widget描述和配置子树的样子，而Element实际去配置在Element树中特定的位置。</li>\n</ul>\n<h3 id=\"1-4-RenderObject\"><a href=\"#1-4-RenderObject\" class=\"headerlink\" title=\"1.4. RenderObject\"></a>1.4. RenderObject</h3><p>官方对RenderObject的描述：</p>\n<ul>\n<li>渲染树上的一个对象</li>\n<li>RenderObject层是渲染库的核心。</li>\n</ul>\n<h1 id=\"二-对象的创建过程\"><a href=\"#二-对象的创建过程\" class=\"headerlink\" title=\"二. 对象的创建过程\"></a>二. 对象的创建过程</h1><p>我们这里以Padding为例，Padding用来设置内边距</p>\n<h3 id=\"2-1-Widget\"><a href=\"#2-1-Widget\" class=\"headerlink\" title=\"2.1. Widget\"></a>2.1. Widget</h3><p>Padding是一个Widget，并且继承自SingleChildRenderObjectWidget</p>\n<p>继承关系如下：</p>\n<p><strong>Padding -&gt; SingleChildRenderObjectWidget -&gt; RenderObjectWidget -&gt; Widget</strong></p>\n<p>我们之前在创建Widget时，经常使用StatelessWidget和StatefulWidget，这种Widget只是将其他的Widget在build方法中组装起来，并不是一个真正可以渲染的Widget（在之前的课程中其实有提到）。</p>\n<p>在Padding的类中，我们找不到任何和渲染相关的代码，这是因为Padding仅仅作为一个配置信息，这个配置信息会随着我们设置的属性不同，频繁的销毁和创建。</p>\n<p><strong>问题：频繁的销毁和创建会不会影响Flutter的性能呢？</strong></p>\n<p>请看Dart的垃圾回收</p>\n<p>那么真正的渲染相关的代码在哪里执行呢？</p>\n<ul>\n<li>RenderObject</li>\n</ul>\n<h3 id=\"2-2-RenderObject\"><a href=\"#2-2-RenderObject\" class=\"headerlink\" title=\"2.2. RenderObject\"></a>2.2. RenderObject</h3><p>我们来看Padding里面的代码，有一个非常重要的方法：</p>\n<ul>\n<li>这个方法其实是来自RenderObjectWidget的类，在这个类中它是一个抽象方法；</li>\n<li>抽象方法是必须被子类实现的，但是它的子类SingleChildRenderObjectWidget也是一个抽象类，所以可以不实现父类的抽象方法</li>\n<li>但是Padding不是一个抽象类，必须在这里实现对应的抽象方法，而它的实现就是下面的实现</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_004.png\" alt=\"图1\"></p>\n<p>上面的代码创建了什么呢？RenderPadding</p>\n<p>RenderPadding的继承关系是什么呢？</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_005.png\" alt=\"图1\"></p>\n<p>我们来具体查看一下RenderPadding的源代码：</p>\n<ul>\n<li>如果传入的_padding和原来保存的value一样，那么直接return；</li>\n<li>如果不一致，调用_markNeedResolution，而_markNeedResolution内部调用了markNeedsLayout；</li>\n<li>而markNeedsLayout的目的就是标记在下一帧绘制时，需要重新布局performLayout；</li>\n<li>如果我们找的是Opacity，那么RenderOpacity是调用markNeedsPaint，RenderOpacity中是有一个paint方法的；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_006.png\" alt=\"图1\"></p>\n<h3 id=\"2-3-Element\"><a href=\"#2-3-Element\" class=\"headerlink\" title=\"2.3. Element\"></a>2.3. Element</h3><p><strong>我们来思考一个问题：</strong></p>\n<ul>\n<li>之前我们写的大量的Widget在树结构中存在引用关系，但是Widget会被不断的销毁和重建，那么意味着这棵树非常不稳定；</li>\n<li>那么由谁来维系整个Flutter应用程序的树形结构的稳定呢？</li>\n<li>答案就是Element。</li>\n<li>官方的描述：Element是一个Widget的实例，在树中详细的位置。</li>\n</ul>\n<p><strong>Element什么时候创建？</strong></p>\n<p>在每一次创建Widget的时候，会创建一个对应的Element，然后将该元素插入树中。</p>\n<ul>\n<li>Element保存着对Widget的引用；</li>\n</ul>\n<p>在SingleChildRenderObjectWidget中，我们可以找到如下代码：</p>\n<ul>\n<li>在Widget中，Element被创建，并且在创建时，将this（Widget）传入了；</li>\n<li>Element就保存了对Widget的应用；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_007.png\" alt=\"图1\"></p>\n<p>在创建完一个Element之后，Framework会调用mount方法来将Element插入到树中具体的位置：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_008.png\" alt=\"图1\"></p>\n<p>在调用mount方法时，会同时使用Widget来创建RenderObject，并且保持对RenderObject的引用：</p>\n<ul>\n<li>_renderObject = widget.createRenderObject(this);</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_009.png\" alt=\"图1\"></p>\n<p>但是，如果你去看类似于Text这种组合类的Widget，它也会执行mount方法，但是mount方法中并没有调用createRenderObject这样的方法。</p>\n<ul>\n<li>我们发现ComponentElement最主要的目的是挂载之后，调用_firstBuild方法</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_010.png\" alt=\"图1\"></p>\n<p>如果是一个StatefulWidget，则创建出来的是一个StatefulElement</p>\n<p>我们来看一下StatefulElement的构造器：</p>\n<ul>\n<li>调用widget的createState()</li>\n<li>所以StatefulElement对创建出来的State是有一个引用的</li>\n<li>而_state又对widget有一个引用</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_011.png\" alt=\"图1\"></p>\n<p>而调用build的时候，本质上调用的是_state中的build方法：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_012.png\" alt=\"图1\"></p>\n<h3 id=\"2-4-build的context是什么\"><a href=\"#2-4-build的context是什么\" class=\"headerlink\" title=\"2.4. build的context是什么\"></a>2.4. build的context是什么</h3><p>在StatelessElement中，我们发现是将this传入，所以本质上BuildContext就是当前的Element</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_013.png\" alt=\"图1\"></p>\n<p>我们来看一下继承关系图：</p>\n<ul>\n<li>Element是实现了BuildContext类（隐式接口）</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_014.png\" alt=\"图1\"></p>\n<p>在StatefulElement中，build方法也是类似，调用state的build方式时，传入的是this</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_015.png\" alt=\"图1\"></p>\n<h3 id=\"2-5-创建过程小结\"><a href=\"#2-5-创建过程小结\" class=\"headerlink\" title=\"2.5. 创建过程小结\"></a>2.5. 创建过程小结</h3><p>Widget只是描述了配置信息：</p>\n<ul>\n<li>其中包含createElement方法用于创建Element</li>\n<li>也包含createRenderObject，但是不是自己在调用</li>\n</ul>\n<p>Element是真正保存树结构的对象：</p>\n<ul>\n<li>创建出来后会由framework调用mount方法；</li>\n<li>在mount方法中会调用widget的createRenderObject对象；</li>\n<li>并且Element对widget和RenderObject都有引用；</li>\n</ul>\n<p>RenderObject是真正渲染的对象：</p>\n<ul>\n<li>其中有markNeedsLayout performLayout markNeedsPaint paint等方法</li>\n</ul>\n<h1 id=\"三-Widget的key\"><a href=\"#三-Widget的key\" class=\"headerlink\" title=\"三. Widget的key\"></a>三. Widget的key</h1><p>在我们创建Widget的时候，总是会看到一个key的参数，它又是做什么的呢？</p>\n<h3 id=\"3-1-key的案例需求\"><a href=\"#3-1-key的案例需求\" class=\"headerlink\" title=\"3.1. key的案例需求\"></a>3.1. key的案例需求</h3><p>我们一起来做一个key的案例需求</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_016.png\" alt=\"图1\"></p>\n<p>home界面的基本代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_017.png\" alt=\"图1\"></p>\n<p>注意：待会儿我们会修改返回的ListItem为ListItemLess或者ListItemFul</p>\n<h3 id=\"3-2-StatelessWidget的实现\"><a href=\"#3-2-StatelessWidget的实现\" class=\"headerlink\" title=\"3.2. StatelessWidget的实现\"></a>3.2. StatelessWidget的实现</h3><p>我们先对ListItem使用一个StatelessWidget进行实现：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_018.png\" alt=\"图1\"></p>\n<p>它的实现效果是每删除一个，所有的颜色都会发现一次变化</p>\n<ul>\n<li>原因非常简单，删除之后调用setState，会重新build，重新build出来的新的StatelessWidget会重新生成一个新的随机颜色</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_019.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-StatefulWidget的实现（没有key）\"><a href=\"#3-3-StatefulWidget的实现（没有key）\" class=\"headerlink\" title=\"3.3. StatefulWidget的实现（没有key）\"></a>3.3. StatefulWidget的实现（没有key）</h3><p>我们对ListItem使用StatefulWidget来实现</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_020.png\" alt=\"图1\"></p>\n<p>我们发现一个很奇怪的现象，颜色不变化，但是数据向上移动了</p>\n<ul>\n<li>这是因为在删除第一条数据的时候，Widget对应的Element并没有改变；</li>\n<li>而Element中对应的State引用也没有发生改变；</li>\n<li>在更新Widget的时候，Widget使用了没有改变的Element中的State；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_021.png\" alt=\"图1\"></p>\n<h3 id=\"3-4-StatefulWidget的实现（随机key）\"><a href=\"#3-4-StatefulWidget的实现（随机key）\" class=\"headerlink\" title=\"3.4. StatefulWidget的实现（随机key）\"></a>3.4. StatefulWidget的实现（随机key）</h3><p>我们使用一个随机的key</p>\n<p>ListItemFul的修改如下：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_021.png\" alt=\"图1\"></p>\n<p>home界面代码修改如下：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_022.png\" alt=\"图1\"></p>\n<p>这一次我们发现，每次删除都会出现随机颜色的现象：</p>\n<ul>\n<li>这是因为修改了key之后，Element会强制刷新，那么对应的State也会重新创建</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_023.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_024.png\" alt=\"图1\"></p>\n<h3 id=\"3-5-StatefulWidget的实现（name为key）\"><a href=\"#3-5-StatefulWidget的实现（name为key）\" class=\"headerlink\" title=\"3.5. StatefulWidget的实现（name为key）\"></a>3.5. StatefulWidget的实现（name为key）</h3><p>这次，我们将name作为key来看一下结果：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_025.png\" alt=\"图1\"></p>\n<p>我们理想中的效果：</p>\n<ul>\n<li>因为这是在更新widget的过程中根据key进行了diff算法</li>\n<li>在前后进行对比时，发现bbb对应的Element和ccc对应的Element会继续使用，那么就会删除之前aaa对应的Element，而不是直接删除最后一个Element</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_026.png\" alt=\"图1\"></p>\n<h3 id=\"3-6-Key的分类\"><a href=\"#3-6-Key的分类\" class=\"headerlink\" title=\"3.6. Key的分类\"></a>3.6. Key的分类</h3><p>Key本身是一个抽象，不过它也有一个工厂构造器，创建出来一个ValueKey</p>\n<p>直接子类主要有：LocalKey和GlobalKey</p>\n<ul>\n<li>LocalKey，它应用于具有相同父Element的Widget进行比较，也是diff算法的核心所在；</li>\n<li>GlobalKey，通常我们会使用GlobalKey某个Widget对应的Widget或State或Element</li>\n</ul>\n<h5 id=\"3-6-1-LocalKey\"><a href=\"#3-6-1-LocalKey\" class=\"headerlink\" title=\"3.6.1. LocalKey\"></a>3.6.1. LocalKey</h5><p>LocalKey有三个子类</p>\n<p>ValueKey:</p>\n<ul>\n<li>ValueKey是当我们以特定的值作为key时使用，比如一个字符串、数字等等</li>\n</ul>\n<p>ObjectKey:</p>\n<ul>\n<li>如果两个学生，他们的名字一样，使用name作为他们的key就不合适了</li>\n<li>我们可以创建出一个学生对象，使用对象来作为key</li>\n</ul>\n<p>UniqueKey:</p>\n<ul>\n<li>如果我们要确保key的唯一性，可以使用UniqueKey；</li>\n<li>比如我们之前使用随机数来保证key的不同，这里我们就可以换成UniqueKey；</li>\n</ul>\n<h5 id=\"3-6-2-GlobalKey\"><a href=\"#3-6-2-GlobalKey\" class=\"headerlink\" title=\"3.6.2. GlobalKey\"></a>3.6.2. GlobalKey</h5><p>GlobalKey可以帮助我们访问某个Widget的信息，包括Widget或State或Element等对象</p>\n<p>我们来看下面的例子：我希望可以在HYHomePage中直接访问HYHomeContent中的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  final GlobalKey&lt;_HYHomeContentState&gt; homeKey &#x3D; GlobalKey();</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYHomeContent(key: homeKey),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        child: Icon(Icons.data_usage),</span><br><span class=\"line\">        onPressed: () &#123;</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentState.value&#125;&quot;);</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentState.widget.name&#125;&quot;);</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentContext&#125;&quot;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomeContent extends StatefulWidget &#123;</span><br><span class=\"line\">  final String name &#x3D; &quot;123&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYHomeContent(&#123;Key key&#125;): super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYHomeContentState createState() &#x3D;&gt; _HYHomeContentState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYHomeContentState extends State&lt;HYHomeContent&gt; &#123;</span><br><span class=\"line\">  final String value &#x3D; &quot;abc&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Flutter的渲染流程\"><a href=\"#一-Flutter的渲染流程\" class=\"headerlink\" title=\"一. Flutter的渲染流程\"></a>一. Flutter的渲染流程</h1><h3 id=\"1-1-Widget-Element-RenderObject关系\"><a href=\"#1-1-Widget-Element-RenderObject关系\" class=\"headerlink\" title=\"1.1. Widget-Element-RenderObject关系\"></a>1.1. Widget-Element-RenderObject关系</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_001.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-Widget是什么？\"><a href=\"#1-2-Widget是什么？\" class=\"headerlink\" title=\"1.2. Widget是什么？\"></a>1.2. Widget是什么？</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_002.png\" alt=\"图1\"></p>\n<p>官方对Widget的说明：</p>\n<ul>\n<li>Flutter的Widgets的灵感来自React，中心思想是构造你的UI使用这些Widgets。</li>\n<li>Widget使用配置和状态，描述这个View（界面）应该长什么样子。</li>\n<li>当一个Widget发生改变时，Widget就会重新build它的描述，框架会和之前的描述进行对比，来决定使用最小的改变（minimal changes）在渲染树中，从一个状态到另一个状态。</li>\n</ul>\n<p>自己的理解：</p>\n<ul>\n<li>Widget就是一个个描述文件，这些描述文件在我们进行状态改变时会不断的build。</li>\n<li>但是对于渲染对象来说，只会使用最小的开销来更新渲染界面。</li>\n</ul>\n<h3 id=\"1-3-Element是什么？\"><a href=\"#1-3-Element是什么？\" class=\"headerlink\" title=\"1.3. Element是什么？\"></a>1.3. Element是什么？</h3><p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_003.png\" alt=\"图1\"></p>\n<p>官方对Element的描述：</p>\n<ul>\n<li>Element是一个Widget的实例，在树中详细的位置。</li>\n<li>Widget描述和配置子树的样子，而Element实际去配置在Element树中特定的位置。</li>\n</ul>\n<h3 id=\"1-4-RenderObject\"><a href=\"#1-4-RenderObject\" class=\"headerlink\" title=\"1.4. RenderObject\"></a>1.4. RenderObject</h3><p>官方对RenderObject的描述：</p>\n<ul>\n<li>渲染树上的一个对象</li>\n<li>RenderObject层是渲染库的核心。</li>\n</ul>\n<h1 id=\"二-对象的创建过程\"><a href=\"#二-对象的创建过程\" class=\"headerlink\" title=\"二. 对象的创建过程\"></a>二. 对象的创建过程</h1><p>我们这里以Padding为例，Padding用来设置内边距</p>\n<h3 id=\"2-1-Widget\"><a href=\"#2-1-Widget\" class=\"headerlink\" title=\"2.1. Widget\"></a>2.1. Widget</h3><p>Padding是一个Widget，并且继承自SingleChildRenderObjectWidget</p>\n<p>继承关系如下：</p>\n<p><strong>Padding -&gt; SingleChildRenderObjectWidget -&gt; RenderObjectWidget -&gt; Widget</strong></p>\n<p>我们之前在创建Widget时，经常使用StatelessWidget和StatefulWidget，这种Widget只是将其他的Widget在build方法中组装起来，并不是一个真正可以渲染的Widget（在之前的课程中其实有提到）。</p>\n<p>在Padding的类中，我们找不到任何和渲染相关的代码，这是因为Padding仅仅作为一个配置信息，这个配置信息会随着我们设置的属性不同，频繁的销毁和创建。</p>\n<p><strong>问题：频繁的销毁和创建会不会影响Flutter的性能呢？</strong></p>\n<p>请看Dart的垃圾回收</p>\n<p>那么真正的渲染相关的代码在哪里执行呢？</p>\n<ul>\n<li>RenderObject</li>\n</ul>\n<h3 id=\"2-2-RenderObject\"><a href=\"#2-2-RenderObject\" class=\"headerlink\" title=\"2.2. RenderObject\"></a>2.2. RenderObject</h3><p>我们来看Padding里面的代码，有一个非常重要的方法：</p>\n<ul>\n<li>这个方法其实是来自RenderObjectWidget的类，在这个类中它是一个抽象方法；</li>\n<li>抽象方法是必须被子类实现的，但是它的子类SingleChildRenderObjectWidget也是一个抽象类，所以可以不实现父类的抽象方法</li>\n<li>但是Padding不是一个抽象类，必须在这里实现对应的抽象方法，而它的实现就是下面的实现</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_004.png\" alt=\"图1\"></p>\n<p>上面的代码创建了什么呢？RenderPadding</p>\n<p>RenderPadding的继承关系是什么呢？</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_005.png\" alt=\"图1\"></p>\n<p>我们来具体查看一下RenderPadding的源代码：</p>\n<ul>\n<li>如果传入的_padding和原来保存的value一样，那么直接return；</li>\n<li>如果不一致，调用_markNeedResolution，而_markNeedResolution内部调用了markNeedsLayout；</li>\n<li>而markNeedsLayout的目的就是标记在下一帧绘制时，需要重新布局performLayout；</li>\n<li>如果我们找的是Opacity，那么RenderOpacity是调用markNeedsPaint，RenderOpacity中是有一个paint方法的；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_006.png\" alt=\"图1\"></p>\n<h3 id=\"2-3-Element\"><a href=\"#2-3-Element\" class=\"headerlink\" title=\"2.3. Element\"></a>2.3. Element</h3><p><strong>我们来思考一个问题：</strong></p>\n<ul>\n<li>之前我们写的大量的Widget在树结构中存在引用关系，但是Widget会被不断的销毁和重建，那么意味着这棵树非常不稳定；</li>\n<li>那么由谁来维系整个Flutter应用程序的树形结构的稳定呢？</li>\n<li>答案就是Element。</li>\n<li>官方的描述：Element是一个Widget的实例，在树中详细的位置。</li>\n</ul>\n<p><strong>Element什么时候创建？</strong></p>\n<p>在每一次创建Widget的时候，会创建一个对应的Element，然后将该元素插入树中。</p>\n<ul>\n<li>Element保存着对Widget的引用；</li>\n</ul>\n<p>在SingleChildRenderObjectWidget中，我们可以找到如下代码：</p>\n<ul>\n<li>在Widget中，Element被创建，并且在创建时，将this（Widget）传入了；</li>\n<li>Element就保存了对Widget的应用；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_007.png\" alt=\"图1\"></p>\n<p>在创建完一个Element之后，Framework会调用mount方法来将Element插入到树中具体的位置：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_008.png\" alt=\"图1\"></p>\n<p>在调用mount方法时，会同时使用Widget来创建RenderObject，并且保持对RenderObject的引用：</p>\n<ul>\n<li>_renderObject = widget.createRenderObject(this);</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_009.png\" alt=\"图1\"></p>\n<p>但是，如果你去看类似于Text这种组合类的Widget，它也会执行mount方法，但是mount方法中并没有调用createRenderObject这样的方法。</p>\n<ul>\n<li>我们发现ComponentElement最主要的目的是挂载之后，调用_firstBuild方法</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_010.png\" alt=\"图1\"></p>\n<p>如果是一个StatefulWidget，则创建出来的是一个StatefulElement</p>\n<p>我们来看一下StatefulElement的构造器：</p>\n<ul>\n<li>调用widget的createState()</li>\n<li>所以StatefulElement对创建出来的State是有一个引用的</li>\n<li>而_state又对widget有一个引用</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_011.png\" alt=\"图1\"></p>\n<p>而调用build的时候，本质上调用的是_state中的build方法：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_012.png\" alt=\"图1\"></p>\n<h3 id=\"2-4-build的context是什么\"><a href=\"#2-4-build的context是什么\" class=\"headerlink\" title=\"2.4. build的context是什么\"></a>2.4. build的context是什么</h3><p>在StatelessElement中，我们发现是将this传入，所以本质上BuildContext就是当前的Element</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_013.png\" alt=\"图1\"></p>\n<p>我们来看一下继承关系图：</p>\n<ul>\n<li>Element是实现了BuildContext类（隐式接口）</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_014.png\" alt=\"图1\"></p>\n<p>在StatefulElement中，build方法也是类似，调用state的build方式时，传入的是this</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_015.png\" alt=\"图1\"></p>\n<h3 id=\"2-5-创建过程小结\"><a href=\"#2-5-创建过程小结\" class=\"headerlink\" title=\"2.5. 创建过程小结\"></a>2.5. 创建过程小结</h3><p>Widget只是描述了配置信息：</p>\n<ul>\n<li>其中包含createElement方法用于创建Element</li>\n<li>也包含createRenderObject，但是不是自己在调用</li>\n</ul>\n<p>Element是真正保存树结构的对象：</p>\n<ul>\n<li>创建出来后会由framework调用mount方法；</li>\n<li>在mount方法中会调用widget的createRenderObject对象；</li>\n<li>并且Element对widget和RenderObject都有引用；</li>\n</ul>\n<p>RenderObject是真正渲染的对象：</p>\n<ul>\n<li>其中有markNeedsLayout performLayout markNeedsPaint paint等方法</li>\n</ul>\n<h1 id=\"三-Widget的key\"><a href=\"#三-Widget的key\" class=\"headerlink\" title=\"三. Widget的key\"></a>三. Widget的key</h1><p>在我们创建Widget的时候，总是会看到一个key的参数，它又是做什么的呢？</p>\n<h3 id=\"3-1-key的案例需求\"><a href=\"#3-1-key的案例需求\" class=\"headerlink\" title=\"3.1. key的案例需求\"></a>3.1. key的案例需求</h3><p>我们一起来做一个key的案例需求</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_016.png\" alt=\"图1\"></p>\n<p>home界面的基本代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_017.png\" alt=\"图1\"></p>\n<p>注意：待会儿我们会修改返回的ListItem为ListItemLess或者ListItemFul</p>\n<h3 id=\"3-2-StatelessWidget的实现\"><a href=\"#3-2-StatelessWidget的实现\" class=\"headerlink\" title=\"3.2. StatelessWidget的实现\"></a>3.2. StatelessWidget的实现</h3><p>我们先对ListItem使用一个StatelessWidget进行实现：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_018.png\" alt=\"图1\"></p>\n<p>它的实现效果是每删除一个，所有的颜色都会发现一次变化</p>\n<ul>\n<li>原因非常简单，删除之后调用setState，会重新build，重新build出来的新的StatelessWidget会重新生成一个新的随机颜色</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_019.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-StatefulWidget的实现（没有key）\"><a href=\"#3-3-StatefulWidget的实现（没有key）\" class=\"headerlink\" title=\"3.3. StatefulWidget的实现（没有key）\"></a>3.3. StatefulWidget的实现（没有key）</h3><p>我们对ListItem使用StatefulWidget来实现</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_020.png\" alt=\"图1\"></p>\n<p>我们发现一个很奇怪的现象，颜色不变化，但是数据向上移动了</p>\n<ul>\n<li>这是因为在删除第一条数据的时候，Widget对应的Element并没有改变；</li>\n<li>而Element中对应的State引用也没有发生改变；</li>\n<li>在更新Widget的时候，Widget使用了没有改变的Element中的State；</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_021.png\" alt=\"图1\"></p>\n<h3 id=\"3-4-StatefulWidget的实现（随机key）\"><a href=\"#3-4-StatefulWidget的实现（随机key）\" class=\"headerlink\" title=\"3.4. StatefulWidget的实现（随机key）\"></a>3.4. StatefulWidget的实现（随机key）</h3><p>我们使用一个随机的key</p>\n<p>ListItemFul的修改如下：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_021.png\" alt=\"图1\"></p>\n<p>home界面代码修改如下：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_022.png\" alt=\"图1\"></p>\n<p>这一次我们发现，每次删除都会出现随机颜色的现象：</p>\n<ul>\n<li>这是因为修改了key之后，Element会强制刷新，那么对应的State也会重新创建</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_023.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_024.png\" alt=\"图1\"></p>\n<h3 id=\"3-5-StatefulWidget的实现（name为key）\"><a href=\"#3-5-StatefulWidget的实现（name为key）\" class=\"headerlink\" title=\"3.5. StatefulWidget的实现（name为key）\"></a>3.5. StatefulWidget的实现（name为key）</h3><p>这次，我们将name作为key来看一下结果：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_025.png\" alt=\"图1\"></p>\n<p>我们理想中的效果：</p>\n<ul>\n<li>因为这是在更新widget的过程中根据key进行了diff算法</li>\n<li>在前后进行对比时，发现bbb对应的Element和ccc对应的Element会继续使用，那么就会删除之前aaa对应的Element，而不是直接删除最后一个Element</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/16-Flutter%E7%9A%84Widget-Element-RenderObject/16_026.png\" alt=\"图1\"></p>\n<h3 id=\"3-6-Key的分类\"><a href=\"#3-6-Key的分类\" class=\"headerlink\" title=\"3.6. Key的分类\"></a>3.6. Key的分类</h3><p>Key本身是一个抽象，不过它也有一个工厂构造器，创建出来一个ValueKey</p>\n<p>直接子类主要有：LocalKey和GlobalKey</p>\n<ul>\n<li>LocalKey，它应用于具有相同父Element的Widget进行比较，也是diff算法的核心所在；</li>\n<li>GlobalKey，通常我们会使用GlobalKey某个Widget对应的Widget或State或Element</li>\n</ul>\n<h5 id=\"3-6-1-LocalKey\"><a href=\"#3-6-1-LocalKey\" class=\"headerlink\" title=\"3.6.1. LocalKey\"></a>3.6.1. LocalKey</h5><p>LocalKey有三个子类</p>\n<p>ValueKey:</p>\n<ul>\n<li>ValueKey是当我们以特定的值作为key时使用，比如一个字符串、数字等等</li>\n</ul>\n<p>ObjectKey:</p>\n<ul>\n<li>如果两个学生，他们的名字一样，使用name作为他们的key就不合适了</li>\n<li>我们可以创建出一个学生对象，使用对象来作为key</li>\n</ul>\n<p>UniqueKey:</p>\n<ul>\n<li>如果我们要确保key的唯一性，可以使用UniqueKey；</li>\n<li>比如我们之前使用随机数来保证key的不同，这里我们就可以换成UniqueKey；</li>\n</ul>\n<h5 id=\"3-6-2-GlobalKey\"><a href=\"#3-6-2-GlobalKey\" class=\"headerlink\" title=\"3.6.2. GlobalKey\"></a>3.6.2. GlobalKey</h5><p>GlobalKey可以帮助我们访问某个Widget的信息，包括Widget或State或Element等对象</p>\n<p>我们来看下面的例子：我希望可以在HYHomePage中直接访问HYHomeContent中的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HYHomePage extends StatelessWidget &#123;</span><br><span class=\"line\">  final GlobalKey&lt;_HYHomeContentState&gt; homeKey &#x3D; GlobalKey();</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;列表测试&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: HYHomeContent(key: homeKey),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        child: Icon(Icons.data_usage),</span><br><span class=\"line\">        onPressed: () &#123;</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentState.value&#125;&quot;);</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentState.widget.name&#125;&quot;);</span><br><span class=\"line\">          print(&quot;$&#123;homeKey.currentContext&#125;&quot;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class HYHomeContent extends StatefulWidget &#123;</span><br><span class=\"line\">  final String name &#x3D; &quot;123&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  HYHomeContent(&#123;Key key&#125;): super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HYHomeContentState createState() &#x3D;&gt; _HYHomeContentState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HYHomeContentState extends State&lt;HYHomeContent&gt; &#123;</span><br><span class=\"line\">  final String value &#x3D; &quot;abc&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Container();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"17-Flutter状态管理","toc":true,"date":"2020-09-24T10:55:30.000Z","_content":"\n\n状态管理是声明式编程非常重要的一个概念，我们在前面介绍过Flutter是声明式编程的，也区分声明式编程和命令式编程的区别。\n\n这里，我们就来系统的学习一下Flutter声明式编程中非常重要的状态管理\n\n# 一. 为什么需要状态管理？\n\n### 1.1. 认识状态管理\n\n很多从命令式编程框架（Android或iOS原生开发者）转成声明式编程（Flutter、Vue、React等）刚开始并不适应，因为需要一个新的角度来考虑APP的开发模式。\n\nFlutter作为一个现代的框架，是声明式编程的：\n\n![图1](17-Flutter状态管理/17_001.png)\n\n在编写一个应用的过程中，我们有大量的State需要来进行管理，而正是对这些State的改变，来更新界面的刷新：\n\n![图1](17-Flutter状态管理/17_002.png)\n\n### 1.2. 不同状态管理分类\n\n##### 1.2.1. 短时状态Ephemeral state\n\n某些状态只需要在自己的Widget中使用即可\n\n - 比如我们之前做的简单计数器counter\n - 比如一个PageView组件记录当前的页面\n - 比如一个动画记录当前的进度\n - 比如一个BottomNavigationBar中当前被选中的tab\n\n这种状态我们只需要使用StatefulWidget对应的State类自己管理即可，Widget树中的其它部分并不需要访问这个状态。\n\n这种方式在之前的学习中，我们已经应用过非常多次了。\n\n##### 1.2.2. 应用状态App state\n\n开发中也有非常多的状态需要在多个部分进行共享\n\n - 比如用户一个个性化选项\n - 比如用户的登录状态信息\n - 比如一个电商应用的购物车\n - 比如一个新闻应用的已读消息或者未读消息\n\n这种状态我们如果在Widget之间传递来、传递去，那么是无穷尽的，并且代码的耦合度会变得非常高，牵一发而动全身，无论是代码编写质量、后期维护、可扩展性都非常差。\n\n这个时候我们可以选择全局状态管理的方式，来对状态进行统一的管理和应用。\n\n### 1.2.3. 如何选择不同的管理方式\n\n开发中，没有明确的规则去区分哪些状态是短时状态，哪些状态是应用状态。\n\n - 某些短时状态可能在之后的开发维护中需要升级为应用状态。\n\n但是我们可以简单遵守下面这幅流程图的规则：\n\n![图1](17-Flutter状态管理/17_003.png)\n\n针对React使用setState还是Redux中的Store来管理状态哪个更好的问题，Redux的issue上，Redux的作者Dan Abramov，它这样回答的：\n\nThe rule of thumb is: Do whatever is less awkward\n\n经验原则就是：选择能够减少麻烦的方式。\n\n![图1](17-Flutter状态管理/17_004.png)\n\n# 二. 共享状态管理\n\n### 2.1. InheritedWidget\n\nInheritedWidget和React中的context功能类似，可以实现跨组件数据的传递。\n\n定义一个共享数据的InheritedWidget，需要继承自InheritedWidget\n\n这里定义了一个of方法，该方法通过context开始去查找祖先的HYDataWidget（可以查看源码查找过程）\n\nupdateShouldNotify方法是对比新旧HYDataWidget，是否需要对更新相关依赖的Widget\n\n![图1](17-Flutter状态管理/17_005.png)\n\n创建HYDataWidget，并且传入数据（这里点击按钮会修改数据，并且重新build）\n\n![图1](17-Flutter状态管理/17_006.png)\n\n在某个Widget中使用共享的数据，并且监听\n\n![图1](17-Flutter状态管理/17_007.png)\n\n### 2.2. Provider\n\nProvider是目前官方推荐的全局状态管理工具，由社区作者Remi Rousselet 和 Flutter Team共同编写。\n\n使用之前，我们需要先引入对它的依赖，截止这篇文章，Provider的最新版本为4.0.4：\n\n![图1](17-Flutter状态管理/17_008.png)\n\n##### 2.2.1. Provider的基本使用\n\n在使用Provider的时候，我们主要关心三个概念：\n\n - ChangeNotifier：真正数据（状态）存放的地方\n - ChangeNotifierProvider：Widget树中提供数据（状态）的地方，会在其中创建对应的ChangeNotifier\n - Consumer：Widget树中需要使用数据（状态）的地方\n\n我们先来完成一个简单的案例，将官方计数器案例使用Provider来实现：\n\n**第一步：创建自己的ChangeNotifier**\n\n我们需要一个ChangeNotifier来保存我们的状态，所以创建它\n \n - 这里我们可以使用继承自ChangeNotifier，也可以使用混入，这取决于概率是否需要继承自其它的类\n - 我们使用一个私有的_counter，并且提供了getter和setter\n - 在setter中我们监听到_counter的改变，就调用notifyListeners方法，通知所有的Consumer进行更新\n\n![图1](17-Flutter状态管理/17_009.png)\n\n**第二步：在Widget Tree中插入ChangeNotifierProvider**\n\n我们需要在Widget Tree中插入ChangeNotifierProvider，以便Consumer可以获取到数据：\n将ChangeNotifierProvider放到了顶层，这样方便在整个应用的任何地方可以使用CounterProvider\n\n\n第三步：在首页中使用Consumer引入和修改状态\n引入位置一：在body中使用Consumer，Consumer需要传入一个builder回调函数，当数据发生变化时，就会通知依赖数据的Consumer重新调用builder方法来构建；\n引入位置二：在floatingActionButton中使用Consumer，当点击按钮时，修改CounterNotifier中的counter数据；\n\n\n\nConsumer的builder方法解析：\n参数一：context，每个build方法都会有上下文，目的是知道当前树的位置\n参数二：ChangeNotifier对应的实例，也是我们在builder函数中主要使用的对象\n参数三：child，目的是进行优化，如果builder下面有一颗庞大的子树，当模型发生改变的时候，我们并不希望重新build这颗子树，那么就可以将这颗子树放到Consumer的child中，在这里直接引入即可（注意我案例中的Icon所放的位置）\n\n\n步骤四：创建一个新的页面，在新的页面中修改数据\n\n\n\n\n\n2.2.2. Provider.of的弊端\n事实上，因为Provider是基于InheritedWidget，所以我们在使用ChangeNotifier中的数据时，我们可以通过Provider.of的方式来使用，比如下面的代码：\n\n\n我们会发现很明显上面的代码会更加简洁，那么开发中是否要选择上面这种方式呢？\n答案是否定的，更多时候我们还是要选择Consumer的方式。\n\n为什么呢？因为Consumer在刷新整个Widget树时，会尽可能少的rebuild Widget。\n方式一：Provider.of的方式完整的代码：\n当我们点击了floatingActionButton时，HYHomePage的build方法会被重新调用。\n这意味着整个HYHomePage的Widget都需要重新build\n\n\n\n方式二：将Text中的内容采用Consumer的方式修改如下：\n你会发现HYHomePage的build方法不会被重新调用；\n设置如果我们有对应的child widget，可以采用上面案例中的方式来组织，性能更高；\n\n\n\n2.2.3. Selector的选择\nConsumer是否是最好的选择呢？并不是，它也会存在弊端\n\n比如当点击了floatingActionButton时，我们在代码的两处分别打印它们的builder是否会重新调用；\n我们会发现只要点击了floatingActionButton，两个位置都会被重新builder；\n但是floatingActionButton的位置有重新build的必要吗？没有，因为它是否在操作数据，并没有展示；\n如何可以做到让它不要重新build了？使用Selector来代替Consumer\n\n\n\n我们先直接实现代码，在解释其中的含义：\n\nSelector和Consumer对比，不同之处主要是三个关键点：\n\n关键点1：泛型参数是两个\n泛型参数一：我们这次要使用的Provider\n泛型参数二：转换之后的数据类型，比如我这里转换之后依然是使用CounterProvider，那么他们两个就是一样的类型\n关键点2：selector回调函数\n转换的回调函数，你希望如何进行转换\nS Function(BuildContext, A) selector\n我这里没有进行转换，所以直接将A实例返回即可\n关键点3：是否希望重新rebuild\n这里也是一个回调函数，我们可以拿到转换前后的两个实例；\nbool Function(T previous, T next);\n因为这里我不希望它重新rebuild，无论数据如何变化，所以这里我直接return false；\n\n\n这个时候，我们重新测试点击floatingActionButton，floatingActionButton中的代码并不会进行rebuild操作。\n所以在某些情况下，我们可以使用Selector来代替Consumer，性能会更高。\n\n2.2.4. MultiProvider\n在开发中，我们需要共享的数据肯定不止一个，并且数据之间我们需要组织到一起，所以一个Provider必然是不够的。\n我们在增加一个新的ChangeNotifier\n\n\n如果在开发中我们有多个Provider需要提供应该怎么做呢？\n方式一：多个Provider之间嵌套\n\n这样做有很大的弊端，如果嵌套层级过多不方便维护，扩展性也比较差\n\n\n\n方式二：使用MultiProvider\n\n","source":"_posts/flutter/flutter框架一/17-Flutter状态管理.md","raw":"---\ntitle: 17-Flutter状态管理\ntoc: true\ndate: 2020-09-24 18:55:30\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n状态管理是声明式编程非常重要的一个概念，我们在前面介绍过Flutter是声明式编程的，也区分声明式编程和命令式编程的区别。\n\n这里，我们就来系统的学习一下Flutter声明式编程中非常重要的状态管理\n\n# 一. 为什么需要状态管理？\n\n### 1.1. 认识状态管理\n\n很多从命令式编程框架（Android或iOS原生开发者）转成声明式编程（Flutter、Vue、React等）刚开始并不适应，因为需要一个新的角度来考虑APP的开发模式。\n\nFlutter作为一个现代的框架，是声明式编程的：\n\n![图1](17-Flutter状态管理/17_001.png)\n\n在编写一个应用的过程中，我们有大量的State需要来进行管理，而正是对这些State的改变，来更新界面的刷新：\n\n![图1](17-Flutter状态管理/17_002.png)\n\n### 1.2. 不同状态管理分类\n\n##### 1.2.1. 短时状态Ephemeral state\n\n某些状态只需要在自己的Widget中使用即可\n\n - 比如我们之前做的简单计数器counter\n - 比如一个PageView组件记录当前的页面\n - 比如一个动画记录当前的进度\n - 比如一个BottomNavigationBar中当前被选中的tab\n\n这种状态我们只需要使用StatefulWidget对应的State类自己管理即可，Widget树中的其它部分并不需要访问这个状态。\n\n这种方式在之前的学习中，我们已经应用过非常多次了。\n\n##### 1.2.2. 应用状态App state\n\n开发中也有非常多的状态需要在多个部分进行共享\n\n - 比如用户一个个性化选项\n - 比如用户的登录状态信息\n - 比如一个电商应用的购物车\n - 比如一个新闻应用的已读消息或者未读消息\n\n这种状态我们如果在Widget之间传递来、传递去，那么是无穷尽的，并且代码的耦合度会变得非常高，牵一发而动全身，无论是代码编写质量、后期维护、可扩展性都非常差。\n\n这个时候我们可以选择全局状态管理的方式，来对状态进行统一的管理和应用。\n\n### 1.2.3. 如何选择不同的管理方式\n\n开发中，没有明确的规则去区分哪些状态是短时状态，哪些状态是应用状态。\n\n - 某些短时状态可能在之后的开发维护中需要升级为应用状态。\n\n但是我们可以简单遵守下面这幅流程图的规则：\n\n![图1](17-Flutter状态管理/17_003.png)\n\n针对React使用setState还是Redux中的Store来管理状态哪个更好的问题，Redux的issue上，Redux的作者Dan Abramov，它这样回答的：\n\nThe rule of thumb is: Do whatever is less awkward\n\n经验原则就是：选择能够减少麻烦的方式。\n\n![图1](17-Flutter状态管理/17_004.png)\n\n# 二. 共享状态管理\n\n### 2.1. InheritedWidget\n\nInheritedWidget和React中的context功能类似，可以实现跨组件数据的传递。\n\n定义一个共享数据的InheritedWidget，需要继承自InheritedWidget\n\n这里定义了一个of方法，该方法通过context开始去查找祖先的HYDataWidget（可以查看源码查找过程）\n\nupdateShouldNotify方法是对比新旧HYDataWidget，是否需要对更新相关依赖的Widget\n\n![图1](17-Flutter状态管理/17_005.png)\n\n创建HYDataWidget，并且传入数据（这里点击按钮会修改数据，并且重新build）\n\n![图1](17-Flutter状态管理/17_006.png)\n\n在某个Widget中使用共享的数据，并且监听\n\n![图1](17-Flutter状态管理/17_007.png)\n\n### 2.2. Provider\n\nProvider是目前官方推荐的全局状态管理工具，由社区作者Remi Rousselet 和 Flutter Team共同编写。\n\n使用之前，我们需要先引入对它的依赖，截止这篇文章，Provider的最新版本为4.0.4：\n\n![图1](17-Flutter状态管理/17_008.png)\n\n##### 2.2.1. Provider的基本使用\n\n在使用Provider的时候，我们主要关心三个概念：\n\n - ChangeNotifier：真正数据（状态）存放的地方\n - ChangeNotifierProvider：Widget树中提供数据（状态）的地方，会在其中创建对应的ChangeNotifier\n - Consumer：Widget树中需要使用数据（状态）的地方\n\n我们先来完成一个简单的案例，将官方计数器案例使用Provider来实现：\n\n**第一步：创建自己的ChangeNotifier**\n\n我们需要一个ChangeNotifier来保存我们的状态，所以创建它\n \n - 这里我们可以使用继承自ChangeNotifier，也可以使用混入，这取决于概率是否需要继承自其它的类\n - 我们使用一个私有的_counter，并且提供了getter和setter\n - 在setter中我们监听到_counter的改变，就调用notifyListeners方法，通知所有的Consumer进行更新\n\n![图1](17-Flutter状态管理/17_009.png)\n\n**第二步：在Widget Tree中插入ChangeNotifierProvider**\n\n我们需要在Widget Tree中插入ChangeNotifierProvider，以便Consumer可以获取到数据：\n将ChangeNotifierProvider放到了顶层，这样方便在整个应用的任何地方可以使用CounterProvider\n\n\n第三步：在首页中使用Consumer引入和修改状态\n引入位置一：在body中使用Consumer，Consumer需要传入一个builder回调函数，当数据发生变化时，就会通知依赖数据的Consumer重新调用builder方法来构建；\n引入位置二：在floatingActionButton中使用Consumer，当点击按钮时，修改CounterNotifier中的counter数据；\n\n\n\nConsumer的builder方法解析：\n参数一：context，每个build方法都会有上下文，目的是知道当前树的位置\n参数二：ChangeNotifier对应的实例，也是我们在builder函数中主要使用的对象\n参数三：child，目的是进行优化，如果builder下面有一颗庞大的子树，当模型发生改变的时候，我们并不希望重新build这颗子树，那么就可以将这颗子树放到Consumer的child中，在这里直接引入即可（注意我案例中的Icon所放的位置）\n\n\n步骤四：创建一个新的页面，在新的页面中修改数据\n\n\n\n\n\n2.2.2. Provider.of的弊端\n事实上，因为Provider是基于InheritedWidget，所以我们在使用ChangeNotifier中的数据时，我们可以通过Provider.of的方式来使用，比如下面的代码：\n\n\n我们会发现很明显上面的代码会更加简洁，那么开发中是否要选择上面这种方式呢？\n答案是否定的，更多时候我们还是要选择Consumer的方式。\n\n为什么呢？因为Consumer在刷新整个Widget树时，会尽可能少的rebuild Widget。\n方式一：Provider.of的方式完整的代码：\n当我们点击了floatingActionButton时，HYHomePage的build方法会被重新调用。\n这意味着整个HYHomePage的Widget都需要重新build\n\n\n\n方式二：将Text中的内容采用Consumer的方式修改如下：\n你会发现HYHomePage的build方法不会被重新调用；\n设置如果我们有对应的child widget，可以采用上面案例中的方式来组织，性能更高；\n\n\n\n2.2.3. Selector的选择\nConsumer是否是最好的选择呢？并不是，它也会存在弊端\n\n比如当点击了floatingActionButton时，我们在代码的两处分别打印它们的builder是否会重新调用；\n我们会发现只要点击了floatingActionButton，两个位置都会被重新builder；\n但是floatingActionButton的位置有重新build的必要吗？没有，因为它是否在操作数据，并没有展示；\n如何可以做到让它不要重新build了？使用Selector来代替Consumer\n\n\n\n我们先直接实现代码，在解释其中的含义：\n\nSelector和Consumer对比，不同之处主要是三个关键点：\n\n关键点1：泛型参数是两个\n泛型参数一：我们这次要使用的Provider\n泛型参数二：转换之后的数据类型，比如我这里转换之后依然是使用CounterProvider，那么他们两个就是一样的类型\n关键点2：selector回调函数\n转换的回调函数，你希望如何进行转换\nS Function(BuildContext, A) selector\n我这里没有进行转换，所以直接将A实例返回即可\n关键点3：是否希望重新rebuild\n这里也是一个回调函数，我们可以拿到转换前后的两个实例；\nbool Function(T previous, T next);\n因为这里我不希望它重新rebuild，无论数据如何变化，所以这里我直接return false；\n\n\n这个时候，我们重新测试点击floatingActionButton，floatingActionButton中的代码并不会进行rebuild操作。\n所以在某些情况下，我们可以使用Selector来代替Consumer，性能会更高。\n\n2.2.4. MultiProvider\n在开发中，我们需要共享的数据肯定不止一个，并且数据之间我们需要组织到一起，所以一个Provider必然是不够的。\n我们在增加一个新的ChangeNotifier\n\n\n如果在开发中我们有多个Provider需要提供应该怎么做呢？\n方式一：多个Provider之间嵌套\n\n这样做有很大的弊端，如果嵌套层级过多不方便维护，扩展性也比较差\n\n\n\n方式二：使用MultiProvider\n\n","slug":"flutter/flutter框架一/17-Flutter状态管理","published":1,"updated":"2020-09-24T11:40:13.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengm002lu3s64es71rem","content":"<p>状态管理是声明式编程非常重要的一个概念，我们在前面介绍过Flutter是声明式编程的，也区分声明式编程和命令式编程的区别。</p>\n<p>这里，我们就来系统的学习一下Flutter声明式编程中非常重要的状态管理</p>\n<h1 id=\"一-为什么需要状态管理？\"><a href=\"#一-为什么需要状态管理？\" class=\"headerlink\" title=\"一. 为什么需要状态管理？\"></a>一. 为什么需要状态管理？</h1><h3 id=\"1-1-认识状态管理\"><a href=\"#1-1-认识状态管理\" class=\"headerlink\" title=\"1.1. 认识状态管理\"></a>1.1. 认识状态管理</h3><p>很多从命令式编程框架（Android或iOS原生开发者）转成声明式编程（Flutter、Vue、React等）刚开始并不适应，因为需要一个新的角度来考虑APP的开发模式。</p>\n<p>Flutter作为一个现代的框架，是声明式编程的：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_001.png\" alt=\"图1\"></p>\n<p>在编写一个应用的过程中，我们有大量的State需要来进行管理，而正是对这些State的改变，来更新界面的刷新：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-不同状态管理分类\"><a href=\"#1-2-不同状态管理分类\" class=\"headerlink\" title=\"1.2. 不同状态管理分类\"></a>1.2. 不同状态管理分类</h3><h5 id=\"1-2-1-短时状态Ephemeral-state\"><a href=\"#1-2-1-短时状态Ephemeral-state\" class=\"headerlink\" title=\"1.2.1. 短时状态Ephemeral state\"></a>1.2.1. 短时状态Ephemeral state</h5><p>某些状态只需要在自己的Widget中使用即可</p>\n<ul>\n<li>比如我们之前做的简单计数器counter</li>\n<li>比如一个PageView组件记录当前的页面</li>\n<li>比如一个动画记录当前的进度</li>\n<li>比如一个BottomNavigationBar中当前被选中的tab</li>\n</ul>\n<p>这种状态我们只需要使用StatefulWidget对应的State类自己管理即可，Widget树中的其它部分并不需要访问这个状态。</p>\n<p>这种方式在之前的学习中，我们已经应用过非常多次了。</p>\n<h5 id=\"1-2-2-应用状态App-state\"><a href=\"#1-2-2-应用状态App-state\" class=\"headerlink\" title=\"1.2.2. 应用状态App state\"></a>1.2.2. 应用状态App state</h5><p>开发中也有非常多的状态需要在多个部分进行共享</p>\n<ul>\n<li>比如用户一个个性化选项</li>\n<li>比如用户的登录状态信息</li>\n<li>比如一个电商应用的购物车</li>\n<li>比如一个新闻应用的已读消息或者未读消息</li>\n</ul>\n<p>这种状态我们如果在Widget之间传递来、传递去，那么是无穷尽的，并且代码的耦合度会变得非常高，牵一发而动全身，无论是代码编写质量、后期维护、可扩展性都非常差。</p>\n<p>这个时候我们可以选择全局状态管理的方式，来对状态进行统一的管理和应用。</p>\n<h3 id=\"1-2-3-如何选择不同的管理方式\"><a href=\"#1-2-3-如何选择不同的管理方式\" class=\"headerlink\" title=\"1.2.3. 如何选择不同的管理方式\"></a>1.2.3. 如何选择不同的管理方式</h3><p>开发中，没有明确的规则去区分哪些状态是短时状态，哪些状态是应用状态。</p>\n<ul>\n<li>某些短时状态可能在之后的开发维护中需要升级为应用状态。</li>\n</ul>\n<p>但是我们可以简单遵守下面这幅流程图的规则：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_003.png\" alt=\"图1\"></p>\n<p>针对React使用setState还是Redux中的Store来管理状态哪个更好的问题，Redux的issue上，Redux的作者Dan Abramov，它这样回答的：</p>\n<p>The rule of thumb is: Do whatever is less awkward</p>\n<p>经验原则就是：选择能够减少麻烦的方式。</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-共享状态管理\"><a href=\"#二-共享状态管理\" class=\"headerlink\" title=\"二. 共享状态管理\"></a>二. 共享状态管理</h1><h3 id=\"2-1-InheritedWidget\"><a href=\"#2-1-InheritedWidget\" class=\"headerlink\" title=\"2.1. InheritedWidget\"></a>2.1. InheritedWidget</h3><p>InheritedWidget和React中的context功能类似，可以实现跨组件数据的传递。</p>\n<p>定义一个共享数据的InheritedWidget，需要继承自InheritedWidget</p>\n<p>这里定义了一个of方法，该方法通过context开始去查找祖先的HYDataWidget（可以查看源码查找过程）</p>\n<p>updateShouldNotify方法是对比新旧HYDataWidget，是否需要对更新相关依赖的Widget</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_005.png\" alt=\"图1\"></p>\n<p>创建HYDataWidget，并且传入数据（这里点击按钮会修改数据，并且重新build）</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_006.png\" alt=\"图1\"></p>\n<p>在某个Widget中使用共享的数据，并且监听</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_007.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-Provider\"><a href=\"#2-2-Provider\" class=\"headerlink\" title=\"2.2. Provider\"></a>2.2. Provider</h3><p>Provider是目前官方推荐的全局状态管理工具，由社区作者Remi Rousselet 和 Flutter Team共同编写。</p>\n<p>使用之前，我们需要先引入对它的依赖，截止这篇文章，Provider的最新版本为4.0.4：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_008.png\" alt=\"图1\"></p>\n<h5 id=\"2-2-1-Provider的基本使用\"><a href=\"#2-2-1-Provider的基本使用\" class=\"headerlink\" title=\"2.2.1. Provider的基本使用\"></a>2.2.1. Provider的基本使用</h5><p>在使用Provider的时候，我们主要关心三个概念：</p>\n<ul>\n<li>ChangeNotifier：真正数据（状态）存放的地方</li>\n<li>ChangeNotifierProvider：Widget树中提供数据（状态）的地方，会在其中创建对应的ChangeNotifier</li>\n<li>Consumer：Widget树中需要使用数据（状态）的地方</li>\n</ul>\n<p>我们先来完成一个简单的案例，将官方计数器案例使用Provider来实现：</p>\n<p><strong>第一步：创建自己的ChangeNotifier</strong></p>\n<p>我们需要一个ChangeNotifier来保存我们的状态，所以创建它</p>\n<ul>\n<li>这里我们可以使用继承自ChangeNotifier，也可以使用混入，这取决于概率是否需要继承自其它的类</li>\n<li>我们使用一个私有的_counter，并且提供了getter和setter</li>\n<li>在setter中我们监听到_counter的改变，就调用notifyListeners方法，通知所有的Consumer进行更新</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_009.png\" alt=\"图1\"></p>\n<p><strong>第二步：在Widget Tree中插入ChangeNotifierProvider</strong></p>\n<p>我们需要在Widget Tree中插入ChangeNotifierProvider，以便Consumer可以获取到数据：<br>将ChangeNotifierProvider放到了顶层，这样方便在整个应用的任何地方可以使用CounterProvider</p>\n<p>第三步：在首页中使用Consumer引入和修改状态<br>引入位置一：在body中使用Consumer，Consumer需要传入一个builder回调函数，当数据发生变化时，就会通知依赖数据的Consumer重新调用builder方法来构建；<br>引入位置二：在floatingActionButton中使用Consumer，当点击按钮时，修改CounterNotifier中的counter数据；</p>\n<p>Consumer的builder方法解析：<br>参数一：context，每个build方法都会有上下文，目的是知道当前树的位置<br>参数二：ChangeNotifier对应的实例，也是我们在builder函数中主要使用的对象<br>参数三：child，目的是进行优化，如果builder下面有一颗庞大的子树，当模型发生改变的时候，我们并不希望重新build这颗子树，那么就可以将这颗子树放到Consumer的child中，在这里直接引入即可（注意我案例中的Icon所放的位置）</p>\n<p>步骤四：创建一个新的页面，在新的页面中修改数据</p>\n<p>2.2.2. Provider.of的弊端<br>事实上，因为Provider是基于InheritedWidget，所以我们在使用ChangeNotifier中的数据时，我们可以通过Provider.of的方式来使用，比如下面的代码：</p>\n<p>我们会发现很明显上面的代码会更加简洁，那么开发中是否要选择上面这种方式呢？<br>答案是否定的，更多时候我们还是要选择Consumer的方式。</p>\n<p>为什么呢？因为Consumer在刷新整个Widget树时，会尽可能少的rebuild Widget。<br>方式一：Provider.of的方式完整的代码：<br>当我们点击了floatingActionButton时，HYHomePage的build方法会被重新调用。<br>这意味着整个HYHomePage的Widget都需要重新build</p>\n<p>方式二：将Text中的内容采用Consumer的方式修改如下：<br>你会发现HYHomePage的build方法不会被重新调用；<br>设置如果我们有对应的child widget，可以采用上面案例中的方式来组织，性能更高；</p>\n<p>2.2.3. Selector的选择<br>Consumer是否是最好的选择呢？并不是，它也会存在弊端</p>\n<p>比如当点击了floatingActionButton时，我们在代码的两处分别打印它们的builder是否会重新调用；<br>我们会发现只要点击了floatingActionButton，两个位置都会被重新builder；<br>但是floatingActionButton的位置有重新build的必要吗？没有，因为它是否在操作数据，并没有展示；<br>如何可以做到让它不要重新build了？使用Selector来代替Consumer</p>\n<p>我们先直接实现代码，在解释其中的含义：</p>\n<p>Selector和Consumer对比，不同之处主要是三个关键点：</p>\n<p>关键点1：泛型参数是两个<br>泛型参数一：我们这次要使用的Provider<br>泛型参数二：转换之后的数据类型，比如我这里转换之后依然是使用CounterProvider，那么他们两个就是一样的类型<br>关键点2：selector回调函数<br>转换的回调函数，你希望如何进行转换<br>S Function(BuildContext, A) selector<br>我这里没有进行转换，所以直接将A实例返回即可<br>关键点3：是否希望重新rebuild<br>这里也是一个回调函数，我们可以拿到转换前后的两个实例；<br>bool Function(T previous, T next);<br>因为这里我不希望它重新rebuild，无论数据如何变化，所以这里我直接return false；</p>\n<p>这个时候，我们重新测试点击floatingActionButton，floatingActionButton中的代码并不会进行rebuild操作。<br>所以在某些情况下，我们可以使用Selector来代替Consumer，性能会更高。</p>\n<p>2.2.4. MultiProvider<br>在开发中，我们需要共享的数据肯定不止一个，并且数据之间我们需要组织到一起，所以一个Provider必然是不够的。<br>我们在增加一个新的ChangeNotifier</p>\n<p>如果在开发中我们有多个Provider需要提供应该怎么做呢？<br>方式一：多个Provider之间嵌套</p>\n<p>这样做有很大的弊端，如果嵌套层级过多不方便维护，扩展性也比较差</p>\n<p>方式二：使用MultiProvider</p>\n","site":{"data":{}},"excerpt":"","more":"<p>状态管理是声明式编程非常重要的一个概念，我们在前面介绍过Flutter是声明式编程的，也区分声明式编程和命令式编程的区别。</p>\n<p>这里，我们就来系统的学习一下Flutter声明式编程中非常重要的状态管理</p>\n<h1 id=\"一-为什么需要状态管理？\"><a href=\"#一-为什么需要状态管理？\" class=\"headerlink\" title=\"一. 为什么需要状态管理？\"></a>一. 为什么需要状态管理？</h1><h3 id=\"1-1-认识状态管理\"><a href=\"#1-1-认识状态管理\" class=\"headerlink\" title=\"1.1. 认识状态管理\"></a>1.1. 认识状态管理</h3><p>很多从命令式编程框架（Android或iOS原生开发者）转成声明式编程（Flutter、Vue、React等）刚开始并不适应，因为需要一个新的角度来考虑APP的开发模式。</p>\n<p>Flutter作为一个现代的框架，是声明式编程的：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_001.png\" alt=\"图1\"></p>\n<p>在编写一个应用的过程中，我们有大量的State需要来进行管理，而正是对这些State的改变，来更新界面的刷新：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-不同状态管理分类\"><a href=\"#1-2-不同状态管理分类\" class=\"headerlink\" title=\"1.2. 不同状态管理分类\"></a>1.2. 不同状态管理分类</h3><h5 id=\"1-2-1-短时状态Ephemeral-state\"><a href=\"#1-2-1-短时状态Ephemeral-state\" class=\"headerlink\" title=\"1.2.1. 短时状态Ephemeral state\"></a>1.2.1. 短时状态Ephemeral state</h5><p>某些状态只需要在自己的Widget中使用即可</p>\n<ul>\n<li>比如我们之前做的简单计数器counter</li>\n<li>比如一个PageView组件记录当前的页面</li>\n<li>比如一个动画记录当前的进度</li>\n<li>比如一个BottomNavigationBar中当前被选中的tab</li>\n</ul>\n<p>这种状态我们只需要使用StatefulWidget对应的State类自己管理即可，Widget树中的其它部分并不需要访问这个状态。</p>\n<p>这种方式在之前的学习中，我们已经应用过非常多次了。</p>\n<h5 id=\"1-2-2-应用状态App-state\"><a href=\"#1-2-2-应用状态App-state\" class=\"headerlink\" title=\"1.2.2. 应用状态App state\"></a>1.2.2. 应用状态App state</h5><p>开发中也有非常多的状态需要在多个部分进行共享</p>\n<ul>\n<li>比如用户一个个性化选项</li>\n<li>比如用户的登录状态信息</li>\n<li>比如一个电商应用的购物车</li>\n<li>比如一个新闻应用的已读消息或者未读消息</li>\n</ul>\n<p>这种状态我们如果在Widget之间传递来、传递去，那么是无穷尽的，并且代码的耦合度会变得非常高，牵一发而动全身，无论是代码编写质量、后期维护、可扩展性都非常差。</p>\n<p>这个时候我们可以选择全局状态管理的方式，来对状态进行统一的管理和应用。</p>\n<h3 id=\"1-2-3-如何选择不同的管理方式\"><a href=\"#1-2-3-如何选择不同的管理方式\" class=\"headerlink\" title=\"1.2.3. 如何选择不同的管理方式\"></a>1.2.3. 如何选择不同的管理方式</h3><p>开发中，没有明确的规则去区分哪些状态是短时状态，哪些状态是应用状态。</p>\n<ul>\n<li>某些短时状态可能在之后的开发维护中需要升级为应用状态。</li>\n</ul>\n<p>但是我们可以简单遵守下面这幅流程图的规则：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_003.png\" alt=\"图1\"></p>\n<p>针对React使用setState还是Redux中的Store来管理状态哪个更好的问题，Redux的issue上，Redux的作者Dan Abramov，它这样回答的：</p>\n<p>The rule of thumb is: Do whatever is less awkward</p>\n<p>经验原则就是：选择能够减少麻烦的方式。</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-共享状态管理\"><a href=\"#二-共享状态管理\" class=\"headerlink\" title=\"二. 共享状态管理\"></a>二. 共享状态管理</h1><h3 id=\"2-1-InheritedWidget\"><a href=\"#2-1-InheritedWidget\" class=\"headerlink\" title=\"2.1. InheritedWidget\"></a>2.1. InheritedWidget</h3><p>InheritedWidget和React中的context功能类似，可以实现跨组件数据的传递。</p>\n<p>定义一个共享数据的InheritedWidget，需要继承自InheritedWidget</p>\n<p>这里定义了一个of方法，该方法通过context开始去查找祖先的HYDataWidget（可以查看源码查找过程）</p>\n<p>updateShouldNotify方法是对比新旧HYDataWidget，是否需要对更新相关依赖的Widget</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_005.png\" alt=\"图1\"></p>\n<p>创建HYDataWidget，并且传入数据（这里点击按钮会修改数据，并且重新build）</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_006.png\" alt=\"图1\"></p>\n<p>在某个Widget中使用共享的数据，并且监听</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_007.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-Provider\"><a href=\"#2-2-Provider\" class=\"headerlink\" title=\"2.2. Provider\"></a>2.2. Provider</h3><p>Provider是目前官方推荐的全局状态管理工具，由社区作者Remi Rousselet 和 Flutter Team共同编写。</p>\n<p>使用之前，我们需要先引入对它的依赖，截止这篇文章，Provider的最新版本为4.0.4：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_008.png\" alt=\"图1\"></p>\n<h5 id=\"2-2-1-Provider的基本使用\"><a href=\"#2-2-1-Provider的基本使用\" class=\"headerlink\" title=\"2.2.1. Provider的基本使用\"></a>2.2.1. Provider的基本使用</h5><p>在使用Provider的时候，我们主要关心三个概念：</p>\n<ul>\n<li>ChangeNotifier：真正数据（状态）存放的地方</li>\n<li>ChangeNotifierProvider：Widget树中提供数据（状态）的地方，会在其中创建对应的ChangeNotifier</li>\n<li>Consumer：Widget树中需要使用数据（状态）的地方</li>\n</ul>\n<p>我们先来完成一个简单的案例，将官方计数器案例使用Provider来实现：</p>\n<p><strong>第一步：创建自己的ChangeNotifier</strong></p>\n<p>我们需要一个ChangeNotifier来保存我们的状态，所以创建它</p>\n<ul>\n<li>这里我们可以使用继承自ChangeNotifier，也可以使用混入，这取决于概率是否需要继承自其它的类</li>\n<li>我们使用一个私有的_counter，并且提供了getter和setter</li>\n<li>在setter中我们监听到_counter的改变，就调用notifyListeners方法，通知所有的Consumer进行更新</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/17-Flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/17_009.png\" alt=\"图1\"></p>\n<p><strong>第二步：在Widget Tree中插入ChangeNotifierProvider</strong></p>\n<p>我们需要在Widget Tree中插入ChangeNotifierProvider，以便Consumer可以获取到数据：<br>将ChangeNotifierProvider放到了顶层，这样方便在整个应用的任何地方可以使用CounterProvider</p>\n<p>第三步：在首页中使用Consumer引入和修改状态<br>引入位置一：在body中使用Consumer，Consumer需要传入一个builder回调函数，当数据发生变化时，就会通知依赖数据的Consumer重新调用builder方法来构建；<br>引入位置二：在floatingActionButton中使用Consumer，当点击按钮时，修改CounterNotifier中的counter数据；</p>\n<p>Consumer的builder方法解析：<br>参数一：context，每个build方法都会有上下文，目的是知道当前树的位置<br>参数二：ChangeNotifier对应的实例，也是我们在builder函数中主要使用的对象<br>参数三：child，目的是进行优化，如果builder下面有一颗庞大的子树，当模型发生改变的时候，我们并不希望重新build这颗子树，那么就可以将这颗子树放到Consumer的child中，在这里直接引入即可（注意我案例中的Icon所放的位置）</p>\n<p>步骤四：创建一个新的页面，在新的页面中修改数据</p>\n<p>2.2.2. Provider.of的弊端<br>事实上，因为Provider是基于InheritedWidget，所以我们在使用ChangeNotifier中的数据时，我们可以通过Provider.of的方式来使用，比如下面的代码：</p>\n<p>我们会发现很明显上面的代码会更加简洁，那么开发中是否要选择上面这种方式呢？<br>答案是否定的，更多时候我们还是要选择Consumer的方式。</p>\n<p>为什么呢？因为Consumer在刷新整个Widget树时，会尽可能少的rebuild Widget。<br>方式一：Provider.of的方式完整的代码：<br>当我们点击了floatingActionButton时，HYHomePage的build方法会被重新调用。<br>这意味着整个HYHomePage的Widget都需要重新build</p>\n<p>方式二：将Text中的内容采用Consumer的方式修改如下：<br>你会发现HYHomePage的build方法不会被重新调用；<br>设置如果我们有对应的child widget，可以采用上面案例中的方式来组织，性能更高；</p>\n<p>2.2.3. Selector的选择<br>Consumer是否是最好的选择呢？并不是，它也会存在弊端</p>\n<p>比如当点击了floatingActionButton时，我们在代码的两处分别打印它们的builder是否会重新调用；<br>我们会发现只要点击了floatingActionButton，两个位置都会被重新builder；<br>但是floatingActionButton的位置有重新build的必要吗？没有，因为它是否在操作数据，并没有展示；<br>如何可以做到让它不要重新build了？使用Selector来代替Consumer</p>\n<p>我们先直接实现代码，在解释其中的含义：</p>\n<p>Selector和Consumer对比，不同之处主要是三个关键点：</p>\n<p>关键点1：泛型参数是两个<br>泛型参数一：我们这次要使用的Provider<br>泛型参数二：转换之后的数据类型，比如我这里转换之后依然是使用CounterProvider，那么他们两个就是一样的类型<br>关键点2：selector回调函数<br>转换的回调函数，你希望如何进行转换<br>S Function(BuildContext, A) selector<br>我这里没有进行转换，所以直接将A实例返回即可<br>关键点3：是否希望重新rebuild<br>这里也是一个回调函数，我们可以拿到转换前后的两个实例；<br>bool Function(T previous, T next);<br>因为这里我不希望它重新rebuild，无论数据如何变化，所以这里我直接return false；</p>\n<p>这个时候，我们重新测试点击floatingActionButton，floatingActionButton中的代码并不会进行rebuild操作。<br>所以在某些情况下，我们可以使用Selector来代替Consumer，性能会更高。</p>\n<p>2.2.4. MultiProvider<br>在开发中，我们需要共享的数据肯定不止一个，并且数据之间我们需要组织到一起，所以一个Provider必然是不够的。<br>我们在增加一个新的ChangeNotifier</p>\n<p>如果在开发中我们有多个Provider需要提供应该怎么做呢？<br>方式一：多个Provider之间嵌套</p>\n<p>这样做有很大的弊端，如果嵌套层级过多不方便维护，扩展性也比较差</p>\n<p>方式二：使用MultiProvider</p>\n"},{"title":"18-Flutter事件监听","toc":true,"date":"2020-09-24T10:55:38.000Z","_content":"\n\n# 一. 事件监听\n\n在大前端的开发中，必然存在各种各样和用户交互的情况：比如手指点击、手指滑动、双击、长按等等。\n\n在Flutter中，手势有两个不同的层次：\n\n - 第一层：原始指针事件（Pointer Events）：描述了屏幕上由触摸板、鼠标、指示笔等触发的指针的位置和移动。\n - 第二层：手势识别（Gesture Detector）：这个是在原始事件上的一种封装。\n \t\n \t* 比如我们要监听用户长按，如果自己封装原始事件我们需要监听从用户按下到抬起的时间来判断是否是一次长按事件；\n\t* 比如我们需要监听用户双击事件，我们需要自己封装监听用户两次按下抬起的时间间隔；\n\t* 幸运的是各个平台几乎都对它们进行了封装，而Flutter中的手势识别就是对原始指针事件的封装；\n\t* 包括哪些手势呢？比如点击、双击、长按、拖动等\n\n### 1.1. 指针事件Pointer\n\nPointer 代表的是人机界面交互的原始数据。一共有四种指针事件：\n\n - PointerDownEvent 指针在特定位置与屏幕接触\n - PointerMoveEvent 指针从屏幕的一个位置移动到另外一个位置\n - PointerUpEvent 指针与屏幕停止接触\n - PointerCancelEvent 指针因为一些特殊情况被取消\n\nPointer的原理是什么呢？\n\n - 在指针落下时，框架做了一个 hit test 的操作，确定与屏幕发生接触的位置上有哪些Widget以及分发给最内部的组件去响应；\n - 事件会沿着最内部的组件向组件树的根冒泡分发；\n - 并且不存在用于取消或者停止指针事件进一步分发的机制；\n\n\n原始指针事件使用Listener来监听：\n\n![图1](18-Flutter事件监听/18_001.png)\n\n![图1](18-Flutter事件监听/18_002.png)\n\n### 1.2. 手势识别Gesture\n\nGesture是对一系列Pointer的封装，官方建议开发中尽可能使用Gesture，而不是Pointer\n\n![图1](18-Flutter事件监听/18_003_0.png)\n\n**Gesture分层非常多的种类：**\n\n点击：\n\n - onTapDown：用户发生手指按下的操作\n - onTapUp：用户发生手指抬起的操作\n - onTap：用户点击事件完成\n - onTapCancel：事件按下过程中被取消\n\n双击：\n\n - onDoubleTap：快速点击了两次\n\n长按：\n\n - onLongPress：在屏幕上保持了一段时间\n\n纵向拖拽：\n\n - onVerticalDragStart：指针和屏幕产生接触并可能开始纵向移动；\n - onVerticalDragUpdate：指针和屏幕产生接触，在纵向上发生移动并保持移动；\n - onVerticalDragEnd：指针和屏幕产生接触结束；\n\n横线拖拽：\n\n - onHorizontalDragStart：指针和屏幕产生接触并可能开始横向移动；\n - onHorizontalDragUpdate：指针和屏幕产生接触，在横向上发生移动并保持移动；\n - onHorizontalDragEnd：指针和屏幕产生接触结束；\n\n移动：\n\n - onPanStart：指针和屏幕产生接触并可能开始横向移动或者纵向移动。如果设置了\n - onHorizontalDragStart 或者 onVerticalDragStart，该回调方法会引发崩溃；\n - onPanUpdate：指针和屏幕产生接触，在横向或者纵向上发生移动并保持移动。如果设置了\n - onHorizontalDragUpdate 或者 onVerticalDragUpdate，该回调方法会引发崩溃。\n - onPanEnd：指针先前和屏幕产生了接触，并且以特定速度移动，此后不再在屏幕接触上发生移动。如果设置了  \n - onHorizontalDragEnd 或者 onVerticalDragEnd，该回调方法会引发崩溃。\n\n从Widget的层面来监听手势，我们需要使用：GestureDetector\n\n - 当然，我们也可以使用RaisedButton、FlatButton、InkWell等来监听手势\n - globalPosition用于获取相对于屏幕的位置信息\n - localPosition用于获取相对于当前Widget的位置信息\n\n![图1](18-Flutter事件监听/18_003.png)\n\n\n![图1](18-Flutter事件监听/18_004.png)\n\n\n### 1.3 忽略内层的点击\n\n```\nclass IgnoreInnerClickDemo3 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: GestureDetector(\n        onTapDown: (details){\n          print(\"outter click\");\n        },\n        child: Container(\n          width: 200,\n          height: 200,\n          color: Colors.red,\n          alignment: Alignment.center,\n          child: IgnorePointer(\n            child: GestureDetector(\n              onTapDown: (details){\n                print(\"inner click\");\n              },\n              child: Container(\n                width: 100,\n                height: 100,\n                color: Colors.blue,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n### 1.4 使用Stack堆叠组件\n\n```\n//4.使用Stack堆叠组件\nclass StackDemo4 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n        child: Stack(\n          alignment: Alignment.center,\n          children: <Widget>[\n            GestureDetector(\n              onTapDown: (details){\n                print(\"outter click\");\n              },\n              child: Container(\n                width: 200,\n                height: 200,\n                color: Colors.red,\n              ),\n            ),\n            GestureDetector(\n              onTapDown: (details){\n                print(\"inner click\");\n              },\n              child: Container(\n                  width: 100,\n                  height: 100,\n                  color: Colors.blue\n              ),\n            ),\n          ],\n        )\n    );\n  }\n}\n```\n\n# 二. 跨组件事件\n在组件之间如果有事件需要传递，一方面可以一层层来传递，另一方面我们也可以使用一个EventBus工具来完成。\n\n其实EventBus在Vue、React中都是一种非常常见的跨组件通信的方式：\n\n - EventBus相当于是一种订阅者模式，通过一个全局的对象来管理；\n - 这个EventBus我们可以自己实现，也可以使用第三方的EventBus；\n\n这里我们直接选择第三方的EventBus：\n\n![图1](18-Flutter事件监听/18_005.png)\n\n第一：我们需要定义一个希望在组件之间传递的对象：\n\n - 我们可以称之为一个时间对象，也可以是我们平时开发中用的模型对象（model）\n\n![图1](18-Flutter事件监听/18_006.png)\n\n第二：创建一个全局的EventBus对象\n\n![图1](18-Flutter事件监听/18_007.png)\n\n第三：在某个Widget中，发出事件：\n\n![图1](18-Flutter事件监听/18_008.png)\n\n第四：在某个Widget中，监听事件\n\n![图1](18-Flutter事件监听/18_009.png)","source":"_posts/flutter/flutter框架一/18-Flutter事件监听.md","raw":"---\ntitle: 18-Flutter事件监听\ntoc: true\ndate: 2020-09-24 18:55:38\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n# 一. 事件监听\n\n在大前端的开发中，必然存在各种各样和用户交互的情况：比如手指点击、手指滑动、双击、长按等等。\n\n在Flutter中，手势有两个不同的层次：\n\n - 第一层：原始指针事件（Pointer Events）：描述了屏幕上由触摸板、鼠标、指示笔等触发的指针的位置和移动。\n - 第二层：手势识别（Gesture Detector）：这个是在原始事件上的一种封装。\n \t\n \t* 比如我们要监听用户长按，如果自己封装原始事件我们需要监听从用户按下到抬起的时间来判断是否是一次长按事件；\n\t* 比如我们需要监听用户双击事件，我们需要自己封装监听用户两次按下抬起的时间间隔；\n\t* 幸运的是各个平台几乎都对它们进行了封装，而Flutter中的手势识别就是对原始指针事件的封装；\n\t* 包括哪些手势呢？比如点击、双击、长按、拖动等\n\n### 1.1. 指针事件Pointer\n\nPointer 代表的是人机界面交互的原始数据。一共有四种指针事件：\n\n - PointerDownEvent 指针在特定位置与屏幕接触\n - PointerMoveEvent 指针从屏幕的一个位置移动到另外一个位置\n - PointerUpEvent 指针与屏幕停止接触\n - PointerCancelEvent 指针因为一些特殊情况被取消\n\nPointer的原理是什么呢？\n\n - 在指针落下时，框架做了一个 hit test 的操作，确定与屏幕发生接触的位置上有哪些Widget以及分发给最内部的组件去响应；\n - 事件会沿着最内部的组件向组件树的根冒泡分发；\n - 并且不存在用于取消或者停止指针事件进一步分发的机制；\n\n\n原始指针事件使用Listener来监听：\n\n![图1](18-Flutter事件监听/18_001.png)\n\n![图1](18-Flutter事件监听/18_002.png)\n\n### 1.2. 手势识别Gesture\n\nGesture是对一系列Pointer的封装，官方建议开发中尽可能使用Gesture，而不是Pointer\n\n![图1](18-Flutter事件监听/18_003_0.png)\n\n**Gesture分层非常多的种类：**\n\n点击：\n\n - onTapDown：用户发生手指按下的操作\n - onTapUp：用户发生手指抬起的操作\n - onTap：用户点击事件完成\n - onTapCancel：事件按下过程中被取消\n\n双击：\n\n - onDoubleTap：快速点击了两次\n\n长按：\n\n - onLongPress：在屏幕上保持了一段时间\n\n纵向拖拽：\n\n - onVerticalDragStart：指针和屏幕产生接触并可能开始纵向移动；\n - onVerticalDragUpdate：指针和屏幕产生接触，在纵向上发生移动并保持移动；\n - onVerticalDragEnd：指针和屏幕产生接触结束；\n\n横线拖拽：\n\n - onHorizontalDragStart：指针和屏幕产生接触并可能开始横向移动；\n - onHorizontalDragUpdate：指针和屏幕产生接触，在横向上发生移动并保持移动；\n - onHorizontalDragEnd：指针和屏幕产生接触结束；\n\n移动：\n\n - onPanStart：指针和屏幕产生接触并可能开始横向移动或者纵向移动。如果设置了\n - onHorizontalDragStart 或者 onVerticalDragStart，该回调方法会引发崩溃；\n - onPanUpdate：指针和屏幕产生接触，在横向或者纵向上发生移动并保持移动。如果设置了\n - onHorizontalDragUpdate 或者 onVerticalDragUpdate，该回调方法会引发崩溃。\n - onPanEnd：指针先前和屏幕产生了接触，并且以特定速度移动，此后不再在屏幕接触上发生移动。如果设置了  \n - onHorizontalDragEnd 或者 onVerticalDragEnd，该回调方法会引发崩溃。\n\n从Widget的层面来监听手势，我们需要使用：GestureDetector\n\n - 当然，我们也可以使用RaisedButton、FlatButton、InkWell等来监听手势\n - globalPosition用于获取相对于屏幕的位置信息\n - localPosition用于获取相对于当前Widget的位置信息\n\n![图1](18-Flutter事件监听/18_003.png)\n\n\n![图1](18-Flutter事件监听/18_004.png)\n\n\n### 1.3 忽略内层的点击\n\n```\nclass IgnoreInnerClickDemo3 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: GestureDetector(\n        onTapDown: (details){\n          print(\"outter click\");\n        },\n        child: Container(\n          width: 200,\n          height: 200,\n          color: Colors.red,\n          alignment: Alignment.center,\n          child: IgnorePointer(\n            child: GestureDetector(\n              onTapDown: (details){\n                print(\"inner click\");\n              },\n              child: Container(\n                width: 100,\n                height: 100,\n                color: Colors.blue,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n### 1.4 使用Stack堆叠组件\n\n```\n//4.使用Stack堆叠组件\nclass StackDemo4 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n        child: Stack(\n          alignment: Alignment.center,\n          children: <Widget>[\n            GestureDetector(\n              onTapDown: (details){\n                print(\"outter click\");\n              },\n              child: Container(\n                width: 200,\n                height: 200,\n                color: Colors.red,\n              ),\n            ),\n            GestureDetector(\n              onTapDown: (details){\n                print(\"inner click\");\n              },\n              child: Container(\n                  width: 100,\n                  height: 100,\n                  color: Colors.blue\n              ),\n            ),\n          ],\n        )\n    );\n  }\n}\n```\n\n# 二. 跨组件事件\n在组件之间如果有事件需要传递，一方面可以一层层来传递，另一方面我们也可以使用一个EventBus工具来完成。\n\n其实EventBus在Vue、React中都是一种非常常见的跨组件通信的方式：\n\n - EventBus相当于是一种订阅者模式，通过一个全局的对象来管理；\n - 这个EventBus我们可以自己实现，也可以使用第三方的EventBus；\n\n这里我们直接选择第三方的EventBus：\n\n![图1](18-Flutter事件监听/18_005.png)\n\n第一：我们需要定义一个希望在组件之间传递的对象：\n\n - 我们可以称之为一个时间对象，也可以是我们平时开发中用的模型对象（model）\n\n![图1](18-Flutter事件监听/18_006.png)\n\n第二：创建一个全局的EventBus对象\n\n![图1](18-Flutter事件监听/18_007.png)\n\n第三：在某个Widget中，发出事件：\n\n![图1](18-Flutter事件监听/18_008.png)\n\n第四：在某个Widget中，监听事件\n\n![图1](18-Flutter事件监听/18_009.png)","slug":"flutter/flutter框架一/18-Flutter事件监听","published":1,"updated":"2020-09-28T13:55:42.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengm002ou3s60l3x52e1","content":"<h1 id=\"一-事件监听\"><a href=\"#一-事件监听\" class=\"headerlink\" title=\"一. 事件监听\"></a>一. 事件监听</h1><p>在大前端的开发中，必然存在各种各样和用户交互的情况：比如手指点击、手指滑动、双击、长按等等。</p>\n<p>在Flutter中，手势有两个不同的层次：</p>\n<ul>\n<li><p>第一层：原始指针事件（Pointer Events）：描述了屏幕上由触摸板、鼠标、指示笔等触发的指针的位置和移动。</p>\n</li>\n<li><p>第二层：手势识别（Gesture Detector）：这个是在原始事件上的一种封装。</p>\n<ul>\n<li>比如我们要监听用户长按，如果自己封装原始事件我们需要监听从用户按下到抬起的时间来判断是否是一次长按事件；<ul>\n<li>比如我们需要监听用户双击事件，我们需要自己封装监听用户两次按下抬起的时间间隔；</li>\n<li>幸运的是各个平台几乎都对它们进行了封装，而Flutter中的手势识别就是对原始指针事件的封装；</li>\n<li>包括哪些手势呢？比如点击、双击、长按、拖动等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-1-指针事件Pointer\"><a href=\"#1-1-指针事件Pointer\" class=\"headerlink\" title=\"1.1. 指针事件Pointer\"></a>1.1. 指针事件Pointer</h3><p>Pointer 代表的是人机界面交互的原始数据。一共有四种指针事件：</p>\n<ul>\n<li>PointerDownEvent 指针在特定位置与屏幕接触</li>\n<li>PointerMoveEvent 指针从屏幕的一个位置移动到另外一个位置</li>\n<li>PointerUpEvent 指针与屏幕停止接触</li>\n<li>PointerCancelEvent 指针因为一些特殊情况被取消</li>\n</ul>\n<p>Pointer的原理是什么呢？</p>\n<ul>\n<li>在指针落下时，框架做了一个 hit test 的操作，确定与屏幕发生接触的位置上有哪些Widget以及分发给最内部的组件去响应；</li>\n<li>事件会沿着最内部的组件向组件树的根冒泡分发；</li>\n<li>并且不存在用于取消或者停止指针事件进一步分发的机制；</li>\n</ul>\n<p>原始指针事件使用Listener来监听：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_001.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-手势识别Gesture\"><a href=\"#1-2-手势识别Gesture\" class=\"headerlink\" title=\"1.2. 手势识别Gesture\"></a>1.2. 手势识别Gesture</h3><p>Gesture是对一系列Pointer的封装，官方建议开发中尽可能使用Gesture，而不是Pointer</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_003_0.png\" alt=\"图1\"></p>\n<p><strong>Gesture分层非常多的种类：</strong></p>\n<p>点击：</p>\n<ul>\n<li>onTapDown：用户发生手指按下的操作</li>\n<li>onTapUp：用户发生手指抬起的操作</li>\n<li>onTap：用户点击事件完成</li>\n<li>onTapCancel：事件按下过程中被取消</li>\n</ul>\n<p>双击：</p>\n<ul>\n<li>onDoubleTap：快速点击了两次</li>\n</ul>\n<p>长按：</p>\n<ul>\n<li>onLongPress：在屏幕上保持了一段时间</li>\n</ul>\n<p>纵向拖拽：</p>\n<ul>\n<li>onVerticalDragStart：指针和屏幕产生接触并可能开始纵向移动；</li>\n<li>onVerticalDragUpdate：指针和屏幕产生接触，在纵向上发生移动并保持移动；</li>\n<li>onVerticalDragEnd：指针和屏幕产生接触结束；</li>\n</ul>\n<p>横线拖拽：</p>\n<ul>\n<li>onHorizontalDragStart：指针和屏幕产生接触并可能开始横向移动；</li>\n<li>onHorizontalDragUpdate：指针和屏幕产生接触，在横向上发生移动并保持移动；</li>\n<li>onHorizontalDragEnd：指针和屏幕产生接触结束；</li>\n</ul>\n<p>移动：</p>\n<ul>\n<li>onPanStart：指针和屏幕产生接触并可能开始横向移动或者纵向移动。如果设置了</li>\n<li>onHorizontalDragStart 或者 onVerticalDragStart，该回调方法会引发崩溃；</li>\n<li>onPanUpdate：指针和屏幕产生接触，在横向或者纵向上发生移动并保持移动。如果设置了</li>\n<li>onHorizontalDragUpdate 或者 onVerticalDragUpdate，该回调方法会引发崩溃。</li>\n<li>onPanEnd：指针先前和屏幕产生了接触，并且以特定速度移动，此后不再在屏幕接触上发生移动。如果设置了  </li>\n<li>onHorizontalDragEnd 或者 onVerticalDragEnd，该回调方法会引发崩溃。</li>\n</ul>\n<p>从Widget的层面来监听手势，我们需要使用：GestureDetector</p>\n<ul>\n<li>当然，我们也可以使用RaisedButton、FlatButton、InkWell等来监听手势</li>\n<li>globalPosition用于获取相对于屏幕的位置信息</li>\n<li>localPosition用于获取相对于当前Widget的位置信息</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_003.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-忽略内层的点击\"><a href=\"#1-3-忽略内层的点击\" class=\"headerlink\" title=\"1.3 忽略内层的点击\"></a>1.3 忽略内层的点击</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IgnoreInnerClickDemo3 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">      child: GestureDetector(</span><br><span class=\"line\">        onTapDown: (details)&#123;</span><br><span class=\"line\">          print(&quot;outter click&quot;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          width: 200,</span><br><span class=\"line\">          height: 200,</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: IgnorePointer(</span><br><span class=\"line\">            child: GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;inner click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                width: 100,</span><br><span class=\"line\">                height: 100,</span><br><span class=\"line\">                color: Colors.blue,</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-使用Stack堆叠组件\"><a href=\"#1-4-使用Stack堆叠组件\" class=\"headerlink\" title=\"1.4 使用Stack堆叠组件\"></a>1.4 使用Stack堆叠组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;4.使用Stack堆叠组件</span><br><span class=\"line\">class StackDemo4 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">        child: Stack(</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;outter click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                width: 200,</span><br><span class=\"line\">                height: 200,</span><br><span class=\"line\">                color: Colors.red,</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;inner click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                  width: 100,</span><br><span class=\"line\">                  height: 100,</span><br><span class=\"line\">                  color: Colors.blue</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-跨组件事件\"><a href=\"#二-跨组件事件\" class=\"headerlink\" title=\"二. 跨组件事件\"></a>二. 跨组件事件</h1><p>在组件之间如果有事件需要传递，一方面可以一层层来传递，另一方面我们也可以使用一个EventBus工具来完成。</p>\n<p>其实EventBus在Vue、React中都是一种非常常见的跨组件通信的方式：</p>\n<ul>\n<li>EventBus相当于是一种订阅者模式，通过一个全局的对象来管理；</li>\n<li>这个EventBus我们可以自己实现，也可以使用第三方的EventBus；</li>\n</ul>\n<p>这里我们直接选择第三方的EventBus：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_005.png\" alt=\"图1\"></p>\n<p>第一：我们需要定义一个希望在组件之间传递的对象：</p>\n<ul>\n<li>我们可以称之为一个时间对象，也可以是我们平时开发中用的模型对象（model）</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_006.png\" alt=\"图1\"></p>\n<p>第二：创建一个全局的EventBus对象</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_007.png\" alt=\"图1\"></p>\n<p>第三：在某个Widget中，发出事件：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_008.png\" alt=\"图1\"></p>\n<p>第四：在某个Widget中，监听事件</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_009.png\" alt=\"图1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-事件监听\"><a href=\"#一-事件监听\" class=\"headerlink\" title=\"一. 事件监听\"></a>一. 事件监听</h1><p>在大前端的开发中，必然存在各种各样和用户交互的情况：比如手指点击、手指滑动、双击、长按等等。</p>\n<p>在Flutter中，手势有两个不同的层次：</p>\n<ul>\n<li><p>第一层：原始指针事件（Pointer Events）：描述了屏幕上由触摸板、鼠标、指示笔等触发的指针的位置和移动。</p>\n</li>\n<li><p>第二层：手势识别（Gesture Detector）：这个是在原始事件上的一种封装。</p>\n<ul>\n<li>比如我们要监听用户长按，如果自己封装原始事件我们需要监听从用户按下到抬起的时间来判断是否是一次长按事件；<ul>\n<li>比如我们需要监听用户双击事件，我们需要自己封装监听用户两次按下抬起的时间间隔；</li>\n<li>幸运的是各个平台几乎都对它们进行了封装，而Flutter中的手势识别就是对原始指针事件的封装；</li>\n<li>包括哪些手势呢？比如点击、双击、长按、拖动等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-1-指针事件Pointer\"><a href=\"#1-1-指针事件Pointer\" class=\"headerlink\" title=\"1.1. 指针事件Pointer\"></a>1.1. 指针事件Pointer</h3><p>Pointer 代表的是人机界面交互的原始数据。一共有四种指针事件：</p>\n<ul>\n<li>PointerDownEvent 指针在特定位置与屏幕接触</li>\n<li>PointerMoveEvent 指针从屏幕的一个位置移动到另外一个位置</li>\n<li>PointerUpEvent 指针与屏幕停止接触</li>\n<li>PointerCancelEvent 指针因为一些特殊情况被取消</li>\n</ul>\n<p>Pointer的原理是什么呢？</p>\n<ul>\n<li>在指针落下时，框架做了一个 hit test 的操作，确定与屏幕发生接触的位置上有哪些Widget以及分发给最内部的组件去响应；</li>\n<li>事件会沿着最内部的组件向组件树的根冒泡分发；</li>\n<li>并且不存在用于取消或者停止指针事件进一步分发的机制；</li>\n</ul>\n<p>原始指针事件使用Listener来监听：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_001.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-2-手势识别Gesture\"><a href=\"#1-2-手势识别Gesture\" class=\"headerlink\" title=\"1.2. 手势识别Gesture\"></a>1.2. 手势识别Gesture</h3><p>Gesture是对一系列Pointer的封装，官方建议开发中尽可能使用Gesture，而不是Pointer</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_003_0.png\" alt=\"图1\"></p>\n<p><strong>Gesture分层非常多的种类：</strong></p>\n<p>点击：</p>\n<ul>\n<li>onTapDown：用户发生手指按下的操作</li>\n<li>onTapUp：用户发生手指抬起的操作</li>\n<li>onTap：用户点击事件完成</li>\n<li>onTapCancel：事件按下过程中被取消</li>\n</ul>\n<p>双击：</p>\n<ul>\n<li>onDoubleTap：快速点击了两次</li>\n</ul>\n<p>长按：</p>\n<ul>\n<li>onLongPress：在屏幕上保持了一段时间</li>\n</ul>\n<p>纵向拖拽：</p>\n<ul>\n<li>onVerticalDragStart：指针和屏幕产生接触并可能开始纵向移动；</li>\n<li>onVerticalDragUpdate：指针和屏幕产生接触，在纵向上发生移动并保持移动；</li>\n<li>onVerticalDragEnd：指针和屏幕产生接触结束；</li>\n</ul>\n<p>横线拖拽：</p>\n<ul>\n<li>onHorizontalDragStart：指针和屏幕产生接触并可能开始横向移动；</li>\n<li>onHorizontalDragUpdate：指针和屏幕产生接触，在横向上发生移动并保持移动；</li>\n<li>onHorizontalDragEnd：指针和屏幕产生接触结束；</li>\n</ul>\n<p>移动：</p>\n<ul>\n<li>onPanStart：指针和屏幕产生接触并可能开始横向移动或者纵向移动。如果设置了</li>\n<li>onHorizontalDragStart 或者 onVerticalDragStart，该回调方法会引发崩溃；</li>\n<li>onPanUpdate：指针和屏幕产生接触，在横向或者纵向上发生移动并保持移动。如果设置了</li>\n<li>onHorizontalDragUpdate 或者 onVerticalDragUpdate，该回调方法会引发崩溃。</li>\n<li>onPanEnd：指针先前和屏幕产生了接触，并且以特定速度移动，此后不再在屏幕接触上发生移动。如果设置了  </li>\n<li>onHorizontalDragEnd 或者 onVerticalDragEnd，该回调方法会引发崩溃。</li>\n</ul>\n<p>从Widget的层面来监听手势，我们需要使用：GestureDetector</p>\n<ul>\n<li>当然，我们也可以使用RaisedButton、FlatButton、InkWell等来监听手势</li>\n<li>globalPosition用于获取相对于屏幕的位置信息</li>\n<li>localPosition用于获取相对于当前Widget的位置信息</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_003.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_004.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-忽略内层的点击\"><a href=\"#1-3-忽略内层的点击\" class=\"headerlink\" title=\"1.3 忽略内层的点击\"></a>1.3 忽略内层的点击</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IgnoreInnerClickDemo3 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">      child: GestureDetector(</span><br><span class=\"line\">        onTapDown: (details)&#123;</span><br><span class=\"line\">          print(&quot;outter click&quot;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          width: 200,</span><br><span class=\"line\">          height: 200,</span><br><span class=\"line\">          color: Colors.red,</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          child: IgnorePointer(</span><br><span class=\"line\">            child: GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;inner click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                width: 100,</span><br><span class=\"line\">                height: 100,</span><br><span class=\"line\">                color: Colors.blue,</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-使用Stack堆叠组件\"><a href=\"#1-4-使用Stack堆叠组件\" class=\"headerlink\" title=\"1.4 使用Stack堆叠组件\"></a>1.4 使用Stack堆叠组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;4.使用Stack堆叠组件</span><br><span class=\"line\">class StackDemo4 extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">        child: Stack(</span><br><span class=\"line\">          alignment: Alignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;outter click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                width: 200,</span><br><span class=\"line\">                height: 200,</span><br><span class=\"line\">                color: Colors.red,</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              onTapDown: (details)&#123;</span><br><span class=\"line\">                print(&quot;inner click&quot;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                  width: 100,</span><br><span class=\"line\">                  height: 100,</span><br><span class=\"line\">                  color: Colors.blue</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-跨组件事件\"><a href=\"#二-跨组件事件\" class=\"headerlink\" title=\"二. 跨组件事件\"></a>二. 跨组件事件</h1><p>在组件之间如果有事件需要传递，一方面可以一层层来传递，另一方面我们也可以使用一个EventBus工具来完成。</p>\n<p>其实EventBus在Vue、React中都是一种非常常见的跨组件通信的方式：</p>\n<ul>\n<li>EventBus相当于是一种订阅者模式，通过一个全局的对象来管理；</li>\n<li>这个EventBus我们可以自己实现，也可以使用第三方的EventBus；</li>\n</ul>\n<p>这里我们直接选择第三方的EventBus：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_005.png\" alt=\"图1\"></p>\n<p>第一：我们需要定义一个希望在组件之间传递的对象：</p>\n<ul>\n<li>我们可以称之为一个时间对象，也可以是我们平时开发中用的模型对象（model）</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_006.png\" alt=\"图1\"></p>\n<p>第二：创建一个全局的EventBus对象</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_007.png\" alt=\"图1\"></p>\n<p>第三：在某个Widget中，发出事件：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_008.png\" alt=\"图1\"></p>\n<p>第四：在某个Widget中，监听事件</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/18-Flutter%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/18_009.png\" alt=\"图1\"></p>\n"},{"title":"20-Flutter动画","toc":true,"date":"2020-09-24T10:55:52.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/20-Flutter动画.md","raw":"---\ntitle: 20-Flutter动画\ntoc: true\ndate: 2020-09-24 18:55:52\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/20-Flutter动画","published":1,"updated":"2020-09-24T11:23:47.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengn002qu3s66xpy7dv2","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"21-Flutter主题风格","toc":true,"date":"2020-09-24T10:56:00.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/21-Flutter主题风格.md","raw":"---\ntitle: 21-Flutter主题风格\ntoc: true\ndate: 2020-09-24 18:56:00\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/21-Flutter主题风格","published":1,"updated":"2020-09-24T11:23:53.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengo002tu3s6bwgr0er7","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"19-Flutter路由导航","toc":true,"date":"2020-09-24T10:55:45.000Z","_content":"\n我们通常会用屏（Screen）来称呼一个页面（Page），一个完整的App应该是有多个Page组成的。\n\n在之前的案例（豆瓣）中，我们通过IndexedStack来管理了首页中的Page切换：\n\n首页-书影音-小组-市集-我的\n\n通过点击BottomNavigationBarItem来设置IndexedStack的index属性来切换\n\n除了上面这种管理页面的方式，我们还需要实现其它功能的页面跳转：比如点击一个商品跳转到详情页，某个按钮跳转到发送朋友圈、微博的编辑页面。\n\n这种页面的管理和导航，我们通常会使用路由进行统一管理。\n\n# 一. 路由管理\n\n### 1.1. 认识Flutter路由\n\n路由的概念由来已久，包括网络路由、后端路由，到现在广为流行的前端路由。\n\n- 无论路由的概念如何应用，它的核心是一个路由映射表\n- 比如：名字 detail 映射到 DetailPage 页面等\n- 有了这个映射表之后，我们就可以方便的根据名字来完成路由的转发（在前端表现出来的就是页面跳转）\n\n在Flutter中，路由管理主要有两个类：Route和Navigator\n\n### 1.2. Route\n\nRoute：一个页面要想被路由统一管理，必须包装为一个Route\n\n - 官方的说法很清晰：An abstraction for an entry managed by a Navigator.\n \n但是Route是一个抽象类，所以它是不能实例化的\n\n - 在上面有一段注释，让我们查看MaterialPageRoute来使用\n\n![图1](19-Flutter路由导航/19_001.png)\n\n事实上MaterialPageRoute并不是Route的直接子类：\n\n - MaterialPageRoute在不同的平台有不同的表现\n - 对Android平台，打开一个页面会从屏幕底部滑动到屏幕的顶部，关闭页面时从顶部滑动到底部消失\n - 对iOS平台，打开一个页面会从屏幕右侧滑动到屏幕的左侧，关闭页面时从左侧滑动到右侧消失\n - 当然，iOS平台我们也可以使用CupertinoPageRoute\n\n![图1](19-Flutter路由导航/19_002.png)\n\n### 1.3. Navigator\n\nNavigator：管理所有的Route的Widget，通过一个Stack来进行管理的\n\n - 官方的说法也很清晰：A widget that manages a set of child widgets with a stack discipline.\n\n那么我们开发中需要手动去创建一个Navigator吗？\n\n - 并不需要，我们开发中使用的MaterialApp、CupertinoApp、WidgetsApp它们默认是有插入Navigator的\n - 所以，我们在需要的时候，只需要直接使用即可\n\n![图1](19-Flutter路由导航/19_003.png)\n\nNavigator有几个最常见的方法：\n\n![图1](19-Flutter路由导航/19_004.png)\n\n# 二. 路由基本使用\n\n### 2.1. 基本跳转\n\n我们来实现一个最基本跳转：\n\n - 创建首页页面，中间添加一个按钮，点击按钮跳转到详情页面\n - 创建详情页面，中间添加一个按钮，点击按钮返回到首页页面\n\n![图1](19-Flutter路由导航/19_005.png)\n\n核心的跳转代码如下（首页中代码）：\n\n![图1](19-Flutter路由导航/19_006.png)\n\n核心的返回代码如下（详情页中代码）：\n\n![图1](19-Flutter路由导航/19_007.png)\n\n### 2.2. 参数传递\n\n在跳转过程中，我们通常可能会携带一些参数，比如\n\n - 首页跳到详情页，携带一条信息：a home message\n - 详情页返回首页，携带一条信息：a detail message\n\n![图1](19-Flutter路由导航/19_008.png)\n\n\n首页跳转核心代码：\n\n - 在页面跳转时，会返回一个Future\n - 该Future会在详情页面调用pop时，回调对应的then函数，并且会携带结果\n\n![图1](19-Flutter路由导航/19_009.png)\n\n详情页返回核心代码：\n\n![图1](19-Flutter路由导航/19_010.png)\n\n### 2.3. 返回细节\n\n但是这里有一个问题，如果用户是点击右上角的返回按钮，如何监听呢？\n\n方法一：自定义返回的按钮（在详情页中修改Scaffold的appBar）\n\n![图1](19-Flutter路由导航/19_011.png)\n\n方法二：监听返回按钮的点击（给Scaffold包裹一个WillPopScope）\n\n - WillPopScope有一个onWillPop的回调函数，当我们点击返回按钮时会执行\n - 这个函数要求有一个Future的返回值：\n\t- true：那么系统会自动帮我们执行pop操作\n\t- false：系统不再执行pop操作，需要我们自己来执行\n\n![图1](19-Flutter路由导航/19_012.png)\n\n# 三. 命名路由使用\n\n### 3.1. 基本跳转\n\n我们可以通过创建一个新的Route，使用Navigator来导航到一个新的页面，但是如果在应用中很多地方都需要导航到同一个页面（比如在开发中，首页、推荐、分类页都可能会跳到详情页），那么就会存在很多重复的代码。\n\n在这种情况下，我们可以使用命名路由（named route）\n\n - 命名路由是将名字和路由的映射关系，在一个地方进行统一的管理\n - 有了命名路由，我们可以通过Navigator.pushNamed() 方法来跳转到新的页面\n\n命名路由在哪里管理呢？可以放在MaterialApp的 initialRoute 和 routes 中\n\n - initialRoute：设置应用程序从哪一个路由开始启动，设置了该属性，就不需要再设置home属性了\n - routes：定义名称和路由之间的映射关系，类型为Map<String, WidgetBuilder>\n\n修改MaterialApp中的代码：\n\n![图1](19-Flutter路由导航/19_013.png)\n\n修改跳转的代码：\n\n![图1](19-Flutter路由导航/19_014.png)\n\n在开发中，为了让每个页面对应的routeName统一，我们通常会在每个页面中定义一个路由的常量来使用：\n\n![图1](19-Flutter路由导航/19_015.png)\n\n修改MaterialApp中routes的key\n\n![图1](19-Flutter路由导航/19_016.png)\n\n### 3.2. 参数传递\n\n因为通常命名路由，我们会在定义路由时，直接创建好对象，比如HYDetailPage()\n\n那么，命名路由如果有参数需要传递呢？\n\npushNamed时，如何传递参数：\n\n![图1](19-Flutter路由导航/19_017.png)\n\n\n在HYDetailPage中，如何获取到参数呢？\n\n - 在build方法中ModalRoute.of(context)可以获取到传递的参数\n\n![图1](19-Flutter路由导航/19_018.png)\n\n### 3.3. 路由钩子\n\n##### 3.3.1. onGenerateRoute\n\n假如我们有一个HYAboutPage，也希望在跳转时，传入对应的参数message，并且已经有一个对应的构造方法\n\n在HYHomePage中添加跳转的代码：\n\n![图1](19-Flutter路由导航/19_019.png)\n\n\nHYAboutPage的代码：\n\n![图1](19-Flutter路由导航/19_020.png)\n\n\n但是我们继续使用routes中的映射关系，就不好进行配置了，因为HYAboutPage必须要求传入一个参数；\n\n这个时候我们可以使用onGenerateRoute的钩子函数：\n\n - 当我们通过pushNamed进行跳转，但是对应的name没有在routes中有映射关系，那么就会执行onGenerateRoute钩子函数；\n - 我们可以在该函数中，手动创建对应的Route进行返回；\n - 该函数有一个参数RouteSettings，该类有两个常用的属性：\n\t- name: 跳转的路径名称\n \t- arguments：跳转时携带的参数\n\n![图1](19-Flutter路由导航/19_021.png)\n\n\n![图1](19-Flutter路由导航/19_022.png)\n\n##### 3.3.2. onUnknownRoute\n\n如果我们打开的一个路由名称是根本不存在，这个时候我们希望跳转到一个统一的错误页面。\n比如下面的abc是不存在有对应的页面的\n\n - 如果没有进行特殊的处理，那么Flutter会报错。\n\n![图1](19-Flutter路由导航/19_023.png)\n\n\n我们可以创建一个错误的页面：\n\n![图1](19-Flutter路由导航/19_024.png)\n\n并且设置onUnknownRoute\n\n![图1](19-Flutter路由导航/19_025.png)\n\n","source":"_posts/flutter/flutter框架一/19-Flutter路由导航.md","raw":"---\ntitle: 19-Flutter路由导航\ntoc: true\ndate: 2020-09-24 18:55:45\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n我们通常会用屏（Screen）来称呼一个页面（Page），一个完整的App应该是有多个Page组成的。\n\n在之前的案例（豆瓣）中，我们通过IndexedStack来管理了首页中的Page切换：\n\n首页-书影音-小组-市集-我的\n\n通过点击BottomNavigationBarItem来设置IndexedStack的index属性来切换\n\n除了上面这种管理页面的方式，我们还需要实现其它功能的页面跳转：比如点击一个商品跳转到详情页，某个按钮跳转到发送朋友圈、微博的编辑页面。\n\n这种页面的管理和导航，我们通常会使用路由进行统一管理。\n\n# 一. 路由管理\n\n### 1.1. 认识Flutter路由\n\n路由的概念由来已久，包括网络路由、后端路由，到现在广为流行的前端路由。\n\n- 无论路由的概念如何应用，它的核心是一个路由映射表\n- 比如：名字 detail 映射到 DetailPage 页面等\n- 有了这个映射表之后，我们就可以方便的根据名字来完成路由的转发（在前端表现出来的就是页面跳转）\n\n在Flutter中，路由管理主要有两个类：Route和Navigator\n\n### 1.2. Route\n\nRoute：一个页面要想被路由统一管理，必须包装为一个Route\n\n - 官方的说法很清晰：An abstraction for an entry managed by a Navigator.\n \n但是Route是一个抽象类，所以它是不能实例化的\n\n - 在上面有一段注释，让我们查看MaterialPageRoute来使用\n\n![图1](19-Flutter路由导航/19_001.png)\n\n事实上MaterialPageRoute并不是Route的直接子类：\n\n - MaterialPageRoute在不同的平台有不同的表现\n - 对Android平台，打开一个页面会从屏幕底部滑动到屏幕的顶部，关闭页面时从顶部滑动到底部消失\n - 对iOS平台，打开一个页面会从屏幕右侧滑动到屏幕的左侧，关闭页面时从左侧滑动到右侧消失\n - 当然，iOS平台我们也可以使用CupertinoPageRoute\n\n![图1](19-Flutter路由导航/19_002.png)\n\n### 1.3. Navigator\n\nNavigator：管理所有的Route的Widget，通过一个Stack来进行管理的\n\n - 官方的说法也很清晰：A widget that manages a set of child widgets with a stack discipline.\n\n那么我们开发中需要手动去创建一个Navigator吗？\n\n - 并不需要，我们开发中使用的MaterialApp、CupertinoApp、WidgetsApp它们默认是有插入Navigator的\n - 所以，我们在需要的时候，只需要直接使用即可\n\n![图1](19-Flutter路由导航/19_003.png)\n\nNavigator有几个最常见的方法：\n\n![图1](19-Flutter路由导航/19_004.png)\n\n# 二. 路由基本使用\n\n### 2.1. 基本跳转\n\n我们来实现一个最基本跳转：\n\n - 创建首页页面，中间添加一个按钮，点击按钮跳转到详情页面\n - 创建详情页面，中间添加一个按钮，点击按钮返回到首页页面\n\n![图1](19-Flutter路由导航/19_005.png)\n\n核心的跳转代码如下（首页中代码）：\n\n![图1](19-Flutter路由导航/19_006.png)\n\n核心的返回代码如下（详情页中代码）：\n\n![图1](19-Flutter路由导航/19_007.png)\n\n### 2.2. 参数传递\n\n在跳转过程中，我们通常可能会携带一些参数，比如\n\n - 首页跳到详情页，携带一条信息：a home message\n - 详情页返回首页，携带一条信息：a detail message\n\n![图1](19-Flutter路由导航/19_008.png)\n\n\n首页跳转核心代码：\n\n - 在页面跳转时，会返回一个Future\n - 该Future会在详情页面调用pop时，回调对应的then函数，并且会携带结果\n\n![图1](19-Flutter路由导航/19_009.png)\n\n详情页返回核心代码：\n\n![图1](19-Flutter路由导航/19_010.png)\n\n### 2.3. 返回细节\n\n但是这里有一个问题，如果用户是点击右上角的返回按钮，如何监听呢？\n\n方法一：自定义返回的按钮（在详情页中修改Scaffold的appBar）\n\n![图1](19-Flutter路由导航/19_011.png)\n\n方法二：监听返回按钮的点击（给Scaffold包裹一个WillPopScope）\n\n - WillPopScope有一个onWillPop的回调函数，当我们点击返回按钮时会执行\n - 这个函数要求有一个Future的返回值：\n\t- true：那么系统会自动帮我们执行pop操作\n\t- false：系统不再执行pop操作，需要我们自己来执行\n\n![图1](19-Flutter路由导航/19_012.png)\n\n# 三. 命名路由使用\n\n### 3.1. 基本跳转\n\n我们可以通过创建一个新的Route，使用Navigator来导航到一个新的页面，但是如果在应用中很多地方都需要导航到同一个页面（比如在开发中，首页、推荐、分类页都可能会跳到详情页），那么就会存在很多重复的代码。\n\n在这种情况下，我们可以使用命名路由（named route）\n\n - 命名路由是将名字和路由的映射关系，在一个地方进行统一的管理\n - 有了命名路由，我们可以通过Navigator.pushNamed() 方法来跳转到新的页面\n\n命名路由在哪里管理呢？可以放在MaterialApp的 initialRoute 和 routes 中\n\n - initialRoute：设置应用程序从哪一个路由开始启动，设置了该属性，就不需要再设置home属性了\n - routes：定义名称和路由之间的映射关系，类型为Map<String, WidgetBuilder>\n\n修改MaterialApp中的代码：\n\n![图1](19-Flutter路由导航/19_013.png)\n\n修改跳转的代码：\n\n![图1](19-Flutter路由导航/19_014.png)\n\n在开发中，为了让每个页面对应的routeName统一，我们通常会在每个页面中定义一个路由的常量来使用：\n\n![图1](19-Flutter路由导航/19_015.png)\n\n修改MaterialApp中routes的key\n\n![图1](19-Flutter路由导航/19_016.png)\n\n### 3.2. 参数传递\n\n因为通常命名路由，我们会在定义路由时，直接创建好对象，比如HYDetailPage()\n\n那么，命名路由如果有参数需要传递呢？\n\npushNamed时，如何传递参数：\n\n![图1](19-Flutter路由导航/19_017.png)\n\n\n在HYDetailPage中，如何获取到参数呢？\n\n - 在build方法中ModalRoute.of(context)可以获取到传递的参数\n\n![图1](19-Flutter路由导航/19_018.png)\n\n### 3.3. 路由钩子\n\n##### 3.3.1. onGenerateRoute\n\n假如我们有一个HYAboutPage，也希望在跳转时，传入对应的参数message，并且已经有一个对应的构造方法\n\n在HYHomePage中添加跳转的代码：\n\n![图1](19-Flutter路由导航/19_019.png)\n\n\nHYAboutPage的代码：\n\n![图1](19-Flutter路由导航/19_020.png)\n\n\n但是我们继续使用routes中的映射关系，就不好进行配置了，因为HYAboutPage必须要求传入一个参数；\n\n这个时候我们可以使用onGenerateRoute的钩子函数：\n\n - 当我们通过pushNamed进行跳转，但是对应的name没有在routes中有映射关系，那么就会执行onGenerateRoute钩子函数；\n - 我们可以在该函数中，手动创建对应的Route进行返回；\n - 该函数有一个参数RouteSettings，该类有两个常用的属性：\n\t- name: 跳转的路径名称\n \t- arguments：跳转时携带的参数\n\n![图1](19-Flutter路由导航/19_021.png)\n\n\n![图1](19-Flutter路由导航/19_022.png)\n\n##### 3.3.2. onUnknownRoute\n\n如果我们打开的一个路由名称是根本不存在，这个时候我们希望跳转到一个统一的错误页面。\n比如下面的abc是不存在有对应的页面的\n\n - 如果没有进行特殊的处理，那么Flutter会报错。\n\n![图1](19-Flutter路由导航/19_023.png)\n\n\n我们可以创建一个错误的页面：\n\n![图1](19-Flutter路由导航/19_024.png)\n\n并且设置onUnknownRoute\n\n![图1](19-Flutter路由导航/19_025.png)\n\n","slug":"flutter/flutter框架一/19-Flutter路由导航","published":1,"updated":"2020-10-13T11:44:02.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengp002vu3s6d3kebrb2","content":"<p>我们通常会用屏（Screen）来称呼一个页面（Page），一个完整的App应该是有多个Page组成的。</p>\n<p>在之前的案例（豆瓣）中，我们通过IndexedStack来管理了首页中的Page切换：</p>\n<p>首页-书影音-小组-市集-我的</p>\n<p>通过点击BottomNavigationBarItem来设置IndexedStack的index属性来切换</p>\n<p>除了上面这种管理页面的方式，我们还需要实现其它功能的页面跳转：比如点击一个商品跳转到详情页，某个按钮跳转到发送朋友圈、微博的编辑页面。</p>\n<p>这种页面的管理和导航，我们通常会使用路由进行统一管理。</p>\n<h1 id=\"一-路由管理\"><a href=\"#一-路由管理\" class=\"headerlink\" title=\"一. 路由管理\"></a>一. 路由管理</h1><h3 id=\"1-1-认识Flutter路由\"><a href=\"#1-1-认识Flutter路由\" class=\"headerlink\" title=\"1.1. 认识Flutter路由\"></a>1.1. 认识Flutter路由</h3><p>路由的概念由来已久，包括网络路由、后端路由，到现在广为流行的前端路由。</p>\n<ul>\n<li>无论路由的概念如何应用，它的核心是一个路由映射表</li>\n<li>比如：名字 detail 映射到 DetailPage 页面等</li>\n<li>有了这个映射表之后，我们就可以方便的根据名字来完成路由的转发（在前端表现出来的就是页面跳转）</li>\n</ul>\n<p>在Flutter中，路由管理主要有两个类：Route和Navigator</p>\n<h3 id=\"1-2-Route\"><a href=\"#1-2-Route\" class=\"headerlink\" title=\"1.2. Route\"></a>1.2. Route</h3><p>Route：一个页面要想被路由统一管理，必须包装为一个Route</p>\n<ul>\n<li>官方的说法很清晰：An abstraction for an entry managed by a Navigator.</li>\n</ul>\n<p>但是Route是一个抽象类，所以它是不能实例化的</p>\n<ul>\n<li>在上面有一段注释，让我们查看MaterialPageRoute来使用</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_001.png\" alt=\"图1\"></p>\n<p>事实上MaterialPageRoute并不是Route的直接子类：</p>\n<ul>\n<li>MaterialPageRoute在不同的平台有不同的表现</li>\n<li>对Android平台，打开一个页面会从屏幕底部滑动到屏幕的顶部，关闭页面时从顶部滑动到底部消失</li>\n<li>对iOS平台，打开一个页面会从屏幕右侧滑动到屏幕的左侧，关闭页面时从左侧滑动到右侧消失</li>\n<li>当然，iOS平台我们也可以使用CupertinoPageRoute</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-Navigator\"><a href=\"#1-3-Navigator\" class=\"headerlink\" title=\"1.3. Navigator\"></a>1.3. Navigator</h3><p>Navigator：管理所有的Route的Widget，通过一个Stack来进行管理的</p>\n<ul>\n<li>官方的说法也很清晰：A widget that manages a set of child widgets with a stack discipline.</li>\n</ul>\n<p>那么我们开发中需要手动去创建一个Navigator吗？</p>\n<ul>\n<li>并不需要，我们开发中使用的MaterialApp、CupertinoApp、WidgetsApp它们默认是有插入Navigator的</li>\n<li>所以，我们在需要的时候，只需要直接使用即可</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_003.png\" alt=\"图1\"></p>\n<p>Navigator有几个最常见的方法：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-路由基本使用\"><a href=\"#二-路由基本使用\" class=\"headerlink\" title=\"二. 路由基本使用\"></a>二. 路由基本使用</h1><h3 id=\"2-1-基本跳转\"><a href=\"#2-1-基本跳转\" class=\"headerlink\" title=\"2.1. 基本跳转\"></a>2.1. 基本跳转</h3><p>我们来实现一个最基本跳转：</p>\n<ul>\n<li>创建首页页面，中间添加一个按钮，点击按钮跳转到详情页面</li>\n<li>创建详情页面，中间添加一个按钮，点击按钮返回到首页页面</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_005.png\" alt=\"图1\"></p>\n<p>核心的跳转代码如下（首页中代码）：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_006.png\" alt=\"图1\"></p>\n<p>核心的返回代码如下（详情页中代码）：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_007.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-参数传递\"><a href=\"#2-2-参数传递\" class=\"headerlink\" title=\"2.2. 参数传递\"></a>2.2. 参数传递</h3><p>在跳转过程中，我们通常可能会携带一些参数，比如</p>\n<ul>\n<li>首页跳到详情页，携带一条信息：a home message</li>\n<li>详情页返回首页，携带一条信息：a detail message</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_008.png\" alt=\"图1\"></p>\n<p>首页跳转核心代码：</p>\n<ul>\n<li>在页面跳转时，会返回一个Future</li>\n<li>该Future会在详情页面调用pop时，回调对应的then函数，并且会携带结果</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_009.png\" alt=\"图1\"></p>\n<p>详情页返回核心代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_010.png\" alt=\"图1\"></p>\n<h3 id=\"2-3-返回细节\"><a href=\"#2-3-返回细节\" class=\"headerlink\" title=\"2.3. 返回细节\"></a>2.3. 返回细节</h3><p>但是这里有一个问题，如果用户是点击右上角的返回按钮，如何监听呢？</p>\n<p>方法一：自定义返回的按钮（在详情页中修改Scaffold的appBar）</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_011.png\" alt=\"图1\"></p>\n<p>方法二：监听返回按钮的点击（给Scaffold包裹一个WillPopScope）</p>\n<ul>\n<li>WillPopScope有一个onWillPop的回调函数，当我们点击返回按钮时会执行</li>\n<li>这个函数要求有一个Future的返回值：<ul>\n<li>true：那么系统会自动帮我们执行pop操作</li>\n<li>false：系统不再执行pop操作，需要我们自己来执行</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_012.png\" alt=\"图1\"></p>\n<h1 id=\"三-命名路由使用\"><a href=\"#三-命名路由使用\" class=\"headerlink\" title=\"三. 命名路由使用\"></a>三. 命名路由使用</h1><h3 id=\"3-1-基本跳转\"><a href=\"#3-1-基本跳转\" class=\"headerlink\" title=\"3.1. 基本跳转\"></a>3.1. 基本跳转</h3><p>我们可以通过创建一个新的Route，使用Navigator来导航到一个新的页面，但是如果在应用中很多地方都需要导航到同一个页面（比如在开发中，首页、推荐、分类页都可能会跳到详情页），那么就会存在很多重复的代码。</p>\n<p>在这种情况下，我们可以使用命名路由（named route）</p>\n<ul>\n<li>命名路由是将名字和路由的映射关系，在一个地方进行统一的管理</li>\n<li>有了命名路由，我们可以通过Navigator.pushNamed() 方法来跳转到新的页面</li>\n</ul>\n<p>命名路由在哪里管理呢？可以放在MaterialApp的 initialRoute 和 routes 中</p>\n<ul>\n<li>initialRoute：设置应用程序从哪一个路由开始启动，设置了该属性，就不需要再设置home属性了</li>\n<li>routes：定义名称和路由之间的映射关系，类型为Map&lt;String, WidgetBuilder&gt;</li>\n</ul>\n<p>修改MaterialApp中的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_013.png\" alt=\"图1\"></p>\n<p>修改跳转的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_014.png\" alt=\"图1\"></p>\n<p>在开发中，为了让每个页面对应的routeName统一，我们通常会在每个页面中定义一个路由的常量来使用：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_015.png\" alt=\"图1\"></p>\n<p>修改MaterialApp中routes的key</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_016.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-参数传递\"><a href=\"#3-2-参数传递\" class=\"headerlink\" title=\"3.2. 参数传递\"></a>3.2. 参数传递</h3><p>因为通常命名路由，我们会在定义路由时，直接创建好对象，比如HYDetailPage()</p>\n<p>那么，命名路由如果有参数需要传递呢？</p>\n<p>pushNamed时，如何传递参数：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_017.png\" alt=\"图1\"></p>\n<p>在HYDetailPage中，如何获取到参数呢？</p>\n<ul>\n<li>在build方法中ModalRoute.of(context)可以获取到传递的参数</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_018.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-路由钩子\"><a href=\"#3-3-路由钩子\" class=\"headerlink\" title=\"3.3. 路由钩子\"></a>3.3. 路由钩子</h3><h5 id=\"3-3-1-onGenerateRoute\"><a href=\"#3-3-1-onGenerateRoute\" class=\"headerlink\" title=\"3.3.1. onGenerateRoute\"></a>3.3.1. onGenerateRoute</h5><p>假如我们有一个HYAboutPage，也希望在跳转时，传入对应的参数message，并且已经有一个对应的构造方法</p>\n<p>在HYHomePage中添加跳转的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_019.png\" alt=\"图1\"></p>\n<p>HYAboutPage的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_020.png\" alt=\"图1\"></p>\n<p>但是我们继续使用routes中的映射关系，就不好进行配置了，因为HYAboutPage必须要求传入一个参数；</p>\n<p>这个时候我们可以使用onGenerateRoute的钩子函数：</p>\n<ul>\n<li>当我们通过pushNamed进行跳转，但是对应的name没有在routes中有映射关系，那么就会执行onGenerateRoute钩子函数；</li>\n<li>我们可以在该函数中，手动创建对应的Route进行返回；</li>\n<li>该函数有一个参数RouteSettings，该类有两个常用的属性：<ul>\n<li>name: 跳转的路径名称<ul>\n<li>arguments：跳转时携带的参数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_021.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_022.png\" alt=\"图1\"></p>\n<h5 id=\"3-3-2-onUnknownRoute\"><a href=\"#3-3-2-onUnknownRoute\" class=\"headerlink\" title=\"3.3.2. onUnknownRoute\"></a>3.3.2. onUnknownRoute</h5><p>如果我们打开的一个路由名称是根本不存在，这个时候我们希望跳转到一个统一的错误页面。<br>比如下面的abc是不存在有对应的页面的</p>\n<ul>\n<li>如果没有进行特殊的处理，那么Flutter会报错。</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_023.png\" alt=\"图1\"></p>\n<p>我们可以创建一个错误的页面：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_024.png\" alt=\"图1\"></p>\n<p>并且设置onUnknownRoute</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_025.png\" alt=\"图1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们通常会用屏（Screen）来称呼一个页面（Page），一个完整的App应该是有多个Page组成的。</p>\n<p>在之前的案例（豆瓣）中，我们通过IndexedStack来管理了首页中的Page切换：</p>\n<p>首页-书影音-小组-市集-我的</p>\n<p>通过点击BottomNavigationBarItem来设置IndexedStack的index属性来切换</p>\n<p>除了上面这种管理页面的方式，我们还需要实现其它功能的页面跳转：比如点击一个商品跳转到详情页，某个按钮跳转到发送朋友圈、微博的编辑页面。</p>\n<p>这种页面的管理和导航，我们通常会使用路由进行统一管理。</p>\n<h1 id=\"一-路由管理\"><a href=\"#一-路由管理\" class=\"headerlink\" title=\"一. 路由管理\"></a>一. 路由管理</h1><h3 id=\"1-1-认识Flutter路由\"><a href=\"#1-1-认识Flutter路由\" class=\"headerlink\" title=\"1.1. 认识Flutter路由\"></a>1.1. 认识Flutter路由</h3><p>路由的概念由来已久，包括网络路由、后端路由，到现在广为流行的前端路由。</p>\n<ul>\n<li>无论路由的概念如何应用，它的核心是一个路由映射表</li>\n<li>比如：名字 detail 映射到 DetailPage 页面等</li>\n<li>有了这个映射表之后，我们就可以方便的根据名字来完成路由的转发（在前端表现出来的就是页面跳转）</li>\n</ul>\n<p>在Flutter中，路由管理主要有两个类：Route和Navigator</p>\n<h3 id=\"1-2-Route\"><a href=\"#1-2-Route\" class=\"headerlink\" title=\"1.2. Route\"></a>1.2. Route</h3><p>Route：一个页面要想被路由统一管理，必须包装为一个Route</p>\n<ul>\n<li>官方的说法很清晰：An abstraction for an entry managed by a Navigator.</li>\n</ul>\n<p>但是Route是一个抽象类，所以它是不能实例化的</p>\n<ul>\n<li>在上面有一段注释，让我们查看MaterialPageRoute来使用</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_001.png\" alt=\"图1\"></p>\n<p>事实上MaterialPageRoute并不是Route的直接子类：</p>\n<ul>\n<li>MaterialPageRoute在不同的平台有不同的表现</li>\n<li>对Android平台，打开一个页面会从屏幕底部滑动到屏幕的顶部，关闭页面时从顶部滑动到底部消失</li>\n<li>对iOS平台，打开一个页面会从屏幕右侧滑动到屏幕的左侧，关闭页面时从左侧滑动到右侧消失</li>\n<li>当然，iOS平台我们也可以使用CupertinoPageRoute</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_002.png\" alt=\"图1\"></p>\n<h3 id=\"1-3-Navigator\"><a href=\"#1-3-Navigator\" class=\"headerlink\" title=\"1.3. Navigator\"></a>1.3. Navigator</h3><p>Navigator：管理所有的Route的Widget，通过一个Stack来进行管理的</p>\n<ul>\n<li>官方的说法也很清晰：A widget that manages a set of child widgets with a stack discipline.</li>\n</ul>\n<p>那么我们开发中需要手动去创建一个Navigator吗？</p>\n<ul>\n<li>并不需要，我们开发中使用的MaterialApp、CupertinoApp、WidgetsApp它们默认是有插入Navigator的</li>\n<li>所以，我们在需要的时候，只需要直接使用即可</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_003.png\" alt=\"图1\"></p>\n<p>Navigator有几个最常见的方法：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_004.png\" alt=\"图1\"></p>\n<h1 id=\"二-路由基本使用\"><a href=\"#二-路由基本使用\" class=\"headerlink\" title=\"二. 路由基本使用\"></a>二. 路由基本使用</h1><h3 id=\"2-1-基本跳转\"><a href=\"#2-1-基本跳转\" class=\"headerlink\" title=\"2.1. 基本跳转\"></a>2.1. 基本跳转</h3><p>我们来实现一个最基本跳转：</p>\n<ul>\n<li>创建首页页面，中间添加一个按钮，点击按钮跳转到详情页面</li>\n<li>创建详情页面，中间添加一个按钮，点击按钮返回到首页页面</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_005.png\" alt=\"图1\"></p>\n<p>核心的跳转代码如下（首页中代码）：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_006.png\" alt=\"图1\"></p>\n<p>核心的返回代码如下（详情页中代码）：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_007.png\" alt=\"图1\"></p>\n<h3 id=\"2-2-参数传递\"><a href=\"#2-2-参数传递\" class=\"headerlink\" title=\"2.2. 参数传递\"></a>2.2. 参数传递</h3><p>在跳转过程中，我们通常可能会携带一些参数，比如</p>\n<ul>\n<li>首页跳到详情页，携带一条信息：a home message</li>\n<li>详情页返回首页，携带一条信息：a detail message</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_008.png\" alt=\"图1\"></p>\n<p>首页跳转核心代码：</p>\n<ul>\n<li>在页面跳转时，会返回一个Future</li>\n<li>该Future会在详情页面调用pop时，回调对应的then函数，并且会携带结果</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_009.png\" alt=\"图1\"></p>\n<p>详情页返回核心代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_010.png\" alt=\"图1\"></p>\n<h3 id=\"2-3-返回细节\"><a href=\"#2-3-返回细节\" class=\"headerlink\" title=\"2.3. 返回细节\"></a>2.3. 返回细节</h3><p>但是这里有一个问题，如果用户是点击右上角的返回按钮，如何监听呢？</p>\n<p>方法一：自定义返回的按钮（在详情页中修改Scaffold的appBar）</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_011.png\" alt=\"图1\"></p>\n<p>方法二：监听返回按钮的点击（给Scaffold包裹一个WillPopScope）</p>\n<ul>\n<li>WillPopScope有一个onWillPop的回调函数，当我们点击返回按钮时会执行</li>\n<li>这个函数要求有一个Future的返回值：<ul>\n<li>true：那么系统会自动帮我们执行pop操作</li>\n<li>false：系统不再执行pop操作，需要我们自己来执行</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_012.png\" alt=\"图1\"></p>\n<h1 id=\"三-命名路由使用\"><a href=\"#三-命名路由使用\" class=\"headerlink\" title=\"三. 命名路由使用\"></a>三. 命名路由使用</h1><h3 id=\"3-1-基本跳转\"><a href=\"#3-1-基本跳转\" class=\"headerlink\" title=\"3.1. 基本跳转\"></a>3.1. 基本跳转</h3><p>我们可以通过创建一个新的Route，使用Navigator来导航到一个新的页面，但是如果在应用中很多地方都需要导航到同一个页面（比如在开发中，首页、推荐、分类页都可能会跳到详情页），那么就会存在很多重复的代码。</p>\n<p>在这种情况下，我们可以使用命名路由（named route）</p>\n<ul>\n<li>命名路由是将名字和路由的映射关系，在一个地方进行统一的管理</li>\n<li>有了命名路由，我们可以通过Navigator.pushNamed() 方法来跳转到新的页面</li>\n</ul>\n<p>命名路由在哪里管理呢？可以放在MaterialApp的 initialRoute 和 routes 中</p>\n<ul>\n<li>initialRoute：设置应用程序从哪一个路由开始启动，设置了该属性，就不需要再设置home属性了</li>\n<li>routes：定义名称和路由之间的映射关系，类型为Map&lt;String, WidgetBuilder&gt;</li>\n</ul>\n<p>修改MaterialApp中的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_013.png\" alt=\"图1\"></p>\n<p>修改跳转的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_014.png\" alt=\"图1\"></p>\n<p>在开发中，为了让每个页面对应的routeName统一，我们通常会在每个页面中定义一个路由的常量来使用：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_015.png\" alt=\"图1\"></p>\n<p>修改MaterialApp中routes的key</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_016.png\" alt=\"图1\"></p>\n<h3 id=\"3-2-参数传递\"><a href=\"#3-2-参数传递\" class=\"headerlink\" title=\"3.2. 参数传递\"></a>3.2. 参数传递</h3><p>因为通常命名路由，我们会在定义路由时，直接创建好对象，比如HYDetailPage()</p>\n<p>那么，命名路由如果有参数需要传递呢？</p>\n<p>pushNamed时，如何传递参数：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_017.png\" alt=\"图1\"></p>\n<p>在HYDetailPage中，如何获取到参数呢？</p>\n<ul>\n<li>在build方法中ModalRoute.of(context)可以获取到传递的参数</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_018.png\" alt=\"图1\"></p>\n<h3 id=\"3-3-路由钩子\"><a href=\"#3-3-路由钩子\" class=\"headerlink\" title=\"3.3. 路由钩子\"></a>3.3. 路由钩子</h3><h5 id=\"3-3-1-onGenerateRoute\"><a href=\"#3-3-1-onGenerateRoute\" class=\"headerlink\" title=\"3.3.1. onGenerateRoute\"></a>3.3.1. onGenerateRoute</h5><p>假如我们有一个HYAboutPage，也希望在跳转时，传入对应的参数message，并且已经有一个对应的构造方法</p>\n<p>在HYHomePage中添加跳转的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_019.png\" alt=\"图1\"></p>\n<p>HYAboutPage的代码：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_020.png\" alt=\"图1\"></p>\n<p>但是我们继续使用routes中的映射关系，就不好进行配置了，因为HYAboutPage必须要求传入一个参数；</p>\n<p>这个时候我们可以使用onGenerateRoute的钩子函数：</p>\n<ul>\n<li>当我们通过pushNamed进行跳转，但是对应的name没有在routes中有映射关系，那么就会执行onGenerateRoute钩子函数；</li>\n<li>我们可以在该函数中，手动创建对应的Route进行返回；</li>\n<li>该函数有一个参数RouteSettings，该类有两个常用的属性：<ul>\n<li>name: 跳转的路径名称<ul>\n<li>arguments：跳转时携带的参数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_021.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_022.png\" alt=\"图1\"></p>\n<h5 id=\"3-3-2-onUnknownRoute\"><a href=\"#3-3-2-onUnknownRoute\" class=\"headerlink\" title=\"3.3.2. onUnknownRoute\"></a>3.3.2. onUnknownRoute</h5><p>如果我们打开的一个路由名称是根本不存在，这个时候我们希望跳转到一个统一的错误页面。<br>比如下面的abc是不存在有对应的页面的</p>\n<ul>\n<li>如果没有进行特殊的处理，那么Flutter会报错。</li>\n</ul>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_023.png\" alt=\"图1\"></p>\n<p>我们可以创建一个错误的页面：</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_024.png\" alt=\"图1\"></p>\n<p>并且设置onUnknownRoute</p>\n<p><img src=\"/2020/09/24/flutter/flutter%E6%A1%86%E6%9E%B6%E4%B8%80/19-Flutter%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/19_025.png\" alt=\"图1\"></p>\n"},{"title":"23-Flutter应用信息","toc":true,"date":"2020-09-24T10:56:17.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/23-Flutter应用信息.md","raw":"---\ntitle: 23-Flutter应用信息\ntoc: true\ndate: 2020-09-24 18:56:17\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/23-Flutter应用信息","published":1,"updated":"2020-09-24T11:25:04.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengq002yu3s6ghvrc2zk","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"22-Flutter屏幕适配","toc":true,"date":"2020-09-24T10:56:09.000Z","_content":"\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/flutter/flutter框架一/22-Flutter屏幕适配.md","raw":"---\ntitle: 22-Flutter屏幕适配\ntoc: true\ndate: 2020-09-24 18:56:09\ntags:\ncategories:\n- flutter\n- flutter框架一\n---\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"flutter/flutter框架一/22-Flutter屏幕适配","published":1,"updated":"2020-09-24T11:24:18.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengr0030u3s675st986j","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"01-九宫格手势解锁","toc":true,"date":"2020-09-25T07:34:21.000Z","_content":"\n效果图：\n\n![图1](01-九宫格手势解锁/01_001.png)\n\n\n代码：\n\n```\nimport 'dart:async';\nimport 'dart:ui';\nimport 'package:flutter/material.dart';\nclass GesturePWDPage extends StatefulWidget {\n  GesturePWDPage({Key key}) : super(key: key);\n\n  @override  _GesturePWDPageState createState() => _GesturePWDPageState();\n}\nclass _GesturePWDPageState extends State<GesturePWDPage> {\n  String password = \"\";\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"test\"),\n      ),\n      body: Column(\n        children: <Widget>[\n          SizedBox(height: 20,),\n          Text(\"result: $password\",style: TextStyle(color: Colors.red,fontSize: 32),),\n          SizedBox(height: 20,),\n          Container(\n            color: Colors.white,\n            alignment: Alignment.center,\n            child: GesturePwdModel(\n              width: MediaQueryData.fromWindow(window).size.width,\n              height: MediaQueryData.fromWindow(window).size.width,\n              onSuccess: (value) {\n                setState(() {\n                  password = value;\n                });\n              },\n              onError: () {\n                setState(() {\n                  password = \"密码长度小于4位\";\n                });\n              },\n            ),\n          )\n        ],\n      )\n    );\n  }\n}\n\n/* 手势密码 */\nclass GesturePwdModel extends StatefulWidget {\n  final double width;\n  final double height;\n  final Color unSelectedColor;\n  final Color selectedColor;\n  final Color selectedCenterColor;\n  final double circleSize;\n  final double circleCenterSize;\n  final Color lineColor;\n  final double lineWidth;\n  final ValueChanged<String> onSuccess;\n  final VoidCallback onError;\n  final int minLineLength;\n  final int showTimes;\n\n  GesturePwdModel({Key key,\n    this.width,\n    this.height,\n    this.unSelectedColor = Colors.grey,\n    this.selectedColor = Colors.greenAccent,\n    this.selectedCenterColor = Colors.green,\n    this.circleSize = 40.0,\n    this.circleCenterSize = 16.0,\n    this.lineColor = Colors.green,\n    this.lineWidth = 4.0,\n    this.minLineLength = 4,\n    this.showTimes = 1000,\n    @required this.onSuccess,\n    this.onError\n  }): super(key: key);\n\n  @override\n  _GesturePwdModelState createState() => _GesturePwdModelState();\n}\n\nclass _GesturePwdModelState extends State<GesturePwdModel> {\n  List<Circle> circleList = []; //每个的圆心\n  List<Circle> lineList = [];  //连线的拐点\n  Offset nowMoveXY;\n  Timer _timer;\n\n  @override\n  void initState() {\n    /* 确定九个点的圆心 */\n    double width = widget.width??MediaQueryData.fromWindow(window).size.width;\n    double itemWidthHalf = width / 6;\n    double height = widget.height??MediaQueryData.fromWindow(window).size.width;\n    double itemHeightHalf = height / 6;    //每个圆的中心点\n    for (int i = 0; i < 9; i++) {\n      double coordinateX = (2 * (i % 3) + 1) * itemWidthHalf;  //x为2n-1的位置\n      double coordinateY = (2 * ((i ~/ 3)) +1) * itemHeightHalf;\n      circleList.add(Circle(Offset(coordinateX, coordinateY),i));\n    }\n    super.initState();  \n  }\n\n  /* 手指按下或移动 */\n  headDownOrMove(details) {\n    setState(() {\n      RenderBox box = context.findRenderObject();\n      nowMoveXY = box.globalToLocal(details.globalPosition);\n      if (nowMoveXY.dy < 0) {\n        nowMoveXY = Offset(nowMoveXY.dx, 0.0);\n      }\n      if (nowMoveXY.dy > widget.height) {\n        nowMoveXY = Offset(nowMoveXY.dx, widget.height);\n      }\n      for (var i = 0; i < circleList.length; i++) {\n        Offset cross = nowMoveXY - circleList[i].offset;\n        if(!circleList[i].isSelected){\n          if (cross.dx.abs() < (widget.circleSize??40.0) / 2 &&\n             cross.dy.abs() < (widget.circleSize??40.0) / 2) {\n            circleList[i].isSelected = true;\n            lineList.add(circleList[i]);\n            if(lineList.length == 9){\n              successBack();\n            }\n          }\n        }\n      }\n    });\n  }\n\n  /* 松手指或者连接9个回调 */\n  successBack() {\n    if(lineList.length < widget.minLineLength){\n      widget.onError != null?widget.onError():print(lineList.length);\n    }else{\n      String result = \"\";\n      for (int i = 0; i < lineList.length; i++) {\n        result += \"${lineList[i].index}\";\n      }\n      widget.onSuccess(result);\n    }\n    startTimer();\n  }\n\n  startTimer() {\n    _timer = Timer.periodic(Duration(milliseconds: widget.showTimes), (timer){\n      setState(() {\n        lineList.clear();\n        circleList.forEach((element) {\n          element.isSelected = false;\n        });\n      });\n      timer.cancel();\n    });\n  }\n\n  @override  void dispose() {\n    if(_timer != null){\n      _timer.cancel();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanDown: (DragDownDetails details) {\n        headDownOrMove(details);\n      },\n      onPanUpdate: (DragUpdateDetails details) {\n        if(lineList.length < 9){\n          headDownOrMove(details);\n        }\n      },\n      onPanEnd: (DragEndDetails details) {\n        successBack();\n      },\n      child: CustomPaint(\n        size: Size(widget.width??MediaQuery.of(context).size.width, widget.height??MediaQuery.of(context).size.width),\n        painter: MyPainter(\n          circleList,\n          lineList,\n          nowMoveXY,\n          unSelectedColor: widget.unSelectedColor,\n          selectedColor: widget.selectedColor,\n          selectedCenterColor: widget.selectedCenterColor,\n          circleSize: widget.circleSize,\n          circleCenterSize: widget.circleCenterSize,\n          lineColor: widget.lineColor,\n          lineWidth: widget.lineWidth,\n        ),\n      )\n    );\n  }\n}\n\nclass MyPainter extends CustomPainter {\n  List<Circle> circleList;\n  List<Circle> lineList;\n  Color unSelectedColor;  //未选中颜色\n  Color selectedColor;  //选中圆的颜色\n  Color selectedCenterColor;  //选中圆心颜色\n  double circleSize;  //圆宽度\n  double circleCenterSize;  //圆心宽度\n  Color lineColor;  //线颜色\n  double lineWidth;  //线宽度\n  Offset nowMoveXY;  //现在的手指位置\n\n  MyPainter(\n    this.circleList,\n    this.lineList,\n    this.nowMoveXY,\n    {\n      this.unSelectedColor,\n      this.selectedColor,\n      this.selectedCenterColor,\n      this.circleSize,\n      this.circleCenterSize,\n      this.lineColor,\n      this.lineWidth,\n    }\n  );\n\n  @override\n  void paint(Canvas canvas, Size size) {\n\n    /* 未选中 */    \n    var unSelectPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = unSelectedColor;\n\n    /* 选中颜色 */\n    var selectPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = selectedColor;\n\n    /* 选中圆心颜色 */\n    var selectCenterPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = selectedCenterColor;\n\n    //线\n    final linePaint = new Paint()\n      ..color = lineColor\n      ..style = PaintingStyle.fill\n      ..strokeWidth = lineWidth;\n\n    //画圆    \n    for (int i = 0; i < circleList.length; i++) {\n      Circle circle = circleList[i];\n      if(circle.isSelected){\n        canvas.drawCircle(circle.offset, circleSize, selectPanint);\n        canvas.drawCircle(circle.offset, circleCenterSize, selectCenterPanint);\n      }else{\n        canvas.drawCircle(circle.offset, circleSize, unSelectPanint);\n      }\n    }\n    /* 画线 */\n    if (lineList.length > 0) {\n      for (int i = 0; i < lineList.length; i++) {\n        canvas.drawLine(\n          lineList[i].offset,\n           i == lineList.length - 1 ? nowMoveXY : lineList[i + 1].offset,\n          linePaint\n        );\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => true;}\n\nclass Circle{\n  Offset offset; //(x,y)\n  bool isSelected = false; //是否被选中\n  int index;  //第几个小圆点\n\n  Circle(this.offset, this.index);\n}\n\n```\n","source":"_posts/flutter/demo/01-九宫格手势解锁.md","raw":"---\ntitle: 01-九宫格手势解锁\ntoc: true\ndate: 2020-09-25 15:34:21\ntags:\ncategories:\n- flutter\n- demo\n---\n\n效果图：\n\n![图1](01-九宫格手势解锁/01_001.png)\n\n\n代码：\n\n```\nimport 'dart:async';\nimport 'dart:ui';\nimport 'package:flutter/material.dart';\nclass GesturePWDPage extends StatefulWidget {\n  GesturePWDPage({Key key}) : super(key: key);\n\n  @override  _GesturePWDPageState createState() => _GesturePWDPageState();\n}\nclass _GesturePWDPageState extends State<GesturePWDPage> {\n  String password = \"\";\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"test\"),\n      ),\n      body: Column(\n        children: <Widget>[\n          SizedBox(height: 20,),\n          Text(\"result: $password\",style: TextStyle(color: Colors.red,fontSize: 32),),\n          SizedBox(height: 20,),\n          Container(\n            color: Colors.white,\n            alignment: Alignment.center,\n            child: GesturePwdModel(\n              width: MediaQueryData.fromWindow(window).size.width,\n              height: MediaQueryData.fromWindow(window).size.width,\n              onSuccess: (value) {\n                setState(() {\n                  password = value;\n                });\n              },\n              onError: () {\n                setState(() {\n                  password = \"密码长度小于4位\";\n                });\n              },\n            ),\n          )\n        ],\n      )\n    );\n  }\n}\n\n/* 手势密码 */\nclass GesturePwdModel extends StatefulWidget {\n  final double width;\n  final double height;\n  final Color unSelectedColor;\n  final Color selectedColor;\n  final Color selectedCenterColor;\n  final double circleSize;\n  final double circleCenterSize;\n  final Color lineColor;\n  final double lineWidth;\n  final ValueChanged<String> onSuccess;\n  final VoidCallback onError;\n  final int minLineLength;\n  final int showTimes;\n\n  GesturePwdModel({Key key,\n    this.width,\n    this.height,\n    this.unSelectedColor = Colors.grey,\n    this.selectedColor = Colors.greenAccent,\n    this.selectedCenterColor = Colors.green,\n    this.circleSize = 40.0,\n    this.circleCenterSize = 16.0,\n    this.lineColor = Colors.green,\n    this.lineWidth = 4.0,\n    this.minLineLength = 4,\n    this.showTimes = 1000,\n    @required this.onSuccess,\n    this.onError\n  }): super(key: key);\n\n  @override\n  _GesturePwdModelState createState() => _GesturePwdModelState();\n}\n\nclass _GesturePwdModelState extends State<GesturePwdModel> {\n  List<Circle> circleList = []; //每个的圆心\n  List<Circle> lineList = [];  //连线的拐点\n  Offset nowMoveXY;\n  Timer _timer;\n\n  @override\n  void initState() {\n    /* 确定九个点的圆心 */\n    double width = widget.width??MediaQueryData.fromWindow(window).size.width;\n    double itemWidthHalf = width / 6;\n    double height = widget.height??MediaQueryData.fromWindow(window).size.width;\n    double itemHeightHalf = height / 6;    //每个圆的中心点\n    for (int i = 0; i < 9; i++) {\n      double coordinateX = (2 * (i % 3) + 1) * itemWidthHalf;  //x为2n-1的位置\n      double coordinateY = (2 * ((i ~/ 3)) +1) * itemHeightHalf;\n      circleList.add(Circle(Offset(coordinateX, coordinateY),i));\n    }\n    super.initState();  \n  }\n\n  /* 手指按下或移动 */\n  headDownOrMove(details) {\n    setState(() {\n      RenderBox box = context.findRenderObject();\n      nowMoveXY = box.globalToLocal(details.globalPosition);\n      if (nowMoveXY.dy < 0) {\n        nowMoveXY = Offset(nowMoveXY.dx, 0.0);\n      }\n      if (nowMoveXY.dy > widget.height) {\n        nowMoveXY = Offset(nowMoveXY.dx, widget.height);\n      }\n      for (var i = 0; i < circleList.length; i++) {\n        Offset cross = nowMoveXY - circleList[i].offset;\n        if(!circleList[i].isSelected){\n          if (cross.dx.abs() < (widget.circleSize??40.0) / 2 &&\n             cross.dy.abs() < (widget.circleSize??40.0) / 2) {\n            circleList[i].isSelected = true;\n            lineList.add(circleList[i]);\n            if(lineList.length == 9){\n              successBack();\n            }\n          }\n        }\n      }\n    });\n  }\n\n  /* 松手指或者连接9个回调 */\n  successBack() {\n    if(lineList.length < widget.minLineLength){\n      widget.onError != null?widget.onError():print(lineList.length);\n    }else{\n      String result = \"\";\n      for (int i = 0; i < lineList.length; i++) {\n        result += \"${lineList[i].index}\";\n      }\n      widget.onSuccess(result);\n    }\n    startTimer();\n  }\n\n  startTimer() {\n    _timer = Timer.periodic(Duration(milliseconds: widget.showTimes), (timer){\n      setState(() {\n        lineList.clear();\n        circleList.forEach((element) {\n          element.isSelected = false;\n        });\n      });\n      timer.cancel();\n    });\n  }\n\n  @override  void dispose() {\n    if(_timer != null){\n      _timer.cancel();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanDown: (DragDownDetails details) {\n        headDownOrMove(details);\n      },\n      onPanUpdate: (DragUpdateDetails details) {\n        if(lineList.length < 9){\n          headDownOrMove(details);\n        }\n      },\n      onPanEnd: (DragEndDetails details) {\n        successBack();\n      },\n      child: CustomPaint(\n        size: Size(widget.width??MediaQuery.of(context).size.width, widget.height??MediaQuery.of(context).size.width),\n        painter: MyPainter(\n          circleList,\n          lineList,\n          nowMoveXY,\n          unSelectedColor: widget.unSelectedColor,\n          selectedColor: widget.selectedColor,\n          selectedCenterColor: widget.selectedCenterColor,\n          circleSize: widget.circleSize,\n          circleCenterSize: widget.circleCenterSize,\n          lineColor: widget.lineColor,\n          lineWidth: widget.lineWidth,\n        ),\n      )\n    );\n  }\n}\n\nclass MyPainter extends CustomPainter {\n  List<Circle> circleList;\n  List<Circle> lineList;\n  Color unSelectedColor;  //未选中颜色\n  Color selectedColor;  //选中圆的颜色\n  Color selectedCenterColor;  //选中圆心颜色\n  double circleSize;  //圆宽度\n  double circleCenterSize;  //圆心宽度\n  Color lineColor;  //线颜色\n  double lineWidth;  //线宽度\n  Offset nowMoveXY;  //现在的手指位置\n\n  MyPainter(\n    this.circleList,\n    this.lineList,\n    this.nowMoveXY,\n    {\n      this.unSelectedColor,\n      this.selectedColor,\n      this.selectedCenterColor,\n      this.circleSize,\n      this.circleCenterSize,\n      this.lineColor,\n      this.lineWidth,\n    }\n  );\n\n  @override\n  void paint(Canvas canvas, Size size) {\n\n    /* 未选中 */    \n    var unSelectPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = unSelectedColor;\n\n    /* 选中颜色 */\n    var selectPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = selectedColor;\n\n    /* 选中圆心颜色 */\n    var selectCenterPanint = Paint()\n      ..style = PaintingStyle.fill\n      ..color = selectedCenterColor;\n\n    //线\n    final linePaint = new Paint()\n      ..color = lineColor\n      ..style = PaintingStyle.fill\n      ..strokeWidth = lineWidth;\n\n    //画圆    \n    for (int i = 0; i < circleList.length; i++) {\n      Circle circle = circleList[i];\n      if(circle.isSelected){\n        canvas.drawCircle(circle.offset, circleSize, selectPanint);\n        canvas.drawCircle(circle.offset, circleCenterSize, selectCenterPanint);\n      }else{\n        canvas.drawCircle(circle.offset, circleSize, unSelectPanint);\n      }\n    }\n    /* 画线 */\n    if (lineList.length > 0) {\n      for (int i = 0; i < lineList.length; i++) {\n        canvas.drawLine(\n          lineList[i].offset,\n           i == lineList.length - 1 ? nowMoveXY : lineList[i + 1].offset,\n          linePaint\n        );\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => true;}\n\nclass Circle{\n  Offset offset; //(x,y)\n  bool isSelected = false; //是否被选中\n  int index;  //第几个小圆点\n\n  Circle(this.offset, this.index);\n}\n\n```\n","slug":"flutter/demo/01-九宫格手势解锁","published":1,"updated":"2020-09-25T07:39:29.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengs0033u3s6g28i9qhy","content":"<p>效果图：</p>\n<p><img src=\"/2020/09/25/flutter/demo/01-%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81/01_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:async&#39;;</span><br><span class=\"line\">import &#39;dart:ui&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">class GesturePWDPage extends StatefulWidget &#123;</span><br><span class=\"line\">  GesturePWDPage(&#123;Key key&#125;) : super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override  _GesturePWDPageState createState() &#x3D;&gt; _GesturePWDPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class _GesturePWDPageState extends State&lt;GesturePWDPage&gt; &#123;</span><br><span class=\"line\">  String password &#x3D; &quot;&quot;;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;test&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Text(&quot;result: $password&quot;,style: TextStyle(color: Colors.red,fontSize: 32),),</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Container(</span><br><span class=\"line\">            color: Colors.white,</span><br><span class=\"line\">            alignment: Alignment.center,</span><br><span class=\"line\">            child: GesturePwdModel(</span><br><span class=\"line\">              width: MediaQueryData.fromWindow(window).size.width,</span><br><span class=\"line\">              height: MediaQueryData.fromWindow(window).size.width,</span><br><span class=\"line\">              onSuccess: (value) &#123;</span><br><span class=\"line\">                setState(() &#123;</span><br><span class=\"line\">                  password &#x3D; value;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              onError: () &#123;</span><br><span class=\"line\">                setState(() &#123;</span><br><span class=\"line\">                  password &#x3D; &quot;密码长度小于4位&quot;;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 手势密码 *&#x2F;</span><br><span class=\"line\">class GesturePwdModel extends StatefulWidget &#123;</span><br><span class=\"line\">  final double width;</span><br><span class=\"line\">  final double height;</span><br><span class=\"line\">  final Color unSelectedColor;</span><br><span class=\"line\">  final Color selectedColor;</span><br><span class=\"line\">  final Color selectedCenterColor;</span><br><span class=\"line\">  final double circleSize;</span><br><span class=\"line\">  final double circleCenterSize;</span><br><span class=\"line\">  final Color lineColor;</span><br><span class=\"line\">  final double lineWidth;</span><br><span class=\"line\">  final ValueChanged&lt;String&gt; onSuccess;</span><br><span class=\"line\">  final VoidCallback onError;</span><br><span class=\"line\">  final int minLineLength;</span><br><span class=\"line\">  final int showTimes;</span><br><span class=\"line\"></span><br><span class=\"line\">  GesturePwdModel(&#123;Key key,</span><br><span class=\"line\">    this.width,</span><br><span class=\"line\">    this.height,</span><br><span class=\"line\">    this.unSelectedColor &#x3D; Colors.grey,</span><br><span class=\"line\">    this.selectedColor &#x3D; Colors.greenAccent,</span><br><span class=\"line\">    this.selectedCenterColor &#x3D; Colors.green,</span><br><span class=\"line\">    this.circleSize &#x3D; 40.0,</span><br><span class=\"line\">    this.circleCenterSize &#x3D; 16.0,</span><br><span class=\"line\">    this.lineColor &#x3D; Colors.green,</span><br><span class=\"line\">    this.lineWidth &#x3D; 4.0,</span><br><span class=\"line\">    this.minLineLength &#x3D; 4,</span><br><span class=\"line\">    this.showTimes &#x3D; 1000,</span><br><span class=\"line\">    @required this.onSuccess,</span><br><span class=\"line\">    this.onError</span><br><span class=\"line\">  &#125;): super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _GesturePwdModelState createState() &#x3D;&gt; _GesturePwdModelState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _GesturePwdModelState extends State&lt;GesturePwdModel&gt; &#123;</span><br><span class=\"line\">  List&lt;Circle&gt; circleList &#x3D; []; &#x2F;&#x2F;每个的圆心</span><br><span class=\"line\">  List&lt;Circle&gt; lineList &#x3D; [];  &#x2F;&#x2F;连线的拐点</span><br><span class=\"line\">  Offset nowMoveXY;</span><br><span class=\"line\">  Timer _timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    &#x2F;* 确定九个点的圆心 *&#x2F;</span><br><span class=\"line\">    double width &#x3D; widget.width??MediaQueryData.fromWindow(window).size.width;</span><br><span class=\"line\">    double itemWidthHalf &#x3D; width &#x2F; 6;</span><br><span class=\"line\">    double height &#x3D; widget.height??MediaQueryData.fromWindow(window).size.width;</span><br><span class=\"line\">    double itemHeightHalf &#x3D; height &#x2F; 6;    &#x2F;&#x2F;每个圆的中心点</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">      double coordinateX &#x3D; (2 * (i % 3) + 1) * itemWidthHalf;  &#x2F;&#x2F;x为2n-1的位置</span><br><span class=\"line\">      double coordinateY &#x3D; (2 * ((i ~&#x2F; 3)) +1) * itemHeightHalf;</span><br><span class=\"line\">      circleList.add(Circle(Offset(coordinateX, coordinateY),i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    super.initState();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 手指按下或移动 *&#x2F;</span><br><span class=\"line\">  headDownOrMove(details) &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      RenderBox box &#x3D; context.findRenderObject();</span><br><span class=\"line\">      nowMoveXY &#x3D; box.globalToLocal(details.globalPosition);</span><br><span class=\"line\">      if (nowMoveXY.dy &lt; 0) &#123;</span><br><span class=\"line\">        nowMoveXY &#x3D; Offset(nowMoveXY.dx, 0.0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (nowMoveXY.dy &gt; widget.height) &#123;</span><br><span class=\"line\">        nowMoveXY &#x3D; Offset(nowMoveXY.dx, widget.height);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for (var i &#x3D; 0; i &lt; circleList.length; i++) &#123;</span><br><span class=\"line\">        Offset cross &#x3D; nowMoveXY - circleList[i].offset;</span><br><span class=\"line\">        if(!circleList[i].isSelected)&#123;</span><br><span class=\"line\">          if (cross.dx.abs() &lt; (widget.circleSize??40.0) &#x2F; 2 &amp;&amp;</span><br><span class=\"line\">             cross.dy.abs() &lt; (widget.circleSize??40.0) &#x2F; 2) &#123;</span><br><span class=\"line\">            circleList[i].isSelected &#x3D; true;</span><br><span class=\"line\">            lineList.add(circleList[i]);</span><br><span class=\"line\">            if(lineList.length &#x3D;&#x3D; 9)&#123;</span><br><span class=\"line\">              successBack();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 松手指或者连接9个回调 *&#x2F;</span><br><span class=\"line\">  successBack() &#123;</span><br><span class=\"line\">    if(lineList.length &lt; widget.minLineLength)&#123;</span><br><span class=\"line\">      widget.onError !&#x3D; null?widget.onError():print(lineList.length);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      String result &#x3D; &quot;&quot;;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; lineList.length; i++) &#123;</span><br><span class=\"line\">        result +&#x3D; &quot;$&#123;lineList[i].index&#125;&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      widget.onSuccess(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startTimer();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  startTimer() &#123;</span><br><span class=\"line\">    _timer &#x3D; Timer.periodic(Duration(milliseconds: widget.showTimes), (timer)&#123;</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        lineList.clear();</span><br><span class=\"line\">        circleList.forEach((element) &#123;</span><br><span class=\"line\">          element.isSelected &#x3D; false;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      timer.cancel();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override  void dispose() &#123;</span><br><span class=\"line\">    if(_timer !&#x3D; null)&#123;</span><br><span class=\"line\">      _timer.cancel();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GestureDetector(</span><br><span class=\"line\">      onPanDown: (DragDownDetails details) &#123;</span><br><span class=\"line\">        headDownOrMove(details);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class=\"line\">        if(lineList.length &lt; 9)&#123;</span><br><span class=\"line\">          headDownOrMove(details);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onPanEnd: (DragEndDetails details) &#123;</span><br><span class=\"line\">        successBack();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      child: CustomPaint(</span><br><span class=\"line\">        size: Size(widget.width??MediaQuery.of(context).size.width, widget.height??MediaQuery.of(context).size.width),</span><br><span class=\"line\">        painter: MyPainter(</span><br><span class=\"line\">          circleList,</span><br><span class=\"line\">          lineList,</span><br><span class=\"line\">          nowMoveXY,</span><br><span class=\"line\">          unSelectedColor: widget.unSelectedColor,</span><br><span class=\"line\">          selectedColor: widget.selectedColor,</span><br><span class=\"line\">          selectedCenterColor: widget.selectedCenterColor,</span><br><span class=\"line\">          circleSize: widget.circleSize,</span><br><span class=\"line\">          circleCenterSize: widget.circleCenterSize,</span><br><span class=\"line\">          lineColor: widget.lineColor,</span><br><span class=\"line\">          lineWidth: widget.lineWidth,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyPainter extends CustomPainter &#123;</span><br><span class=\"line\">  List&lt;Circle&gt; circleList;</span><br><span class=\"line\">  List&lt;Circle&gt; lineList;</span><br><span class=\"line\">  Color unSelectedColor;  &#x2F;&#x2F;未选中颜色</span><br><span class=\"line\">  Color selectedColor;  &#x2F;&#x2F;选中圆的颜色</span><br><span class=\"line\">  Color selectedCenterColor;  &#x2F;&#x2F;选中圆心颜色</span><br><span class=\"line\">  double circleSize;  &#x2F;&#x2F;圆宽度</span><br><span class=\"line\">  double circleCenterSize;  &#x2F;&#x2F;圆心宽度</span><br><span class=\"line\">  Color lineColor;  &#x2F;&#x2F;线颜色</span><br><span class=\"line\">  double lineWidth;  &#x2F;&#x2F;线宽度</span><br><span class=\"line\">  Offset nowMoveXY;  &#x2F;&#x2F;现在的手指位置</span><br><span class=\"line\"></span><br><span class=\"line\">  MyPainter(</span><br><span class=\"line\">    this.circleList,</span><br><span class=\"line\">    this.lineList,</span><br><span class=\"line\">    this.nowMoveXY,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      this.unSelectedColor,</span><br><span class=\"line\">      this.selectedColor,</span><br><span class=\"line\">      this.selectedCenterColor,</span><br><span class=\"line\">      this.circleSize,</span><br><span class=\"line\">      this.circleCenterSize,</span><br><span class=\"line\">      this.lineColor,</span><br><span class=\"line\">      this.lineWidth,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void paint(Canvas canvas, Size size) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 未选中 *&#x2F;    </span><br><span class=\"line\">    var unSelectPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; unSelectedColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 选中颜色 *&#x2F;</span><br><span class=\"line\">    var selectPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; selectedColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 选中圆心颜色 *&#x2F;</span><br><span class=\"line\">    var selectCenterPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; selectedCenterColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;线</span><br><span class=\"line\">    final linePaint &#x3D; new Paint()</span><br><span class=\"line\">      ..color &#x3D; lineColor</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..strokeWidth &#x3D; lineWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画圆    </span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; circleList.length; i++) &#123;</span><br><span class=\"line\">      Circle circle &#x3D; circleList[i];</span><br><span class=\"line\">      if(circle.isSelected)&#123;</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleSize, selectPanint);</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleCenterSize, selectCenterPanint);</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleSize, unSelectPanint);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;* 画线 *&#x2F;</span><br><span class=\"line\">    if (lineList.length &gt; 0) &#123;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; lineList.length; i++) &#123;</span><br><span class=\"line\">        canvas.drawLine(</span><br><span class=\"line\">          lineList[i].offset,</span><br><span class=\"line\">           i &#x3D;&#x3D; lineList.length - 1 ? nowMoveXY : lineList[i + 1].offset,</span><br><span class=\"line\">          linePaint</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  bool shouldRepaint(CustomPainter oldDelegate) &#x3D;&gt; true;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Circle&#123;</span><br><span class=\"line\">  Offset offset; &#x2F;&#x2F;(x,y)</span><br><span class=\"line\">  bool isSelected &#x3D; false; &#x2F;&#x2F;是否被选中</span><br><span class=\"line\">  int index;  &#x2F;&#x2F;第几个小圆点</span><br><span class=\"line\"></span><br><span class=\"line\">  Circle(this.offset, this.index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>效果图：</p>\n<p><img src=\"/2020/09/25/flutter/demo/01-%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81/01_001.png\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;dart:async&#39;;</span><br><span class=\"line\">import &#39;dart:ui&#39;;</span><br><span class=\"line\">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class=\"line\">class GesturePWDPage extends StatefulWidget &#123;</span><br><span class=\"line\">  GesturePWDPage(&#123;Key key&#125;) : super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override  _GesturePWDPageState createState() &#x3D;&gt; _GesturePWDPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class _GesturePWDPageState extends State&lt;GesturePWDPage&gt; &#123;</span><br><span class=\"line\">  String password &#x3D; &quot;&quot;;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(&quot;test&quot;),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Text(&quot;result: $password&quot;,style: TextStyle(color: Colors.red,fontSize: 32),),</span><br><span class=\"line\">          SizedBox(height: 20,),</span><br><span class=\"line\">          Container(</span><br><span class=\"line\">            color: Colors.white,</span><br><span class=\"line\">            alignment: Alignment.center,</span><br><span class=\"line\">            child: GesturePwdModel(</span><br><span class=\"line\">              width: MediaQueryData.fromWindow(window).size.width,</span><br><span class=\"line\">              height: MediaQueryData.fromWindow(window).size.width,</span><br><span class=\"line\">              onSuccess: (value) &#123;</span><br><span class=\"line\">                setState(() &#123;</span><br><span class=\"line\">                  password &#x3D; value;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              onError: () &#123;</span><br><span class=\"line\">                setState(() &#123;</span><br><span class=\"line\">                  password &#x3D; &quot;密码长度小于4位&quot;;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 手势密码 *&#x2F;</span><br><span class=\"line\">class GesturePwdModel extends StatefulWidget &#123;</span><br><span class=\"line\">  final double width;</span><br><span class=\"line\">  final double height;</span><br><span class=\"line\">  final Color unSelectedColor;</span><br><span class=\"line\">  final Color selectedColor;</span><br><span class=\"line\">  final Color selectedCenterColor;</span><br><span class=\"line\">  final double circleSize;</span><br><span class=\"line\">  final double circleCenterSize;</span><br><span class=\"line\">  final Color lineColor;</span><br><span class=\"line\">  final double lineWidth;</span><br><span class=\"line\">  final ValueChanged&lt;String&gt; onSuccess;</span><br><span class=\"line\">  final VoidCallback onError;</span><br><span class=\"line\">  final int minLineLength;</span><br><span class=\"line\">  final int showTimes;</span><br><span class=\"line\"></span><br><span class=\"line\">  GesturePwdModel(&#123;Key key,</span><br><span class=\"line\">    this.width,</span><br><span class=\"line\">    this.height,</span><br><span class=\"line\">    this.unSelectedColor &#x3D; Colors.grey,</span><br><span class=\"line\">    this.selectedColor &#x3D; Colors.greenAccent,</span><br><span class=\"line\">    this.selectedCenterColor &#x3D; Colors.green,</span><br><span class=\"line\">    this.circleSize &#x3D; 40.0,</span><br><span class=\"line\">    this.circleCenterSize &#x3D; 16.0,</span><br><span class=\"line\">    this.lineColor &#x3D; Colors.green,</span><br><span class=\"line\">    this.lineWidth &#x3D; 4.0,</span><br><span class=\"line\">    this.minLineLength &#x3D; 4,</span><br><span class=\"line\">    this.showTimes &#x3D; 1000,</span><br><span class=\"line\">    @required this.onSuccess,</span><br><span class=\"line\">    this.onError</span><br><span class=\"line\">  &#125;): super(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _GesturePwdModelState createState() &#x3D;&gt; _GesturePwdModelState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _GesturePwdModelState extends State&lt;GesturePwdModel&gt; &#123;</span><br><span class=\"line\">  List&lt;Circle&gt; circleList &#x3D; []; &#x2F;&#x2F;每个的圆心</span><br><span class=\"line\">  List&lt;Circle&gt; lineList &#x3D; [];  &#x2F;&#x2F;连线的拐点</span><br><span class=\"line\">  Offset nowMoveXY;</span><br><span class=\"line\">  Timer _timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    &#x2F;* 确定九个点的圆心 *&#x2F;</span><br><span class=\"line\">    double width &#x3D; widget.width??MediaQueryData.fromWindow(window).size.width;</span><br><span class=\"line\">    double itemWidthHalf &#x3D; width &#x2F; 6;</span><br><span class=\"line\">    double height &#x3D; widget.height??MediaQueryData.fromWindow(window).size.width;</span><br><span class=\"line\">    double itemHeightHalf &#x3D; height &#x2F; 6;    &#x2F;&#x2F;每个圆的中心点</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 9; i++) &#123;</span><br><span class=\"line\">      double coordinateX &#x3D; (2 * (i % 3) + 1) * itemWidthHalf;  &#x2F;&#x2F;x为2n-1的位置</span><br><span class=\"line\">      double coordinateY &#x3D; (2 * ((i ~&#x2F; 3)) +1) * itemHeightHalf;</span><br><span class=\"line\">      circleList.add(Circle(Offset(coordinateX, coordinateY),i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    super.initState();  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 手指按下或移动 *&#x2F;</span><br><span class=\"line\">  headDownOrMove(details) &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      RenderBox box &#x3D; context.findRenderObject();</span><br><span class=\"line\">      nowMoveXY &#x3D; box.globalToLocal(details.globalPosition);</span><br><span class=\"line\">      if (nowMoveXY.dy &lt; 0) &#123;</span><br><span class=\"line\">        nowMoveXY &#x3D; Offset(nowMoveXY.dx, 0.0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (nowMoveXY.dy &gt; widget.height) &#123;</span><br><span class=\"line\">        nowMoveXY &#x3D; Offset(nowMoveXY.dx, widget.height);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for (var i &#x3D; 0; i &lt; circleList.length; i++) &#123;</span><br><span class=\"line\">        Offset cross &#x3D; nowMoveXY - circleList[i].offset;</span><br><span class=\"line\">        if(!circleList[i].isSelected)&#123;</span><br><span class=\"line\">          if (cross.dx.abs() &lt; (widget.circleSize??40.0) &#x2F; 2 &amp;&amp;</span><br><span class=\"line\">             cross.dy.abs() &lt; (widget.circleSize??40.0) &#x2F; 2) &#123;</span><br><span class=\"line\">            circleList[i].isSelected &#x3D; true;</span><br><span class=\"line\">            lineList.add(circleList[i]);</span><br><span class=\"line\">            if(lineList.length &#x3D;&#x3D; 9)&#123;</span><br><span class=\"line\">              successBack();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 松手指或者连接9个回调 *&#x2F;</span><br><span class=\"line\">  successBack() &#123;</span><br><span class=\"line\">    if(lineList.length &lt; widget.minLineLength)&#123;</span><br><span class=\"line\">      widget.onError !&#x3D; null?widget.onError():print(lineList.length);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      String result &#x3D; &quot;&quot;;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; lineList.length; i++) &#123;</span><br><span class=\"line\">        result +&#x3D; &quot;$&#123;lineList[i].index&#125;&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      widget.onSuccess(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startTimer();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  startTimer() &#123;</span><br><span class=\"line\">    _timer &#x3D; Timer.periodic(Duration(milliseconds: widget.showTimes), (timer)&#123;</span><br><span class=\"line\">      setState(() &#123;</span><br><span class=\"line\">        lineList.clear();</span><br><span class=\"line\">        circleList.forEach((element) &#123;</span><br><span class=\"line\">          element.isSelected &#x3D; false;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      timer.cancel();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override  void dispose() &#123;</span><br><span class=\"line\">    if(_timer !&#x3D; null)&#123;</span><br><span class=\"line\">      _timer.cancel();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return GestureDetector(</span><br><span class=\"line\">      onPanDown: (DragDownDetails details) &#123;</span><br><span class=\"line\">        headDownOrMove(details);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onPanUpdate: (DragUpdateDetails details) &#123;</span><br><span class=\"line\">        if(lineList.length &lt; 9)&#123;</span><br><span class=\"line\">          headDownOrMove(details);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onPanEnd: (DragEndDetails details) &#123;</span><br><span class=\"line\">        successBack();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      child: CustomPaint(</span><br><span class=\"line\">        size: Size(widget.width??MediaQuery.of(context).size.width, widget.height??MediaQuery.of(context).size.width),</span><br><span class=\"line\">        painter: MyPainter(</span><br><span class=\"line\">          circleList,</span><br><span class=\"line\">          lineList,</span><br><span class=\"line\">          nowMoveXY,</span><br><span class=\"line\">          unSelectedColor: widget.unSelectedColor,</span><br><span class=\"line\">          selectedColor: widget.selectedColor,</span><br><span class=\"line\">          selectedCenterColor: widget.selectedCenterColor,</span><br><span class=\"line\">          circleSize: widget.circleSize,</span><br><span class=\"line\">          circleCenterSize: widget.circleCenterSize,</span><br><span class=\"line\">          lineColor: widget.lineColor,</span><br><span class=\"line\">          lineWidth: widget.lineWidth,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyPainter extends CustomPainter &#123;</span><br><span class=\"line\">  List&lt;Circle&gt; circleList;</span><br><span class=\"line\">  List&lt;Circle&gt; lineList;</span><br><span class=\"line\">  Color unSelectedColor;  &#x2F;&#x2F;未选中颜色</span><br><span class=\"line\">  Color selectedColor;  &#x2F;&#x2F;选中圆的颜色</span><br><span class=\"line\">  Color selectedCenterColor;  &#x2F;&#x2F;选中圆心颜色</span><br><span class=\"line\">  double circleSize;  &#x2F;&#x2F;圆宽度</span><br><span class=\"line\">  double circleCenterSize;  &#x2F;&#x2F;圆心宽度</span><br><span class=\"line\">  Color lineColor;  &#x2F;&#x2F;线颜色</span><br><span class=\"line\">  double lineWidth;  &#x2F;&#x2F;线宽度</span><br><span class=\"line\">  Offset nowMoveXY;  &#x2F;&#x2F;现在的手指位置</span><br><span class=\"line\"></span><br><span class=\"line\">  MyPainter(</span><br><span class=\"line\">    this.circleList,</span><br><span class=\"line\">    this.lineList,</span><br><span class=\"line\">    this.nowMoveXY,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      this.unSelectedColor,</span><br><span class=\"line\">      this.selectedColor,</span><br><span class=\"line\">      this.selectedCenterColor,</span><br><span class=\"line\">      this.circleSize,</span><br><span class=\"line\">      this.circleCenterSize,</span><br><span class=\"line\">      this.lineColor,</span><br><span class=\"line\">      this.lineWidth,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void paint(Canvas canvas, Size size) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 未选中 *&#x2F;    </span><br><span class=\"line\">    var unSelectPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; unSelectedColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 选中颜色 *&#x2F;</span><br><span class=\"line\">    var selectPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; selectedColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 选中圆心颜色 *&#x2F;</span><br><span class=\"line\">    var selectCenterPanint &#x3D; Paint()</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..color &#x3D; selectedCenterColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;线</span><br><span class=\"line\">    final linePaint &#x3D; new Paint()</span><br><span class=\"line\">      ..color &#x3D; lineColor</span><br><span class=\"line\">      ..style &#x3D; PaintingStyle.fill</span><br><span class=\"line\">      ..strokeWidth &#x3D; lineWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画圆    </span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; circleList.length; i++) &#123;</span><br><span class=\"line\">      Circle circle &#x3D; circleList[i];</span><br><span class=\"line\">      if(circle.isSelected)&#123;</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleSize, selectPanint);</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleCenterSize, selectCenterPanint);</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">        canvas.drawCircle(circle.offset, circleSize, unSelectPanint);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;* 画线 *&#x2F;</span><br><span class=\"line\">    if (lineList.length &gt; 0) &#123;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; lineList.length; i++) &#123;</span><br><span class=\"line\">        canvas.drawLine(</span><br><span class=\"line\">          lineList[i].offset,</span><br><span class=\"line\">           i &#x3D;&#x3D; lineList.length - 1 ? nowMoveXY : lineList[i + 1].offset,</span><br><span class=\"line\">          linePaint</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  bool shouldRepaint(CustomPainter oldDelegate) &#x3D;&gt; true;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Circle&#123;</span><br><span class=\"line\">  Offset offset; &#x2F;&#x2F;(x,y)</span><br><span class=\"line\">  bool isSelected &#x3D; false; &#x2F;&#x2F;是否被选中</span><br><span class=\"line\">  int index;  &#x2F;&#x2F;第几个小圆点</span><br><span class=\"line\"></span><br><span class=\"line\">  Circle(this.offset, this.index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"UITableViewHeader头部拉伸变化","date":"2020-04-03T10:29:50.000Z","_content":"\n经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。\n\n一：效果图：\n\n正常图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg)\n\n向下拖动图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg)\n\n二：原理如下：\n\n- 1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。\n\n- 2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点\n\n- 3，设置imageview的内容模式为等比例拉伸(这是最重要的)\n\n- 4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。\n\n三：示意图：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg)\n\n\n四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）\n\n```\n#import \"CZViewController.h\"\n\n#import \"UIView+Extension.h\"\n\nCGFloat const CZInitH = 320;\n\nCGFloat const CZInitW = 320;\n\nCGFloat const CZInsetTop = 150;\n\n@interface CZViewController ()\n\n@property(nonatomic,strong) UIImageView *imageView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //先设置tableview的顶部内边距\n\n    self.tableView.contentInset = UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);\n\n    \n\n    UIImageView *imageView = [[UIImageView alloc] init];\n\n    imageView.image = [UIImage imageNamed:@\"biaoqingdi\"];\n\n    \n\n    //imageview的一部分在屏幕外，一部分在屏幕中\n\n    imageView.frame = CGRectMake(0, -CZInitH, CZInitW, CZInitH);\n\n    //设置imageView等比例伸缩\n\n    imageView.contentMode = UIViewContentModeScaleAspectFill;\n\n    [self.tableView insertSubview:imageView atIndex:0];\n\n    self.imageView = imageView;\n\n}\n\n/** tableview已经拖拽 */\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    //计算往下拖拽的距离\n\n    CGFloat dragDelta = -CZInsetTop - scrollView.contentOffset.y;\n\n    if(dragDelta < 0){ //如果dragDelta＜0，说明，tableview向上拖动\n\n        dragDelta = 0;\n\n    }\n\n    //设置imageview的高度\n\n    self.imageView.height = CZInitH + dragDelta;\n\n}\n\n#pragma mark - tableview的数据源方法\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return 20;\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    static NSString *ID = @\"cell\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];\n\n    if(cell == nil){\n\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"测试数据-%d\",indexPath.row];\n\n    return cell;\n\n}\n@end\n```","source":"_posts/oc/Ani/oc-Ani-TableViewHeader.md","raw":"---\ntitle: UITableViewHeader头部拉伸变化\ndate: 2020-04-03 18:29:50\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。\n\n一：效果图：\n\n正常图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg)\n\n向下拖动图片：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg)\n\n二：原理如下：\n\n- 1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。\n\n- 2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点\n\n- 3，设置imageview的内容模式为等比例拉伸(这是最重要的)\n\n- 4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。\n\n三：示意图：\n\n![](oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg)\n\n\n四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）\n\n```\n#import \"CZViewController.h\"\n\n#import \"UIView+Extension.h\"\n\nCGFloat const CZInitH = 320;\n\nCGFloat const CZInitW = 320;\n\nCGFloat const CZInsetTop = 150;\n\n@interface CZViewController ()\n\n@property(nonatomic,strong) UIImageView *imageView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //先设置tableview的顶部内边距\n\n    self.tableView.contentInset = UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);\n\n    \n\n    UIImageView *imageView = [[UIImageView alloc] init];\n\n    imageView.image = [UIImage imageNamed:@\"biaoqingdi\"];\n\n    \n\n    //imageview的一部分在屏幕外，一部分在屏幕中\n\n    imageView.frame = CGRectMake(0, -CZInitH, CZInitW, CZInitH);\n\n    //设置imageView等比例伸缩\n\n    imageView.contentMode = UIViewContentModeScaleAspectFill;\n\n    [self.tableView insertSubview:imageView atIndex:0];\n\n    self.imageView = imageView;\n\n}\n\n/** tableview已经拖拽 */\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    //计算往下拖拽的距离\n\n    CGFloat dragDelta = -CZInsetTop - scrollView.contentOffset.y;\n\n    if(dragDelta < 0){ //如果dragDelta＜0，说明，tableview向上拖动\n\n        dragDelta = 0;\n\n    }\n\n    //设置imageview的高度\n\n    self.imageView.height = CZInitH + dragDelta;\n\n}\n\n#pragma mark - tableview的数据源方法\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return 20;\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    static NSString *ID = @\"cell\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];\n\n    if(cell == nil){\n\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"测试数据-%d\",indexPath.row];\n\n    return cell;\n\n}\n@end\n```","slug":"oc/Ani/oc-Ani-TableViewHeader","published":1,"updated":"2020-09-01T12:57:18.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengt0035u3s69bajaql1","content":"<p>经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。</p>\n<p>一：效果图：</p>\n<p>正常图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg\" alt></p>\n<p>向下拖动图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg\" alt></p>\n<p>二：原理如下：</p>\n<ul>\n<li><p>1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。</p>\n</li>\n<li><p>2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点</p>\n</li>\n<li><p>3，设置imageview的内容模式为等比例拉伸(这是最重要的)</p>\n</li>\n<li><p>4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。</p>\n</li>\n</ul>\n<p>三：示意图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg\" alt></p>\n<p>四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;UIView+Extension.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitH &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitW &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInsetTop &#x3D; 150;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIImageView *imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    &#x2F;&#x2F;先设置tableview的顶部内边距</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.contentInset &#x3D; UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *imageView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.image &#x3D; [UIImage imageNamed:@&quot;biaoqingdi&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;imageview的一部分在屏幕外，一部分在屏幕中</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.frame &#x3D; CGRectMake(0, -CZInitH, CZInitW, CZInitH);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageView等比例伸缩</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.contentMode &#x3D; UIViewContentModeScaleAspectFill;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView insertSubview:imageView atIndex:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView &#x3D; imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** tableview已经拖拽 *&#x2F;</span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;计算往下拖拽的距离</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat dragDelta &#x3D; -CZInsetTop - scrollView.contentOffset.y;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(dragDelta &lt; 0)&#123; &#x2F;&#x2F;如果dragDelta＜0，说明，tableview向上拖动</span><br><span class=\"line\"></span><br><span class=\"line\">        dragDelta &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageview的高度</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView.height &#x3D; CZInitH + dragDelta;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - tableview的数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 20;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *ID &#x3D; @&quot;cell&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; [NSString stringWithFormat:@&quot;测试数据-%d&quot;,indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>经常在以下应用中看到这样的效果：在tableview的上边，有一个背景图片，当向下拖动tableview时，顶部的背景图片自动变大，当tableview被放回的时候，图片自动还原。</p>\n<p>一：效果图：</p>\n<p>正常图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg\" alt></p>\n<p>向下拖动图片：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg\" alt></p>\n<p>二：原理如下：</p>\n<ul>\n<li><p>1，假如，控制器就是tableviewcontroller,设置tableview的顶部内边距，将tableview的顶部留出来。</p>\n</li>\n<li><p>2，在tableview中，放入一个imageview,一定要放入最底部，将imageview设置大一点</p>\n</li>\n<li><p>3，设置imageview的内容模式为等比例拉伸(这是最重要的)</p>\n</li>\n<li><p>4，当tableview拖动的时候，计算拖动的距离。如果是向下拖动，将imageview的高度变大，那么，宽度会自动变大，这样，上边的图片看起来就会等比例变大。当tableview向上反弹或者向上拖动的时候，这时候，要注意了，imageview就不在自动变了，维持先前的大小。</p>\n</li>\n</ul>\n<p>三：示意图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg\" alt></p>\n<p>四：事例代码：（为了方便，就直接将控制器整成一个tableviewController）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;UIView+Extension.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitH &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInitW &#x3D; 320;</span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat const CZInsetTop &#x3D; 150;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) UIImageView *imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    &#x2F;&#x2F;先设置tableview的顶部内边距</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.contentInset &#x3D; UIEdgeInsetsMake(CZInsetTop, 0, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *imageView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.image &#x3D; [UIImage imageNamed:@&quot;biaoqingdi&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;imageview的一部分在屏幕外，一部分在屏幕中</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.frame &#x3D; CGRectMake(0, -CZInitH, CZInitW, CZInitH);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageView等比例伸缩</span><br><span class=\"line\"></span><br><span class=\"line\">    imageView.contentMode &#x3D; UIViewContentModeScaleAspectFill;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView insertSubview:imageView atIndex:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView &#x3D; imageView;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** tableview已经拖拽 *&#x2F;</span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;计算往下拖拽的距离</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat dragDelta &#x3D; -CZInsetTop - scrollView.contentOffset.y;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(dragDelta &lt; 0)&#123; &#x2F;&#x2F;如果dragDelta＜0，说明，tableview向上拖动</span><br><span class=\"line\"></span><br><span class=\"line\">        dragDelta &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置imageview的高度</span><br><span class=\"line\"></span><br><span class=\"line\">    self.imageView.height &#x3D; CZInitH + dragDelta;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - tableview的数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 20;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *ID &#x3D; @&quot;cell&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:ID];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; [NSString stringWithFormat:@&quot;测试数据-%d&quot;,indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"},{"title":"IOS-自制进度圈","date":"2020-04-03T09:36:16.000Z","_content":"\n最终要实现的效果，如图：\n\n![](oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png)\n\n将实现这个效果的View写成了分类：\n\n.h文件：\n\n```\n#import <UIKit/UIKit.h>\n@interface CZProgressView : UIView\n\n@property(nonatomic,assign) CGFloat progress;\n\n@end\n```\n\n.m文件：\n\n```\n#import \"CZProgressView.h\"\n@interface CZProgressView ()\n@property(nonatomic,strong) UILabel *label;\n@end\n\n@implementation CZProgressView\n\n-(UILabel *)label{\n    if(_label == nil){\n       _label = [[UILabelalloc] initWithFrame:self.bounds];\n\t\t_label.textAlignment = NSTextAlignmentCenter;\n\t\t[self addSubview:_label];\n    }\n\n    return _label;\n}\n\n- (id)initWithFrame:(CGRect)frame{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n-(void)setProgress:(CGFloat)progress{\n    _progress = progress;\n\n    self.label.text = [NSStringstringWithFormat:@\"%0.2f%%\",progress* 100];\n\n    [self setNeedsDisplay];\n}\n\n- (void)drawRect:(CGRect)rect{\n\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    CGFloat w = rect.size.width * 0.5;\n    CGFloat h = rect.size.height * 0.5;\n    CGPoint centerPoint = CGPointMake(w,h);\n    CGFloat radius = w > h ? h : w;\n\n    radius-= 5;\n    CGFloat startAngle = - M_PI_2;\n    CGFloat endAngle = self.progress * 2 * M_PI + startAngle;\n\n    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];\n\n    path.lineWidth = 10.0;\n    path.lineCapStyle = kCGLineCapRound;\n\n    [[UIColor yellowColor] set];\n\n    [path stroke];\n}\n```\n\n\n","source":"_posts/oc/Ani/oc-Ani-customProgressCircle.md","raw":"---\ntitle: IOS-自制进度圈\ndate: 2020-04-03 17:36:16\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n最终要实现的效果，如图：\n\n![](oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png)\n\n将实现这个效果的View写成了分类：\n\n.h文件：\n\n```\n#import <UIKit/UIKit.h>\n@interface CZProgressView : UIView\n\n@property(nonatomic,assign) CGFloat progress;\n\n@end\n```\n\n.m文件：\n\n```\n#import \"CZProgressView.h\"\n@interface CZProgressView ()\n@property(nonatomic,strong) UILabel *label;\n@end\n\n@implementation CZProgressView\n\n-(UILabel *)label{\n    if(_label == nil){\n       _label = [[UILabelalloc] initWithFrame:self.bounds];\n\t\t_label.textAlignment = NSTextAlignmentCenter;\n\t\t[self addSubview:_label];\n    }\n\n    return _label;\n}\n\n- (id)initWithFrame:(CGRect)frame{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n-(void)setProgress:(CGFloat)progress{\n    _progress = progress;\n\n    self.label.text = [NSStringstringWithFormat:@\"%0.2f%%\",progress* 100];\n\n    [self setNeedsDisplay];\n}\n\n- (void)drawRect:(CGRect)rect{\n\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    CGFloat w = rect.size.width * 0.5;\n    CGFloat h = rect.size.height * 0.5;\n    CGPoint centerPoint = CGPointMake(w,h);\n    CGFloat radius = w > h ? h : w;\n\n    radius-= 5;\n    CGFloat startAngle = - M_PI_2;\n    CGFloat endAngle = self.progress * 2 * M_PI + startAngle;\n\n    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];\n\n    path.lineWidth = 10.0;\n    path.lineCapStyle = kCGLineCapRound;\n\n    [[UIColor yellowColor] set];\n\n    [path stroke];\n}\n```\n\n\n","slug":"oc/Ani/oc-Ani-customProgressCircle","published":1,"updated":"2020-09-01T12:49:14.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengu0038u3s6999bdeb7","content":"<p>最终要实现的效果，如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png\" alt></p>\n<p>将实现这个效果的View写成了分类：</p>\n<p>.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@interface CZProgressView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat progress;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZProgressView.h&quot;</span><br><span class=\"line\">@interface CZProgressView ()</span><br><span class=\"line\">@property(nonatomic,strong) UILabel *label;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZProgressView</span><br><span class=\"line\"></span><br><span class=\"line\">-(UILabel *)label&#123;</span><br><span class=\"line\">    if(_label &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">       _label &#x3D; [[UILabelalloc] initWithFrame:self.bounds];</span><br><span class=\"line\">\t\t_label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">\t\t[self addSubview:_label];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithFrame:frame];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setProgress:(CGFloat)progress&#123;</span><br><span class=\"line\">    _progress &#x3D; progress;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.label.text &#x3D; [NSStringstringWithFormat:@&quot;%0.2f%%&quot;,progress* 100];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class=\"line\">    CGFloat w &#x3D; rect.size.width * 0.5;</span><br><span class=\"line\">    CGFloat h &#x3D; rect.size.height * 0.5;</span><br><span class=\"line\">    CGPoint centerPoint &#x3D; CGPointMake(w,h);</span><br><span class=\"line\">    CGFloat radius &#x3D; w &gt; h ? h : w;</span><br><span class=\"line\"></span><br><span class=\"line\">    radius-&#x3D; 5;</span><br><span class=\"line\">    CGFloat startAngle &#x3D; - M_PI_2;</span><br><span class=\"line\">    CGFloat endAngle &#x3D; self.progress * 2 * M_PI + startAngle;</span><br><span class=\"line\"></span><br><span class=\"line\">    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineWidth &#x3D; 10.0;</span><br><span class=\"line\">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[UIColor yellowColor] set];</span><br><span class=\"line\"></span><br><span class=\"line\">    [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>最终要实现的效果，如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png\" alt></p>\n<p>将实现这个效果的View写成了分类：</p>\n<p>.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@interface CZProgressView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign) CGFloat progress;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZProgressView.h&quot;</span><br><span class=\"line\">@interface CZProgressView ()</span><br><span class=\"line\">@property(nonatomic,strong) UILabel *label;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZProgressView</span><br><span class=\"line\"></span><br><span class=\"line\">-(UILabel *)label&#123;</span><br><span class=\"line\">    if(_label &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">       _label &#x3D; [[UILabelalloc] initWithFrame:self.bounds];</span><br><span class=\"line\">\t\t_label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">\t\t[self addSubview:_label];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithFrame:frame];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setProgress:(CGFloat)progress&#123;</span><br><span class=\"line\">    _progress &#x3D; progress;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.label.text &#x3D; [NSStringstringWithFormat:@&quot;%0.2f%%&quot;,progress* 100];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)drawRect:(CGRect)rect&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class=\"line\">    CGFloat w &#x3D; rect.size.width * 0.5;</span><br><span class=\"line\">    CGFloat h &#x3D; rect.size.height * 0.5;</span><br><span class=\"line\">    CGPoint centerPoint &#x3D; CGPointMake(w,h);</span><br><span class=\"line\">    CGFloat radius &#x3D; w &gt; h ? h : w;</span><br><span class=\"line\"></span><br><span class=\"line\">    radius-&#x3D; 5;</span><br><span class=\"line\">    CGFloat startAngle &#x3D; - M_PI_2;</span><br><span class=\"line\">    CGFloat endAngle &#x3D; self.progress * 2 * M_PI + startAngle;</span><br><span class=\"line\"></span><br><span class=\"line\">    [path addArcWithCenter:centerPoint radius:radius startAngle:startAngleendAngle:endAngle clockwise:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.lineWidth &#x3D; 10.0;</span><br><span class=\"line\">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[UIColor yellowColor] set];</span><br><span class=\"line\"></span><br><span class=\"line\">    [path stroke];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"IOS旋转菜单","date":"2020-04-03T09:27:18.000Z","_content":"\n我们先看一下，最终要实现的情况：如图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg)\n\n再看一下，项目代码的结构图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg)\n\n实现思路：\n\n- 1，自定义view类和xib文件，将view类和xib文件关联上。\n\n- 2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。\n\n- 3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。\n\n- 4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)\n\n- 5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。\n\n- 6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。\n\n- 7，点击按钮的时候，通知代理，按钮被人点击了。\n\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg)\n\n\n第一部分：视图控制器的代码：\n\n```\n#import \"CZViewController.h\"\n\n#import \"CZBottomView.h\"\n\n@interface CZViewController () <CZBottomViewDelegate>\n\n@property (weak, nonatomic) IBOutletUIView *bottomView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad\n\n{\n\n    [superviewDidLoad];\n\n    \n\n    CZBottomView *btmView = [CZBottomViewbottomView];\n\n    btmView.delegate =self;\n\n    [self.bottomViewaddSubview:btmView];\n\n}\n\n\n\n/**\n\n *  CZBottomView的代理方法\n\n *  @param bottomButton 当前被点击的按钮\n\n *  @param index        被点击按钮的索引\n\n */\n\n\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index{\n\n   NSLog(@\"点击了第%d个按钮\",index);\n\n}\n```\n\n第二部分：\n\n1，CZBottomView的头文件：\n\n```\n#import <UIKit/UIKit.h>\n\n@class CZBottomButton,CZBottomView;\n\n@protocol CZBottomViewDelegate <NSObject>\n\n@optional\n\n//按钮的点击事件\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;\n\n@end\n\n@interface CZBottomView :UIView\n\n//代理\n\n@property(nonatomic,weak)id<CZBottomViewDelegate> delegate;\n\n\n\n//快速创建\n\n+(instancetype)bottomView;\n\n@end\n```\n\n2，CZBottomView的实现文件：\n\n```\n#import \"CZBottomView.h\"\n\n#import \"CZBottomButton.h\"\n\n\n\n//动画持续时间\n\n#define AniDuration 3.0\n\n@interface CZBottomView ()\n\n\n\n//最左边的菜单按钮\n\n@property (weak, nonatomic) IBOutletUIButton *menuBtn;\n\n//所有按钮的集合\n\n@property(nonatomic,strong)NSMutableArray *btns;\n\n\n\n//最左边菜单按钮的点击事件\n\n- (IBAction)menuBtnClick;\n\n\n\n@end\n\n\n\n@implementation CZBottomView\n\n\n\n-(NSMutableArray *)btns{\n\n   if(!_btns){\n\n       _btns = [NSMutableArrayarray];\n\n    }\n\n   return _btns;\n\n}\n\n/**\n\n *  快速创建\n\n */\n\n+(instancetype)bottomView{\n\n   return [[[NSBundlemainBundle] loadNibNamed:@\"CZBottomView\"owner:niloptions:nil]lastObject];\n\n    \n\n}\n\n\n\n- (id)initWithFrame:(CGRect)frame\n\n{\n\n   self = [superinitWithFrame:frame];\n\n   if (self) {\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n\n\n-(id)initWithCoder:(NSCoder *)aDecoder{\n\n   if(self = [superinitWithCoder:aDecoder]){\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n/**\n\n *  初始化数据\n\n */\n\n-(void)setUp{\n\n    //添加3个按钮\n\n    [selfaddBtnWithImgName:@\"menu_btn_call\"andTag:0];\n\n    [selfaddBtnWithImgName:@\"menu_btn_cheyou\"andTag:1];\n\n    [selfaddBtnWithImgName:@\"menu_btn_tixing\"andTag:2];\n\n}\n\n/**\n\n *  添加按钮\n\n *\n\n *  @param imgName 按钮图片的名称\n\n *  @param tag     tag\n\n */\n\n-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag{\n\n    //初始化按钮\n\n    CZBottomButton *btn = [CZBottomButtonbuttonWithType:UIButtonTypeCustom];\n\n    \n\n    //设置按钮的图片\n\n    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];\n\n    btn.tag = tag;\n\n    btn.bounds =CGRectMake(0,0, 44, 44);\n\n    \n\n    //添加监听\n\n    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];\n\n    [selfaddSubview:btn];\n\n    [self.btnsaddObject:btn];\n\n}\n\n/**\n\n *  按钮的点击事件\n\n */\n\n-(void)btnClick:(CZBottomButton *)btn{\n\n    //先判断代理是否实现了此方法\n\n   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)]){\n\n        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];\n\n    }\n\n}\n\n\n\n-(void)layoutSubviews{\n\n    [superlayoutSubviews];\n\n    //设置按钮的frame\n\n    for (CZBottomButton *btnin self.btns) {\n\n        //如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置\n\n       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero)){\n\n            btn.center = btn.currentPoint;\n\n        }else{\n\n            btn.center =self.menuBtn.center;\n\n        }\n\n        \n\n    }\n\n    //将菜单按钮放到最上边\n\n    [selfbringSubviewToFront:self.menuBtn];\n\n}\n\n\n\n\n\n- (IBAction)menuBtnClick {\n\n    \n\n    //主菜单按钮也要旋转\n\n    BOOL isOpen =CGAffineTransformIsIdentity(self.menuBtn.transform);\n\n    [UIViewanimateWithDuration:AniDurationanimations:^{\n\n       if(isOpen){\n\n           //打开\n\n            self.menuBtn.transform = CGAffineTransformMakeRotation(M_PI_4);\n\n        }else{\n\n           //关闭\n\n            self.menuBtn.transform =CGAffineTransformIdentity;\n\n        }\n\n    }];\n\n\n\n    [selfopenBtn:isOpen];\n\n}\n\n/**\n\n *  是否打开按钮\n\n */\n\n-(void)openBtn:(BOOL)isOpen{\n\n    //按钮间隔的位置\n\n   CGFloat padding = 80;\n\n    \n\n    //菜单按钮的位置\n\n   CGPoint menuCenter = self.menuBtn.center;\n\n    //平移，旋转\n\n   for (int i=0; i<self.btns.count; i++) {\n\n       CZBottomButton *btn = self.btns[i];\n\n        \n\n        //x轴需要移动的距离\n\n       CGFloat move = (i+1) * padding;\n\n        \n\n       //按钮中心点\n\n       CGPoint btnCenter = btn.center;\n\n        btnCenter.x += move;\n\n        \n\n       //平移动画\n\n        CAKeyframeAnimation *keyTranslationAni = [CAKeyframeAnimationanimation];\n\n        keyTranslationAni.keyPath =@\"position\";\n\n        \n\n       //最开始的位置\n\n       NSValue *value1 = [NSValuevalueWithCGPoint:self.menuBtn.center];\n\n        \n\n        //第一阶段末尾位置\n\n       NSValue *value2 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];\n\n        \n\n        //第二阶段末尾位置\n\n       NSValue *value3 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];\n\n        \n\n        //第三阶段末尾位置\n\n       NSValue *value4 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];\n\n        \n\n        //如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1\n\n       if(isOpen){\n\n            keyTranslationAni.values =@[value1,value2,value3,value4];\n\n        }else{\n\n            keyTranslationAni.values =@[value4,value3,value2,value1];\n\n        }\n\n        \n\n        \n\n       //旋转动画\n\n        CAKeyframeAnimation *rotationAni = [CAKeyframeAnimationanimation];\n\n        rotationAni.keyPath =@\"transform.rotation\";\n\n        \n\n        //如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI\n\n       if(isOpen){\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];\n\n        }else{\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];\n\n        }\n\n        \n\n       //组动画\n\n        CAAnimationGroup *group = [CAAnimationGroupanimation];\n\n        \n\n       //动画持续时间\n\n        group.duration =AniDuration;\n\n        group.animations =@[keyTranslationAni,rotationAni];\n\n        \n\n        //动画结束之后，不要回到原先的位置\n\n        group.removedOnCompletion =NO;\n\n        group.fillMode =kCAFillModeForwards;\n\n        [btn.layeraddAnimation:group forKey:nil];\n\n        \n\n        //设置按钮的当前位置\n\n       if(isOpen){\n\n            btn.currentPoint = btnCenter;\n\n        }else{\n\n            btn.currentPoint =self.menuBtn.center;\n\n        }\n\n                \n\n    }\n\n}\n\n@end\n```\n\n第三部分：\n\n1，CZBottomButton的头文件\n\n\n```\n#import <UIKit/UIKit.h>\n\n@interface CZBottomButton :UIButton\n\n@property(nonatomic,assign)CGPoint currentPoint;\n\n@end\n\n```\n\n2，CZBottomButton的实现文件\n\n```\n#import \"CZBottomButton.h\"\n@implementation CZBottomButton\n@end\n```\n","source":"_posts/oc/Ani/oc-Ani-rotatingMenu.md","raw":"---\ntitle: IOS旋转菜单\ndate: 2020-04-03 17:27:18\ncategories: \n- OC\n- OC动画\ntags: OC动画\n---\n\n我们先看一下，最终要实现的情况：如图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg)\n\n再看一下，项目代码的结构图：\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg)\n\n实现思路：\n\n- 1，自定义view类和xib文件，将view类和xib文件关联上。\n\n- 2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。\n\n- 3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。\n\n- 4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)\n\n- 5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。\n\n- 6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。\n\n- 7，点击按钮的时候，通知代理，按钮被人点击了。\n\n\n![](oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg)\n\n\n第一部分：视图控制器的代码：\n\n```\n#import \"CZViewController.h\"\n\n#import \"CZBottomView.h\"\n\n@interface CZViewController () <CZBottomViewDelegate>\n\n@property (weak, nonatomic) IBOutletUIView *bottomView;\n\n@end\n\n@implementation CZViewController\n\n- (void)viewDidLoad\n\n{\n\n    [superviewDidLoad];\n\n    \n\n    CZBottomView *btmView = [CZBottomViewbottomView];\n\n    btmView.delegate =self;\n\n    [self.bottomViewaddSubview:btmView];\n\n}\n\n\n\n/**\n\n *  CZBottomView的代理方法\n\n *  @param bottomButton 当前被点击的按钮\n\n *  @param index        被点击按钮的索引\n\n */\n\n\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index{\n\n   NSLog(@\"点击了第%d个按钮\",index);\n\n}\n```\n\n第二部分：\n\n1，CZBottomView的头文件：\n\n```\n#import <UIKit/UIKit.h>\n\n@class CZBottomButton,CZBottomView;\n\n@protocol CZBottomViewDelegate <NSObject>\n\n@optional\n\n//按钮的点击事件\n\n-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;\n\n@end\n\n@interface CZBottomView :UIView\n\n//代理\n\n@property(nonatomic,weak)id<CZBottomViewDelegate> delegate;\n\n\n\n//快速创建\n\n+(instancetype)bottomView;\n\n@end\n```\n\n2，CZBottomView的实现文件：\n\n```\n#import \"CZBottomView.h\"\n\n#import \"CZBottomButton.h\"\n\n\n\n//动画持续时间\n\n#define AniDuration 3.0\n\n@interface CZBottomView ()\n\n\n\n//最左边的菜单按钮\n\n@property (weak, nonatomic) IBOutletUIButton *menuBtn;\n\n//所有按钮的集合\n\n@property(nonatomic,strong)NSMutableArray *btns;\n\n\n\n//最左边菜单按钮的点击事件\n\n- (IBAction)menuBtnClick;\n\n\n\n@end\n\n\n\n@implementation CZBottomView\n\n\n\n-(NSMutableArray *)btns{\n\n   if(!_btns){\n\n       _btns = [NSMutableArrayarray];\n\n    }\n\n   return _btns;\n\n}\n\n/**\n\n *  快速创建\n\n */\n\n+(instancetype)bottomView{\n\n   return [[[NSBundlemainBundle] loadNibNamed:@\"CZBottomView\"owner:niloptions:nil]lastObject];\n\n    \n\n}\n\n\n\n- (id)initWithFrame:(CGRect)frame\n\n{\n\n   self = [superinitWithFrame:frame];\n\n   if (self) {\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n\n\n-(id)initWithCoder:(NSCoder *)aDecoder{\n\n   if(self = [superinitWithCoder:aDecoder]){\n\n       // 初始化数据\n\n        [selfsetUp];\n\n    }\n\n    return self;\n\n}\n\n/**\n\n *  初始化数据\n\n */\n\n-(void)setUp{\n\n    //添加3个按钮\n\n    [selfaddBtnWithImgName:@\"menu_btn_call\"andTag:0];\n\n    [selfaddBtnWithImgName:@\"menu_btn_cheyou\"andTag:1];\n\n    [selfaddBtnWithImgName:@\"menu_btn_tixing\"andTag:2];\n\n}\n\n/**\n\n *  添加按钮\n\n *\n\n *  @param imgName 按钮图片的名称\n\n *  @param tag     tag\n\n */\n\n-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag{\n\n    //初始化按钮\n\n    CZBottomButton *btn = [CZBottomButtonbuttonWithType:UIButtonTypeCustom];\n\n    \n\n    //设置按钮的图片\n\n    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];\n\n    btn.tag = tag;\n\n    btn.bounds =CGRectMake(0,0, 44, 44);\n\n    \n\n    //添加监听\n\n    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];\n\n    [selfaddSubview:btn];\n\n    [self.btnsaddObject:btn];\n\n}\n\n/**\n\n *  按钮的点击事件\n\n */\n\n-(void)btnClick:(CZBottomButton *)btn{\n\n    //先判断代理是否实现了此方法\n\n   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)]){\n\n        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];\n\n    }\n\n}\n\n\n\n-(void)layoutSubviews{\n\n    [superlayoutSubviews];\n\n    //设置按钮的frame\n\n    for (CZBottomButton *btnin self.btns) {\n\n        //如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置\n\n       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero)){\n\n            btn.center = btn.currentPoint;\n\n        }else{\n\n            btn.center =self.menuBtn.center;\n\n        }\n\n        \n\n    }\n\n    //将菜单按钮放到最上边\n\n    [selfbringSubviewToFront:self.menuBtn];\n\n}\n\n\n\n\n\n- (IBAction)menuBtnClick {\n\n    \n\n    //主菜单按钮也要旋转\n\n    BOOL isOpen =CGAffineTransformIsIdentity(self.menuBtn.transform);\n\n    [UIViewanimateWithDuration:AniDurationanimations:^{\n\n       if(isOpen){\n\n           //打开\n\n            self.menuBtn.transform = CGAffineTransformMakeRotation(M_PI_4);\n\n        }else{\n\n           //关闭\n\n            self.menuBtn.transform =CGAffineTransformIdentity;\n\n        }\n\n    }];\n\n\n\n    [selfopenBtn:isOpen];\n\n}\n\n/**\n\n *  是否打开按钮\n\n */\n\n-(void)openBtn:(BOOL)isOpen{\n\n    //按钮间隔的位置\n\n   CGFloat padding = 80;\n\n    \n\n    //菜单按钮的位置\n\n   CGPoint menuCenter = self.menuBtn.center;\n\n    //平移，旋转\n\n   for (int i=0; i<self.btns.count; i++) {\n\n       CZBottomButton *btn = self.btns[i];\n\n        \n\n        //x轴需要移动的距离\n\n       CGFloat move = (i+1) * padding;\n\n        \n\n       //按钮中心点\n\n       CGPoint btnCenter = btn.center;\n\n        btnCenter.x += move;\n\n        \n\n       //平移动画\n\n        CAKeyframeAnimation *keyTranslationAni = [CAKeyframeAnimationanimation];\n\n        keyTranslationAni.keyPath =@\"position\";\n\n        \n\n       //最开始的位置\n\n       NSValue *value1 = [NSValuevalueWithCGPoint:self.menuBtn.center];\n\n        \n\n        //第一阶段末尾位置\n\n       NSValue *value2 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];\n\n        \n\n        //第二阶段末尾位置\n\n       NSValue *value3 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];\n\n        \n\n        //第三阶段末尾位置\n\n       NSValue *value4 = [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];\n\n        \n\n        //如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1\n\n       if(isOpen){\n\n            keyTranslationAni.values =@[value1,value2,value3,value4];\n\n        }else{\n\n            keyTranslationAni.values =@[value4,value3,value2,value1];\n\n        }\n\n        \n\n        \n\n       //旋转动画\n\n        CAKeyframeAnimation *rotationAni = [CAKeyframeAnimationanimation];\n\n        rotationAni.keyPath =@\"transform.rotation\";\n\n        \n\n        //如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI\n\n       if(isOpen){\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];\n\n        }else{\n\n            rotationAni.values =@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];\n\n        }\n\n        \n\n       //组动画\n\n        CAAnimationGroup *group = [CAAnimationGroupanimation];\n\n        \n\n       //动画持续时间\n\n        group.duration =AniDuration;\n\n        group.animations =@[keyTranslationAni,rotationAni];\n\n        \n\n        //动画结束之后，不要回到原先的位置\n\n        group.removedOnCompletion =NO;\n\n        group.fillMode =kCAFillModeForwards;\n\n        [btn.layeraddAnimation:group forKey:nil];\n\n        \n\n        //设置按钮的当前位置\n\n       if(isOpen){\n\n            btn.currentPoint = btnCenter;\n\n        }else{\n\n            btn.currentPoint =self.menuBtn.center;\n\n        }\n\n                \n\n    }\n\n}\n\n@end\n```\n\n第三部分：\n\n1，CZBottomButton的头文件\n\n\n```\n#import <UIKit/UIKit.h>\n\n@interface CZBottomButton :UIButton\n\n@property(nonatomic,assign)CGPoint currentPoint;\n\n@end\n\n```\n\n2，CZBottomButton的实现文件\n\n```\n#import \"CZBottomButton.h\"\n@implementation CZBottomButton\n@end\n```\n","slug":"oc/Ani/oc-Ani-rotatingMenu","published":1,"updated":"2020-09-01T12:57:15.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengv003bu3s6gc8g7o70","content":"<p>我们先看一下，最终要实现的情况：如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg\" alt></p>\n<p>再看一下，项目代码的结构图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg\" alt></p>\n<p>实现思路：</p>\n<ul>\n<li><p>1，自定义view类和xib文件，将view类和xib文件关联上。</p>\n</li>\n<li><p>2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。</p>\n</li>\n<li><p>3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。</p>\n</li>\n<li><p>4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)</p>\n</li>\n<li><p>5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。</p>\n</li>\n<li><p>6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。</p>\n</li>\n<li><p>7，点击按钮的时候，通知代理，按钮被人点击了。</p>\n</li>\n</ul>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg\" alt></p>\n<p>第一部分：视图控制器的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController () &lt;CZBottomViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIView *bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superviewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomView *btmView &#x3D; [CZBottomViewbottomView];</span><br><span class=\"line\"></span><br><span class=\"line\">    btmView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.bottomViewaddSubview:btmView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  CZBottomView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param bottomButton 当前被点击的按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param index        被点击按钮的索引</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   NSLog(@&quot;点击了第%d个按钮&quot;,index);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：</p>\n<p>1，CZBottomView的头文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class CZBottomButton,CZBottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol CZBottomViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView :UIView</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak)id&lt;CZBottomViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;快速创建</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomView的实现文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">#define AniDuration 3.0</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView ()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边的菜单按钮</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIButton *menuBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;所有按钮的集合</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong)NSMutableArray *btns;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边菜单按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZBottomView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)btns&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(!_btns)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       _btns &#x3D; [NSMutableArrayarray];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   return _btns;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  快速创建</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return [[[NSBundlemainBundle] loadNibNamed:@&quot;CZBottomView&quot;owner:niloptions:nil]lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   self &#x3D; [superinitWithFrame:frame];</span><br><span class=\"line\"></span><br><span class=\"line\">   if (self) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithCoder:(NSCoder *)aDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(self &#x3D; [superinitWithCoder:aDecoder])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setUp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加3个按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_call&quot;andTag:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_cheyou&quot;andTag:1];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_tixing&quot;andTag:2];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  添加按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param imgName 按钮图片的名称</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param tag     tag</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomButton *btn &#x3D; [CZBottomButtonbuttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的图片</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.tag &#x3D; tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.bounds &#x3D;CGRectMake(0,0, 44, 44);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加监听</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddSubview:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.btnsaddObject:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)btnClick:(CZBottomButton *)btn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;先判断代理是否实现了此方法</span><br><span class=\"line\"></span><br><span class=\"line\">   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)layoutSubviews&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superlayoutSubviews];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的frame</span><br><span class=\"line\"></span><br><span class=\"line\">    for (CZBottomButton *btnin self.btns) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D; btn.currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;将菜单按钮放到最上边</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfbringSubviewToFront:self.menuBtn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;主菜单按钮也要旋转</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL isOpen &#x3D;CGAffineTransformIsIdentity(self.menuBtn.transform);</span><br><span class=\"line\"></span><br><span class=\"line\">    [UIViewanimateWithDuration:AniDurationanimations:^&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;打开</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D; CGAffineTransformMakeRotation(M_PI_4);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;关闭</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D;CGAffineTransformIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [selfopenBtn:isOpen];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  是否打开按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)openBtn:(BOOL)isOpen&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;按钮间隔的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGFloat padding &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGPoint menuCenter &#x3D; self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;平移，旋转</span><br><span class=\"line\"></span><br><span class=\"line\">   for (int i&#x3D;0; i&lt;self.btns.count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       CZBottomButton *btn &#x3D; self.btns[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;x轴需要移动的距离</span><br><span class=\"line\"></span><br><span class=\"line\">       CGFloat move &#x3D; (i+1) * padding;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;按钮中心点</span><br><span class=\"line\"></span><br><span class=\"line\">       CGPoint btnCenter &#x3D; btn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        btnCenter.x +&#x3D; move;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;平移动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *keyTranslationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        keyTranslationAni.keyPath &#x3D;@&quot;position&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;最开始的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value1 &#x3D; [NSValuevalueWithCGPoint:self.menuBtn.center];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第一阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value2 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第二阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value3 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第三阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value4 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value1,value2,value3,value4];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value4,value3,value2,value1];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;旋转动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *rotationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        rotationAni.keyPath &#x3D;@&quot;transform.rotation&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;组动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAAnimationGroup *group &#x3D; [CAAnimationGroupanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">        group.duration &#x3D;AniDuration;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.animations &#x3D;@[keyTranslationAni,rotationAni];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;动画结束之后，不要回到原先的位置</span><br><span class=\"line\"></span><br><span class=\"line\">        group.removedOnCompletion &#x3D;NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.fillMode &#x3D;kCAFillModeForwards;</span><br><span class=\"line\"></span><br><span class=\"line\">        [btn.layeraddAnimation:group forKey:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;设置按钮的当前位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D; btnCenter;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>第三部分：</p>\n<p>1，CZBottomButton的头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomButton :UIButton</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign)CGPoint currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomButton的实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\">@implementation CZBottomButton</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我们先看一下，最终要实现的情况：如图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg\" alt></p>\n<p>再看一下，项目代码的结构图：</p>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg\" alt></p>\n<p>实现思路：</p>\n<ul>\n<li><p>1，自定义view类和xib文件，将view类和xib文件关联上。</p>\n</li>\n<li><p>2，在view的初始化方法中，添加自定义按钮。在添加按钮的时候，将按钮的图片,tag,bounds,以及监听添加上。并且将按钮添加到按钮集合中，下面要用到集合做循环遍历用。</p>\n</li>\n<li><p>3，在layoutSubviews方法中，设置按钮的位置，如果按钮不在零点，那么就在当前的位置。并且把菜单按钮放到最上边。</p>\n</li>\n<li><p>4，当菜单按钮别点击时，先判断是需要打开菜单，还是关闭菜单。(通过判断按钮是否旋转过就可以判断)</p>\n</li>\n<li><p>5，通过组合动画，一个是平移，一个是旋转。平移的时候，总共分为三阶段，每一阶段都有不同的平移位置，旋转角度。</p>\n</li>\n<li><p>6，在动画执行之后，一定不要让动画再回到原先的位置。因为平移和旋转都是在图层上做的操作，不是真实的，按钮的真实位置还在动画之前的位置呢，所以，要设置一下按钮的真实位置，这样，按钮就可以在点击的时候，就会有反应了。</p>\n</li>\n<li><p>7，点击按钮的时候，通知代理，按钮被人点击了。</p>\n</li>\n</ul>\n<p><img src=\"/2020/04/03/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg\" alt></p>\n<p>第一部分：视图控制器的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZViewController () &lt;CZBottomViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIView *bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superviewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomView *btmView &#x3D; [CZBottomViewbottomView];</span><br><span class=\"line\"></span><br><span class=\"line\">    btmView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.bottomViewaddSubview:btmView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  CZBottomView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param bottomButton 当前被点击的按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param index        被点击按钮的索引</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   NSLog(@&quot;点击了第%d个按钮&quot;,index);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：</p>\n<p>1，CZBottomView的头文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class CZBottomButton,CZBottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol CZBottomViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)bottomView:(CZBottomView *)bottomView didBtnClick:(CZBottomButton *)bottomButton index:(NSInteger)index;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView :UIView</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;代理</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak)id&lt;CZBottomViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;快速创建</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomView的实现文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">#define AniDuration 3.0</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomView ()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边的菜单按钮</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutletUIButton *menuBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;所有按钮的集合</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong)NSMutableArray *btns;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;最左边菜单按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CZBottomView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)btns&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(!_btns)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       _btns &#x3D; [NSMutableArrayarray];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   return _btns;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  快速创建</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)bottomView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return [[[NSBundlemainBundle] loadNibNamed:@&quot;CZBottomView&quot;owner:niloptions:nil]lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithFrame:(CGRect)frame</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   self &#x3D; [superinitWithFrame:frame];</span><br><span class=\"line\"></span><br><span class=\"line\">   if (self) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithCoder:(NSCoder *)aDecoder&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(self &#x3D; [superinitWithCoder:aDecoder])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F; 初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\">        [selfsetUp];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  初始化数据</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setUp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加3个按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_call&quot;andTag:0];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_cheyou&quot;andTag:1];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddBtnWithImgName:@&quot;menu_btn_tixing&quot;andTag:2];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  添加按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param imgName 按钮图片的名称</span><br><span class=\"line\"></span><br><span class=\"line\"> *  @param tag     tag</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addBtnWithImgName:(NSString *)imgName andTag:(NSInteger)tag&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;初始化按钮</span><br><span class=\"line\"></span><br><span class=\"line\">    CZBottomButton *btn &#x3D; [CZBottomButtonbuttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的图片</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn setBackgroundImage:[UIImageimageNamed:imgName] forState:UIControlStateNormal];</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.tag &#x3D; tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.bounds &#x3D;CGRectMake(0,0, 44, 44);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;添加监听</span><br><span class=\"line\"></span><br><span class=\"line\">    [btn addTarget:selfaction:@selector(btnClick:)forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfaddSubview:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.btnsaddObject:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  按钮的点击事件</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)btnClick:(CZBottomButton *)btn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;先判断代理是否实现了此方法</span><br><span class=\"line\"></span><br><span class=\"line\">   if([self.delegaterespondsToSelector:@selector(bottomView:didBtnClick:index:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.delegatebottomView:selfdidBtnClick:btn index:btn.tag];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)layoutSubviews&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [superlayoutSubviews];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置按钮的frame</span><br><span class=\"line\"></span><br><span class=\"line\">    for (CZBottomButton *btnin self.btns) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果按钮的位置不是0，那么将按钮置于它当前的位置，如果是0，那么放置在菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(!CGPointEqualToPoint(btn.currentPoint,CGPointZero))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D; btn.currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.center &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;将菜单按钮放到最上边</span><br><span class=\"line\"></span><br><span class=\"line\">    [selfbringSubviewToFront:self.menuBtn];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)menuBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;主菜单按钮也要旋转</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL isOpen &#x3D;CGAffineTransformIsIdentity(self.menuBtn.transform);</span><br><span class=\"line\"></span><br><span class=\"line\">    [UIViewanimateWithDuration:AniDurationanimations:^&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;打开</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D; CGAffineTransformMakeRotation(M_PI_4);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#x2F;&#x2F;关闭</span><br><span class=\"line\"></span><br><span class=\"line\">            self.menuBtn.transform &#x3D;CGAffineTransformIdentity;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [selfopenBtn:isOpen];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> *  是否打开按钮</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)openBtn:(BOOL)isOpen&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;按钮间隔的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGFloat padding &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;菜单按钮的位置</span><br><span class=\"line\"></span><br><span class=\"line\">   CGPoint menuCenter &#x3D; self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;平移，旋转</span><br><span class=\"line\"></span><br><span class=\"line\">   for (int i&#x3D;0; i&lt;self.btns.count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       CZBottomButton *btn &#x3D; self.btns[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;x轴需要移动的距离</span><br><span class=\"line\"></span><br><span class=\"line\">       CGFloat move &#x3D; (i+1) * padding;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;按钮中心点</span><br><span class=\"line\"></span><br><span class=\"line\">       CGPoint btnCenter &#x3D; btn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        btnCenter.x +&#x3D; move;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;平移动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *keyTranslationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        keyTranslationAni.keyPath &#x3D;@&quot;position&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;最开始的位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value1 &#x3D; [NSValuevalueWithCGPoint:self.menuBtn.center];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第一阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value2 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *0.3, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第二阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value3 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move *1.1, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;第三阶段末尾位置</span><br><span class=\"line\"></span><br><span class=\"line\">       NSValue *value4 &#x3D; [NSValuevalueWithCGPoint:CGPointMake(menuCenter.x + move, menuCenter.y)];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，那么顺序是1,2,3,4,如果是要关闭菜单，那么顺序是4，3，2，1</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value1,value2,value3,value4];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            keyTranslationAni.values &#x3D;@[value4,value3,value2,value1];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;旋转动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAKeyframeAnimation *rotationAni &#x3D; [CAKeyframeAnimationanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        rotationAni.keyPath &#x3D;@&quot;transform.rotation&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果是打开，显示0,2PI,4PI,2PI  ,如果是要关闭菜单，那么顺序是0,2PI,0,-2PI</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(M_PI *4),@(M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            rotationAni.values &#x3D;@[@(0),@(M_PI *2),@(0),@(-M_PI *2)];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;组动画</span><br><span class=\"line\"></span><br><span class=\"line\">        CAAnimationGroup *group &#x3D; [CAAnimationGroupanimation];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;动画持续时间</span><br><span class=\"line\"></span><br><span class=\"line\">        group.duration &#x3D;AniDuration;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.animations &#x3D;@[keyTranslationAni,rotationAni];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;动画结束之后，不要回到原先的位置</span><br><span class=\"line\"></span><br><span class=\"line\">        group.removedOnCompletion &#x3D;NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        group.fillMode &#x3D;kCAFillModeForwards;</span><br><span class=\"line\"></span><br><span class=\"line\">        [btn.layeraddAnimation:group forKey:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;设置按钮的当前位置</span><br><span class=\"line\"></span><br><span class=\"line\">       if(isOpen)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D; btnCenter;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            btn.currentPoint &#x3D;self.menuBtn.center;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>第三部分：</p>\n<p>1，CZBottomButton的头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface CZBottomButton :UIButton</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,assign)CGPoint currentPoint;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，CZBottomButton的实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;CZBottomButton.h&quot;</span><br><span class=\"line\">@implementation CZBottomButton</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n"},{"title":"Foundation中的NSMutableString的创建","date":"2020-04-03T06:41:37.000Z","_content":"\n\nNSMutableString是可变字符串，相当于java中的StringBuffer。\n\nNSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。\n\n它的方法的简单介绍：\n\nsetString  : 设置字符串的内容\n\nappendString : 拼接一个字符串\n\nappendFormat : 拼接带有格式符的字符串\n\nreplaceCharactersInRange : 替换字符串\n\ninsertString ： 插入字符串\n\ndeleteCharactersInRange ：删除字符串\n\n如下是代码示例：\n\n\n``` \n    //预先分配10个数字的存储空间\n\n    NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n    //设置字符串的内容\n\n    [str setString:@\"1234\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendString:@\"567\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendFormat:@\"age is %i and height is %.2f\",27,1.7f];\n\n    \n\n    //替换字符串\n\n    NSRange range=[str rangeOfString:@\"height\"];\n\n   // NSRange range=NSMakeRange(7, 3);\n\n    [str replaceCharactersInRange:range withString:@\"no\"];\n\n    \n\n    //插入字符串\n\n    [str insertString:@\"abc\" atIndex:2];\n\n    \n\n    //删除字符串\n\n    range=[str rangeOfString:@\"age\"];\n\n    [str deleteCharactersInRange:range];\n\n    \n\n    NSLog(@\"%@\",str);\n\n        \n\n    //释放对象\n\n    [str release];\n   \n``` ","source":"_posts/oc/Foundation/oc-foundation-mulString.md","raw":"---\ntitle: Foundation中的NSMutableString的创建\ndate: 2020-04-03 14:41:37\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n\nNSMutableString是可变字符串，相当于java中的StringBuffer。\n\nNSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。\n\n它的方法的简单介绍：\n\nsetString  : 设置字符串的内容\n\nappendString : 拼接一个字符串\n\nappendFormat : 拼接带有格式符的字符串\n\nreplaceCharactersInRange : 替换字符串\n\ninsertString ： 插入字符串\n\ndeleteCharactersInRange ：删除字符串\n\n如下是代码示例：\n\n\n``` \n    //预先分配10个数字的存储空间\n\n    NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n    //设置字符串的内容\n\n    [str setString:@\"1234\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendString:@\"567\"];\n\n    \n\n    //拼接一个字符串\n\n    [str appendFormat:@\"age is %i and height is %.2f\",27,1.7f];\n\n    \n\n    //替换字符串\n\n    NSRange range=[str rangeOfString:@\"height\"];\n\n   // NSRange range=NSMakeRange(7, 3);\n\n    [str replaceCharactersInRange:range withString:@\"no\"];\n\n    \n\n    //插入字符串\n\n    [str insertString:@\"abc\" atIndex:2];\n\n    \n\n    //删除字符串\n\n    range=[str rangeOfString:@\"age\"];\n\n    [str deleteCharactersInRange:range];\n\n    \n\n    NSLog(@\"%@\",str);\n\n        \n\n    //释放对象\n\n    [str release];\n   \n``` ","slug":"oc/Foundation/oc-foundation-mulString","published":1,"updated":"2020-09-01T12:57:34.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengw003eu3s69x01gajx","content":"<p>NSMutableString是可变字符串，相当于java中的StringBuffer。</p>\n<p>NSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。</p>\n<p>它的方法的简单介绍：</p>\n<p>setString  : 设置字符串的内容</p>\n<p>appendString : 拼接一个字符串</p>\n<p>appendFormat : 拼接带有格式符的字符串</p>\n<p>replaceCharactersInRange : 替换字符串</p>\n<p>insertString ： 插入字符串</p>\n<p>deleteCharactersInRange ：删除字符串</p>\n<p>如下是代码示例：</p>\n<pre><code> //预先分配10个数字的存储空间\n\n NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n //设置字符串的内容\n\n [str setString:@&quot;1234&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendString:@&quot;567&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendFormat:@&quot;age is %i and height is %.2f&quot;,27,1.7f];\n\n\n\n //替换字符串\n\n NSRange range=[str rangeOfString:@&quot;height&quot;];\n\n// NSRange range=NSMakeRange(7, 3);\n\n [str replaceCharactersInRange:range withString:@&quot;no&quot;];\n\n\n\n //插入字符串\n\n [str insertString:@&quot;abc&quot; atIndex:2];\n\n\n\n //删除字符串\n\n range=[str rangeOfString:@&quot;age&quot;];\n\n [str deleteCharactersInRange:range];\n\n\n\n NSLog(@&quot;%@&quot;,str);\n\n\n\n //释放对象\n\n [str release];\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>NSMutableString是可变字符串，相当于java中的StringBuffer。</p>\n<p>NSMutableString可以预先分配存储空间，如果存储空间不够，会自动分配，这样效率会比较高。</p>\n<p>它的方法的简单介绍：</p>\n<p>setString  : 设置字符串的内容</p>\n<p>appendString : 拼接一个字符串</p>\n<p>appendFormat : 拼接带有格式符的字符串</p>\n<p>replaceCharactersInRange : 替换字符串</p>\n<p>insertString ： 插入字符串</p>\n<p>deleteCharactersInRange ：删除字符串</p>\n<p>如下是代码示例：</p>\n<pre><code> //预先分配10个数字的存储空间\n\n NSMutableString *str=[[NSMutableString alloc] initWithCapacity:10];\n\n //设置字符串的内容\n\n [str setString:@&quot;1234&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendString:@&quot;567&quot;];\n\n\n\n //拼接一个字符串\n\n [str appendFormat:@&quot;age is %i and height is %.2f&quot;,27,1.7f];\n\n\n\n //替换字符串\n\n NSRange range=[str rangeOfString:@&quot;height&quot;];\n\n// NSRange range=NSMakeRange(7, 3);\n\n [str replaceCharactersInRange:range withString:@&quot;no&quot;];\n\n\n\n //插入字符串\n\n [str insertString:@&quot;abc&quot; atIndex:2];\n\n\n\n //删除字符串\n\n range=[str rangeOfString:@&quot;age&quot;];\n\n [str deleteCharactersInRange:range];\n\n\n\n NSLog(@&quot;%@&quot;,str);\n\n\n\n //释放对象\n\n [str release];\n</code></pre>"},{"title":"Foundation中将字符串写入到磁盘文件上","date":"2020-04-03T06:43:18.000Z","_content":"\n在日常操作中，有时我们需要将字符串写入到文本文件上，例如：\n\n\n\n    NSString *str=@\"123456这是字符串ss\";\n\n    //如果文件不存在，会自动创建文件\n\n    //如果文件夹不存在，会直接报错\n\n   NSString *path=@\"/Users/mac/Desktop/abcss.txt\";\n\n    \n\n    NSError *err=nil;\n\n    //YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n    [strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&err];\n\n    \n\n    if(err){\n\n       //[err localizedDescription] 会返回主要的错误信息\n\n       NSLog(@\"写入错误：%@\",[errlocalizedDescription]);\n\n    }else{\n\n        NSLog(@\"写入成功\");\n\n    }\n\n如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。\n\n以下是atomically为YES的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-1.jpeg)\n\n以下是atomically为NO的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-2.jpeg)\n\n","source":"_posts/oc/Foundation/oc-foundation-strFile.md","raw":"---\ntitle: Foundation中将字符串写入到磁盘文件上\ndate: 2020-04-03 14:43:18\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n在日常操作中，有时我们需要将字符串写入到文本文件上，例如：\n\n\n\n    NSString *str=@\"123456这是字符串ss\";\n\n    //如果文件不存在，会自动创建文件\n\n    //如果文件夹不存在，会直接报错\n\n   NSString *path=@\"/Users/mac/Desktop/abcss.txt\";\n\n    \n\n    NSError *err=nil;\n\n    //YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n    [strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&err];\n\n    \n\n    if(err){\n\n       //[err localizedDescription] 会返回主要的错误信息\n\n       NSLog(@\"写入错误：%@\",[errlocalizedDescription]);\n\n    }else{\n\n        NSLog(@\"写入成功\");\n\n    }\n\n如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。\n\n以下是atomically为YES的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-1.jpeg)\n\n以下是atomically为NO的情况\n\n![](oc-foundation-strFile/oc-foundation-strFile-2.jpeg)\n\n","slug":"oc/Foundation/oc-foundation-strFile","published":1,"updated":"2020-09-01T12:57:38.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengw003gu3s6hulhgccz","content":"<p>在日常操作中，有时我们需要将字符串写入到文本文件上，例如：</p>\n<pre><code>NSString *str=@&quot;123456这是字符串ss&quot;;\n\n//如果文件不存在，会自动创建文件\n\n//如果文件夹不存在，会直接报错</code></pre><p>   NSString *path=@”/Users/mac/Desktop/abcss.txt”;</p>\n<pre><code>NSError *err=nil;\n\n//YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n[strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&amp;err];\n\n\n\nif(err){\n\n   //[err localizedDescription] 会返回主要的错误信息\n\n   NSLog(@&quot;写入错误：%@&quot;,[errlocalizedDescription]);\n\n}else{\n\n    NSLog(@&quot;写入成功&quot;);\n\n}</code></pre><p>如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。</p>\n<p>以下是atomically为YES的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg\" alt></p>\n<p>以下是atomically为NO的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在日常操作中，有时我们需要将字符串写入到文本文件上，例如：</p>\n<pre><code>NSString *str=@&quot;123456这是字符串ss&quot;;\n\n//如果文件不存在，会自动创建文件\n\n//如果文件夹不存在，会直接报错</code></pre><p>   NSString *path=@”/Users/mac/Desktop/abcss.txt”;</p>\n<pre><code>NSError *err=nil;\n\n//YES代表要进行原子性操作，也就是会创建一个中间的临时文件\n\n[strwriteToFile:path atomically:YESencoding:NSUTF8StringEncodingerror:&amp;err];\n\n\n\nif(err){\n\n   //[err localizedDescription] 会返回主要的错误信息\n\n   NSLog(@&quot;写入错误：%@&quot;,[errlocalizedDescription]);\n\n}else{\n\n    NSLog(@&quot;写入成功&quot;);\n\n}</code></pre><p>如上事例代码中，atomically:YES 表示：在操作文件时，是原子性操作，会先创建一个中间临时文件，等到字符都写入到文件中以后，在将临时文件的拷贝到目标文件，如果在写入的过程中，出现错误，目标文件不会创建或者不会被更改。如果是NO，则表示，直接将字符串写入到目标文件中，如果写入的过程中出现错误，目标文件不会自动更改，即写入多少，就是多少。</p>\n<p>以下是atomically为YES的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg\" alt></p>\n<p>以下是atomically为NO的情况</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg\" alt></p>\n"},{"title":"Foundation框架中字符串的创建","date":"2020-04-03T06:40:07.000Z","_content":"\n我们先看一下，c语言中的字符串是如何定义的，例如：\n\n\n\nchar *s=\"this is a string\"; //C语言中的字符串·\n\n在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种\n\n1，创建常量字符串，例如：\n\n\n\n//这种方式创建出来的字符串是不需要释放的\n\nNSString *str1=@\"this is a string\";\n\n\n\n2，创建空字符串，然后给予赋值\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\nNSString *str2=[[NSStringalloc] init];\n\nstr2=@\"this is a string\";\n\n[str2 release];\n\n\n\n3，通过字符串，创建字符串（需要手动释放）\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\n\n\nNSString *str3=[[NSStringalloc] initWithString:@\"this is a string\"];\n\n[str3 release];\n\n\n\n4，通过字符串，创建字符串（不需要手动释放）\n\n//使用对应的静态方法创建字符串，这样就不需要管理内存\n\nNSString *str4=[NSStringstringWithString:@\"this is a string\"];\n\n\n\n5，将c语言中的字符串转换成oc中的字符串（需要手动释放）\n\n\n\n//通过c语言的字符串转换成oc的字符串\n\nNSString *str5=[[NSStringalloc] initWithUTF8String:\"this is a string\"];\n\n[str5 release];\n\n\n\n6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)\n\n\n\n//使用静态方法创建字符串，不需释放内存\n\nNSString *str6=[NSStringstringWithUTF8String:\"this is a string\"];\n\n\n\n7，通过Format创建字符串（需要手动释放）\n\n//因为alloc,所以，需要手动释放内存\n\n\n\nNSString *str7=[[NSStringalloc] initWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n[str7 release];\n\n\n\n8，通过Format创建字符串（不需要手动释放）\n\n\n\n//因为使用静态方法创建字符串，所以不需要手动释放\n\nNSString *str8=[NSStringstringWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n\n\n9，我们还可以从磁盘上的文件中读取内容来创建字符串\n//文件路径\n\nNSString *path=@\"/Users/mac/Desktop/test.txt\";\n\n//这个方法已经过期，只能解析英文内容，不能解析中文内容\n\nNSString *str=[NSStringstringWithContentsOfFile:path];\n\n\n\n10，通过指定字符串编码来创建字符串\n\n\n\nNSError *err=nil;\n\n//指定字符串编码为UTF-8   NSUTF8StringEncoding\n\nNSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&err];\n\nif(err == nil){\n\n    NSLog(@\"读取文件成功,%@\",str);\n\n} else {\n\n    NSLog(@\"%@\",err);\n\n}\n\n其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式\n\nerror:&err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。\n\n\n\n11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串\n\n\n\nNSURL *url=[NSURLURLWithString:@\"file:///Users/mac/Desktop/test.txt\"];\n\nNSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str2);\n\n\n\n12，通过指定网络路径，获取网络上的内容来创建字符串。\n\n\n\nNSURL *url3=[NSURLURLWithString:@\"http://www.baidu.com\"];\n\nNSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str3);","source":"_posts/oc/Foundation/oc-foundation-string.md","raw":"---\ntitle: Foundation框架中字符串的创建\ndate: 2020-04-03 14:40:07\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n我们先看一下，c语言中的字符串是如何定义的，例如：\n\n\n\nchar *s=\"this is a string\"; //C语言中的字符串·\n\n在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种\n\n1，创建常量字符串，例如：\n\n\n\n//这种方式创建出来的字符串是不需要释放的\n\nNSString *str1=@\"this is a string\";\n\n\n\n2，创建空字符串，然后给予赋值\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\nNSString *str2=[[NSStringalloc] init];\n\nstr2=@\"this is a string\";\n\n[str2 release];\n\n\n\n3，通过字符串，创建字符串（需要手动释放）\n\n\n\n//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release\n\n\n\nNSString *str3=[[NSStringalloc] initWithString:@\"this is a string\"];\n\n[str3 release];\n\n\n\n4，通过字符串，创建字符串（不需要手动释放）\n\n//使用对应的静态方法创建字符串，这样就不需要管理内存\n\nNSString *str4=[NSStringstringWithString:@\"this is a string\"];\n\n\n\n5，将c语言中的字符串转换成oc中的字符串（需要手动释放）\n\n\n\n//通过c语言的字符串转换成oc的字符串\n\nNSString *str5=[[NSStringalloc] initWithUTF8String:\"this is a string\"];\n\n[str5 release];\n\n\n\n6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)\n\n\n\n//使用静态方法创建字符串，不需释放内存\n\nNSString *str6=[NSStringstringWithUTF8String:\"this is a string\"];\n\n\n\n7，通过Format创建字符串（需要手动释放）\n\n//因为alloc,所以，需要手动释放内存\n\n\n\nNSString *str7=[[NSStringalloc] initWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n[str7 release];\n\n\n\n8，通过Format创建字符串（不需要手动释放）\n\n\n\n//因为使用静态方法创建字符串，所以不需要手动释放\n\nNSString *str8=[NSStringstringWithFormat:@\"My age is %i and height is %.2f\",24,1.71f];\n\n\n\n9，我们还可以从磁盘上的文件中读取内容来创建字符串\n//文件路径\n\nNSString *path=@\"/Users/mac/Desktop/test.txt\";\n\n//这个方法已经过期，只能解析英文内容，不能解析中文内容\n\nNSString *str=[NSStringstringWithContentsOfFile:path];\n\n\n\n10，通过指定字符串编码来创建字符串\n\n\n\nNSError *err=nil;\n\n//指定字符串编码为UTF-8   NSUTF8StringEncoding\n\nNSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&err];\n\nif(err == nil){\n\n    NSLog(@\"读取文件成功,%@\",str);\n\n} else {\n\n    NSLog(@\"%@\",err);\n\n}\n\n其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式\n\nerror:&err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。\n\n\n\n11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串\n\n\n\nNSURL *url=[NSURLURLWithString:@\"file:///Users/mac/Desktop/test.txt\"];\n\nNSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str2);\n\n\n\n12，通过指定网络路径，获取网络上的内容来创建字符串。\n\n\n\nNSURL *url3=[NSURLURLWithString:@\"http://www.baidu.com\"];\n\nNSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];\n\nNSLog(@\"%@\",str3);","slug":"oc/Foundation/oc-foundation-string","published":1,"updated":"2020-09-01T12:57:41.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengy003lu3s608digqx6","content":"<p>我们先看一下，c语言中的字符串是如何定义的，例如：</p>\n<p>char *s=”this is a string”; //C语言中的字符串·</p>\n<p>在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种</p>\n<p>1，创建常量字符串，例如：</p>\n<p>//这种方式创建出来的字符串是不需要释放的</p>\n<p>NSString *str1=@”this is a string”;</p>\n<p>2，创建空字符串，然后给予赋值</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str2=[[NSStringalloc] init];</p>\n<p>str2=@”this is a string”;</p>\n<p>[str2 release];</p>\n<p>3，通过字符串，创建字符串（需要手动释放）</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str3=[[NSStringalloc] initWithString:@”this is a string”];</p>\n<p>[str3 release];</p>\n<p>4，通过字符串，创建字符串（不需要手动释放）</p>\n<p>//使用对应的静态方法创建字符串，这样就不需要管理内存</p>\n<p>NSString *str4=[NSStringstringWithString:@”this is a string”];</p>\n<p>5，将c语言中的字符串转换成oc中的字符串（需要手动释放）</p>\n<p>//通过c语言的字符串转换成oc的字符串</p>\n<p>NSString *str5=[[NSStringalloc] initWithUTF8String:”this is a string”];</p>\n<p>[str5 release];</p>\n<p>6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)</p>\n<p>//使用静态方法创建字符串，不需释放内存</p>\n<p>NSString *str6=[NSStringstringWithUTF8String:”this is a string”];</p>\n<p>7，通过Format创建字符串（需要手动释放）</p>\n<p>//因为alloc,所以，需要手动释放内存</p>\n<p>NSString *str7=[[NSStringalloc] initWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>[str7 release];</p>\n<p>8，通过Format创建字符串（不需要手动释放）</p>\n<p>//因为使用静态方法创建字符串，所以不需要手动释放</p>\n<p>NSString *str8=[NSStringstringWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>9，我们还可以从磁盘上的文件中读取内容来创建字符串<br>//文件路径</p>\n<p>NSString *path=@”/Users/mac/Desktop/test.txt”;</p>\n<p>//这个方法已经过期，只能解析英文内容，不能解析中文内容</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path];</p>\n<p>10，通过指定字符串编码来创建字符串</p>\n<p>NSError *err=nil;</p>\n<p>//指定字符串编码为UTF-8   NSUTF8StringEncoding</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&amp;err];</p>\n<p>if(err == nil){</p>\n<pre><code>NSLog(@&quot;读取文件成功,%@&quot;,str);</code></pre><p>} else {</p>\n<pre><code>NSLog(@&quot;%@&quot;,err);</code></pre><p>}</p>\n<p>其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式</p>\n<p>error:&amp;err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。</p>\n<p>11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串</p>\n<p>NSURL *url=[NSURLURLWithString:@”file:///Users/mac/Desktop/test.txt”];</p>\n<p>NSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str2);</p>\n<p>12，通过指定网络路径，获取网络上的内容来创建字符串。</p>\n<p>NSURL *url3=[NSURLURLWithString:@”<a href=\"http://www.baidu.com&quot;]\">http://www.baidu.com&quot;]</a>;</p>\n<p>NSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str3);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们先看一下，c语言中的字符串是如何定义的，例如：</p>\n<p>char *s=”this is a string”; //C语言中的字符串·</p>\n<p>在Foundation框架中，字符串的创建有有很多种，我们简单地介绍几种</p>\n<p>1，创建常量字符串，例如：</p>\n<p>//这种方式创建出来的字符串是不需要释放的</p>\n<p>NSString *str1=@”this is a string”;</p>\n<p>2，创建空字符串，然后给予赋值</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str2=[[NSStringalloc] init];</p>\n<p>str2=@”this is a string”;</p>\n<p>[str2 release];</p>\n<p>3，通过字符串，创建字符串（需要手动释放）</p>\n<p>//这种方式创建出来的字符串需要释放,因为手动alloc,所以需要手动release</p>\n<p>NSString *str3=[[NSStringalloc] initWithString:@”this is a string”];</p>\n<p>[str3 release];</p>\n<p>4，通过字符串，创建字符串（不需要手动释放）</p>\n<p>//使用对应的静态方法创建字符串，这样就不需要管理内存</p>\n<p>NSString *str4=[NSStringstringWithString:@”this is a string”];</p>\n<p>5，将c语言中的字符串转换成oc中的字符串（需要手动释放）</p>\n<p>//通过c语言的字符串转换成oc的字符串</p>\n<p>NSString *str5=[[NSStringalloc] initWithUTF8String:”this is a string”];</p>\n<p>[str5 release];</p>\n<p>6，将c语言中的字符串转换成oc中的字符串(不需要手动释放)</p>\n<p>//使用静态方法创建字符串，不需释放内存</p>\n<p>NSString *str6=[NSStringstringWithUTF8String:”this is a string”];</p>\n<p>7，通过Format创建字符串（需要手动释放）</p>\n<p>//因为alloc,所以，需要手动释放内存</p>\n<p>NSString *str7=[[NSStringalloc] initWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>[str7 release];</p>\n<p>8，通过Format创建字符串（不需要手动释放）</p>\n<p>//因为使用静态方法创建字符串，所以不需要手动释放</p>\n<p>NSString *str8=[NSStringstringWithFormat:@”My age is %i and height is %.2f”,24,1.71f];</p>\n<p>9，我们还可以从磁盘上的文件中读取内容来创建字符串<br>//文件路径</p>\n<p>NSString *path=@”/Users/mac/Desktop/test.txt”;</p>\n<p>//这个方法已经过期，只能解析英文内容，不能解析中文内容</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path];</p>\n<p>10，通过指定字符串编码来创建字符串</p>\n<p>NSError *err=nil;</p>\n<p>//指定字符串编码为UTF-8   NSUTF8StringEncoding</p>\n<p>NSString *str=[NSStringstringWithContentsOfFile:path encoding:NSUTF8StringEncodingerror:&amp;err];</p>\n<p>if(err == nil){</p>\n<pre><code>NSLog(@&quot;读取文件成功,%@&quot;,str);</code></pre><p>} else {</p>\n<pre><code>NSLog(@&quot;%@&quot;,err);</code></pre><p>}</p>\n<p>其中，encoding:NSUTF8StringEncoding 中的 NSUTF8StringEncoding 是指定字符串的编码格式</p>\n<p>error:&amp;err 中将NSError中的指针地址传入，这样，如果解析不正确，那么这个err中将会包含错误信息。</p>\n<p>11，可以通过指定磁盘上的URL来读取磁盘上某个文件的内容来创建字符串</p>\n<p>NSURL *url=[NSURLURLWithString:@”file:///Users/mac/Desktop/test.txt”];</p>\n<p>NSString *str2=[NSStringstringWithContentsOfURL:url encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str2);</p>\n<p>12，通过指定网络路径，获取网络上的内容来创建字符串。</p>\n<p>NSURL *url3=[NSURLURLWithString:@”<a href=\"http://www.baidu.com&quot;]\">http://www.baidu.com&quot;]</a>;</p>\n<p>NSString *str3=[NSStringstringWithContentsOfURL:url3 encoding:NSUTF8StringEncodingerror:nil];</p>\n<p>NSLog(@”%@”,str3);</p>\n"},{"title":"Foundation中结构体的简单介绍","date":"2020-04-03T06:30:33.000Z","_content":"\n一：先看一下，在c语言中定义的结构体：\n\n\n\n    //定义了Date这种结构体类型\n\n    struct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n    //定义结构体变量\n\n    struct Date d={2014,7,4};\n\n    \n\n   NSLog(@\"year is %i,month is %i,day is %i\",d.year,d.month,d.day);\n\n   d.day=6;\n\n   NSLog(@\"day is %i\",d.day);\n\n\n\n如上事例中的\n\n\n\nstruct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n定义了一个结构体类型。\n\n定义变量时：\n\nstruct Date d={2014,7,4};\n\n使用：d.year,d.month,d.day\n\n\n\n我们也可以使用typedef来定义一个结构体类型：如：\n\n\n\n    typedef struct {\n\n        int year;\n\n        int month;\n\n        int day;\n\n\n\n    } MyDate;\n\n    MyDate d={2014,7,4};\n\n    NSLog(@\"year is %i,month is %i, day is %i\",d.year,d.month,d.day);\n\n二：Foundation中的结构体\nFoundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect\n\n1,NSRange的介绍：\n我们先看一下，在NSRange.h中，NSRange的定义：\ntypedef struct _NSRange {\n\n    NSUInteger location;\n\n    NSUInteger length;\n\n} NSRange;\n\n\n这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。\n比如，在 \"I Love You\" 中，Love可以用location为2，length为4的范围来表示。\nNSRange创建方式有3种：\na,  第一种，直接给成员变量赋值\n    \n    NSRange range;\n\n    range.location=10;\n\n    range.length=4;\n\nb, 第二种，应用c语言的聚合结构赋值机制\n\n   \n\n    NSRangerange={8,3};\n\nc, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange\n\n    NSRange range=NSMakeRange(12,3);\n\n使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：\n\n通过变量名称引用：\n\n\n\nNSLog(@\"location is %zi\",range.location);//其中z代表无符号\n\n将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange\n\n\n\nNSString *str=NSStringFromRange(range);\n\n2,NSPoint的介绍：\n\n\n\n先看一下NSPoint的定义：\n   struct CGPoint {\n\n     CGFloat x;\n\n     CGFloat y;\n\n   };\n\n   typedef structCGPoint CGPoint;\n\n其中CGPoint和NSPoint是相等的\n\n这个结构体代表的时平面中的一个点（x,y）\n\n创建方式有3种：\na,直接赋值\n    NSPoint p;\n\n    p.x=8;\n\n    p.y=10;\n\nb,调用NSMakePoint函数创建\n\nNSPoint p=NSMakePoint(3, 5);\n\n\nc,调用CGPointMake函数创建\n\nNSPoint p=CGPointMake(6,8);\n使用：\nNSString *str=NSStringFromPoint(p);\n\n3,NSSize的介绍：\n\n先看一下NSSize的定义：\n   struct CGSize {\n\n      CGFloat width;\n\n      CGFloat height;\n\n   };\n\n   typedef structCGSize CGSize;\n\n其中CGSize和NSSize是相等的\n这个可以用来代表布局，或者是一个按钮的宽度和高度。\n\n创建方式有3种：\na,直接赋值\n\n    NSSize size;\n\n    size.width=100;\n\n    size.height=80;\n\n\nb,调用NSMakeSize函数来创建\nNSSizesize=NSMakeSize(50,60);\n\nc,调用CGSizeMake函数来创建\n\nNSSizesize=CGSizeMake(40,50);\n\n使用: \nNSString *str=NSStringFromSize(size);\n\n4,NSRect的介绍：\n先看一下NSRect的定义：\nstruct CGRect {\n\n  CGPoint origin;\n\n  CGSize size;\n\n};\n\ntypedef structCGRect CGRect;\n\n其中CGRect和NSRect是一样的\n这个结构体用来存储宽度和高度以及横坐标和纵坐标\n\na,直接赋值\n    NSRect rect;\n\n    rect.size.height=8;\n\n    rect.size.width=10;\n\n    rect.origin.x=40;\n\n    rect.origin.y=50;\n\nb,调用NSMakeRect函数创建\n    NSRect rect=NSMakeRect(100,80,10,8);\n\nc,调用CGRectMake函数创建\n\n    NSRect rect=CGRectMake(100,80,10,8);\n\n使用：\n    NSString *str=NSStringFromRect(rect);","source":"_posts/oc/Foundation/oc-foundation-struct.md","raw":"---\ntitle: Foundation中结构体的简单介绍\ndate: 2020-04-03 14:30:33\ncategories:\n- OC\n- Foundation\ntags: Foundation\n---\n\n一：先看一下，在c语言中定义的结构体：\n\n\n\n    //定义了Date这种结构体类型\n\n    struct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n    //定义结构体变量\n\n    struct Date d={2014,7,4};\n\n    \n\n   NSLog(@\"year is %i,month is %i,day is %i\",d.year,d.month,d.day);\n\n   d.day=6;\n\n   NSLog(@\"day is %i\",d.day);\n\n\n\n如上事例中的\n\n\n\nstruct Date{\n\n        int year;\n\n        int month;\n\n        int day;\n\n    };\n\n定义了一个结构体类型。\n\n定义变量时：\n\nstruct Date d={2014,7,4};\n\n使用：d.year,d.month,d.day\n\n\n\n我们也可以使用typedef来定义一个结构体类型：如：\n\n\n\n    typedef struct {\n\n        int year;\n\n        int month;\n\n        int day;\n\n\n\n    } MyDate;\n\n    MyDate d={2014,7,4};\n\n    NSLog(@\"year is %i,month is %i, day is %i\",d.year,d.month,d.day);\n\n二：Foundation中的结构体\nFoundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect\n\n1,NSRange的介绍：\n我们先看一下，在NSRange.h中，NSRange的定义：\ntypedef struct _NSRange {\n\n    NSUInteger location;\n\n    NSUInteger length;\n\n} NSRange;\n\n\n这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。\n比如，在 \"I Love You\" 中，Love可以用location为2，length为4的范围来表示。\nNSRange创建方式有3种：\na,  第一种，直接给成员变量赋值\n    \n    NSRange range;\n\n    range.location=10;\n\n    range.length=4;\n\nb, 第二种，应用c语言的聚合结构赋值机制\n\n   \n\n    NSRangerange={8,3};\n\nc, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange\n\n    NSRange range=NSMakeRange(12,3);\n\n使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：\n\n通过变量名称引用：\n\n\n\nNSLog(@\"location is %zi\",range.location);//其中z代表无符号\n\n将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange\n\n\n\nNSString *str=NSStringFromRange(range);\n\n2,NSPoint的介绍：\n\n\n\n先看一下NSPoint的定义：\n   struct CGPoint {\n\n     CGFloat x;\n\n     CGFloat y;\n\n   };\n\n   typedef structCGPoint CGPoint;\n\n其中CGPoint和NSPoint是相等的\n\n这个结构体代表的时平面中的一个点（x,y）\n\n创建方式有3种：\na,直接赋值\n    NSPoint p;\n\n    p.x=8;\n\n    p.y=10;\n\nb,调用NSMakePoint函数创建\n\nNSPoint p=NSMakePoint(3, 5);\n\n\nc,调用CGPointMake函数创建\n\nNSPoint p=CGPointMake(6,8);\n使用：\nNSString *str=NSStringFromPoint(p);\n\n3,NSSize的介绍：\n\n先看一下NSSize的定义：\n   struct CGSize {\n\n      CGFloat width;\n\n      CGFloat height;\n\n   };\n\n   typedef structCGSize CGSize;\n\n其中CGSize和NSSize是相等的\n这个可以用来代表布局，或者是一个按钮的宽度和高度。\n\n创建方式有3种：\na,直接赋值\n\n    NSSize size;\n\n    size.width=100;\n\n    size.height=80;\n\n\nb,调用NSMakeSize函数来创建\nNSSizesize=NSMakeSize(50,60);\n\nc,调用CGSizeMake函数来创建\n\nNSSizesize=CGSizeMake(40,50);\n\n使用: \nNSString *str=NSStringFromSize(size);\n\n4,NSRect的介绍：\n先看一下NSRect的定义：\nstruct CGRect {\n\n  CGPoint origin;\n\n  CGSize size;\n\n};\n\ntypedef structCGRect CGRect;\n\n其中CGRect和NSRect是一样的\n这个结构体用来存储宽度和高度以及横坐标和纵坐标\n\na,直接赋值\n    NSRect rect;\n\n    rect.size.height=8;\n\n    rect.size.width=10;\n\n    rect.origin.x=40;\n\n    rect.origin.y=50;\n\nb,调用NSMakeRect函数创建\n    NSRect rect=NSMakeRect(100,80,10,8);\n\nc,调用CGRectMake函数创建\n\n    NSRect rect=CGRectMake(100,80,10,8);\n\n使用：\n    NSString *str=NSStringFromRect(rect);","slug":"oc/Foundation/oc-foundation-struct","published":1,"updated":"2020-09-01T12:57:44.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wengy003nu3s6afjv75to","content":"<p>一：先看一下，在c语言中定义的结构体：</p>\n<pre><code>//定义了Date这种结构体类型\n\nstruct Date{\n\n    int year;\n\n    int month;\n\n    int day;\n\n};\n\n//定义结构体变量\n\nstruct Date d={2014,7,4};</code></pre><p>   NSLog(@”year is %i,month is %i,day is %i”,d.year,d.month,d.day);</p>\n<p>   d.day=6;</p>\n<p>   NSLog(@”day is %i”,d.day);</p>\n<p>如上事例中的</p>\n<p>struct Date{</p>\n<pre><code>    int year;\n\n    int month;\n\n    int day;\n\n};</code></pre><p>定义了一个结构体类型。</p>\n<p>定义变量时：</p>\n<p>struct Date d={2014,7,4};</p>\n<p>使用：d.year,d.month,d.day</p>\n<p>我们也可以使用typedef来定义一个结构体类型：如：</p>\n<pre><code>typedef struct {\n\n    int year;\n\n    int month;\n\n    int day;\n\n\n\n} MyDate;\n\nMyDate d={2014,7,4};\n\nNSLog(@&quot;year is %i,month is %i, day is %i&quot;,d.year,d.month,d.day);</code></pre><p>二：Foundation中的结构体<br>Foundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect</p>\n<p>1,NSRange的介绍：<br>我们先看一下，在NSRange.h中，NSRange的定义：<br>typedef struct _NSRange {</p>\n<pre><code>NSUInteger location;\n\nNSUInteger length;</code></pre><p>} NSRange;</p>\n<p>这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。<br>比如，在 “I Love You” 中，Love可以用location为2，length为4的范围来表示。<br>NSRange创建方式有3种：<br>a,  第一种，直接给成员变量赋值</p>\n<pre><code>NSRange range;\n\nrange.location=10;\n\nrange.length=4;</code></pre><p>b, 第二种，应用c语言的聚合结构赋值机制</p>\n<pre><code>NSRangerange={8,3};</code></pre><p>c, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange</p>\n<pre><code>NSRange range=NSMakeRange(12,3);</code></pre><p>使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：</p>\n<p>通过变量名称引用：</p>\n<p>NSLog(@”location is %zi”,range.location);//其中z代表无符号</p>\n<p>将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange</p>\n<p>NSString *str=NSStringFromRange(range);</p>\n<p>2,NSPoint的介绍：</p>\n<p>先看一下NSPoint的定义：<br>   struct CGPoint {</p>\n<pre><code>CGFloat x;\n\nCGFloat y;</code></pre><p>   };</p>\n<p>   typedef structCGPoint CGPoint;</p>\n<p>其中CGPoint和NSPoint是相等的</p>\n<p>这个结构体代表的时平面中的一个点（x,y）</p>\n<p>创建方式有3种：<br>a,直接赋值<br>    NSPoint p;</p>\n<pre><code>p.x=8;\n\np.y=10;</code></pre><p>b,调用NSMakePoint函数创建</p>\n<p>NSPoint p=NSMakePoint(3, 5);</p>\n<p>c,调用CGPointMake函数创建</p>\n<p>NSPoint p=CGPointMake(6,8);<br>使用：<br>NSString *str=NSStringFromPoint(p);</p>\n<p>3,NSSize的介绍：</p>\n<p>先看一下NSSize的定义：<br>   struct CGSize {</p>\n<pre><code>CGFloat width;\n\nCGFloat height;</code></pre><p>   };</p>\n<p>   typedef structCGSize CGSize;</p>\n<p>其中CGSize和NSSize是相等的<br>这个可以用来代表布局，或者是一个按钮的宽度和高度。</p>\n<p>创建方式有3种：<br>a,直接赋值</p>\n<pre><code>NSSize size;\n\nsize.width=100;\n\nsize.height=80;</code></pre><p>b,调用NSMakeSize函数来创建<br>NSSizesize=NSMakeSize(50,60);</p>\n<p>c,调用CGSizeMake函数来创建</p>\n<p>NSSizesize=CGSizeMake(40,50);</p>\n<p>使用:<br>NSString *str=NSStringFromSize(size);</p>\n<p>4,NSRect的介绍：<br>先看一下NSRect的定义：<br>struct CGRect {</p>\n<p>  CGPoint origin;</p>\n<p>  CGSize size;</p>\n<p>};</p>\n<p>typedef structCGRect CGRect;</p>\n<p>其中CGRect和NSRect是一样的<br>这个结构体用来存储宽度和高度以及横坐标和纵坐标</p>\n<p>a,直接赋值<br>    NSRect rect;</p>\n<pre><code>rect.size.height=8;\n\nrect.size.width=10;\n\nrect.origin.x=40;\n\nrect.origin.y=50;</code></pre><p>b,调用NSMakeRect函数创建<br>    NSRect rect=NSMakeRect(100,80,10,8);</p>\n<p>c,调用CGRectMake函数创建</p>\n<pre><code>NSRect rect=CGRectMake(100,80,10,8);</code></pre><p>使用：<br>    NSString *str=NSStringFromRect(rect);</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：先看一下，在c语言中定义的结构体：</p>\n<pre><code>//定义了Date这种结构体类型\n\nstruct Date{\n\n    int year;\n\n    int month;\n\n    int day;\n\n};\n\n//定义结构体变量\n\nstruct Date d={2014,7,4};</code></pre><p>   NSLog(@”year is %i,month is %i,day is %i”,d.year,d.month,d.day);</p>\n<p>   d.day=6;</p>\n<p>   NSLog(@”day is %i”,d.day);</p>\n<p>如上事例中的</p>\n<p>struct Date{</p>\n<pre><code>    int year;\n\n    int month;\n\n    int day;\n\n};</code></pre><p>定义了一个结构体类型。</p>\n<p>定义变量时：</p>\n<p>struct Date d={2014,7,4};</p>\n<p>使用：d.year,d.month,d.day</p>\n<p>我们也可以使用typedef来定义一个结构体类型：如：</p>\n<pre><code>typedef struct {\n\n    int year;\n\n    int month;\n\n    int day;\n\n\n\n} MyDate;\n\nMyDate d={2014,7,4};\n\nNSLog(@&quot;year is %i,month is %i, day is %i&quot;,d.year,d.month,d.day);</code></pre><p>二：Foundation中的结构体<br>Foundation常用的结构体有：NSRange,NSPoint,NSSize,NSRect</p>\n<p>1,NSRange的介绍：<br>我们先看一下，在NSRange.h中，NSRange的定义：<br>typedef struct _NSRange {</p>\n<pre><code>NSUInteger location;\n\nNSUInteger length;</code></pre><p>} NSRange;</p>\n<p>这个结构体用来表示事物的一个范围，通常是字符串里的字符范围或者集合里地元素范围。其中，location表示该范围的起始位置，length表示该范围内所含的元素个数。<br>比如，在 “I Love You” 中，Love可以用location为2，length为4的范围来表示。<br>NSRange创建方式有3种：<br>a,  第一种，直接给成员变量赋值</p>\n<pre><code>NSRange range;\n\nrange.location=10;\n\nrange.length=4;</code></pre><p>b, 第二种，应用c语言的聚合结构赋值机制</p>\n<pre><code>NSRangerange={8,3};</code></pre><p>c, 第三种，应用Foundation框架提供的一个快捷函数NSMakeRange</p>\n<pre><code>NSRange range=NSMakeRange(12,3);</code></pre><p>使用，可以直接通过调用变量名引用，也可以将变量转换成字符串输出，比如：</p>\n<p>通过变量名称引用：</p>\n<p>NSLog(@”location is %zi”,range.location);//其中z代表无符号</p>\n<p>将变量转换成字符串输出，调用了NSString中的一个函数 NSStringFromRange</p>\n<p>NSString *str=NSStringFromRange(range);</p>\n<p>2,NSPoint的介绍：</p>\n<p>先看一下NSPoint的定义：<br>   struct CGPoint {</p>\n<pre><code>CGFloat x;\n\nCGFloat y;</code></pre><p>   };</p>\n<p>   typedef structCGPoint CGPoint;</p>\n<p>其中CGPoint和NSPoint是相等的</p>\n<p>这个结构体代表的时平面中的一个点（x,y）</p>\n<p>创建方式有3种：<br>a,直接赋值<br>    NSPoint p;</p>\n<pre><code>p.x=8;\n\np.y=10;</code></pre><p>b,调用NSMakePoint函数创建</p>\n<p>NSPoint p=NSMakePoint(3, 5);</p>\n<p>c,调用CGPointMake函数创建</p>\n<p>NSPoint p=CGPointMake(6,8);<br>使用：<br>NSString *str=NSStringFromPoint(p);</p>\n<p>3,NSSize的介绍：</p>\n<p>先看一下NSSize的定义：<br>   struct CGSize {</p>\n<pre><code>CGFloat width;\n\nCGFloat height;</code></pre><p>   };</p>\n<p>   typedef structCGSize CGSize;</p>\n<p>其中CGSize和NSSize是相等的<br>这个可以用来代表布局，或者是一个按钮的宽度和高度。</p>\n<p>创建方式有3种：<br>a,直接赋值</p>\n<pre><code>NSSize size;\n\nsize.width=100;\n\nsize.height=80;</code></pre><p>b,调用NSMakeSize函数来创建<br>NSSizesize=NSMakeSize(50,60);</p>\n<p>c,调用CGSizeMake函数来创建</p>\n<p>NSSizesize=CGSizeMake(40,50);</p>\n<p>使用:<br>NSString *str=NSStringFromSize(size);</p>\n<p>4,NSRect的介绍：<br>先看一下NSRect的定义：<br>struct CGRect {</p>\n<p>  CGPoint origin;</p>\n<p>  CGSize size;</p>\n<p>};</p>\n<p>typedef structCGRect CGRect;</p>\n<p>其中CGRect和NSRect是一样的<br>这个结构体用来存储宽度和高度以及横坐标和纵坐标</p>\n<p>a,直接赋值<br>    NSRect rect;</p>\n<pre><code>rect.size.height=8;\n\nrect.size.width=10;\n\nrect.origin.x=40;\n\nrect.origin.y=50;</code></pre><p>b,调用NSMakeRect函数创建<br>    NSRect rect=NSMakeRect(100,80,10,8);</p>\n<p>c,调用CGRectMake函数创建</p>\n<pre><code>NSRect rect=CGRectMake(100,80,10,8);</code></pre><p>使用：<br>    NSString *str=NSStringFromRect(rect);</p>\n"},{"title":"OC中的Block简单介绍","date":"2020-04-03T06:07:19.000Z","_content":"\n\nBlock的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：\n\n\n\n //定义了一个block,这个block返回值是int类型，接收两个int类型的参数\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int a=Sum(10,5);\n\n    \n\n    NSLog(@\"%i\",a);\n\n\n\n上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。\n\n我们可以先定义一个Block类型，然后再去实现，例如：\n\n\n\n    //定义了MySum这种Block类型\n\n    typedef int (^MySum)(int,int);\n\n    \n\n   //定义了一个block变量\n\n    MySum sum1=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int c=sum1(1,2);\n\n    NSLog(@\"%i\",c);\n\n例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。\n\n\n\nBlock在使用的时候，跟指针函数有点类似，例如：\n\n\n\nint sum(int a,int b){\n\n    return a+b;\n\n}\n\n\n\n\n\nvoid test(){\n\n    //block\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    int c=Sum(10,10);\n\n    NSLog(@\"%i\",c);\n\n\n\n\n\n    //指针函数\n\n    int (*sump)(int ,int)=sum;\n\n    \n\n    c=(*sump)(10,7);\n\n    NSLog(@\"%i\",c);\n\n}","source":"_posts/oc/Foundation/oc_block_desc.md","raw":"---\ntitle: OC中的Block简单介绍\ndate: 2020-04-03 14:07:19\ncategories:\n- OC\n- Foundation\ntags: OC\n---\n\n\nBlock的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：\n\n\n\n //定义了一个block,这个block返回值是int类型，接收两个int类型的参数\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int a=Sum(10,5);\n\n    \n\n    NSLog(@\"%i\",a);\n\n\n\n上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。\n\n我们可以先定义一个Block类型，然后再去实现，例如：\n\n\n\n    //定义了MySum这种Block类型\n\n    typedef int (^MySum)(int,int);\n\n    \n\n   //定义了一个block变量\n\n    MySum sum1=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    \n\n    int c=sum1(1,2);\n\n    NSLog(@\"%i\",c);\n\n例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。\n\n\n\nBlock在使用的时候，跟指针函数有点类似，例如：\n\n\n\nint sum(int a,int b){\n\n    return a+b;\n\n}\n\n\n\n\n\nvoid test(){\n\n    //block\n\n    int (^Sum)(int,int)=^(int a,int b){\n\n        return a+b;\n\n    };\n\n    int c=Sum(10,10);\n\n    NSLog(@\"%i\",c);\n\n\n\n\n\n    //指针函数\n\n    int (*sump)(int ,int)=sum;\n\n    \n\n    c=(*sump)(10,7);\n\n    NSLog(@\"%i\",c);\n\n}","slug":"oc/Foundation/oc_block_desc","published":1,"updated":"2020-09-01T13:07:22.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh0003su3s6hmbuf4ru","content":"<p>Block的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：</p>\n<p> //定义了一个block,这个block返回值是int类型，接收两个int类型的参数</p>\n<pre><code>int (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint a=Sum(10,5);\n\n\n\nNSLog(@&quot;%i&quot;,a);</code></pre><p>上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。</p>\n<p>我们可以先定义一个Block类型，然后再去实现，例如：</p>\n<pre><code>//定义了MySum这种Block类型\n\ntypedef int (^MySum)(int,int);</code></pre><p>   //定义了一个block变量</p>\n<pre><code>MySum sum1=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint c=sum1(1,2);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。</p>\n<p>Block在使用的时候，跟指针函数有点类似，例如：</p>\n<p>int sum(int a,int b){</p>\n<pre><code>return a+b;</code></pre><p>}</p>\n<p>void test(){</p>\n<pre><code>//block\n\nint (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\nint c=Sum(10,10);\n\nNSLog(@&quot;%i&quot;,c);\n\n\n\n\n\n//指针函数\n\nint (*sump)(int ,int)=sum;\n\n\n\nc=(*sump)(10,7);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Block的意思就是 块，跟java中的匿名内部类的实现有点相似，例如：</p>\n<p> //定义了一个block,这个block返回值是int类型，接收两个int类型的参数</p>\n<pre><code>int (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint a=Sum(10,5);\n\n\n\nNSLog(@&quot;%i&quot;,a);</code></pre><p>上述代码中，定义一个Block用 ^符号， Block有返回值类型，也可以有参数。</p>\n<p>我们可以先定义一个Block类型，然后再去实现，例如：</p>\n<pre><code>//定义了MySum这种Block类型\n\ntypedef int (^MySum)(int,int);</code></pre><p>   //定义了一个block变量</p>\n<pre><code>MySum sum1=^(int a,int b){\n\n    return a+b;\n\n};\n\n\n\nint c=sum1(1,2);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>例如上边的代码中，先用typedef定义了一个叫MySum的Block类型，然后再定义一个block变量，最后在调用。</p>\n<p>Block在使用的时候，跟指针函数有点类似，例如：</p>\n<p>int sum(int a,int b){</p>\n<pre><code>return a+b;</code></pre><p>}</p>\n<p>void test(){</p>\n<pre><code>//block\n\nint (^Sum)(int,int)=^(int a,int b){\n\n    return a+b;\n\n};\n\nint c=Sum(10,10);\n\nNSLog(@&quot;%i&quot;,c);\n\n\n\n\n\n//指针函数\n\nint (*sump)(int ,int)=sum;\n\n\n\nc=(*sump)(10,7);\n\nNSLog(@&quot;%i&quot;,c);</code></pre><p>}</p>\n"},{"title":"OC中类的创建简单介绍","date":"2020-04-03T06:13:32.000Z","_content":"\n\n一：创建一个类。\n\n在文件上右键单击create file\n\n![](oc_class_init/class_init_1.jpeg)\n\n点击过后：\n\n![](oc_class_init/class_init_2.jpeg)\n\n左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。\n\n![](oc_class_init/class_init_3.jpeg)\n\nClass代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类\n\n点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。\n\n创建之后，会生成两个文件：如图所示：\n\n![](oc_class_init/class_init_4.jpeg)\n\n一个是类名.h文件，另外一个是类名.m文件\n\nh文件是头文件，用于变量和方法的声明\n\nm文件是实现文件，用于方法的实现。\n\n创建好的头文件为：\n\n![](oc_class_init/class_init_5.jpeg)\n\n@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。\n\nNSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：\n\n![](oc_class_init/class_init_6.jpeg)\n\n在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。\n\n如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。\n\n如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;\n\n方法的实现：如图所示：\n\n![](oc_class_init/class_init_7.jpeg)","source":"_posts/oc/Foundation/oc_class_init.md","raw":"---\ntitle: OC中类的创建简单介绍\ndate: 2020-04-03 14:13:32\ncategories: \n- OC\n- Foundation\ntags: OC\n---\n\n\n一：创建一个类。\n\n在文件上右键单击create file\n\n![](oc_class_init/class_init_1.jpeg)\n\n点击过后：\n\n![](oc_class_init/class_init_2.jpeg)\n\n左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。\n\n![](oc_class_init/class_init_3.jpeg)\n\nClass代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类\n\n点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。\n\n创建之后，会生成两个文件：如图所示：\n\n![](oc_class_init/class_init_4.jpeg)\n\n一个是类名.h文件，另外一个是类名.m文件\n\nh文件是头文件，用于变量和方法的声明\n\nm文件是实现文件，用于方法的实现。\n\n创建好的头文件为：\n\n![](oc_class_init/class_init_5.jpeg)\n\n@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。\n\nNSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：\n\n![](oc_class_init/class_init_6.jpeg)\n\n在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。\n\n如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。\n\n如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;\n\n方法的实现：如图所示：\n\n![](oc_class_init/class_init_7.jpeg)","slug":"oc/Foundation/oc_class_init","published":1,"updated":"2020-09-01T12:56:52.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh0003uu3s66m1o7yxn","content":"<p>一：创建一个类。</p>\n<p>在文件上右键单击create file</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg\" alt></p>\n<p>点击过后：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg\" alt></p>\n<p>左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg\" alt></p>\n<p>Class代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类</p>\n<p>点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。</p>\n<p>创建之后，会生成两个文件：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg\" alt></p>\n<p>一个是类名.h文件，另外一个是类名.m文件</p>\n<p>h文件是头文件，用于变量和方法的声明</p>\n<p>m文件是实现文件，用于方法的实现。</p>\n<p>创建好的头文件为：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg\" alt></p>\n<p>@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。</p>\n<p>NSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg\" alt></p>\n<p>在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。</p>\n<p>如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。</p>\n<p>如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;</p>\n<p>方法的实现：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：创建一个类。</p>\n<p>在文件上右键单击create file</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_1.jpeg\" alt></p>\n<p>点击过后：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_2.jpeg\" alt></p>\n<p>左侧选取ios中的Cocoa Touch或者OS X中Cocoa都可以，右侧选择Objective-C class，选取之后，点击下一步即可。</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_3.jpeg\" alt></p>\n<p>Class代表要创建的类名，Subclass of 表示要创建的类继承于哪个类，这里选取NSObject ,  NSObject是OC中一切类的父类</p>\n<p>点击下一步之后，就会弹出框，让选择存放位置，这里不再截图。</p>\n<p>创建之后，会生成两个文件：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_4.jpeg\" alt></p>\n<p>一个是类名.h文件，另外一个是类名.m文件</p>\n<p>h文件是头文件，用于变量和方法的声明</p>\n<p>m文件是实现文件，用于方法的实现。</p>\n<p>创建好的头文件为：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_5.jpeg\" alt></p>\n<p>@interface 是关键字，用于类的声明，以@end结尾代表结束。冒号代表继承与哪个类。OC中的类必须要继承一个类，即使继承了NSObject这个类，也要明确写上。</p>\n<p>NSObject这个类是在Foundtaion中的Foundation.h中定义的，所以，用#import导入。类中变量要声明在大括号中，如下图：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_6.jpeg\" alt></p>\n<p>在声明方法时，减号代表动态方法，加好代表静态方法。（int）代表返回值类型，返回值类型一定要带括号，如果不带参数，就直接以分号结尾。</p>\n<p>如果带有参数，一个冒号代表有一个参数，如上图中的，-(int)age;表示木有任何参数。 -(void)setAge:(int)age;  表示有一个参数。</p>\n<p>如果有连个参数，就有连个冒号，如上图中的  -(void)setAge:(int)newAge andNo:(int)newNo;</p>\n<p>方法的实现：如图所示：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_class_init/class_init_7.jpeg\" alt></p>\n"},{"title":"OC中的Category简单介绍","date":"2020-04-03T03:01:01.000Z","_content":"\n\n简单介绍:\n\n1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category\n\n2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。\n\n3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。\n\n\n\n使用方法：\n\na , 创建Category的时候，选择 Objective-C category：\n\n![](oc_category_desc/category_1.jpeg)\n\n![](oc_category_desc/category_2.jpeg)\n\n\ncategory:代表要创建的分类\n\ncategory on : 代表给哪个类创建分类\n\n创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类\n\n![](oc_category_desc/category_3.jpeg)\n\n再看一下这两个文件中的内容：\n\n![](oc_category_desc/category_4.jpeg)\n![](oc_category_desc/category_5.jpeg)\n\n要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。\n\n在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：\n\n![](oc_category_desc/category_6.jpeg)\n\n使用场合：\n\n1，在需求变更的情况下，有可能为某些类添加新的方法。\n\n2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。\n\n3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法\n","source":"_posts/oc/Foundation/oc_category_desc.md","raw":"---\ntitle: OC中的Category简单介绍\ndate: 2020-04-03 11:01:01\ncategories: \n- OC\n- Foundation\ntags: OC\n---\n\n\n简单介绍:\n\n1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category\n\n2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。\n\n3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。\n\n\n\n使用方法：\n\na , 创建Category的时候，选择 Objective-C category：\n\n![](oc_category_desc/category_1.jpeg)\n\n![](oc_category_desc/category_2.jpeg)\n\n\ncategory:代表要创建的分类\n\ncategory on : 代表给哪个类创建分类\n\n创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类\n\n![](oc_category_desc/category_3.jpeg)\n\n再看一下这两个文件中的内容：\n\n![](oc_category_desc/category_4.jpeg)\n![](oc_category_desc/category_5.jpeg)\n\n要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。\n\n在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：\n\n![](oc_category_desc/category_6.jpeg)\n\n使用场合：\n\n1，在需求变更的情况下，有可能为某些类添加新的方法。\n\n2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。\n\n3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法\n","slug":"oc/Foundation/oc_category_desc","published":1,"updated":"2020-09-01T12:57:27.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh2003zu3s66t1h57fy","content":"<p>简单介绍:</p>\n<p>1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category</p>\n<p>2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。</p>\n<p>3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。</p>\n<p>使用方法：</p>\n<p>a , 创建Category的时候，选择 Objective-C category：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg\" alt></p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg\" alt></p>\n<p>category:代表要创建的分类</p>\n<p>category on : 代表给哪个类创建分类</p>\n<p>创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg\" alt></p>\n<p>再看一下这两个文件中的内容：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg\" alt><br><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg\" alt></p>\n<p>要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。</p>\n<p>在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg\" alt></p>\n<p>使用场合：</p>\n<p>1，在需求变更的情况下，有可能为某些类添加新的方法。</p>\n<p>2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。</p>\n<p>3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单介绍:</p>\n<p>1，OC提供了一种与其他语言不同的方式，可以动态的为已经存在的类添加新的方法，在java,.net中是没有这种语法的。它就是Category</p>\n<p>2,  这样设计就可以保证先前一开始设计的类的方法比较少，随着功能的增加，类的方法越来越多，再次扩展的时候，可以不用再在修改先前的类，而在新添加的类上添加方法，这样扩展性就比较好。</p>\n<p>3，Category使用简单，实现了方法的模块化开发，把不同的方法放到不同的分类文件中。</p>\n<p>使用方法：</p>\n<p>a , 创建Category的时候，选择 Objective-C category：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_1.jpeg\" alt></p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_2.jpeg\" alt></p>\n<p>category:代表要创建的分类</p>\n<p>category on : 代表给哪个类创建分类</p>\n<p>创建完之后，生成了两个文件：Person+Eat.h 和 Person+Eat.m      +号的意思就代表分类</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_3.jpeg\" alt></p>\n<p>再看一下这两个文件中的内容：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_4.jpeg\" alt><br><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_5.jpeg\" alt></p>\n<p>要扩展的方法跟平时在先在.h中声明方法，然后再.m文件中实现方法是一样的。</p>\n<p>在方法的使用时，要先导入Person+Eat.h文件，然后才能使用.h中的方法。例如，如下图片中的方法体中，在Person的分类Eat中，实现了一个test2方法，调用的时候，就用Person对象即可调用：</p>\n<p><img src=\"/2020/04/03/oc/Foundation/oc_category_desc/category_6.jpeg\" alt></p>\n<p>使用场合：</p>\n<p>1，在需求变更的情况下，有可能为某些类添加新的方法。</p>\n<p>2，一些类中包含了许多的不同用途的方法实现，而这些方法需要不用的成员实现，分模块开发。</p>\n<p>3，在使用基础类的时候，希望实现自己的方法，比如为NSString扩展一个XML方法</p>\n"},{"title":"IOS扫码登录","date":"2020-04-08T10:07:19.000Z","_content":"\n很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：\n\n1. 浏览器输入网站地址，展示登录二维码信息等。\n2. 手机通过扫描二维码，确认登录。\n3. 网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。\n\n小编从网上找了一张图片(懒得画)，大致流程图：\n![](oc-Login-QRCode/ios_qrcode_login.jpeg)\n\n小编个人感觉：\n\n1. 第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？\n2. 第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。\n3. \n\n","source":"_posts/oc/Login/oc-Login-QRCode.md","raw":"---\ntitle: IOS扫码登录\ndate: 2020-04-08 18:07:19\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：\n\n1. 浏览器输入网站地址，展示登录二维码信息等。\n2. 手机通过扫描二维码，确认登录。\n3. 网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。\n\n小编从网上找了一张图片(懒得画)，大致流程图：\n![](oc-Login-QRCode/ios_qrcode_login.jpeg)\n\n小编个人感觉：\n\n1. 第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？\n2. 第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。\n3. \n\n","slug":"oc/Login/oc-Login-QRCode","published":1,"updated":"2020-09-01T12:48:52.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh20041u3s62ko98fym","content":"<p>很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：</p>\n<ol>\n<li>浏览器输入网站地址，展示登录二维码信息等。</li>\n<li>手机通过扫描二维码，确认登录。</li>\n<li>网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。</li>\n</ol>\n<p>小编从网上找了一张图片(懒得画)，大致流程图：<br><img src=\"/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg\" alt></p>\n<p>小编个人感觉：</p>\n<ol>\n<li>第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？</li>\n<li>第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>很多的网站，或者桌面应用都用了手机扫码登录的功能，现在，我们了解一下，扫码登陆的大致过程：</p>\n<ol>\n<li>浏览器输入网站地址，展示登录二维码信息等。</li>\n<li>手机通过扫描二维码，确认登录。</li>\n<li>网页或者桌面应用检测到手机允许登录，生成用户信息登录成功。</li>\n</ol>\n<p>小编从网上找了一张图片(懒得画)，大致流程图：<br><img src=\"/2020/04/08/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg\" alt></p>\n<p>小编个人感觉：</p>\n<ol>\n<li>第1步， 主要是产生一个key或者token, 甭管是前端自己产生，还是调用服务端接口产生的，必须得加上标识，这样，app端扫码之后，获取二维码的字符串之后，通过解析，知道这是一个要登录的二维码，进而跳转到扫码登录界面去了。要不然，app的扫码怎么知道这是一个要登录的二维码，而不是支付的二维码呢？</li>\n<li>第2步，上图是轮询，这个看心情，看技术等等（咋看都行），长连接也ok的，怎么高兴怎么来。</li>\n<li></li>\n</ol>\n"},{"title":"IOS一键登录","date":"2020-04-07T10:26:28.000Z","_content":"\n## 一、简介\n为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。\n\n流程图：\n\n![](oc-Login-AKeyLogin/ios_akey_flowChart.png)\n\n步骤分析：\n\n1. 预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。\n\n2. 授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。\n\n3. 登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。\n\n## 二、兼容\n三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。\n\n如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：\n\n> 阿里 - 号码认证服务\n\n> 创蓝 - 闪验\n\n> 极光 - 极光认证\n\n> mob - 秒验\n\n\n原理和使用方法基本都是一样的，具体以查看它们的文档。","source":"_posts/oc/Login/oc-Login-AKeyLogin.md","raw":"---\ntitle: IOS一键登录\ndate: 2020-04-07 18:26:28\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n## 一、简介\n为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。\n\n流程图：\n\n![](oc-Login-AKeyLogin/ios_akey_flowChart.png)\n\n步骤分析：\n\n1. 预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。\n\n2. 授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。\n\n3. 登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。\n\n## 二、兼容\n三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。\n\n如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：\n\n> 阿里 - 号码认证服务\n\n> 创蓝 - 闪验\n\n> 极光 - 极光认证\n\n> mob - 秒验\n\n\n原理和使用方法基本都是一样的，具体以查看它们的文档。","slug":"oc/Login/oc-Login-AKeyLogin","published":1,"updated":"2020-09-01T12:45:34.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh30045u3s6eddy0bh7","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。</p>\n<p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png\" alt></p>\n<p>步骤分析：</p>\n<ol>\n<li><p>预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。</p>\n</li>\n<li><p>授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。</p>\n</li>\n<li><p>登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。</p>\n</li>\n</ol>\n<h2 id=\"二、兼容\"><a href=\"#二、兼容\" class=\"headerlink\" title=\"二、兼容\"></a>二、兼容</h2><p>三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。</p>\n<p>如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：</p>\n<blockquote>\n<p>阿里 - 号码认证服务</p>\n</blockquote>\n<blockquote>\n<p>创蓝 - 闪验</p>\n</blockquote>\n<blockquote>\n<p>极光 - 极光认证</p>\n</blockquote>\n<blockquote>\n<p>mob - 秒验</p>\n</blockquote>\n<p>原理和使用方法基本都是一样的，具体以查看它们的文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>为了降低用户使用APP的成本，提高APP使用率，并减少恶意刷登录接口风险，本文简单介绍 “中国移动”提供的一键登录功能，其他家的功能基本差不多。</p>\n<p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png\" alt></p>\n<p>步骤分析：</p>\n<ol>\n<li><p>预取号：主要完成的功能包括：发起取号请求、网络判断、蜂窝数据网络切换等操作并缓存凭证scrip。这个过程可以提前进行。</p>\n</li>\n<li><p>授权：应用客户端调用SDK接口，SDK拉起用户授权页面，用户确认授权后，SDK将返回token给应用客户端。本步骤可以给用户选择是否授权的机会。</p>\n</li>\n<li><p>登录\\注册：客户端将token发送给应用后端服务器，后端服务从移动的认证服务器获取手机号，并使用手机号登录，返回客户端登录信息。</p>\n</li>\n</ol>\n<h2 id=\"二、兼容\"><a href=\"#二、兼容\" class=\"headerlink\" title=\"二、兼容\"></a>二、兼容</h2><p>三家运营商都拥有自己的 SDK，但各自的 SDK 不一定支持别家的认证。这导致目前许多接入了一键登录的产品，只支持某一个运营商。</p>\n<p>如果要兼容三大运营商，就需要分别接入三个 SDK。现在我们也有更简单的方法，就是接入一个整合了三大运营商认证能力的第三方 SDK，目前主要有以下几家：</p>\n<blockquote>\n<p>阿里 - 号码认证服务</p>\n</blockquote>\n<blockquote>\n<p>创蓝 - 闪验</p>\n</blockquote>\n<blockquote>\n<p>极光 - 极光认证</p>\n</blockquote>\n<blockquote>\n<p>mob - 秒验</p>\n</blockquote>\n<p>原理和使用方法基本都是一样的，具体以查看它们的文档。</p>\n"},{"title":"IOS苹果登录(sign in with apple)","date":"2020-04-03T10:47:31.000Z","_content":"\n\n## 一、 sign in with apple 简介  \n 苹果官方介绍:\n \n ```\nThe fast, easy way to sign in to apps and websites.\n\nSign In With Apple 是一种在app 和网站上快速、容易登录的方式。\n\nSign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. \nInstead of filling out forms, verifying email addresses, and choosing new passwords, they can use \nSign In with Apple to set up an account and start using your app right away. All accounts are protected\nwith two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.\n\n对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。\n而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。\n为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。\n ```\n \n注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。\n\n集成步骤：\n\n![](oc-Login-AppleLogin/joinSteps.png)\n\n## 二、 相关设置\n\n### 1、开启 Sign in with Apple 功能\n\n1. 登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)\n\n\t![URI结构图](oc-Login-AppleLogin/backgroundSetup.png)\n\t\n2. Xcode 里面 Signing & Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）\n\n\t![URI结构图](oc-Login-AppleLogin/xcodeSetup.png)\n\n## 三、 App端实现  \n### 1、使用苹果提供的按钮\n\n官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。\n\n```\nASAuthorizationAppleIDButton *loginBtn = [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];\n[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];\nloginBtn.center = self.view.center;\nloginBtn.bounds = CGRectMake(0, 0, 200, 40);\n[self.view addSubview:loginBtn];\n\n```\n\n这个按钮具有两种文案类型和三个样式，分别是：\n\n```\ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) {\n    ASAuthorizationAppleIDButtonTypeSignIn,\n    ASAuthorizationAppleIDButtonTypeContinue,\n    ASAuthorizationAppleIDButtonTypeDefault = ASAuthorizationAppleIDButtonTypeSignIn,\n} \n \ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) {\n    ASAuthorizationAppleIDButtonStyleWhite,\n    ASAuthorizationAppleIDButtonStyleWhiteOutline,\n    ASAuthorizationAppleIDButtonStyleBlack,\n}\n```\n\n样式如下图：\n\n![URI结构图](oc-Login-AppleLogin/loginBtnStyle.png)\n\n从图上可以看出：\n\n**>** Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。\n\n**>** 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）\n\n另外，按钮宽高默认值为 {width:130, height:30}。\n\n对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。\n\n本地化：必要且重要的一点\n\n![URI结构图](oc-Login-AppleLogin/styleLocalize.png)\n\n\n### 2、Authorization 发起授权登录请求\n\n```\n#pragma mark- 点击登录\n-(void)signInWithApple API_AVAILABLE(ios(13.0))\n{\n    ASAuthorizationAppleIDProvider *provider = [[ASAuthorizationAppleIDProvider alloc]init];\n    ASAuthorizationAppleIDRequest * request = [provider createRequest];\n    request.requestedScopes = @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];\n    \n    ASAuthorizationController *vc= [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];\n    vc.delegate = self;\n    vc.presentationContextProvider = self;\n    \n    [vc performRequests];\n}\n\n```\n\n>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。\n\n>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。\n\n>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。\n\n\n设置上下文\n\nASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。\n\n```\n-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller\nAPI_AVAILABLE(ios(13.0)){\n   return  self.view.window;\n}\n\n```\n\n### 3、Verification 授权\n\n用户发起授权请求后，系统就会弹出用户登录验证的页面。\n\n![URI结构图](oc-Login-AppleLogin/userVerification.png)\n\n\n在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。\n\n授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：\n\n![URI结构图](oc-Login-AppleLogin/userLogin.png)\n\n授权回调处理\n\n下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。\n\n```\n#pragma mark- 授权成功的回调\n-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization\nAPI_AVAILABLE(ios(13.0)){\n    \n    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) {\n        \n        ASAuthorizationAppleIDCredential * credential = authorization.credential;\n        \n        NSString *state = credential.state;\n        \n        NSString * userID = credential.user;\n        \n        NSPersonNameComponents *fullName = credential.fullName;\n        NSString * email = credential.email;\n        //refresh token\n        NSString * authorizationCode = [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];\n        // access token\n        NSString * identityToken = [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];\n        \n        ASUserDetectionStatus realUserStatus = credential.realUserStatus;\n\t\t \n\t\t NSLog(@\"state: %@\", state);\n\t\t NSLog(@\"userID: %@\", userID);\n\t\t NSLog(@\"fullName: %@\", fullName);\n\t\t NSLog(@\"email: %@\", email);\n\t\t NSLog(@\"authorizationCode: %@\", authorizationCode);\n\t\t NSLog(@\"identityToken: %@\", identityToken);\n\t\t NSLog(@\"realUserStatus: %@\", @(realUserStatus));\n    }\n   \n}\n \n#pragma mark- 授权失败的回调\n- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error\nAPI_AVAILABLE(ios(13.0)){\n    \n    NSString * errorMsg = nil;\n    \n    switch (error.code) {\n        case ASAuthorizationErrorCanceled:\n            errorMsg = @\"用户取消了授权请求\";\n            break;\n        case ASAuthorizationErrorFailed:\n            errorMsg = @\"授权请求失败\";\n            break;\n        case ASAuthorizationErrorInvalidResponse:\n            errorMsg = @\"授权请求响应无效\";\n            break;\n        case ASAuthorizationErrorNotHandled:\n            errorMsg = @\"未能处理授权请求\";\n            break;\n        case ASAuthorizationErrorUnknown:\n            errorMsg = @\"授权请求失败未知原因\";\n            break;\n    \n    }\n  \n}\n\n```\n\n当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。\n\n这些信息具体含义和用途：\n\n-  User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。\n\n-  Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。\n\n-  Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。\n\n-  Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n-  失败情况会走 authorizationController:didCompleteWithError\n\n### 4、Handling Changes\n\n通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。\n\n-  用户终止 App 中使用 Sign in with Apple 功能\n\n-  用户在设置里注销了 AppleId\n\n这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。\n\n我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    if (@available(iOS 13.0, *)) {\n        NSString *userIdentifier = 钥匙串中取出的 userIdentifier;\n        if (userIdentifier) {\n            ASAuthorizationAppleIDProvider *appleIDProvider = [ASAuthorizationAppleIDProvider new];\n            [appleIDProvider getCredentialStateForUserID:userIdentifier\n                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,\n                                                           NSError * _Nullable error)\n            {\n                switch (credentialState) {\n                    case ASAuthorizationAppleIDProviderCredentialAuthorized:\n                        // The Apple ID credential is valid\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialRevoked:\n                        // Apple ID Credential revoked, handle unlink\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialNotFound:\n                        // Credential not found, show login UI\n                        break;\n                }\n            }];\n        }\n    }\n    \n    return YES;\n}\n\n```\n\nASAuthorizationAppleIDProviderCredentialState 解析如下：\n\n-  ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；\n-  ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；\n\n-  ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。\n\n另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：\n\n - 用户退出当前设备 和 重新登录授权\n\n```\n- (void)observeAppleSignInState\n{\n    if (@available(iOS 13.0, *)) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleSignInWithAppleStateChanged:)\n                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification\n                                                   object:nil];\n    }\n}\n \n- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification\n{\n    // Sign the user out, optionally guide them to sign in again\n    NSLog(@\"%@\", notification.userInfo);\n\n}\n```\n\n## 四、 后端校验\n### 1、整体流程图\n\n  ![URI结构图](oc-Login-AppleLogin/signVerityProcess.jpg)\n\n > #### 1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\n  -  **User ID**: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。\n  -  **Verification Data**: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。\n  -  **Account Information**: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。\nReal User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n > #### 2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\n \n### 2、JWT数据\n在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:\n\n![URI结构图](oc-Login-AppleLogin/identityTokenDataStruct.jpg)\n\n它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。\n\nJWT 的三个部分依次如下。\n\n```\n- Header（头部）\n- Payload（负载）\n- Signature（签名）\n```\n\n写成一行，就是下面的样子。\n\n```\nHeader.Payload.Signature\n```\n\n![URI结构图](oc-Login-AppleLogin/jwtDataStruct.jpg)\n\n**注意：**\n\nheader(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码\n \n第一部分解码:\n\n```\n{\n    \"kid\": \"AIDOPK1\",\n    \"alg\": \"RS256\"\n}\n```\n\n第二部分解码:\n\n```\n{\n    \"iss\": \"https://appleid.apple.com\",\n    \"aud\": \"**********\",\n    \"exp\": 1570617356,\n    \"iat\": 1570616756,\n    \"sub\": \"00*****1790047f40335c6c1a.0641\",\n    \"c_hash\": \"eqOdpr_**TyHiRymHbPQ\",\n    \"auth_time\": 1570616756\n}\n\n```\n\n**备注:**  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。\n\nJWT的这个三部分的字段分别代表：\n\n> - **header:** 包括了key id 与加密算法\n> - **payload:**\n\t* iss: 签发机构，苹果\n\t* aud: 接收者，目标app\n\t* exp: 过期时间\n\t* iat: 签发时间\n\t* sub: 用户id\n\t* c_hash: 一个哈希数列，作用未知\n\t* auth_time: 签名时间\n> - **signature:** 用于验证JWT的签名\n\n### 3、校验identityToken\n上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？\n\n![URI结构图](oc-Login-AppleLogin/identityTokenVerityProcess.jpg)\n\n> ##### 1、从苹果服务器获取publickey\n\n```\npublic PublicKey getPublicKey() throws Exception {\n\tString urlData = getUrlData(\"https://appleid.apple.com/auth/keys\");\n\tMap maps = (Map)JSON.parse(urlData);\n\tList keys = (List<Map>)maps.get(\"keys\");\n\tMap o = (Map) keys.get(0);\n\tJwk jwa = Jwk.fromValues(o);\n\ttry {\n\t    PublicKey publicKey = jwa.getPublicKey();\n\t    return publicKey;\n\t} catch (InvalidPublicKeyException e) {\n\t    e.printStackTrace();\n\t}\n\treturn null;\n}\n\n```\n\n需要引入 jar 包：\n\n```\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.9.0</version>\n</dependency>\n```  \n\n> ##### 2、解析identityToken\n\n```\nString jwt = \"app端请求的identityToken\";\nString decode = Base64.decoded(jwt.split(\"\\\\.\")[1]);\nString substring = decode.substring(0, decode.indexOf(\"}\")+1);\nJSONObject jsonObject = JSON.parseObject(substring);\nString iss = jsonObject.getString(\"iss\");\nString sub = jsonObject.getString(\"sub\");\nString aud = jsonObject.getString(\"aud\");\n\n``` \n\n> ##### 3、验证\n\n``` \npublic String verify(String jwt, String iss,String aud, String sub) throws Exception {\n    PublicKey publicKey = getPublicKey();\n    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n    jwtParser.requireIssuer(iss);\n    jwtParser.requireAudience(aud);\n    jwtParser.requireSubject(sub);\n    try {\n        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);\n        if (claim != null && claim.getBody().containsKey(\"auth_time\")) {\n            return \"SUCCESS\";\n        }\n        return \"FIALD\";\n    } catch (ExpiredJwtException e) {\n        log.error(\"apple identityToken expired\", e);\n        return \"FIALD\";\n    } catch (Exception e) {\n        log.error(\"apple identityToken illegal\", e);\n        return \"FIALD\";\n    } \n}\n``` \n \n\n使用到的jar包：\n\n``` \n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n \n","source":"_posts/oc/Login/oc-Login-AppleLogin.md","raw":"---\ntitle: IOS苹果登录(sign in with apple)\ndate: 2020-04-03 18:47:31\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n\n## 一、 sign in with apple 简介  \n 苹果官方介绍:\n \n ```\nThe fast, easy way to sign in to apps and websites.\n\nSign In With Apple 是一种在app 和网站上快速、容易登录的方式。\n\nSign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. \nInstead of filling out forms, verifying email addresses, and choosing new passwords, they can use \nSign In with Apple to set up an account and start using your app right away. All accounts are protected\nwith two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.\n\n对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。\n而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。\n为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。\n ```\n \n注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。\n\n集成步骤：\n\n![](oc-Login-AppleLogin/joinSteps.png)\n\n## 二、 相关设置\n\n### 1、开启 Sign in with Apple 功能\n\n1. 登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)\n\n\t![URI结构图](oc-Login-AppleLogin/backgroundSetup.png)\n\t\n2. Xcode 里面 Signing & Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）\n\n\t![URI结构图](oc-Login-AppleLogin/xcodeSetup.png)\n\n## 三、 App端实现  \n### 1、使用苹果提供的按钮\n\n官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。\n\n```\nASAuthorizationAppleIDButton *loginBtn = [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];\n[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];\nloginBtn.center = self.view.center;\nloginBtn.bounds = CGRectMake(0, 0, 200, 40);\n[self.view addSubview:loginBtn];\n\n```\n\n这个按钮具有两种文案类型和三个样式，分别是：\n\n```\ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) {\n    ASAuthorizationAppleIDButtonTypeSignIn,\n    ASAuthorizationAppleIDButtonTypeContinue,\n    ASAuthorizationAppleIDButtonTypeDefault = ASAuthorizationAppleIDButtonTypeSignIn,\n} \n \ntypedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) {\n    ASAuthorizationAppleIDButtonStyleWhite,\n    ASAuthorizationAppleIDButtonStyleWhiteOutline,\n    ASAuthorizationAppleIDButtonStyleBlack,\n}\n```\n\n样式如下图：\n\n![URI结构图](oc-Login-AppleLogin/loginBtnStyle.png)\n\n从图上可以看出：\n\n**>** Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。\n\n**>** 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）\n\n另外，按钮宽高默认值为 {width:130, height:30}。\n\n对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。\n\n本地化：必要且重要的一点\n\n![URI结构图](oc-Login-AppleLogin/styleLocalize.png)\n\n\n### 2、Authorization 发起授权登录请求\n\n```\n#pragma mark- 点击登录\n-(void)signInWithApple API_AVAILABLE(ios(13.0))\n{\n    ASAuthorizationAppleIDProvider *provider = [[ASAuthorizationAppleIDProvider alloc]init];\n    ASAuthorizationAppleIDRequest * request = [provider createRequest];\n    request.requestedScopes = @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];\n    \n    ASAuthorizationController *vc= [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];\n    vc.delegate = self;\n    vc.presentationContextProvider = self;\n    \n    [vc performRequests];\n}\n\n```\n\n>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。\n\n>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。\n\n>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。\n\n\n设置上下文\n\nASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。\n\n```\n-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller\nAPI_AVAILABLE(ios(13.0)){\n   return  self.view.window;\n}\n\n```\n\n### 3、Verification 授权\n\n用户发起授权请求后，系统就会弹出用户登录验证的页面。\n\n![URI结构图](oc-Login-AppleLogin/userVerification.png)\n\n\n在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。\n\n授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：\n\n![URI结构图](oc-Login-AppleLogin/userLogin.png)\n\n授权回调处理\n\n下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。\n\n```\n#pragma mark- 授权成功的回调\n-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization\nAPI_AVAILABLE(ios(13.0)){\n    \n    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) {\n        \n        ASAuthorizationAppleIDCredential * credential = authorization.credential;\n        \n        NSString *state = credential.state;\n        \n        NSString * userID = credential.user;\n        \n        NSPersonNameComponents *fullName = credential.fullName;\n        NSString * email = credential.email;\n        //refresh token\n        NSString * authorizationCode = [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];\n        // access token\n        NSString * identityToken = [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];\n        \n        ASUserDetectionStatus realUserStatus = credential.realUserStatus;\n\t\t \n\t\t NSLog(@\"state: %@\", state);\n\t\t NSLog(@\"userID: %@\", userID);\n\t\t NSLog(@\"fullName: %@\", fullName);\n\t\t NSLog(@\"email: %@\", email);\n\t\t NSLog(@\"authorizationCode: %@\", authorizationCode);\n\t\t NSLog(@\"identityToken: %@\", identityToken);\n\t\t NSLog(@\"realUserStatus: %@\", @(realUserStatus));\n    }\n   \n}\n \n#pragma mark- 授权失败的回调\n- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error\nAPI_AVAILABLE(ios(13.0)){\n    \n    NSString * errorMsg = nil;\n    \n    switch (error.code) {\n        case ASAuthorizationErrorCanceled:\n            errorMsg = @\"用户取消了授权请求\";\n            break;\n        case ASAuthorizationErrorFailed:\n            errorMsg = @\"授权请求失败\";\n            break;\n        case ASAuthorizationErrorInvalidResponse:\n            errorMsg = @\"授权请求响应无效\";\n            break;\n        case ASAuthorizationErrorNotHandled:\n            errorMsg = @\"未能处理授权请求\";\n            break;\n        case ASAuthorizationErrorUnknown:\n            errorMsg = @\"授权请求失败未知原因\";\n            break;\n    \n    }\n  \n}\n\n```\n\n当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。\n\n这些信息具体含义和用途：\n\n-  User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。\n\n-  Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。\n\n-  Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。\n\n-  Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n-  失败情况会走 authorizationController:didCompleteWithError\n\n### 4、Handling Changes\n\n通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。\n\n-  用户终止 App 中使用 Sign in with Apple 功能\n\n-  用户在设置里注销了 AppleId\n\n这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。\n\n我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。\n\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    if (@available(iOS 13.0, *)) {\n        NSString *userIdentifier = 钥匙串中取出的 userIdentifier;\n        if (userIdentifier) {\n            ASAuthorizationAppleIDProvider *appleIDProvider = [ASAuthorizationAppleIDProvider new];\n            [appleIDProvider getCredentialStateForUserID:userIdentifier\n                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,\n                                                           NSError * _Nullable error)\n            {\n                switch (credentialState) {\n                    case ASAuthorizationAppleIDProviderCredentialAuthorized:\n                        // The Apple ID credential is valid\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialRevoked:\n                        // Apple ID Credential revoked, handle unlink\n                        break;\n                    case ASAuthorizationAppleIDProviderCredentialNotFound:\n                        // Credential not found, show login UI\n                        break;\n                }\n            }];\n        }\n    }\n    \n    return YES;\n}\n\n```\n\nASAuthorizationAppleIDProviderCredentialState 解析如下：\n\n-  ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；\n-  ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；\n\n-  ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。\n\n另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：\n\n - 用户退出当前设备 和 重新登录授权\n\n```\n- (void)observeAppleSignInState\n{\n    if (@available(iOS 13.0, *)) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleSignInWithAppleStateChanged:)\n                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification\n                                                   object:nil];\n    }\n}\n \n- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification\n{\n    // Sign the user out, optionally guide them to sign in again\n    NSLog(@\"%@\", notification.userInfo);\n\n}\n```\n\n## 四、 后端校验\n### 1、整体流程图\n\n  ![URI结构图](oc-Login-AppleLogin/signVerityProcess.jpg)\n\n > #### 1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\n  -  **User ID**: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。\n  -  **Verification Data**: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。\n  -  **Account Information**: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。\nReal User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。\n\n > #### 2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\n \n### 2、JWT数据\n在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:\n\n![URI结构图](oc-Login-AppleLogin/identityTokenDataStruct.jpg)\n\n它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。\n\nJWT 的三个部分依次如下。\n\n```\n- Header（头部）\n- Payload（负载）\n- Signature（签名）\n```\n\n写成一行，就是下面的样子。\n\n```\nHeader.Payload.Signature\n```\n\n![URI结构图](oc-Login-AppleLogin/jwtDataStruct.jpg)\n\n**注意：**\n\nheader(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码\n \n第一部分解码:\n\n```\n{\n    \"kid\": \"AIDOPK1\",\n    \"alg\": \"RS256\"\n}\n```\n\n第二部分解码:\n\n```\n{\n    \"iss\": \"https://appleid.apple.com\",\n    \"aud\": \"**********\",\n    \"exp\": 1570617356,\n    \"iat\": 1570616756,\n    \"sub\": \"00*****1790047f40335c6c1a.0641\",\n    \"c_hash\": \"eqOdpr_**TyHiRymHbPQ\",\n    \"auth_time\": 1570616756\n}\n\n```\n\n**备注:**  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。\n\nJWT的这个三部分的字段分别代表：\n\n> - **header:** 包括了key id 与加密算法\n> - **payload:**\n\t* iss: 签发机构，苹果\n\t* aud: 接收者，目标app\n\t* exp: 过期时间\n\t* iat: 签发时间\n\t* sub: 用户id\n\t* c_hash: 一个哈希数列，作用未知\n\t* auth_time: 签名时间\n> - **signature:** 用于验证JWT的签名\n\n### 3、校验identityToken\n上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？\n\n![URI结构图](oc-Login-AppleLogin/identityTokenVerityProcess.jpg)\n\n> ##### 1、从苹果服务器获取publickey\n\n```\npublic PublicKey getPublicKey() throws Exception {\n\tString urlData = getUrlData(\"https://appleid.apple.com/auth/keys\");\n\tMap maps = (Map)JSON.parse(urlData);\n\tList keys = (List<Map>)maps.get(\"keys\");\n\tMap o = (Map) keys.get(0);\n\tJwk jwa = Jwk.fromValues(o);\n\ttry {\n\t    PublicKey publicKey = jwa.getPublicKey();\n\t    return publicKey;\n\t} catch (InvalidPublicKeyException e) {\n\t    e.printStackTrace();\n\t}\n\treturn null;\n}\n\n```\n\n需要引入 jar 包：\n\n```\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.9.0</version>\n</dependency>\n```  \n\n> ##### 2、解析identityToken\n\n```\nString jwt = \"app端请求的identityToken\";\nString decode = Base64.decoded(jwt.split(\"\\\\.\")[1]);\nString substring = decode.substring(0, decode.indexOf(\"}\")+1);\nJSONObject jsonObject = JSON.parseObject(substring);\nString iss = jsonObject.getString(\"iss\");\nString sub = jsonObject.getString(\"sub\");\nString aud = jsonObject.getString(\"aud\");\n\n``` \n\n> ##### 3、验证\n\n``` \npublic String verify(String jwt, String iss,String aud, String sub) throws Exception {\n    PublicKey publicKey = getPublicKey();\n    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n    jwtParser.requireIssuer(iss);\n    jwtParser.requireAudience(aud);\n    jwtParser.requireSubject(sub);\n    try {\n        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);\n        if (claim != null && claim.getBody().containsKey(\"auth_time\")) {\n            return \"SUCCESS\";\n        }\n        return \"FIALD\";\n    } catch (ExpiredJwtException e) {\n        log.error(\"apple identityToken expired\", e);\n        return \"FIALD\";\n    } catch (Exception e) {\n        log.error(\"apple identityToken illegal\", e);\n        return \"FIALD\";\n    } \n}\n``` \n \n\n使用到的jar包：\n\n``` \n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n \n","slug":"oc/Login/oc-Login-AppleLogin","published":1,"updated":"2020-09-01T12:48:48.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh40048u3s62kqef3k2","content":"<h2 id=\"一、-sign-in-with-apple-简介\"><a href=\"#一、-sign-in-with-apple-简介\" class=\"headerlink\" title=\"一、 sign in with apple 简介\"></a>一、 sign in with apple 简介</h2><p> 苹果官方介绍:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The fast, easy way to sign in to apps and websites.</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In With Apple 是一种在app 和网站上快速、容易登录的方式。</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. </span><br><span class=\"line\">Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use </span><br><span class=\"line\">Sign In with Apple to set up an account and start using your app right away. All accounts are protected</span><br><span class=\"line\">with two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.</span><br><span class=\"line\"></span><br><span class=\"line\">对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。</span><br><span class=\"line\">而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。</span><br><span class=\"line\">为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。</span><br></pre></td></tr></table></figure>\n\n<p>注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。</p>\n<p>集成步骤：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png\" alt></p>\n<h2 id=\"二、-相关设置\"><a href=\"#二、-相关设置\" class=\"headerlink\" title=\"二、 相关设置\"></a>二、 相关设置</h2><h3 id=\"1、开启-Sign-in-with-Apple-功能\"><a href=\"#1、开启-Sign-in-with-Apple-功能\" class=\"headerlink\" title=\"1、开启 Sign in with Apple 功能\"></a>1、开启 Sign in with Apple 功能</h3><ol>\n<li><p>登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png\" alt=\"URI结构图\"></p>\n</li>\n<li><p>Xcode 里面 Signing &amp; Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png\" alt=\"URI结构图\"></p>\n</li>\n</ol>\n<h2 id=\"三、-App端实现\"><a href=\"#三、-App端实现\" class=\"headerlink\" title=\"三、 App端实现\"></a>三、 App端实现</h2><h3 id=\"1、使用苹果提供的按钮\"><a href=\"#1、使用苹果提供的按钮\" class=\"headerlink\" title=\"1、使用苹果提供的按钮\"></a>1、使用苹果提供的按钮</h3><p>官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASAuthorizationAppleIDButton *loginBtn &#x3D; [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];</span><br><span class=\"line\">[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">loginBtn.center &#x3D; self.view.center;</span><br><span class=\"line\">loginBtn.bounds &#x3D; CGRectMake(0, 0, 200, 40);</span><br><span class=\"line\">[self.view addSubview:loginBtn];</span><br></pre></td></tr></table></figure>\n\n<p>这个按钮具有两种文案类型和三个样式，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeContinue,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeDefault &#x3D; ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhite,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhiteOutline,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleBlack,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>样式如下图：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png\" alt=\"URI结构图\"></p>\n<p>从图上可以看出：</p>\n<p><strong>&gt;</strong> Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。</p>\n<p><strong>&gt;</strong> 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）</p>\n<p>另外，按钮宽高默认值为 {width:130, height:30}。</p>\n<p>对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。</p>\n<p>本地化：必要且重要的一点</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png\" alt=\"URI结构图\"></p>\n<h3 id=\"2、Authorization-发起授权登录请求\"><a href=\"#2、Authorization-发起授权登录请求\" class=\"headerlink\" title=\"2、Authorization 发起授权登录请求\"></a>2、Authorization 发起授权登录请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 点击登录</span><br><span class=\"line\">-(void)signInWithApple API_AVAILABLE(ios(13.0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDProvider *provider &#x3D; [[ASAuthorizationAppleIDProvider alloc]init];</span><br><span class=\"line\">    ASAuthorizationAppleIDRequest * request &#x3D; [provider createRequest];</span><br><span class=\"line\">    request.requestedScopes &#x3D; @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];</span><br><span class=\"line\">    </span><br><span class=\"line\">    ASAuthorizationController *vc&#x3D; [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];</span><br><span class=\"line\">    vc.delegate &#x3D; self;</span><br><span class=\"line\">    vc.presentationContextProvider &#x3D; self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [vc performRequests];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。</p>\n</blockquote>\n<blockquote>\n<p>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。</p>\n</blockquote>\n<blockquote>\n<p>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。</p>\n</blockquote>\n<p>设置上下文</p>\n<p>ASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">   return  self.view.window;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Verification-授权\"><a href=\"#3、Verification-授权\" class=\"headerlink\" title=\"3、Verification 授权\"></a>3、Verification 授权</h3><p>用户发起授权请求后，系统就会弹出用户登录验证的页面。</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png\" alt=\"URI结构图\"></p>\n<p>在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。</p>\n<p>授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png\" alt=\"URI结构图\"></p>\n<p>授权回调处理</p>\n<p>下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 授权成功的回调</span><br><span class=\"line\">-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASAuthorizationAppleIDCredential * credential &#x3D; authorization.credential;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString *state &#x3D; credential.state;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString * userID &#x3D; credential.user;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSPersonNameComponents *fullName &#x3D; credential.fullName;</span><br><span class=\"line\">        NSString * email &#x3D; credential.email;</span><br><span class=\"line\">        &#x2F;&#x2F;refresh token</span><br><span class=\"line\">        NSString * authorizationCode &#x3D; [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        &#x2F;&#x2F; access token</span><br><span class=\"line\">        NSString * identityToken &#x3D; [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASUserDetectionStatus realUserStatus &#x3D; credential.realUserStatus;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t NSLog(@&quot;state: %@&quot;, state);</span><br><span class=\"line\">\t\t NSLog(@&quot;userID: %@&quot;, userID);</span><br><span class=\"line\">\t\t NSLog(@&quot;fullName: %@&quot;, fullName);</span><br><span class=\"line\">\t\t NSLog(@&quot;email: %@&quot;, email);</span><br><span class=\"line\">\t\t NSLog(@&quot;authorizationCode: %@&quot;, authorizationCode);</span><br><span class=\"line\">\t\t NSLog(@&quot;identityToken: %@&quot;, identityToken);</span><br><span class=\"line\">\t\t NSLog(@&quot;realUserStatus: %@&quot;, @(realUserStatus));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">#pragma mark- 授权失败的回调</span><br><span class=\"line\">- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString * errorMsg &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    switch (error.code) &#123;</span><br><span class=\"line\">        case ASAuthorizationErrorCanceled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;用户取消了授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorFailed:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorInvalidResponse:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求响应无效&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorNotHandled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;未能处理授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorUnknown:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败未知原因&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。</p>\n<p>这些信息具体含义和用途：</p>\n<ul>\n<li><p>User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。</p>\n</li>\n<li><p>Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。</p>\n</li>\n<li><p>Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。</p>\n</li>\n<li><p>Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n</li>\n<li><p>失败情况会走 authorizationController:didCompleteWithError</p>\n</li>\n</ul>\n<h3 id=\"4、Handling-Changes\"><a href=\"#4、Handling-Changes\" class=\"headerlink\" title=\"4、Handling Changes\"></a>4、Handling Changes</h3><p>通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。</p>\n<ul>\n<li><p>用户终止 App 中使用 Sign in with Apple 功能</p>\n</li>\n<li><p>用户在设置里注销了 AppleId</p>\n</li>\n</ul>\n<p>这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。</p>\n<p>我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        NSString *userIdentifier &#x3D; 钥匙串中取出的 userIdentifier;</span><br><span class=\"line\">        if (userIdentifier) &#123;</span><br><span class=\"line\">            ASAuthorizationAppleIDProvider *appleIDProvider &#x3D; [ASAuthorizationAppleIDProvider new];</span><br><span class=\"line\">            [appleIDProvider getCredentialStateForUserID:userIdentifier</span><br><span class=\"line\">                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,</span><br><span class=\"line\">                                                           NSError * _Nullable error)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                switch (credentialState) &#123;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialAuthorized:</span><br><span class=\"line\">                        &#x2F;&#x2F; The Apple ID credential is valid</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialRevoked:</span><br><span class=\"line\">                        &#x2F;&#x2F; Apple ID Credential revoked, handle unlink</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialNotFound:</span><br><span class=\"line\">                        &#x2F;&#x2F; Credential not found, show login UI</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASAuthorizationAppleIDProviderCredentialState 解析如下：</p>\n<ul>\n<li><p>ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。</p>\n</li>\n</ul>\n<p>另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：</p>\n<ul>\n<li>用户退出当前设备 和 重新登录授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeAppleSignInState</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class=\"line\">                                                 selector:@selector(handleSignInWithAppleStateChanged:)</span><br><span class=\"line\">                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification</span><br><span class=\"line\">                                                   object:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Sign the user out, optionally guide them to sign in again</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, notification.userInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-后端校验\"><a href=\"#四、-后端校验\" class=\"headerlink\" title=\"四、 后端校验\"></a>四、 后端校验</h2><h3 id=\"1、整体流程图\"><a href=\"#1、整体流程图\" class=\"headerlink\" title=\"1、整体流程图\"></a>1、整体流程图</h3><p>  <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h4 id=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\"><a href=\"#1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\" class=\"headerlink\" title=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\"></a>1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:</h4></blockquote>\n<ul>\n<li><p><strong>User ID</strong>: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。</p>\n</li>\n<li><p><strong>Verification Data</strong>: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。</p>\n</li>\n<li><p><strong>Account Information</strong>: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。<br>Real User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n<blockquote>\n<h4 id=\"2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\"><a href=\"#2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\" class=\"headerlink\" title=\"2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\"></a>2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。</h4></blockquote>\n</li>\n</ul>\n<h3 id=\"2、JWT数据\"><a href=\"#2、JWT数据\" class=\"headerlink\" title=\"2、JWT数据\"></a>2、JWT数据</h3><p>在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>\n<p>JWT 的三个部分依次如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Header（头部）</span><br><span class=\"line\">- Payload（负载）</span><br><span class=\"line\">- Signature（签名）</span><br></pre></td></tr></table></figure>\n\n<p>写成一行，就是下面的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.Payload.Signature</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p><strong>注意：</strong></p>\n<p>header(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码</p>\n<p>第一部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;kid&quot;: &quot;AIDOPK1&quot;,</span><br><span class=\"line\">    &quot;alg&quot;: &quot;RS256&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;iss&quot;: &quot;https:&#x2F;&#x2F;appleid.apple.com&quot;,</span><br><span class=\"line\">    &quot;aud&quot;: &quot;**********&quot;,</span><br><span class=\"line\">    &quot;exp&quot;: 1570617356,</span><br><span class=\"line\">    &quot;iat&quot;: 1570616756,</span><br><span class=\"line\">    &quot;sub&quot;: &quot;00*****1790047f40335c6c1a.0641&quot;,</span><br><span class=\"line\">    &quot;c_hash&quot;: &quot;eqOdpr_**TyHiRymHbPQ&quot;,</span><br><span class=\"line\">    &quot;auth_time&quot;: 1570616756</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注:</strong>  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。</p>\n<p>JWT的这个三部分的字段分别代表：</p>\n<blockquote>\n<ul>\n<li><strong>header:</strong> 包括了key id 与加密算法</li>\n<li><strong>payload:</strong><ul>\n<li>iss: 签发机构，苹果</li>\n<li>aud: 接收者，目标app</li>\n<li>exp: 过期时间</li>\n<li>iat: 签发时间</li>\n<li>sub: 用户id</li>\n<li>c_hash: 一个哈希数列，作用未知</li>\n<li>auth_time: 签名时间</li>\n</ul>\n</li>\n<li><strong>signature:</strong> 用于验证JWT的签名</li>\n</ul>\n</blockquote>\n<h3 id=\"3、校验identityToken\"><a href=\"#3、校验identityToken\" class=\"headerlink\" title=\"3、校验identityToken\"></a>3、校验identityToken</h3><p>上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h5 id=\"1、从苹果服务器获取publickey\"><a href=\"#1、从苹果服务器获取publickey\" class=\"headerlink\" title=\"1、从苹果服务器获取publickey\"></a>1、从苹果服务器获取publickey</h5></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public PublicKey getPublicKey() throws Exception &#123;</span><br><span class=\"line\">\tString urlData &#x3D; getUrlData(&quot;https:&#x2F;&#x2F;appleid.apple.com&#x2F;auth&#x2F;keys&quot;);</span><br><span class=\"line\">\tMap maps &#x3D; (Map)JSON.parse(urlData);</span><br><span class=\"line\">\tList keys &#x3D; (List&lt;Map&gt;)maps.get(&quot;keys&quot;);</span><br><span class=\"line\">\tMap o &#x3D; (Map) keys.get(0);</span><br><span class=\"line\">\tJwk jwa &#x3D; Jwk.fromValues(o);</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    PublicKey publicKey &#x3D; jwa.getPublicKey();</span><br><span class=\"line\">\t    return publicKey;</span><br><span class=\"line\">\t&#125; catch (InvalidPublicKeyException e) &#123;</span><br><span class=\"line\">\t    e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要引入 jar 包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jwks-rsa&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ##### 2、解析identityToken</span><br></pre></td></tr></table></figure>\n<p>String jwt = “app端请求的identityToken”;<br>String decode = Base64.decoded(jwt.split(“\\.”)[1]);<br>String substring = decode.substring(0, decode.indexOf(“}”)+1);<br>JSONObject jsonObject = JSON.parseObject(substring);<br>String iss = jsonObject.getString(“iss”);<br>String sub = jsonObject.getString(“sub”);<br>String aud = jsonObject.getString(“aud”);</p>\n<pre><code>\n&gt; ##### 3、验证\n</code></pre><p>public String verify(String jwt, String iss,String aud, String sub) throws Exception {<br>    PublicKey publicKey = getPublicKey();<br>    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);<br>    jwtParser.requireIssuer(iss);<br>    jwtParser.requireAudience(aud);<br>    jwtParser.requireSubject(sub);<br>    try {<br>        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);<br>        if (claim != null &amp;&amp; claim.getBody().containsKey(“auth_time”)) {<br>            return “SUCCESS”;<br>        }<br>        return “FIALD”;<br>    } catch (ExpiredJwtException e) {<br>        log.error(“apple identityToken expired”, e);<br>        return “FIALD”;<br>    } catch (Exception e) {<br>        log.error(“apple identityToken illegal”, e);<br>        return “FIALD”;<br>    }<br>}</Claims></p>\n<pre><code>\n\n使用到的jar包：\n</code></pre><dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-sign-in-with-apple-简介\"><a href=\"#一、-sign-in-with-apple-简介\" class=\"headerlink\" title=\"一、 sign in with apple 简介\"></a>一、 sign in with apple 简介</h2><p> 苹果官方介绍:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The fast, easy way to sign in to apps and websites.</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In With Apple 是一种在app 和网站上快速、容易登录的方式。</span><br><span class=\"line\"></span><br><span class=\"line\">Sign In with Apple makes it easy for users to sign in to your apps and websites using their Apple ID. </span><br><span class=\"line\">Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use </span><br><span class=\"line\">Sign In with Apple to set up an account and start using your app right away. All accounts are protected</span><br><span class=\"line\">with two-factor authentication for superior security, and Apple will not track users’ activity in your app or website.</span><br><span class=\"line\"></span><br><span class=\"line\">对于用户来说，Sign In With Apple 使他们可以使用Apple ID容易地登录apps和网站。</span><br><span class=\"line\">而不需要填写表单，验证邮件，选择新密码。用户可以使用Sign In With Apple 创建新用户并立即可以开始使用你的app。</span><br><span class=\"line\">为了提高安全性，双重因子验证保护了帐号的安全性。而且Apple 不会跟踪用户在app 和网站的行为信息。</span><br></pre></td></tr></table></figure>\n\n<p>注： 如果开发者使用了第三方登录，那必须也得使用苹果登录，这是苹果官方的硬性要求。如果没有使用第三方登录，开发者是可以不使用苹果登录的。</p>\n<p>集成步骤：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/joinSteps.png\" alt></p>\n<h2 id=\"二、-相关设置\"><a href=\"#二、-相关设置\" class=\"headerlink\" title=\"二、 相关设置\"></a>二、 相关设置</h2><h3 id=\"1、开启-Sign-in-with-Apple-功能\"><a href=\"#1、开启-Sign-in-with-Apple-功能\" class=\"headerlink\" title=\"1、开启 Sign in with Apple 功能\"></a>1、开启 Sign in with Apple 功能</h3><ol>\n<li><p>登录开发者网站，在需要添加 Sign in with Apple 功能的 Identifier 开启功能。(苹果后台)</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/backgroundSetup.png\" alt=\"URI结构图\"></p>\n</li>\n<li><p>Xcode 里面 Signing &amp; Capabilities 开启 Sign in with Apple 功能。（XCode工程设置）</p>\n<p> <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/xcodeSetup.png\" alt=\"URI结构图\"></p>\n</li>\n</ol>\n<h2 id=\"三、-App端实现\"><a href=\"#三、-App端实现\" class=\"headerlink\" title=\"三、 App端实现\"></a>三、 App端实现</h2><h3 id=\"1、使用苹果提供的按钮\"><a href=\"#1、使用苹果提供的按钮\" class=\"headerlink\" title=\"1、使用苹果提供的按钮\"></a>1、使用苹果提供的按钮</h3><p>官方提供了一个 ASAuthorizationAppleIDButton （继承自UIControl），使用这个来创建一个登录按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASAuthorizationAppleIDButton *loginBtn &#x3D; [[ASAuthorizationAppleIDButton alloc]initWithAuthorizationButtonType:ASAuthorizationAppleIDButtonTypeSignIn authorizationButtonStyle:ASAuthorizationAppleIDButtonStyleWhite];</span><br><span class=\"line\">[loginBtn addTarget:self action:@selector(signInWithApple) forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">loginBtn.center &#x3D; self.view.center;</span><br><span class=\"line\">loginBtn.bounds &#x3D; CGRectMake(0, 0, 200, 40);</span><br><span class=\"line\">[self.view addSubview:loginBtn];</span><br></pre></td></tr></table></figure>\n\n<p>这个按钮具有两种文案类型和三个样式，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonType) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeContinue,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonTypeDefault &#x3D; ASAuthorizationAppleIDButtonTypeSignIn,</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">typedef NS_ENUM(NSInteger, ASAuthorizationAppleIDButtonStyle) &#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhite,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleWhiteOutline,</span><br><span class=\"line\">    ASAuthorizationAppleIDButtonStyleBlack,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>样式如下图：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png\" alt=\"URI结构图\"></p>\n<p>从图上可以看出：</p>\n<p><strong>&gt;</strong> Apple 提供的登录按钮有三种外观：白色，带有黑色轮廓线的白色和黑色。</p>\n<p><strong>&gt;</strong> 文案有两种：Sign In with Apple 和 Continue with Apple。（具体使用哪个文案，根据自身业务需求来定）</p>\n<p>另外，按钮宽高默认值为 {width:130, height:30}。</p>\n<p>对于 ASAuthorizationAppleIDButton 我们能够自定义的东西比较少，比如背景色不能更改，文案只有两种可选，并且值不能修改，可以调整的只有圆角cornerRadius和size 。</p>\n<p>本地化：必要且重要的一点</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/styleLocalize.png\" alt=\"URI结构图\"></p>\n<h3 id=\"2、Authorization-发起授权登录请求\"><a href=\"#2、Authorization-发起授权登录请求\" class=\"headerlink\" title=\"2、Authorization 发起授权登录请求\"></a>2、Authorization 发起授权登录请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 点击登录</span><br><span class=\"line\">-(void)signInWithApple API_AVAILABLE(ios(13.0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ASAuthorizationAppleIDProvider *provider &#x3D; [[ASAuthorizationAppleIDProvider alloc]init];</span><br><span class=\"line\">    ASAuthorizationAppleIDRequest * request &#x3D; [provider createRequest];</span><br><span class=\"line\">    request.requestedScopes &#x3D; @[ASAuthorizationScopeFullName,ASAuthorizationScopeEmail];</span><br><span class=\"line\">    </span><br><span class=\"line\">    ASAuthorizationController *vc&#x3D; [[ASAuthorizationController alloc]initWithAuthorizationRequests:@[request]];</span><br><span class=\"line\">    vc.delegate &#x3D; self;</span><br><span class=\"line\">    vc.presentationContextProvider &#x3D; self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [vc performRequests];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ASAuthorizationAppleIDProvider 这个类比较简单，头文件中可以看出，主要用于创建一个 ASAuthorizationAppleIDRequest 以及获取对应 userID 的用户授权状态。在上面的方法中我们主要是用于创建一个 ASAuthorizationAppleIDRequest ，用户授权状态的获取后面会提到。</p>\n</blockquote>\n<blockquote>\n<p>给创建的 request 设置 requestedScopes ，这是个 ASAuthorizationScope 数组，目前只有两个值，ASAuthorizationScopeFullName 和 ASAuthorizationScopeEmail，根据需求去设置即可。</p>\n</blockquote>\n<blockquote>\n<p>然后，创建 ASAuthorizationController ，它是管理授权请求的控制器，给其设置 delegate 和 presentationContextProvider ，最后启动授权 performRequests 。</p>\n</blockquote>\n<p>设置上下文</p>\n<p>ASAuthorizationControllerPresentationContextProviding 就一个方法，主要是告诉 ASAuthorizationController 展示在哪个 window 上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(ASPresentationAnchor)presentationAnchorForAuthorizationController:(ASAuthorizationController *)controller</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">   return  self.view.window;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Verification-授权\"><a href=\"#3、Verification-授权\" class=\"headerlink\" title=\"3、Verification 授权\"></a>3、Verification 授权</h3><p>用户发起授权请求后，系统就会弹出用户登录验证的页面。</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userVerification.png\" alt=\"URI结构图\"></p>\n<p>在用户没有同意授权之前或者取消授权之后，点击登录的时候，都会弹出上面这个界面，在这个授权页面，我们可以修改自己的用户名，以及可以选择共享我的电子邮箱或者隐藏邮件地址。这样一来，就可以达到隐藏自己真实信息的目的。</p>\n<p>授权一次后，再次点击登录按钮，则会直接弹出下面这个窗口：</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/userLogin.png\" alt=\"URI结构图\"></p>\n<p>授权回调处理</p>\n<p>下面是 ASAuthorizationControllerDelegate 方法，一个是授权成功的回调，一个是失败的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark- 授权成功的回调</span><br><span class=\"line\">-(void)authorizationController:(ASAuthorizationController *)controller didCompleteWithAuthorization:(ASAuthorization *)authorization</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if ([authorization.credential isKindOfClass:[ASAuthorizationAppleIDCredential class]]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASAuthorizationAppleIDCredential * credential &#x3D; authorization.credential;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString *state &#x3D; credential.state;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSString * userID &#x3D; credential.user;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSPersonNameComponents *fullName &#x3D; credential.fullName;</span><br><span class=\"line\">        NSString * email &#x3D; credential.email;</span><br><span class=\"line\">        &#x2F;&#x2F;refresh token</span><br><span class=\"line\">        NSString * authorizationCode &#x3D; [[NSString alloc]initWithData:credential.authorizationCode encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        &#x2F;&#x2F; access token</span><br><span class=\"line\">        NSString * identityToken &#x3D; [[NSString alloc]initWithData:credential.identityToken encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ASUserDetectionStatus realUserStatus &#x3D; credential.realUserStatus;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t NSLog(@&quot;state: %@&quot;, state);</span><br><span class=\"line\">\t\t NSLog(@&quot;userID: %@&quot;, userID);</span><br><span class=\"line\">\t\t NSLog(@&quot;fullName: %@&quot;, fullName);</span><br><span class=\"line\">\t\t NSLog(@&quot;email: %@&quot;, email);</span><br><span class=\"line\">\t\t NSLog(@&quot;authorizationCode: %@&quot;, authorizationCode);</span><br><span class=\"line\">\t\t NSLog(@&quot;identityToken: %@&quot;, identityToken);</span><br><span class=\"line\">\t\t NSLog(@&quot;realUserStatus: %@&quot;, @(realUserStatus));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">#pragma mark- 授权失败的回调</span><br><span class=\"line\">- (void)authorizationController:(ASAuthorizationController *)controller didCompleteWithError:(NSError *)error</span><br><span class=\"line\">API_AVAILABLE(ios(13.0))&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString * errorMsg &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    switch (error.code) &#123;</span><br><span class=\"line\">        case ASAuthorizationErrorCanceled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;用户取消了授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorFailed:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorInvalidResponse:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求响应无效&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorNotHandled:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;未能处理授权请求&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ASAuthorizationErrorUnknown:</span><br><span class=\"line\">            errorMsg &#x3D; @&quot;授权请求失败未知原因&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们授权成功后，我们可以在 authorizationController:didCompleteWithAuthorization: 这个代理方法中获取到 ASAuthorizationAppleIDCredential ，通过这个可以拿到用户的 userID、email、fullName、authorizationCode、identityToken 以及 realUserStatus 等信息。</p>\n<p>这些信息具体含义和用途：</p>\n<ul>\n<li><p>User ID: Unique, stable, team-scoped user ID，苹果用户唯一标识符，该值在同一个开发者账号下的所有 App 下是一样的，开发者可以用该唯一标识符与自己后台系统的账号体系绑定起来。</p>\n</li>\n<li><p>Verification data: Identity token, code，验证数据，用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性，详见 Sign In with Apple REST API。如果验证成功，可以根据 userIdentifier 判断账号是否已存在，若存在，则返回自己账号系统的登录态，若不存在，则创建一个新的账号，并返回对应的登录态给 App。</p>\n</li>\n<li><p>Account information: Name, verified email，苹果用户信息，包括全名、邮箱等。</p>\n</li>\n<li><p>Real user indicator: High confidence indicator that likely real user，用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n</li>\n<li><p>失败情况会走 authorizationController:didCompleteWithError</p>\n</li>\n</ul>\n<h3 id=\"4、Handling-Changes\"><a href=\"#4、Handling-Changes\" class=\"headerlink\" title=\"4、Handling Changes\"></a>4、Handling Changes</h3><p>通过上面的步骤一个完整的授权，已经完成。BUT，我们还需要处理一些 Case。</p>\n<ul>\n<li><p>用户终止 App 中使用 Sign in with Apple 功能</p>\n</li>\n<li><p>用户在设置里注销了 AppleId</p>\n</li>\n</ul>\n<p>这些情况下，App 需要获取到这些状态，然后做退出登录操作，或者重新登录。</p>\n<p>我们需要在 App 启动的时候，通过 getCredentialState:completion: 来获取当前用户的授权状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        NSString *userIdentifier &#x3D; 钥匙串中取出的 userIdentifier;</span><br><span class=\"line\">        if (userIdentifier) &#123;</span><br><span class=\"line\">            ASAuthorizationAppleIDProvider *appleIDProvider &#x3D; [ASAuthorizationAppleIDProvider new];</span><br><span class=\"line\">            [appleIDProvider getCredentialStateForUserID:userIdentifier</span><br><span class=\"line\">                                              completion:^(ASAuthorizationAppleIDProviderCredentialState credentialState,</span><br><span class=\"line\">                                                           NSError * _Nullable error)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                switch (credentialState) &#123;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialAuthorized:</span><br><span class=\"line\">                        &#x2F;&#x2F; The Apple ID credential is valid</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialRevoked:</span><br><span class=\"line\">                        &#x2F;&#x2F; Apple ID Credential revoked, handle unlink</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case ASAuthorizationAppleIDProviderCredentialNotFound:</span><br><span class=\"line\">                        &#x2F;&#x2F; Credential not found, show login UI</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASAuthorizationAppleIDProviderCredentialState 解析如下：</p>\n<ul>\n<li><p>ASAuthorizationAppleIDProviderCredentialAuthorized 授权状态有效；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialRevoked 上次使用苹果账号登录的凭据已被移除，需解除绑定并重新引导用户使用苹果登录；</p>\n</li>\n<li><p>ASAuthorizationAppleIDProviderCredentialNotFound 未登录授权，直接弹出登录页面，引导用户登录。</p>\n</li>\n</ul>\n<p>另外，在 App 使用过程中，还可以通过通知方法来监听 revoked 状态，可以添加 ASAuthorizationAppleIDProviderCredentialRevokedNotification 这个通知，收到这个通知的时候，我们可以：</p>\n<ul>\n<li>用户退出当前设备 和 重新登录授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)observeAppleSignInState</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (@available(iOS 13.0, *)) &#123;</span><br><span class=\"line\">        [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class=\"line\">                                                 selector:@selector(handleSignInWithAppleStateChanged:)</span><br><span class=\"line\">                                                     name:ASAuthorizationAppleIDProviderCredentialRevokedNotification</span><br><span class=\"line\">                                                   object:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)handleSignInWithAppleStateChanged:(NSNotification *)notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Sign the user out, optionally guide them to sign in again</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, notification.userInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-后端校验\"><a href=\"#四、-后端校验\" class=\"headerlink\" title=\"四、 后端校验\"></a>四、 后端校验</h2><h3 id=\"1、整体流程图\"><a href=\"#1、整体流程图\" class=\"headerlink\" title=\"1、整体流程图\"></a>1、整体流程图</h3><p>  <img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h4 id=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\"><a href=\"#1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据\" class=\"headerlink\" title=\"1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:\"></a>1、步骤1与2在客户端内完成，客户端选择使用ASAuthorizationAppleIDProvider来完成登录，如果登录成功，苹果将会返回如下数据:</h4></blockquote>\n<ul>\n<li><p><strong>User ID</strong>: 苹果用户唯一标识符，它在同一个开发者账号下的所有 App 下是一样的，我们可以用它来与后台的账号体系绑定起来（类似于微信的OpenID）。</p>\n</li>\n<li><p><strong>Verification Data</strong>: 包括identityToken, authorizationCode。用于传给开发者后台服务器，然后开发者服务器再向苹果的身份验证服务端验证本次授权登录请求数据的有效性和真实性。</p>\n</li>\n<li><p><strong>Account Information</strong>: 苹果用户信息，包括全名、邮箱等，登录时用户可以选择隐藏真实的邮件地址和随意修改姓名。<br>Real User Indicator: 用于判断当前登录的苹果账号是否是一个真实用户，取值有：unsupported、unknown、likelyReal。</p>\n<blockquote>\n<h4 id=\"2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\"><a href=\"#2、步骤3中，客户端会把identityToken-authorizationCode-userID这三个参数传给后台，用于验证本次登录的有效性。\" class=\"headerlink\" title=\"2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。\"></a>2、步骤3中，客户端会把identityToken, authorizationCode, userID这三个参数传给后台，用于验证本次登录的有效性。</h4></blockquote>\n</li>\n</ul>\n<h3 id=\"2、JWT数据\"><a href=\"#2、JWT数据\" class=\"headerlink\" title=\"2、JWT数据\"></a>2、JWT数据</h3><p>在应用传递数据给后台的参数中，有一个字段: identityToken， 它是一个经过签名的JSON Web Token(JWT), 大概像下面这样:</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>\n<p>JWT 的三个部分依次如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Header（头部）</span><br><span class=\"line\">- Payload（负载）</span><br><span class=\"line\">- Signature（签名）</span><br></pre></td></tr></table></figure>\n\n<p>写成一行，就是下面的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.Payload.Signature</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg\" alt=\"URI结构图\"></p>\n<p><strong>注意：</strong></p>\n<p>header(第一部分) 和 Payload(第二部分) 都是使用Base64编码过的,使用时需要先解码</p>\n<p>第一部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;kid&quot;: &quot;AIDOPK1&quot;,</span><br><span class=\"line\">    &quot;alg&quot;: &quot;RS256&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分解码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;iss&quot;: &quot;https:&#x2F;&#x2F;appleid.apple.com&quot;,</span><br><span class=\"line\">    &quot;aud&quot;: &quot;**********&quot;,</span><br><span class=\"line\">    &quot;exp&quot;: 1570617356,</span><br><span class=\"line\">    &quot;iat&quot;: 1570616756,</span><br><span class=\"line\">    &quot;sub&quot;: &quot;00*****1790047f40335c6c1a.0641&quot;,</span><br><span class=\"line\">    &quot;c_hash&quot;: &quot;eqOdpr_**TyHiRymHbPQ&quot;,</span><br><span class=\"line\">    &quot;auth_time&quot;: 1570616756</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>备注:</strong>  此时 iss，aud 和 sub 这三个字段在验证的时候需要使用。</p>\n<p>JWT的这个三部分的字段分别代表：</p>\n<blockquote>\n<ul>\n<li><strong>header:</strong> 包括了key id 与加密算法</li>\n<li><strong>payload:</strong><ul>\n<li>iss: 签发机构，苹果</li>\n<li>aud: 接收者，目标app</li>\n<li>exp: 过期时间</li>\n<li>iat: 签发时间</li>\n<li>sub: 用户id</li>\n<li>c_hash: 一个哈希数列，作用未知</li>\n<li>auth_time: 签名时间</li>\n</ul>\n</li>\n<li><strong>signature:</strong> 用于验证JWT的签名</li>\n</ul>\n</blockquote>\n<h3 id=\"3、校验identityToken\"><a href=\"#3、校验identityToken\" class=\"headerlink\" title=\"3、校验identityToken\"></a>3、校验identityToken</h3><p>上边我们了解了identityToken的数据组成，那么，怎么来校验这个字段的真伪性呢？</p>\n<p><img src=\"/2020/04/03/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg\" alt=\"URI结构图\"></p>\n<blockquote>\n<h5 id=\"1、从苹果服务器获取publickey\"><a href=\"#1、从苹果服务器获取publickey\" class=\"headerlink\" title=\"1、从苹果服务器获取publickey\"></a>1、从苹果服务器获取publickey</h5></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public PublicKey getPublicKey() throws Exception &#123;</span><br><span class=\"line\">\tString urlData &#x3D; getUrlData(&quot;https:&#x2F;&#x2F;appleid.apple.com&#x2F;auth&#x2F;keys&quot;);</span><br><span class=\"line\">\tMap maps &#x3D; (Map)JSON.parse(urlData);</span><br><span class=\"line\">\tList keys &#x3D; (List&lt;Map&gt;)maps.get(&quot;keys&quot;);</span><br><span class=\"line\">\tMap o &#x3D; (Map) keys.get(0);</span><br><span class=\"line\">\tJwk jwa &#x3D; Jwk.fromValues(o);</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    PublicKey publicKey &#x3D; jwa.getPublicKey();</span><br><span class=\"line\">\t    return publicKey;</span><br><span class=\"line\">\t&#125; catch (InvalidPublicKeyException e) &#123;</span><br><span class=\"line\">\t    e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要引入 jar 包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jwks-rsa&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ##### 2、解析identityToken</span><br></pre></td></tr></table></figure>\n<p>String jwt = “app端请求的identityToken”;<br>String decode = Base64.decoded(jwt.split(“\\.”)[1]);<br>String substring = decode.substring(0, decode.indexOf(“}”)+1);<br>JSONObject jsonObject = JSON.parseObject(substring);<br>String iss = jsonObject.getString(“iss”);<br>String sub = jsonObject.getString(“sub”);<br>String aud = jsonObject.getString(“aud”);</p>\n<pre><code>\n&gt; ##### 3、验证\n</code></pre><p>public String verify(String jwt, String iss,String aud, String sub) throws Exception {<br>    PublicKey publicKey = getPublicKey();<br>    JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);<br>    jwtParser.requireIssuer(iss);<br>    jwtParser.requireAudience(aud);<br>    jwtParser.requireSubject(sub);<br>    try {<br>        Jws<Claims> claim = jwtParser.parseClaimsJws(jwt);<br>        if (claim != null &amp;&amp; claim.getBody().containsKey(“auth_time”)) {<br>            return “SUCCESS”;<br>        }<br>        return “FIALD”;<br>    } catch (ExpiredJwtException e) {<br>        log.error(“apple identityToken expired”, e);<br>        return “FIALD”;<br>    } catch (Exception e) {<br>        log.error(“apple identityToken illegal”, e);<br>        return “FIALD”;<br>    }<br>}</Claims></p>\n<pre><code>\n\n使用到的jar包：\n</code></pre><dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.7.0</version>\n</dependency> \n``` \n\n\n\n\n\n"},{"title":"IOS指纹登录","date":"2020-04-07T08:22:33.000Z","_content":"\n\n## 一、简介\nTouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.\n\n指纹登录，可以分解为两个流程：\n\n1. 用户名密码登录成功之后，开启指纹登录。\n2. 指纹登录开启后，下次使用指纹登录。\n\n## 二、登录流程介绍\n\n### 1. 开启指纹登录\n流程图：\n\n![](oc-Login-TouchID/startFingerPrint.png)\n\n主要流程说明如下：\n\n1. 用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color = red> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font>\n2. 用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。\n3. 弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。\n4. **本地生成**当前登录账户对应的“**账户指纹标识**”，记作 `ProfileTouchID`。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的`profileID+IDFA` ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。\n5. 绑定：绑定就是将当前用户的`profileID` 和上面第四步生产的`ProfileTouchID` 发送到后端，后端保存对应关系，完成绑定。\n6. 绑定成功后，用户本机存储`ProfileTouchID`，为将来指纹登录做准备。\n\n### 2. 后端数据结构\n随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID---profileID可以对应多个“账户指纹标识”--`ProfileTouchID` ，故而，将后端的数据结构定义如下：\n\n![](oc-Login-TouchID/dataStuct.png)\n\n### 3. 指纹登录流程\n如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：\n\n![](oc-Login-TouchID/fingerLogin.png)\n\n1. 用户选择指纹登录，<font color = red>这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font>\n2. 验证指纹，即，证明使用者是你本人，假如验证成功。\n3. 取出本地存储的“账户指纹标识”--`ProfileTouchID`。<font color = red>解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font>\n4. 将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录\n\n### 4. 安全性\n对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：\n\n1. 指纹验证的安全性，这是系统层面的问题，无法介入。\n2. 本地存储 “账户指纹标识”（`ProfileTouchID` ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。\n3. 生成“账户指纹标识”（`ProfileTouchID` 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。\n4. 绑定步骤、登录步骤中， 将“账户指纹标识”（`ProfileTouchID` ）发送到后端过程中也存在安全性。加密传输即可。\n\n## 三、登录代码\n\n#### 1. 添加头文件\n```\n#import <LocalAuthentication/LocalAuthentication.h>\n```\n\n#### 2. 指纹验证\n\n```\n- (IBAction)btnClick:(id)sender {\n    //首先判断版本\n    if(NSFoundationVersionNumber < NSFoundationVersionNumber_iOS_8_0){\n        NSLog(@\"系统版本不支持TouchID\");\n        return;\n    }\n    \n    LAContext *context = [[LAContext alloc] init];\n    context.localizedFallbackTitle = @\"输入密码\";\n    \n    NSError *error = nil;\n    \n    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&error]){\n        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@\"通过Home键验证已有手机指纹\" reply:^(BOOL success, NSError * _Nullable error) {\n            if(success){\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    NSLog(@\"TouchID 验证成功\");\n                });\n            }else if(error){\n                switch (error.code) {\n                    case LAErrorAuthenticationFailed:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 验证失败\");\n                        });\n                        break;\n                    case LAErrorUserCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"TouchID 被用户手动取消\");\n                        });\n                        break;\n                    case LAErrorUserFallback:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"用户不使用TouchID,选择手动输入密码\");\n                        });\n                        break;\n                    case LAErrorSystemCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)\");\n                        });\n                        break;\n                    case LAErrorPasscodeNotSet:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置密码\");\n                        });\n                        break;\n                    case LAErrorTouchIDNotEnrolled:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置TouchID\");\n                        });\n                        break;\n                    case LAErrorTouchIDLockout:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)\");\n                        });\n                        break;\n                    case LAErrorAppCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"当前软件被挂起并取消了授权 (如App进入了后台等)\");\n                        });\n                        break;\n                    case LAErrorInvalidContext:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"当前软件被挂起并取消了授权 (LAContext对象无效)\");\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }];\n    }else{\n        NSLog(@\"当前设备不支持TouchID\");\n    }\n}\n```\n\n#### 3. 鉴定方式\n在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值\n\n>  LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。\n\n>  LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。\n\n\n\n\n","source":"_posts/oc/Login/oc-Login-TouchID.md","raw":"---\ntitle: IOS指纹登录\ndate: 2020-04-07 16:22:33\ncategories: \n- OC\n- 登录\ntags: 登录\n---\n\n\n## 一、简介\nTouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.\n\n指纹登录，可以分解为两个流程：\n\n1. 用户名密码登录成功之后，开启指纹登录。\n2. 指纹登录开启后，下次使用指纹登录。\n\n## 二、登录流程介绍\n\n### 1. 开启指纹登录\n流程图：\n\n![](oc-Login-TouchID/startFingerPrint.png)\n\n主要流程说明如下：\n\n1. 用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color = red> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font>\n2. 用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。\n3. 弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。\n4. **本地生成**当前登录账户对应的“**账户指纹标识**”，记作 `ProfileTouchID`。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的`profileID+IDFA` ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。\n5. 绑定：绑定就是将当前用户的`profileID` 和上面第四步生产的`ProfileTouchID` 发送到后端，后端保存对应关系，完成绑定。\n6. 绑定成功后，用户本机存储`ProfileTouchID`，为将来指纹登录做准备。\n\n### 2. 后端数据结构\n随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID---profileID可以对应多个“账户指纹标识”--`ProfileTouchID` ，故而，将后端的数据结构定义如下：\n\n![](oc-Login-TouchID/dataStuct.png)\n\n### 3. 指纹登录流程\n如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：\n\n![](oc-Login-TouchID/fingerLogin.png)\n\n1. 用户选择指纹登录，<font color = red>这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font>\n2. 验证指纹，即，证明使用者是你本人，假如验证成功。\n3. 取出本地存储的“账户指纹标识”--`ProfileTouchID`。<font color = red>解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font>\n4. 将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录\n\n### 4. 安全性\n对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：\n\n1. 指纹验证的安全性，这是系统层面的问题，无法介入。\n2. 本地存储 “账户指纹标识”（`ProfileTouchID` ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。\n3. 生成“账户指纹标识”（`ProfileTouchID` 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。\n4. 绑定步骤、登录步骤中， 将“账户指纹标识”（`ProfileTouchID` ）发送到后端过程中也存在安全性。加密传输即可。\n\n## 三、登录代码\n\n#### 1. 添加头文件\n```\n#import <LocalAuthentication/LocalAuthentication.h>\n```\n\n#### 2. 指纹验证\n\n```\n- (IBAction)btnClick:(id)sender {\n    //首先判断版本\n    if(NSFoundationVersionNumber < NSFoundationVersionNumber_iOS_8_0){\n        NSLog(@\"系统版本不支持TouchID\");\n        return;\n    }\n    \n    LAContext *context = [[LAContext alloc] init];\n    context.localizedFallbackTitle = @\"输入密码\";\n    \n    NSError *error = nil;\n    \n    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&error]){\n        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@\"通过Home键验证已有手机指纹\" reply:^(BOOL success, NSError * _Nullable error) {\n            if(success){\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    NSLog(@\"TouchID 验证成功\");\n                });\n            }else if(error){\n                switch (error.code) {\n                    case LAErrorAuthenticationFailed:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 验证失败\");\n                        });\n                        break;\n                    case LAErrorUserCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"TouchID 被用户手动取消\");\n                        });\n                        break;\n                    case LAErrorUserFallback:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"用户不使用TouchID,选择手动输入密码\");\n                        });\n                        break;\n                    case LAErrorSystemCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)\");\n                        });\n                        break;\n                    case LAErrorPasscodeNotSet:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置密码\");\n                        });\n                        break;\n                    case LAErrorTouchIDNotEnrolled:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 无法启动,因为用户没有设置TouchID\");\n                        });\n                        break;\n                    case LAErrorTouchIDLockout:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)\");\n                        });\n                        break;\n                    case LAErrorAppCancel:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                            NSLog(@\"当前软件被挂起并取消了授权 (如App进入了后台等)\");\n                        });\n                        break;\n                    case LAErrorInvalidContext:\n                        dispatch_async(dispatch_get_main_queue(), ^{\n                           NSLog(@\"当前软件被挂起并取消了授权 (LAContext对象无效)\");\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }];\n    }else{\n        NSLog(@\"当前设备不支持TouchID\");\n    }\n}\n```\n\n#### 3. 鉴定方式\n在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值\n\n>  LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。\n\n>  LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。\n\n\n\n\n","slug":"oc/Login/oc-Login-TouchID","published":1,"updated":"2020-09-01T12:48:55.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh5004cu3s647uc4h47","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>TouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.</p>\n<p>指纹登录，可以分解为两个流程：</p>\n<ol>\n<li>用户名密码登录成功之后，开启指纹登录。</li>\n<li>指纹登录开启后，下次使用指纹登录。</li>\n</ol>\n<h2 id=\"二、登录流程介绍\"><a href=\"#二、登录流程介绍\" class=\"headerlink\" title=\"二、登录流程介绍\"></a>二、登录流程介绍</h2><h3 id=\"1-开启指纹登录\"><a href=\"#1-开启指纹登录\" class=\"headerlink\" title=\"1. 开启指纹登录\"></a>1. 开启指纹登录</h3><p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png\" alt></p>\n<p>主要流程说明如下：</p>\n<ol>\n<li>用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color=\"red\"> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font></li>\n<li>用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。</li>\n<li>弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。</li>\n<li><strong>本地生成</strong>当前登录账户对应的“<strong>账户指纹标识</strong>”，记作 <code>ProfileTouchID</code>。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的<code>profileID+IDFA</code> ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。</li>\n<li>绑定：绑定就是将当前用户的<code>profileID</code> 和上面第四步生产的<code>ProfileTouchID</code> 发送到后端，后端保存对应关系，完成绑定。</li>\n<li>绑定成功后，用户本机存储<code>ProfileTouchID</code>，为将来指纹登录做准备。</li>\n</ol>\n<h3 id=\"2-后端数据结构\"><a href=\"#2-后端数据结构\" class=\"headerlink\" title=\"2. 后端数据结构\"></a>2. 后端数据结构</h3><p>随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID—profileID可以对应多个“账户指纹标识”–<code>ProfileTouchID</code> ，故而，将后端的数据结构定义如下：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png\" alt></p>\n<h3 id=\"3-指纹登录流程\"><a href=\"#3-指纹登录流程\" class=\"headerlink\" title=\"3. 指纹登录流程\"></a>3. 指纹登录流程</h3><p>如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png\" alt></p>\n<ol>\n<li>用户选择指纹登录，<font color=\"red\">这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font></li>\n<li>验证指纹，即，证明使用者是你本人，假如验证成功。</li>\n<li>取出本地存储的“账户指纹标识”–<code>ProfileTouchID</code>。<font color=\"red\">解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font></li>\n<li>将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录</li>\n</ol>\n<h3 id=\"4-安全性\"><a href=\"#4-安全性\" class=\"headerlink\" title=\"4. 安全性\"></a>4. 安全性</h3><p>对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：</p>\n<ol>\n<li>指纹验证的安全性，这是系统层面的问题，无法介入。</li>\n<li>本地存储 “账户指纹标识”（<code>ProfileTouchID</code> ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。</li>\n<li>生成“账户指纹标识”（<code>ProfileTouchID</code> 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。</li>\n<li>绑定步骤、登录步骤中， 将“账户指纹标识”（<code>ProfileTouchID</code> ）发送到后端过程中也存在安全性。加密传输即可。</li>\n</ol>\n<h2 id=\"三、登录代码\"><a href=\"#三、登录代码\" class=\"headerlink\" title=\"三、登录代码\"></a>三、登录代码</h2><h4 id=\"1-添加头文件\"><a href=\"#1-添加头文件\" class=\"headerlink\" title=\"1. 添加头文件\"></a>1. 添加头文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;LocalAuthentication&#x2F;LocalAuthentication.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-指纹验证\"><a href=\"#2-指纹验证\" class=\"headerlink\" title=\"2. 指纹验证\"></a>2. 指纹验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)btnClick:(id)sender &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;首先判断版本</span><br><span class=\"line\">    if(NSFoundationVersionNumber &lt; NSFoundationVersionNumber_iOS_8_0)&#123;</span><br><span class=\"line\">        NSLog(@&quot;系统版本不支持TouchID&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LAContext *context &#x3D; [[LAContext alloc] init];</span><br><span class=\"line\">    context.localizedFallbackTitle &#x3D; @&quot;输入密码&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSError *error &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error])&#123;</span><br><span class=\"line\">        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@&quot;通过Home键验证已有手机指纹&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class=\"line\">            if(success)&#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                    NSLog(@&quot;TouchID 验证成功&quot;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;else if(error)&#123;</span><br><span class=\"line\">                switch (error.code) &#123;</span><br><span class=\"line\">                    case LAErrorAuthenticationFailed:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 验证失败&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;TouchID 被用户手动取消&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserFallback:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;用户不使用TouchID,选择手动输入密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorSystemCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorPasscodeNotSet:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDNotEnrolled:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置TouchID&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDLockout:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorAppCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;当前软件被挂起并取消了授权 (如App进入了后台等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorInvalidContext:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;当前软件被挂起并取消了授权 (LAContext对象无效)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        NSLog(@&quot;当前设备不支持TouchID&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-鉴定方式\"><a href=\"#3-鉴定方式\" class=\"headerlink\" title=\"3. 鉴定方式\"></a>3. 鉴定方式</h4><p>在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值</p>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>TouchID指纹识别是iPhone 5S设备中增加的一项重大功能.苹果的后续移动设备也相继添加了指纹功能,在实际使用中还是相当方便的,比如快捷登录,快捷支付等等.系统提供了相应框架,使用起来还是比较方便的.使用LAContext对象即可完成指纹识别,提高用户体验.</p>\n<p>指纹登录，可以分解为两个流程：</p>\n<ol>\n<li>用户名密码登录成功之后，开启指纹登录。</li>\n<li>指纹登录开启后，下次使用指纹登录。</li>\n</ol>\n<h2 id=\"二、登录流程介绍\"><a href=\"#二、登录流程介绍\" class=\"headerlink\" title=\"二、登录流程介绍\"></a>二、登录流程介绍</h2><h3 id=\"1-开启指纹登录\"><a href=\"#1-开启指纹登录\" class=\"headerlink\" title=\"1. 开启指纹登录\"></a>1. 开启指纹登录</h3><p>流程图：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/startFingerPrint.png\" alt></p>\n<p>主要流程说明如下：</p>\n<ol>\n<li>用户使用“用户名密码”登录成功后，在没有开启指纹登录的情况下，弹出开启指纹登录提示页面。<font color=\"red\"> 这个弹出机制需要产品设计，比如用户首次登录才弹出，又比如每次登录后都弹出。</font></li>\n<li>用户在“开启指纹登录页面” 做出选择，假如选择了“开启”。</li>\n<li>弹出“指纹验证窗口”， 指纹验证的结果只有成功和失败两种状态， 假如验证成功。</li>\n<li><strong>本地生成</strong>当前登录账户对应的“<strong>账户指纹标识</strong>”，记作 <code>ProfileTouchID</code>。生成机制自定义，但尽量长，防止数据冲突。  比如最简单的<code>profileID+IDFA</code> ，也可以选择设备指纹等等。不过设备指纹在IOS系统上不稳定，也就是说如果系统重新安装，或者有大版本变化的情况，不能保证指纹的唯一性。</li>\n<li>绑定：绑定就是将当前用户的<code>profileID</code> 和上面第四步生产的<code>ProfileTouchID</code> 发送到后端，后端保存对应关系，完成绑定。</li>\n<li>绑定成功后，用户本机存储<code>ProfileTouchID</code>，为将来指纹登录做准备。</li>\n</ol>\n<h3 id=\"2-后端数据结构\"><a href=\"#2-后端数据结构\" class=\"headerlink\" title=\"2. 后端数据结构\"></a>2. 后端数据结构</h3><p>随着社会不断的进步，人们不止拥有一部手机，所以，改设计兼容了“同一账号多个手机登录”的场景，也就是一个用户ID—profileID可以对应多个“账户指纹标识”–<code>ProfileTouchID</code> ，故而，将后端的数据结构定义如下：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/dataStuct.png\" alt></p>\n<h3 id=\"3-指纹登录流程\"><a href=\"#3-指纹登录流程\" class=\"headerlink\" title=\"3. 指纹登录流程\"></a>3. 指纹登录流程</h3><p>如果用户开启了指纹登录，下次就可以选择使用“指纹登录”登录APP，具体流程如下图所示：</p>\n<p><img src=\"/2020/04/07/oc/Login/oc-Login-TouchID/fingerLogin.png\" alt></p>\n<ol>\n<li>用户选择指纹登录，<font color=\"red\">这里需要产品设计业务逻辑，即，指纹登录展示的优先级，是无条件直接展示指纹登录，还是把指纹登录作为一种三方登录方式，用户选择后才展示。</font></li>\n<li>验证指纹，即，证明使用者是你本人，假如验证成功。</li>\n<li>取出本地存储的“账户指纹标识”–<code>ProfileTouchID</code>。<font color=\"red\">解释下，这里不能支持“一个设备多个账号指纹登录”。原因就在这里，假如支持了“一个设备多个账号指纹登录”功能，目前APP的状态是用户没有登录，无法拿到用户相关的信息，那么我改选择哪个指纹登录呢？ 显然我们无法选择。所以无法支持“一个设备多个账号指纹登录”功能。</font></li>\n<li>将指纹发送给服务器，在上节定义的数据库中查找哪个用户下的指纹和当前指纹一直，则登录该账户，完成登录</li>\n</ol>\n<h3 id=\"4-安全性\"><a href=\"#4-安全性\" class=\"headerlink\" title=\"4. 安全性\"></a>4. 安全性</h3><p>对于登录操作，安全性是我们绕不过去的话题，它的重要性不言而喻， 归纳起来，有四点：</p>\n<ol>\n<li>指纹验证的安全性，这是系统层面的问题，无法介入。</li>\n<li>本地存储 “账户指纹标识”（<code>ProfileTouchID</code> ）的安全性。 在IOS中，加密存储在keychain中是显而易见的解决方案。</li>\n<li>生成“账户指纹标识”（<code>ProfileTouchID</code> 的规则，生成的算法需要不能太简单，如果太简单，不怀好意的人绕过指纹验证，直接使用“账户指纹标识”登录。</li>\n<li>绑定步骤、登录步骤中， 将“账户指纹标识”（<code>ProfileTouchID</code> ）发送到后端过程中也存在安全性。加密传输即可。</li>\n</ol>\n<h2 id=\"三、登录代码\"><a href=\"#三、登录代码\" class=\"headerlink\" title=\"三、登录代码\"></a>三、登录代码</h2><h4 id=\"1-添加头文件\"><a href=\"#1-添加头文件\" class=\"headerlink\" title=\"1. 添加头文件\"></a>1. 添加头文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;LocalAuthentication&#x2F;LocalAuthentication.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-指纹验证\"><a href=\"#2-指纹验证\" class=\"headerlink\" title=\"2. 指纹验证\"></a>2. 指纹验证</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IBAction)btnClick:(id)sender &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;首先判断版本</span><br><span class=\"line\">    if(NSFoundationVersionNumber &lt; NSFoundationVersionNumber_iOS_8_0)&#123;</span><br><span class=\"line\">        NSLog(@&quot;系统版本不支持TouchID&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LAContext *context &#x3D; [[LAContext alloc] init];</span><br><span class=\"line\">    context.localizedFallbackTitle &#x3D; @&quot;输入密码&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSError *error &#x3D; nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error])&#123;</span><br><span class=\"line\">        [context evaluatePolicy:LAPolicyDeviceOwnerAuthentication localizedReason:@&quot;通过Home键验证已有手机指纹&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class=\"line\">            if(success)&#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                    NSLog(@&quot;TouchID 验证成功&quot;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;else if(error)&#123;</span><br><span class=\"line\">                switch (error.code) &#123;</span><br><span class=\"line\">                    case LAErrorAuthenticationFailed:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 验证失败&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;TouchID 被用户手动取消&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorUserFallback:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;用户不使用TouchID,选择手动输入密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorSystemCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被系统取消 (如遇到来电,锁屏,按了Home键等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorPasscodeNotSet:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置密码&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDNotEnrolled:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 无法启动,因为用户没有设置TouchID&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorTouchIDLockout:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;TouchID 被锁定(连续多次验证TouchID失败,系统需要用户手动输入密码)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorAppCancel:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                            NSLog(@&quot;当前软件被挂起并取消了授权 (如App进入了后台等)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case LAErrorInvalidContext:</span><br><span class=\"line\">                        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                           NSLog(@&quot;当前软件被挂起并取消了授权 (LAContext对象无效)&quot;);</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        NSLog(@&quot;当前设备不支持TouchID&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-鉴定方式\"><a href=\"#3-鉴定方式\" class=\"headerlink\" title=\"3. 鉴定方式\"></a>3. 鉴定方式</h4><p>在 LAContext的canEvaluatePolicy方法中，输入传入一个参数LAPolicy， 这是一个枚举，我们这里简单列出2个参数值</p>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthenticationWithBiometrics : 生物指纹识别。验证弹框有两个按钮，第一个是取消按钮，第二个按钮可以自定义标题名称（输入密码）。只有在第一次指纹验证失败后才会出现第二个按钮，这种鉴定方式的第二个按钮的功能自定义。前三次指纹验证失败，指纹验证框不再弹出。再次重新进入验证，还有两次验证机会，如果还是验证失败，TOUCH ID 被锁住不再继续弹出指纹验证框。以后的每次验证都将会弹出设备密码输入框直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n<blockquote>\n<p> LAPolicyDeviceOwnerAuthentication: 生物指纹识别或系统密码验证。如果TOUCH ID 可用，且已经录入指纹，则优先调用指纹验证。其次是调用系统密码验证，如果没有开启设备密码，则不可以使用这种验证方式。指纹识别验证失败三次将弹出设备密码输入框，如果不进行密码输入。再次进来还可以有两次机会验证指纹，如果都失败则TOUCH ID被锁住，以后每次进来验证都是调用系统的设备密码直至输入正确的设备密码方可解除TOUCH ID锁。</p>\n</blockquote>\n"},{"title":"iphone屏幕尺寸，分辨率， PPI详细数据对比","date":"2020-04-24T07:56:37.000Z","_content":"\n![](oc-screenSize-detail/oc-screenSize-detail-1.png)\n","source":"_posts/oc/Screen/oc-screenSize-detail.md","raw":"---\ntitle: iphone屏幕尺寸，分辨率， PPI详细数据对比\ndate: 2020-04-24 15:56:37\ncategories:\n- OC\n- Screen\ntags: 屏幕\n---\n\n![](oc-screenSize-detail/oc-screenSize-detail-1.png)\n","slug":"oc/Screen/oc-screenSize-detail","published":1,"updated":"2020-09-01T12:57:55.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh6004fu3s6a42nchzw","content":"<p><img src=\"/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2020/04/24/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png\" alt></p>\n"},{"title":"使用代码创建UITableViewCell","date":"2020-04-03T06:49:35.000Z","_content":"\n先看一下，我们将要做出的效果：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg)\n\n\n如上图中，现在分析：\n\n- 1，这像是一个表格，而表格的每一个cell高度不定。\n- 2，头像不一样 \n- 3，昵称不一样，昵称的字数也不一样 \n- 4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) \n- 5，内容不一样，内容的高度不定 \n- 6，有的有配图，有的没有配图\n\n如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。\n\n先看一下我们的plist文件：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg)\n\n一：文件分类及作用：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg)\n\n - 1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 \n - 2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。\n - 3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。\n - 4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。\n\n二：各个文件的代码：\n\n1，ViewController.m文件中的代码：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJStatus.h\"\n#import \"MJStatusCell.h\"\n#import \"MJStatusFrame.h\"\n \n@interface MJViewController ()\n \n@property(nonatomic,strong)NSArray *statusFrames;\n \n@end\n \n@implementation MJViewController\n \n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n}\n/** 懒加载（只加载一次） */\n-(NSArray *)statusFrames{\n    \n    if(_statusFrames == nil){\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"statuses.plist\" ofType:nil];\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n        NSMutableArray *statusFrameArray = [NSMutableArray array];\n        for (NSDictionary *dict in dictArray) {\n            MJStatus *status = [MJStatus statusWithDict:dict];\n            MJStatusFrame *statusFrame = [[MJStatusFrame alloc] init];\n            statusFrame.status = status;\n            \n            [statusFrameArray addObject:statusFrame];\n        }\n        _statusFrames = statusFrameArray;\n    }\n    return _statusFrames;\n}\n#pragma mark - UITableView的数据源方法\n/** 返回本组数据有多少行 */\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.statusFrames.count;\n}\n#pragma mark 返回每一组的UITableViewcell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    // 1,创建cell\n    MJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n    \n    // 2,设置cell的数据和控件的frame\n    cell.statusFrame = self.statusFrames[indexPath.row];\n    \n    return cell;\n  \n}\n \n/** 每一行的高度 */\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    MJStatusFrame *statusFrame = self.statusFrames[indexPath.row];\n    \n    return statusFrame.cellHeight;\n    \n}\n \n@end\n\n```\n\n2，StatusCell.h中的代码：\n\n```\n#import <UIKit/UIKit.h>\n@class MJStatusFrame;\n@interface MJStatusCell : UITableViewCell\n@property(nonatomic,strong) MJStatusFrame *statusFrame;\n \n+(id)cellWithTableView:(UITableView *)tableView;\n \n@end\n\n\n```\n\nStatusCell.m中的代码：\n\n```\n#import \"MJStatusCell.h\"\n#import \"MJStatus.h\"\n#import \"MJStatusFrame.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n@interface MJStatusCell ()\n/** \n 头像 \n*/\n@property(nonatomic,weak) UIImageView *iconImgView;\n/** 昵称 */\n@property(nonatomic,weak) UILabel *nameLbl;\n/** 会员图标 */\n@property(nonatomic,weak) UIImageView *vipImgView;\n/** 正文 */\n@property(nonatomic,weak) UILabel *textLbl;\n/** 配图 */\n@property(nonatomic,weak) UIImageView *pictureImgView;\n \n@end\n \n \n@implementation MJStatusCell\n \n+(id)cellWithTableView:(UITableView *)tableView{\n    static NSString *flag = @\"status\";\n    \n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    \n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n    return cell;\n}\n \n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];\n    if (self) {\n        \n        //头像\n        UIImageView *iconImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:iconImgView];\n        self.iconImgView = iconImgView;\n        \n        //昵称\n        UILabel *nameLbl = [[UILabel alloc] init];\n        nameLbl.font = MJNameFont;\n        [self.contentView addSubview:nameLbl];\n        self.nameLbl = nameLbl;\n        \n        //会员头像\n        UIImageView *vipImgView = [[UIImageView alloc] init];\n        vipImgView.image = [UIImage imageNamed:@\"vip\"];\n        [self.contentView addSubview:vipImgView];\n        self.vipImgView = vipImgView;\n        \n        //正文\n        UILabel *textLbl = [[UILabel alloc] init];\n        textLbl.numberOfLines = 0;\n        textLbl.font = MJTextFont;\n        [self.contentView addSubview:textLbl];\n        self.textLbl = textLbl;\n        \n        //配图\n        UIImageView *pictureImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:pictureImgView];\n        self.pictureImgView = pictureImgView;\n        \n    }\n    return self;\n}\n \n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n    _statusFrame = statusFrame;\n    //1,设置数据\n    [self settingData];\n    //2，设置frame\n    [self settingFrame];\n}\n/**\n 设置数据\n */\n-(void)settingData{\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n    \n}\n/**\n 设置frame\n */\n-(void)settingFrame{\n    /** 头像 */\n    \n    self.iconImgView.frame = self.statusFrame.iconFrame;\n    \n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n  \n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n    \n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n    \n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n    }\n   \n    \n}\n \n@end\n\n```\n\n3, status.h中的代码：\n\n```\n#import <Foundation/Foundation.h>\n \n@interface MJStatus : NSObject\n/** 正文 */\n@property(nonatomic,copy) NSString *text;\n/** 头像 */\n@property(nonatomic,copy) NSString *icon;\n/** 昵称 */\n@property(nonatomic,copy) NSString *name;\n/** 配图 */\n@property(nonatomic,copy) NSString *picture;\n/** 会员 */\n@property(nonatomic,assign) BOOL vip;\n \n+(id)statusWithDict:(NSDictionary *)dict;\n-(id)initWithDict:(NSDictionary *)dict;\n \n@end\n\n```\n\nStatus.m中的代码：\n\n```\n#import \"MJStatus.h\"\n \n@implementation MJStatus\n \n+(id)statusWithDict:(NSDictionary *)dict{\n    return [[self alloc] initWithDict:dict];\n}\n-(id)initWithDict:(NSDictionary *)dict{\n    if(self = [super init]){\n        [self setValuesForKeysWithDictionary:dict];\n    }\n    return self;\n}\n \n@end\n\n```\n\n4，StatusFrame.h文件中的代码：\n\n```\n#import <Foundation/Foundation.h>\n@class MJStatus;\n \n@interface MJStatusFrame : NSObject\n \n@property(nonatomic,assign,readonly) CGRect iconFrame;\n@property(nonatomic,assign,readonly) CGRect nameFrame;\n@property(nonatomic,assign,readonly) CGRect vipFrame;\n@property(nonatomic,assign,readonly) CGRect textFrame;\n@property(nonatomic,assign,readonly) CGRect pictureFrame;\n \n@property(nonatomic,assign,readonly) CGFloat cellHeight;\n \n@property(nonatomic,strong) MJStatus *status;\n \n \n@end\n\n```\n\nStatusFrame.m中的代码：\n\n```\n\n#import \"MJStatusFrame.h\"\n#import \"MJStatus.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n \n@implementation MJStatusFrame\n \n-(void)setStatus:(MJStatus *)status{\n    _status = status;\n    CGFloat padding = 10;\n    \n    CGFloat iconX = padding;\n    CGFloat iconY = padding;\n    CGFloat iconW = 30;\n    CGFloat iconH = 30;\n    \n    _iconFrame = CGRectMake(iconX, iconY, iconW, iconH);\n    \n    /** 昵称 */\n    CGFloat nameX = CGRectGetMaxX(_iconFrame) + padding;\n    CGSize nameMaxSize = [self.status.name sizeWithFont:MJNameFont];\n    CGFloat nameW = nameMaxSize.width;\n    CGFloat nameH = nameMaxSize.height;\n    CGFloat nameY = padding + (iconH - nameH) * 0.5;\n    _nameFrame = CGRectMake(nameX, nameY, nameW, nameH);\n    \n    /** 会员头像 */\n    \n    CGFloat vipX = CGRectGetMaxX(_nameFrame) + padding;\n    CGFloat vipY = nameY;\n    CGFloat vipW = 14;\n    CGFloat vipH = 14;\n    \n    _vipFrame = CGRectMake(vipX, vipY, vipW, vipH);\n    \n    /** 正文 */\n    CGFloat textX = iconX;\n    CGFloat textY = CGRectGetMaxY(_iconFrame) + padding;\n    CGFloat textW = 300;\n    CGSize textMaxSize = [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];\n    CGFloat textH = textMaxSize.height;\n    _textFrame = CGRectMake(textX, textY, textW, textH);\n    \n    /** 配图 */\n    CGFloat pictureX = iconX;\n    CGFloat pictureY = CGRectGetMaxY(_textFrame) + padding;\n    CGFloat pictureW = 100;\n    CGFloat pictureH = 100;\n    _pictureFrame = CGRectMake(pictureX, pictureY, pictureW, pictureH);\n    \n    if(self.status.picture){\n        _cellHeight = CGRectGetMaxY(_pictureFrame) + padding;\n    }else{\n        _cellHeight = CGRectGetMaxY(_textFrame) + padding;\n    }\n}\n \n@end\n\n```\n\n虽然贴上了代码，还是要说一下这个过程：\n\n- 1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。\n\n- 2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,\n\n- 3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:\n- 4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。\n\n- 5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：\n\n```\n// 1,创建cell\nMJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n\n// 2,设置cell的数据和控件的frame\t\ncell.statusFrame = self.statusFrames[indexPath.row];\n\nreturn cell;\n```\n\n\n第一行代码，就是创建一个cell,创建cell代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag = @\"status\";\n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n\n    return cell;\n}\n\n```\n\n这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。\n\n\n再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.\n现在贴上赋值的代码：\n\n```\n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n\n    _statusFrame = statusFrame;\n\n    //1,设置数据\n    [self settingData];\n\n    //2，设置frame\n    [self settingFrame];\n\n}\n\n/**\n 设置数据\n */\n-(void)settingData{\n\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n}\n\n/**\n 设置frame\n */\n\n-(void)settingFrame{\n\n    /** 头像 */\n    self.iconImgView.frame = self.statusFrame.iconFrame;\n\n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n\n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n\n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n\n    }\n}\n\n```\n\n通过代码自定义cell(cell的高度不一致)\n\n总结：\n\n- 1，新建一个继承自UITableViewCell类。\n\n- 2，重新这个类的initWithStyle:reuseIdentifier:方法\n\n\t   a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\t\n\t   b,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)\n\n- 3，提供2个模型\n\n\t  a,数据模型：存放文字数据\\图片数据\n\t\n\t  b,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度\n\n- 4，cell拥有一个frame模型（不要直接拥有数据模型）\n\n- 5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame\n\n- 6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）\n","source":"_posts/oc/UITableView/oc-UITableViewCell-sc.md","raw":"---\ntitle: 使用代码创建UITableViewCell\ndate: 2020-04-03 14:49:35\ncategories:\n- OC\n- UITableView\ntags: UITableViewCell\n---\n\n先看一下，我们将要做出的效果：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg)\n\n\n如上图中，现在分析：\n\n- 1，这像是一个表格，而表格的每一个cell高度不定。\n- 2，头像不一样 \n- 3，昵称不一样，昵称的字数也不一样 \n- 4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) \n- 5，内容不一样，内容的高度不定 \n- 6，有的有配图，有的没有配图\n\n如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。\n\n先看一下我们的plist文件：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg)\n\n一：文件分类及作用：\n\n![](oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg)\n\n - 1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 \n - 2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。\n - 3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。\n - 4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。\n\n二：各个文件的代码：\n\n1，ViewController.m文件中的代码：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJStatus.h\"\n#import \"MJStatusCell.h\"\n#import \"MJStatusFrame.h\"\n \n@interface MJViewController ()\n \n@property(nonatomic,strong)NSArray *statusFrames;\n \n@end\n \n@implementation MJViewController\n \n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n}\n/** 懒加载（只加载一次） */\n-(NSArray *)statusFrames{\n    \n    if(_statusFrames == nil){\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"statuses.plist\" ofType:nil];\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n        NSMutableArray *statusFrameArray = [NSMutableArray array];\n        for (NSDictionary *dict in dictArray) {\n            MJStatus *status = [MJStatus statusWithDict:dict];\n            MJStatusFrame *statusFrame = [[MJStatusFrame alloc] init];\n            statusFrame.status = status;\n            \n            [statusFrameArray addObject:statusFrame];\n        }\n        _statusFrames = statusFrameArray;\n    }\n    return _statusFrames;\n}\n#pragma mark - UITableView的数据源方法\n/** 返回本组数据有多少行 */\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.statusFrames.count;\n}\n#pragma mark 返回每一组的UITableViewcell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    // 1,创建cell\n    MJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n    \n    // 2,设置cell的数据和控件的frame\n    cell.statusFrame = self.statusFrames[indexPath.row];\n    \n    return cell;\n  \n}\n \n/** 每一行的高度 */\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    MJStatusFrame *statusFrame = self.statusFrames[indexPath.row];\n    \n    return statusFrame.cellHeight;\n    \n}\n \n@end\n\n```\n\n2，StatusCell.h中的代码：\n\n```\n#import <UIKit/UIKit.h>\n@class MJStatusFrame;\n@interface MJStatusCell : UITableViewCell\n@property(nonatomic,strong) MJStatusFrame *statusFrame;\n \n+(id)cellWithTableView:(UITableView *)tableView;\n \n@end\n\n\n```\n\nStatusCell.m中的代码：\n\n```\n#import \"MJStatusCell.h\"\n#import \"MJStatus.h\"\n#import \"MJStatusFrame.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n@interface MJStatusCell ()\n/** \n 头像 \n*/\n@property(nonatomic,weak) UIImageView *iconImgView;\n/** 昵称 */\n@property(nonatomic,weak) UILabel *nameLbl;\n/** 会员图标 */\n@property(nonatomic,weak) UIImageView *vipImgView;\n/** 正文 */\n@property(nonatomic,weak) UILabel *textLbl;\n/** 配图 */\n@property(nonatomic,weak) UIImageView *pictureImgView;\n \n@end\n \n \n@implementation MJStatusCell\n \n+(id)cellWithTableView:(UITableView *)tableView{\n    static NSString *flag = @\"status\";\n    \n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    \n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n    return cell;\n}\n \n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\n{\n    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];\n    if (self) {\n        \n        //头像\n        UIImageView *iconImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:iconImgView];\n        self.iconImgView = iconImgView;\n        \n        //昵称\n        UILabel *nameLbl = [[UILabel alloc] init];\n        nameLbl.font = MJNameFont;\n        [self.contentView addSubview:nameLbl];\n        self.nameLbl = nameLbl;\n        \n        //会员头像\n        UIImageView *vipImgView = [[UIImageView alloc] init];\n        vipImgView.image = [UIImage imageNamed:@\"vip\"];\n        [self.contentView addSubview:vipImgView];\n        self.vipImgView = vipImgView;\n        \n        //正文\n        UILabel *textLbl = [[UILabel alloc] init];\n        textLbl.numberOfLines = 0;\n        textLbl.font = MJTextFont;\n        [self.contentView addSubview:textLbl];\n        self.textLbl = textLbl;\n        \n        //配图\n        UIImageView *pictureImgView = [[UIImageView alloc] init];\n        [self.contentView addSubview:pictureImgView];\n        self.pictureImgView = pictureImgView;\n        \n    }\n    return self;\n}\n \n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n    _statusFrame = statusFrame;\n    //1,设置数据\n    [self settingData];\n    //2，设置frame\n    [self settingFrame];\n}\n/**\n 设置数据\n */\n-(void)settingData{\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n    \n}\n/**\n 设置frame\n */\n-(void)settingFrame{\n    /** 头像 */\n    \n    self.iconImgView.frame = self.statusFrame.iconFrame;\n    \n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n  \n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n    \n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n    \n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n    }\n   \n    \n}\n \n@end\n\n```\n\n3, status.h中的代码：\n\n```\n#import <Foundation/Foundation.h>\n \n@interface MJStatus : NSObject\n/** 正文 */\n@property(nonatomic,copy) NSString *text;\n/** 头像 */\n@property(nonatomic,copy) NSString *icon;\n/** 昵称 */\n@property(nonatomic,copy) NSString *name;\n/** 配图 */\n@property(nonatomic,copy) NSString *picture;\n/** 会员 */\n@property(nonatomic,assign) BOOL vip;\n \n+(id)statusWithDict:(NSDictionary *)dict;\n-(id)initWithDict:(NSDictionary *)dict;\n \n@end\n\n```\n\nStatus.m中的代码：\n\n```\n#import \"MJStatus.h\"\n \n@implementation MJStatus\n \n+(id)statusWithDict:(NSDictionary *)dict{\n    return [[self alloc] initWithDict:dict];\n}\n-(id)initWithDict:(NSDictionary *)dict{\n    if(self = [super init]){\n        [self setValuesForKeysWithDictionary:dict];\n    }\n    return self;\n}\n \n@end\n\n```\n\n4，StatusFrame.h文件中的代码：\n\n```\n#import <Foundation/Foundation.h>\n@class MJStatus;\n \n@interface MJStatusFrame : NSObject\n \n@property(nonatomic,assign,readonly) CGRect iconFrame;\n@property(nonatomic,assign,readonly) CGRect nameFrame;\n@property(nonatomic,assign,readonly) CGRect vipFrame;\n@property(nonatomic,assign,readonly) CGRect textFrame;\n@property(nonatomic,assign,readonly) CGRect pictureFrame;\n \n@property(nonatomic,assign,readonly) CGFloat cellHeight;\n \n@property(nonatomic,strong) MJStatus *status;\n \n \n@end\n\n```\n\nStatusFrame.m中的代码：\n\n```\n\n#import \"MJStatusFrame.h\"\n#import \"MJStatus.h\"\n \n#define MJNameFont [UIFont systemFontOfSize:13]\n#define MJTextFont [UIFont systemFontOfSize:12]\n \n@implementation MJStatusFrame\n \n-(void)setStatus:(MJStatus *)status{\n    _status = status;\n    CGFloat padding = 10;\n    \n    CGFloat iconX = padding;\n    CGFloat iconY = padding;\n    CGFloat iconW = 30;\n    CGFloat iconH = 30;\n    \n    _iconFrame = CGRectMake(iconX, iconY, iconW, iconH);\n    \n    /** 昵称 */\n    CGFloat nameX = CGRectGetMaxX(_iconFrame) + padding;\n    CGSize nameMaxSize = [self.status.name sizeWithFont:MJNameFont];\n    CGFloat nameW = nameMaxSize.width;\n    CGFloat nameH = nameMaxSize.height;\n    CGFloat nameY = padding + (iconH - nameH) * 0.5;\n    _nameFrame = CGRectMake(nameX, nameY, nameW, nameH);\n    \n    /** 会员头像 */\n    \n    CGFloat vipX = CGRectGetMaxX(_nameFrame) + padding;\n    CGFloat vipY = nameY;\n    CGFloat vipW = 14;\n    CGFloat vipH = 14;\n    \n    _vipFrame = CGRectMake(vipX, vipY, vipW, vipH);\n    \n    /** 正文 */\n    CGFloat textX = iconX;\n    CGFloat textY = CGRectGetMaxY(_iconFrame) + padding;\n    CGFloat textW = 300;\n    CGSize textMaxSize = [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];\n    CGFloat textH = textMaxSize.height;\n    _textFrame = CGRectMake(textX, textY, textW, textH);\n    \n    /** 配图 */\n    CGFloat pictureX = iconX;\n    CGFloat pictureY = CGRectGetMaxY(_textFrame) + padding;\n    CGFloat pictureW = 100;\n    CGFloat pictureH = 100;\n    _pictureFrame = CGRectMake(pictureX, pictureY, pictureW, pictureH);\n    \n    if(self.status.picture){\n        _cellHeight = CGRectGetMaxY(_pictureFrame) + padding;\n    }else{\n        _cellHeight = CGRectGetMaxY(_textFrame) + padding;\n    }\n}\n \n@end\n\n```\n\n虽然贴上了代码，还是要说一下这个过程：\n\n- 1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。\n\n- 2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,\n\n- 3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:\n- 4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。\n\n- 5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：\n\n```\n// 1,创建cell\nMJStatusCell *cell = [MJStatusCell cellWithTableView:tableView];\n\n// 2,设置cell的数据和控件的frame\t\ncell.statusFrame = self.statusFrames[indexPath.row];\n\nreturn cell;\n```\n\n\n第一行代码，就是创建一个cell,创建cell代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag = @\"status\";\n    MJStatusCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n    if(cell == nil){\n        cell = [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];\n    }\n\n    return cell;\n}\n\n```\n\n这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。\n\n\n再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.\n现在贴上赋值的代码：\n\n```\n-(void)setStatusFrame:(MJStatusFrame *)statusFrame{\n\n    _statusFrame = statusFrame;\n\n    //1,设置数据\n    [self settingData];\n\n    //2，设置frame\n    [self settingFrame];\n\n}\n\n/**\n 设置数据\n */\n-(void)settingData{\n\n    /** 头像 */\n    self.iconImgView.image = [UIImage imageNamed:self.statusFrame.status.icon];\n\n    /** 昵称 */\n    self.nameLbl.text = self.statusFrame.status.name;\n\n    /** 会员头像 */\n    if(self.statusFrame.status.vip){\n        self.vipImgView.hidden = NO;\n        self.nameLbl.textColor = [UIColor redColor];\n    }else{\n        self.vipImgView.hidden = YES;\n        self.nameLbl.textColor = [UIColor blackColor];\n    }\n\n    /** 正文 */\n    self.textLbl.text = self.statusFrame.status.text;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n        self.pictureImgView.hidden = NO;\n        self.pictureImgView.image = [UIImage imageNamed:self.statusFrame.status.picture];\n    }else{\n        self.pictureImgView.hidden = YES;\n    }\n}\n\n/**\n 设置frame\n */\n\n-(void)settingFrame{\n\n    /** 头像 */\n    self.iconImgView.frame = self.statusFrame.iconFrame;\n\n    /** 昵称 */\n    self.nameLbl.frame =self.statusFrame.nameFrame;\n\n    /** 会员头像 */\n    self.vipImgView.frame = self.statusFrame.vipFrame;\n\n    /** 正文 */\n    self.textLbl.frame = self.statusFrame.textFrame;\n\n    /** 配图 */\n    if(self.statusFrame.status.picture){\n         self.pictureImgView.frame = self.statusFrame.pictureFrame;\n\n    }\n}\n\n```\n\n通过代码自定义cell(cell的高度不一致)\n\n总结：\n\n- 1，新建一个继承自UITableViewCell类。\n\n- 2，重新这个类的initWithStyle:reuseIdentifier:方法\n\n\t   a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\t\n\t   b,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)\n\n- 3，提供2个模型\n\n\t  a,数据模型：存放文字数据\\图片数据\n\t\n\t  b,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度\n\n- 4，cell拥有一个frame模型（不要直接拥有数据模型）\n\n- 5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame\n\n- 6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）\n","slug":"oc/UITableView/oc-UITableViewCell-sc","published":1,"updated":"2020-09-01T12:58:00.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh7004ju3s6hw125vod","content":"<p>先看一下，我们将要做出的效果：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg\" alt></p>\n<p>如上图中，现在分析：</p>\n<ul>\n<li>1，这像是一个表格，而表格的每一个cell高度不定。</li>\n<li>2，头像不一样 </li>\n<li>3，昵称不一样，昵称的字数也不一样 </li>\n<li>4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) </li>\n<li>5，内容不一样，内容的高度不定 </li>\n<li>6，有的有配图，有的没有配图</li>\n</ul>\n<p>如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。</p>\n<p>先看一下我们的plist文件：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg\" alt></p>\n<p>一：文件分类及作用：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg\" alt></p>\n<ul>\n<li>1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 </li>\n<li>2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。</li>\n<li>3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。</li>\n<li>4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。</li>\n</ul>\n<p>二：各个文件的代码：</p>\n<p>1，ViewController.m文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJViewController ()</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong)NSArray *statusFrames;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;** 懒加载（只加载一次） *&#x2F;</span><br><span class=\"line\">-(NSArray *)statusFrames&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(_statusFrames &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;statuses.plist&quot; ofType:nil];</span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\">        NSMutableArray *statusFrameArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\">            MJStatus *status &#x3D; [MJStatus statusWithDict:dict];</span><br><span class=\"line\">            MJStatusFrame *statusFrame &#x3D; [[MJStatusFrame alloc] init];</span><br><span class=\"line\">            statusFrame.status &#x3D; status;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [statusFrameArray addObject:statusFrame];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _statusFrames &#x3D; statusFrameArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _statusFrames;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark - UITableView的数据源方法</span><br><span class=\"line\">&#x2F;** 返回本组数据有多少行 *&#x2F;</span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\">    return self.statusFrames.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark 返回每一组的UITableViewcell</span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 2,设置cell的数据和控件的frame</span><br><span class=\"line\">    cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;** 每一行的高度 *&#x2F;</span><br><span class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    MJStatusFrame *statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return statusFrame.cellHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，StatusCell.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@class MJStatusFrame;</span><br><span class=\"line\">@interface MJStatusCell : UITableViewCell</span><br><span class=\"line\">@property(nonatomic,strong) MJStatusFrame *statusFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusCell.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\">@interface MJStatusCell ()</span><br><span class=\"line\">&#x2F;** </span><br><span class=\"line\"> 头像 </span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *iconImgView;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *nameLbl;</span><br><span class=\"line\">&#x2F;** 会员图标 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *vipImgView;</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *textLbl;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *pictureImgView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusCell</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;头像</span><br><span class=\"line\">        UIImageView *iconImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:iconImgView];</span><br><span class=\"line\">        self.iconImgView &#x3D; iconImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;昵称</span><br><span class=\"line\">        UILabel *nameLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        nameLbl.font &#x3D; MJNameFont;</span><br><span class=\"line\">        [self.contentView addSubview:nameLbl];</span><br><span class=\"line\">        self.nameLbl &#x3D; nameLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;会员头像</span><br><span class=\"line\">        UIImageView *vipImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        vipImgView.image &#x3D; [UIImage imageNamed:@&quot;vip&quot;];</span><br><span class=\"line\">        [self.contentView addSubview:vipImgView];</span><br><span class=\"line\">        self.vipImgView &#x3D; vipImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;正文</span><br><span class=\"line\">        UILabel *textLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        textLbl.numberOfLines &#x3D; 0;</span><br><span class=\"line\">        textLbl.font &#x3D; MJTextFont;</span><br><span class=\"line\">        [self.contentView addSubview:textLbl];</span><br><span class=\"line\">        self.textLbl &#x3D; textLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;配图</span><br><span class=\"line\">        UIImageView *pictureImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:pictureImgView];</span><br><span class=\"line\">        self.pictureImgView &#x3D; pictureImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3, status.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatus : NSObject</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *text;</span><br><span class=\"line\">&#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *name;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *picture;</span><br><span class=\"line\">&#x2F;** 会员 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,assign) BOOL vip;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>Status.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatus</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    if(self &#x3D; [super init])&#123;</span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>4，StatusFrame.h文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">@class MJStatus;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatusFrame : NSObject</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect iconFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect nameFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect vipFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect textFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect pictureFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGFloat cellHeight;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong) MJStatus *status;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusFrame.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusFrame</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatus:(MJStatus *)status&#123;</span><br><span class=\"line\">    _status &#x3D; status;</span><br><span class=\"line\">    CGFloat padding &#x3D; 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat iconX &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconY &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconW &#x3D; 30;</span><br><span class=\"line\">    CGFloat iconH &#x3D; 30;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _iconFrame &#x3D; CGRectMake(iconX, iconY, iconW, iconH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    CGFloat nameX &#x3D; CGRectGetMaxX(_iconFrame) + padding;</span><br><span class=\"line\">    CGSize nameMaxSize &#x3D; [self.status.name sizeWithFont:MJNameFont];</span><br><span class=\"line\">    CGFloat nameW &#x3D; nameMaxSize.width;</span><br><span class=\"line\">    CGFloat nameH &#x3D; nameMaxSize.height;</span><br><span class=\"line\">    CGFloat nameY &#x3D; padding + (iconH - nameH) * 0.5;</span><br><span class=\"line\">    _nameFrame &#x3D; CGRectMake(nameX, nameY, nameW, nameH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat vipX &#x3D; CGRectGetMaxX(_nameFrame) + padding;</span><br><span class=\"line\">    CGFloat vipY &#x3D; nameY;</span><br><span class=\"line\">    CGFloat vipW &#x3D; 14;</span><br><span class=\"line\">    CGFloat vipH &#x3D; 14;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _vipFrame &#x3D; CGRectMake(vipX, vipY, vipW, vipH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    CGFloat textX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat textY &#x3D; CGRectGetMaxY(_iconFrame) + padding;</span><br><span class=\"line\">    CGFloat textW &#x3D; 300;</span><br><span class=\"line\">    CGSize textMaxSize &#x3D; [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];</span><br><span class=\"line\">    CGFloat textH &#x3D; textMaxSize.height;</span><br><span class=\"line\">    _textFrame &#x3D; CGRectMake(textX, textY, textW, textH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    CGFloat pictureX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat pictureY &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    CGFloat pictureW &#x3D; 100;</span><br><span class=\"line\">    CGFloat pictureH &#x3D; 100;</span><br><span class=\"line\">    _pictureFrame &#x3D; CGRectMake(pictureX, pictureY, pictureW, pictureH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(self.status.picture)&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_pictureFrame) + padding;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>虽然贴上了代码，还是要说一下这个过程：</p>\n<ul>\n<li><p>1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。</p>\n</li>\n<li><p>2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,</p>\n</li>\n<li><p>3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:</p>\n</li>\n<li><p>4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。</p>\n</li>\n<li><p>5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2,设置cell的数据和控件的frame\t</span><br><span class=\"line\">cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">return cell;</span><br></pre></td></tr></table></figure>\n\n\n<p>第一行代码，就是创建一个cell,创建cell代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。</p>\n<p>再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.<br>现在贴上赋值的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代码自定义cell(cell的高度不一致)</p>\n<p>总结：</p>\n<ul>\n<li><p>1，新建一个继承自UITableViewCell类。</p>\n</li>\n<li><p>2，重新这个类的initWithStyle:reuseIdentifier:方法</p>\n<pre><code>a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\nb,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)</code></pre></li>\n<li><p>3，提供2个模型</p>\n<pre><code>a,数据模型：存放文字数据\\图片数据\n\nb,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度</code></pre></li>\n<li><p>4，cell拥有一个frame模型（不要直接拥有数据模型）</p>\n</li>\n<li><p>5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame</p>\n</li>\n<li><p>6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>先看一下，我们将要做出的效果：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg\" alt></p>\n<p>如上图中，现在分析：</p>\n<ul>\n<li>1，这像是一个表格，而表格的每一个cell高度不定。</li>\n<li>2，头像不一样 </li>\n<li>3，昵称不一样，昵称的字数也不一样 </li>\n<li>4，有的有会员图标（昵称显示红色），有的没有（昵称显示黑色) </li>\n<li>5，内容不一样，内容的高度不定 </li>\n<li>6，有的有配图，有的没有配图</li>\n</ul>\n<p>如果使用xib创建，那么cell的高度无法确定，控件的位置无法确定，所以，我们采用，整个表格使用一个UITableViewController, 里边的cell采用代码创建。数据使用加载plist文件的方式。</p>\n<p>先看一下我们的plist文件：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg\" alt></p>\n<p>一：文件分类及作用：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg\" alt></p>\n<ul>\n<li>1，视图文件：StatusCell，  对应的是表格中的cell  。 也就是表格在加载UITableViewCell的时候，我们要用代码创建出来。 </li>\n<li>2，模型文件：有两个Status 和 StatusFrame，第一个是Status,  用于提供数据，例如，昵称，图片的名称，内容，等等。 第二个是StatusFrame, 用于提供cell中的各个控件的frame, 比如，图片大小及位置，内容的大小及位置，等等。</li>\n<li>3，控制器：ViewController  这个ViewController继承自UITableViewController, 这样就拥有了UITableView的各个属性。</li>\n<li>4, 还有一点，我们的storyboard文件中，我们直接拖一个UITableView即可，同时，在属性设置框中将它的Custom Class  设置为ViewController 。</li>\n</ul>\n<p>二：各个文件的代码：</p>\n<p>1，ViewController.m文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJViewController ()</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong)NSArray *statusFrames;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"> </span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;** 懒加载（只加载一次） *&#x2F;</span><br><span class=\"line\">-(NSArray *)statusFrames&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(_statusFrames &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;statuses.plist&quot; ofType:nil];</span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\">        NSMutableArray *statusFrameArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\">            MJStatus *status &#x3D; [MJStatus statusWithDict:dict];</span><br><span class=\"line\">            MJStatusFrame *statusFrame &#x3D; [[MJStatusFrame alloc] init];</span><br><span class=\"line\">            statusFrame.status &#x3D; status;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [statusFrameArray addObject:statusFrame];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _statusFrames &#x3D; statusFrameArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _statusFrames;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark - UITableView的数据源方法</span><br><span class=\"line\">&#x2F;** 返回本组数据有多少行 *&#x2F;</span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\">    return self.statusFrames.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#pragma mark 返回每一组的UITableViewcell</span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 2,设置cell的数据和控件的frame</span><br><span class=\"line\">    cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;** 每一行的高度 *&#x2F;</span><br><span class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    MJStatusFrame *statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return statusFrame.cellHeight;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，StatusCell.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\">@class MJStatusFrame;</span><br><span class=\"line\">@interface MJStatusCell : UITableViewCell</span><br><span class=\"line\">@property(nonatomic,strong) MJStatusFrame *statusFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusCell.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatusCell.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\">@interface MJStatusCell ()</span><br><span class=\"line\">&#x2F;** </span><br><span class=\"line\"> 头像 </span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *iconImgView;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *nameLbl;</span><br><span class=\"line\">&#x2F;** 会员图标 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *vipImgView;</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UILabel *textLbl;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,weak) UIImageView *pictureImgView;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusCell</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self &#x3D; [super initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;头像</span><br><span class=\"line\">        UIImageView *iconImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:iconImgView];</span><br><span class=\"line\">        self.iconImgView &#x3D; iconImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;昵称</span><br><span class=\"line\">        UILabel *nameLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        nameLbl.font &#x3D; MJNameFont;</span><br><span class=\"line\">        [self.contentView addSubview:nameLbl];</span><br><span class=\"line\">        self.nameLbl &#x3D; nameLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;会员头像</span><br><span class=\"line\">        UIImageView *vipImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        vipImgView.image &#x3D; [UIImage imageNamed:@&quot;vip&quot;];</span><br><span class=\"line\">        [self.contentView addSubview:vipImgView];</span><br><span class=\"line\">        self.vipImgView &#x3D; vipImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;正文</span><br><span class=\"line\">        UILabel *textLbl &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">        textLbl.numberOfLines &#x3D; 0;</span><br><span class=\"line\">        textLbl.font &#x3D; MJTextFont;</span><br><span class=\"line\">        [self.contentView addSubview:textLbl];</span><br><span class=\"line\">        self.textLbl &#x3D; textLbl;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;配图</span><br><span class=\"line\">        UIImageView *pictureImgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">        [self.contentView addSubview:pictureImgView];</span><br><span class=\"line\">        self.pictureImgView &#x3D; pictureImgView;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3, status.h中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatus : NSObject</span><br><span class=\"line\">&#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *text;</span><br><span class=\"line\">&#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\">&#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *name;</span><br><span class=\"line\">&#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,copy) NSString *picture;</span><br><span class=\"line\">&#x2F;** 会员 *&#x2F;</span><br><span class=\"line\">@property(nonatomic,assign) BOOL vip;</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>Status.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatus</span><br><span class=\"line\"> </span><br><span class=\"line\">+(id)statusWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\">    if(self &#x3D; [super init])&#123;</span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>4，StatusFrame.h文件中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">@class MJStatus;</span><br><span class=\"line\"> </span><br><span class=\"line\">@interface MJStatusFrame : NSObject</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect iconFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect nameFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect vipFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect textFrame;</span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGRect pictureFrame;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,assign,readonly) CGFloat cellHeight;</span><br><span class=\"line\"> </span><br><span class=\"line\">@property(nonatomic,strong) MJStatus *status;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>StatusFrame.m中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJStatusFrame.h&quot;</span><br><span class=\"line\">#import &quot;MJStatus.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MJNameFont [UIFont systemFontOfSize:13]</span><br><span class=\"line\">#define MJTextFont [UIFont systemFontOfSize:12]</span><br><span class=\"line\"> </span><br><span class=\"line\">@implementation MJStatusFrame</span><br><span class=\"line\"> </span><br><span class=\"line\">-(void)setStatus:(MJStatus *)status&#123;</span><br><span class=\"line\">    _status &#x3D; status;</span><br><span class=\"line\">    CGFloat padding &#x3D; 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat iconX &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconY &#x3D; padding;</span><br><span class=\"line\">    CGFloat iconW &#x3D; 30;</span><br><span class=\"line\">    CGFloat iconH &#x3D; 30;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _iconFrame &#x3D; CGRectMake(iconX, iconY, iconW, iconH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    CGFloat nameX &#x3D; CGRectGetMaxX(_iconFrame) + padding;</span><br><span class=\"line\">    CGSize nameMaxSize &#x3D; [self.status.name sizeWithFont:MJNameFont];</span><br><span class=\"line\">    CGFloat nameW &#x3D; nameMaxSize.width;</span><br><span class=\"line\">    CGFloat nameH &#x3D; nameMaxSize.height;</span><br><span class=\"line\">    CGFloat nameY &#x3D; padding + (iconH - nameH) * 0.5;</span><br><span class=\"line\">    _nameFrame &#x3D; CGRectMake(nameX, nameY, nameW, nameH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGFloat vipX &#x3D; CGRectGetMaxX(_nameFrame) + padding;</span><br><span class=\"line\">    CGFloat vipY &#x3D; nameY;</span><br><span class=\"line\">    CGFloat vipW &#x3D; 14;</span><br><span class=\"line\">    CGFloat vipH &#x3D; 14;</span><br><span class=\"line\">    </span><br><span class=\"line\">    _vipFrame &#x3D; CGRectMake(vipX, vipY, vipW, vipH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    CGFloat textX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat textY &#x3D; CGRectGetMaxY(_iconFrame) + padding;</span><br><span class=\"line\">    CGFloat textW &#x3D; 300;</span><br><span class=\"line\">    CGSize textMaxSize &#x3D; [self.status.text sizeWithFont:MJTextFont constrainedToSize:CGSizeMake(300, MAXFLOAT) lineBreakMode:UILineBreakModeCharacterWrap];</span><br><span class=\"line\">    CGFloat textH &#x3D; textMaxSize.height;</span><br><span class=\"line\">    _textFrame &#x3D; CGRectMake(textX, textY, textW, textH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    CGFloat pictureX &#x3D; iconX;</span><br><span class=\"line\">    CGFloat pictureY &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    CGFloat pictureW &#x3D; 100;</span><br><span class=\"line\">    CGFloat pictureH &#x3D; 100;</span><br><span class=\"line\">    _pictureFrame &#x3D; CGRectMake(pictureX, pictureY, pictureW, pictureH);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(self.status.picture)&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_pictureFrame) + padding;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        _cellHeight &#x3D; CGRectGetMaxY(_textFrame) + padding;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>虽然贴上了代码，还是要说一下这个过程：</p>\n<ul>\n<li><p>1，在控制器初始化的时候，从plist文件中将数据提取出来，然后放到Status这个模型中，在创建一个StatusFrame模型，这个StatusFrame模型中有一个属性是Status, 而数组中放入的就是StatusFrame这个模型对象。 在赋值的时候，就把各个控件的frame 以 cell的高度计算了出来。</p>\n</li>\n<li><p>2，控制器初始化完以后，会先加载一共有多少组这个方法，-(NSInteger)numberOfSectionsInTableView:  ,</p>\n</li>\n<li><p>3，继续加载每组有多少行这个方法：-(NSInteger)tableView:numberOfRowsInSection:</p>\n</li>\n<li><p>4，继续加载 -(CGFloat)tableView:heightForRowAtIndexPath: 这个方法，这个方法主要是返回表格中，每一行的高度，这时候，我们就可以从已经加载完的数组将cell的高度提取出来了。</p>\n</li>\n<li><p>5，加载完每一组高度这个方法之后，会继续加载 -(UITableViewCell *)tableView:cellForRowAtIndexPath: 这个方法是返回每一行的cell.  这段代码被调用的频率非常高，不用在这段代码中频繁创建cell,这样效率会有点低。现在粘上此段代码：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 1,创建cell</span><br><span class=\"line\">MJStatusCell *cell &#x3D; [MJStatusCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 2,设置cell的数据和控件的frame\t</span><br><span class=\"line\">cell.statusFrame &#x3D; self.statusFrames[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">return cell;</span><br></pre></td></tr></table></figure>\n\n\n<p>第一行代码，就是创建一个cell,创建cell代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag &#x3D; @&quot;status&quot;;</span><br><span class=\"line\">    MJStatusCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\">    if(cell &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\">        cell &#x3D; [[MJStatusCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:flag];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码是采用，先从缓存池中去查找，是否有被先前不用的cell ,如果没有，就去创建一个cell,如果有cell,直接返回cell,如果没有cell，就直接创建一个cell。当然，在创建cell的时候，我们会创建这个cell中的子控件。</p>\n<p>再看  cell.statusFrame = self.statusFrames[indexPath.row]; 这行代码，这行代码是将存在数组中的模型对象数据提取出来，赋值给cell的frame对象，在赋值的时候，我们会设置cell控件中的数据和空间的frame.<br>现在贴上赋值的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setStatusFrame:(MJStatusFrame *)statusFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _statusFrame &#x3D; statusFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置数据</span><br><span class=\"line\">    [self settingData];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2，设置frame</span><br><span class=\"line\">    [self settingFrame];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置数据</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(void)settingData&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.text &#x3D; self.statusFrame.status.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.vip)&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor redColor];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.vipImgView.hidden &#x3D; YES;</span><br><span class=\"line\">        self.nameLbl.textColor &#x3D; [UIColor blackColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.text &#x3D; self.statusFrame.status.text;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; NO;</span><br><span class=\"line\">        self.pictureImgView.image &#x3D; [UIImage imageNamed:self.statusFrame.status.picture];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        self.pictureImgView.hidden &#x3D; YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 设置frame</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)settingFrame&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 头像 *&#x2F;</span><br><span class=\"line\">    self.iconImgView.frame &#x3D; self.statusFrame.iconFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 昵称 *&#x2F;</span><br><span class=\"line\">    self.nameLbl.frame &#x3D;self.statusFrame.nameFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 会员头像 *&#x2F;</span><br><span class=\"line\">    self.vipImgView.frame &#x3D; self.statusFrame.vipFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 正文 *&#x2F;</span><br><span class=\"line\">    self.textLbl.frame &#x3D; self.statusFrame.textFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 配图 *&#x2F;</span><br><span class=\"line\">    if(self.statusFrame.status.picture)&#123;</span><br><span class=\"line\">         self.pictureImgView.frame &#x3D; self.statusFrame.pictureFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代码自定义cell(cell的高度不一致)</p>\n<p>总结：</p>\n<ul>\n<li><p>1，新建一个继承自UITableViewCell类。</p>\n</li>\n<li><p>2，重新这个类的initWithStyle:reuseIdentifier:方法</p>\n<pre><code>a,添加所有需要显示的子控件（不需要设置子控件的数据和frame,子控件要添加到contentView中）\n\nb,进行子控件的一次性的属性设置(有些属性只需要设置一次，比如，字体，固定的图片等)</code></pre></li>\n<li><p>3，提供2个模型</p>\n<pre><code>a,数据模型：存放文字数据\\图片数据\n\nb,frame模型：存放数据模型，以及所有子控件的frame,以及cell的高度</code></pre></li>\n<li><p>4，cell拥有一个frame模型（不要直接拥有数据模型）</p>\n</li>\n<li><p>5，重写frame模型属性的setter方法：在这个方法中设置子控件的显示数据和frame</p>\n</li>\n<li><p>6, frame模型数据的初始化采用懒加载的方式（每一个cell对应的frame模型数据只加载一次）</p>\n</li>\n</ul>\n"},{"title":"使用xib文件创建UITableViewCell","date":"2020-04-03T09:15:58.000Z","_content":"\n现在我们看一下最终效果： 上部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg)\n\n\n底部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg)\n\n\n如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。\n\n一：代码结构如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg)\n\n代码部分解析：\n\n- 1, 第一部分是控制器\n\n- 2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .\n\n- 3, 第三部分是 尾部的view类和xib\n\n- 4, 第四部分是头部的view类和xib\n\n- 5, 第五部分是模型对象\n\n二：代码部分：\n\n1，ViewController.m文件：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJTg.h\"\n\n#import \"MJTgCell.h\"\n\n#import \"MJTgFooterView.h\"\n\n#import \"MJTgHeaderView.h\"\n\n\n\n@interface MJViewController () <UITableViewDataSource,MJTgFooterViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UITableView *tableView;\n\n@property(nonatomic,strong) NSMutableArray *tgs;\n\n@end\n\n@implementation MJViewController\n\n\n\n- (void)viewDidLoad\n\n{\n\n    [super viewDidLoad];\n\n    //设置每一行的高度\n\nself.tableView.rowHeight = 80;\n\n    \n\n    MJTgFooterView *footerView = [MJTgFooterView tgFooterView];\n\n    footerView.delegate =self;\n\n    self.tableView.tableFooterView = footerView;\n\n    \n\n    self.tableView.tableHeaderView = [MJTgHeaderView tgHeaderView];\n\n    \n\n}\n\n#pragma mark - MJTgFooterViewDelegate的代理方法\n\n/** 加载按钮的更多数据 */\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView{\n\n   \n\n    //加载更多的模型数据\n\n    int count = self.tgs.count;\n\n    NSArray *array = self.tgs;\n\n    for (int i=0; i<count; i++) {\n\n        MJTg *tg = array[i];\n\n        MJTg *tempTg = [[MJTg alloc] init];\n\n        tempTg.title = tg.title;\n\n        tempTg.icon =tg.icon;\n\n        tempTg.price = tg.price;\n\n        tempTg.buyCount = tg.buyCount;\n\n        \n\n        [self.tgs addObject:tempTg];\n\n    }    \n\n    //2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法\n\n    [self.tableView reloadData];\n\n}\n\n\n\n-(NSMutableArray *)tgs{\n\n    if(_tgs == nil){\n\n        // 初始化\n\n        // 1. 获得plist的全路径\n\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"tgs.plist\" ofType:nil];\n\n        //2,健在数组\n\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n\n        \n\n        //3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中\n\n        NSMutableArray *tgArray = [NSMutableArray array];\n\n        for (NSDictionary *dict in dictArray) {\n\n            // 3.1 创建模型对象\n\n            MJTg *tg=[MJTg tgWithDict:dict];\n\n            // 3.2 添加模型对象到数组中\n\n            [tgArray addObject:tg];\n\n        }\n\n        //4,赋值\n\n        _tgs = tgArray;\n\n    }\n\n    return _tgs;\n\n}\n\n#pragma mark - 数据源方法\n\n/** 一共有多少行数据 */\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return self.tgs.count;\n\n}\n\n/** 每一行显示怎么样的cell */\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{ \n\n    MJTgCell *cell =[MJTgCell cellWithTableView:tableView];\n\n    MJTg *tg = self.tgs[indexPath.row];\n\n    cell.tg =tg;\n\n    return cell;\n\n}\n\n@end\n\n```\n\n2，TgCell的xib文件和TgCell.h对应的部分，如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg)\n\nTgCell.h代码如下：\n\n\n```\n#import <Foundation/Foundation.h>\n\n@class MJTg;\n\n@interface MJTgCell : UITableViewCell\n\n\n\n@property (weak, nonatomic) IBOutlet UIImageView *iconView;\n\n\n\n@property (weak, nonatomic) IBOutlet UILabel *titleLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *priceLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;\n\n\n\n/** 团购模型 */\n\n@property(nonatomic,strong) MJTg *tg;\n\n\n\n/**\n\n 通过一个tableView来创建一个cell\n\n */\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView;\n\n\n\n@end\n\n\n\nTgCell.m文件如下：\n\n\n\n#import \"MJTgCell.h\"\n\n#import \"MJTg.h\"\n\n@implementation MJTgCell\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n\n\n\n-(void)setTg:(MJTg *)tg{\n\n    self.iconView.image = [UIImage imageNamed:tg.icon];\n\n    self.titleLbl.text = tg.title;\n\n    self.priceLbl.text = [NSString stringWithFormat:@\"￥%@\",tg.price];\n\n    self.buyCountLbl.text = [NSString stringWithFormat:@\"%@人已购买\",tg.buyCount];\n\n}\n\n\n\n@end\n```\n\n3，TgFooterView的xib文件和TgFooterView.h对象如下：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg)\n\n这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。\n\nTgFooterView.h代码如下：\n\n```\n#import <UIKit/UIKit.h>\n\n@class MJTgFooterView;\n\n@protocol MJTgFooterViewDelegate <NSObject>\n\n\n\n@optional\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;\n\n\n\n@end\n\n\n\n@interface MJTgFooterView : UIView\n\n\n\n@property(nonatomic,weak) id<MJTgFooterViewDelegate> delegate;\n\n\n\n+(id)tgFooterView;\n\n\n\n@end\n\n\n\nTgFooterView.m文件代码：\n\n\n\n#import \"MJTgFooterView.h\"\n\n\n\n@interface MJTgFooterView ()\n\n@property (weak, nonatomic) IBOutlet UIButton *loadBtn;\n\n@property (weak, nonatomic) IBOutlet UIView *loadingView;\n\n- (IBAction)loadBtnClick;\n\n\n\n@end\n\n@implementation MJTgFooterView\n\n\n\n+(id)tgFooterView{\n\n    //创建Nib对象\n\n//    UINib *nib = [UINib nibWithNibName:@\"MJTgFooterView\" bundle:[NSBundle mainBundle]];\n\n//    return [[nib instantiateWithOwner:nil options:nil] lastObject];\n\n    \n\n    return [[NSBundle mainBundle] loadNibNamed:@\"MJTgFooterView\" owner:nil options:nil][0];\n\n}\n\n\n\n- (IBAction)loadBtnClick {\n\n    \n\n    //1,将加载按钮隐藏\n\n    self.loadBtn.hidden = YES;\n\n    \n\n    //2,刷新按钮显示出来\n\n    self.loadingView.hidden = NO;\n\n    \n\n    //3.0秒之后执行block中\n\n    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));\n\n    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n\n        //3,通知代理，按钮被人点击了\n\n        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)]){\n\n            [self.delegate tgFooterViewDidLoadBtnClick:self];\n\n        }\n\n        \n\n        //4,加载按钮显示，刷新按钮隐藏\n\n        self.loadBtn.hidden = NO;\n\n        self.loadingView.hidden = YES;\n\n        \n\n    });\n\n}\n\n@end\n```\n\n3，TgHeaderView的xib和TgHeaderView属性对应部分：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg)\n\nTgHeaderView.h文件的代码：\n\n```\n#import <UIKit/UIKit.h>\n\n\n\n@interface MJTgHeaderView : UIView\n\n\n\n+(id)tgHeaderView;\n\n\n\n@end\n\n\n\nTgHeaderView.m文件代码：\n\n\n\n#import \"MJTgHeaderView.h\"\n\n\n\n#define MJImgCount 5\n\n\n\n@interface MJTgHeaderView () <UIScrollViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;\n\n@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;\n\n\n\n@property(nonatomic,strong) NSTimer *timer;\n\n@end\n\n\n\n@implementation MJTgHeaderView \n\n\n\n\n\n+(id)tgHeaderView{\n\n    \n\n    return [[[NSBundle mainBundle] loadNibNamed:@\"MJTgHeaderView\" owner:nil options:nil] lastObject];\n\n}\n\n\n\n/** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） */\n\n-(void)awakeFromNib{\n\n   \n\n    //1,设置scrollView的代理\n\n    self.scrollView.delegate = self;\n\n    //2,设置scrollView中的image中的参数\n\n    CGFloat imgViewY = 0;\n\n    CGFloat imgViewW = self.scrollView.frame.size.width;\n\n    CGFloat imgViewH = self.scrollView.frame.size.height;\n\n    \n\n    for (int i=0; i<MJImgCount; i++) {\n\n        UIImageView *imgView = [[UIImageView alloc] init];\n\n        UIImage *img = [UIImage imageNamed:[NSString stringWithFormat:@\"ad_0%i\",i]];\n\n        imgView.image = img;\n\n        CGFloat imgViewX = i*imgViewW;\n\n        imgView.frame = CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);\n\n        //3,将image添加到scrollView中\n\n        [self.scrollView addSubview:imgView];\n\n    }\n\n    \n\n    //4,设置scrollView的各项参数\n\n    //4.1,设置scrollView的滚动区域\n\n    self.scrollView.contentSize = CGSizeMake(imgViewW * MJImgCount, 0);\n\n    \n\n    //4.2, 不显示横向滚动条\n\n    self.scrollView.showsHorizontalScrollIndicator = NO;\n\n    //4.3  分页\n\n    self.scrollView.pagingEnabled = YES;\n\n\n\n    //5,设置pageControl的总共页数\n\n    self.pageControl.numberOfPages = MJImgCount;\n\n    \n\n    //6,添加定时器\n\n    [self addTimer];\n\n}\n\n/** 添加定时器 */\n\n-(void)addTimer{\n\n    self.timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];\n\n    //消息循环（设置当前定时器的优先级比较）\n\n    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];\n\n}\n\n\n\n-(void)nextImg{\n\n    //1,增加pageControl的页码\n\n    int currentIndex = self.pageControl.currentPage;\n\n    if(currentIndex == MJImgCount-1){\n\n        currentIndex = 0;\n\n    }else{\n\n        currentIndex += 1;\n\n    }\n\n    self.pageControl.currentPage = currentIndex;\n\n    \n\n    //2,计算scrollView的滚动位置\n\n    CGPoint offset = CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);\n\n    \n\n    //3,有滚动效果\n\n    [self.scrollView setContentOffset:offset animated:YES];\n\n\n\n}\n\n\n\n\n\n\n\n#pragma mark - scrollView的代理方法\n\n/** scrollView正在滚动 */\n\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    CGFloat offsetX = scrollView.contentOffset.x;\n\n    \n\n   \n\n    int index = (offsetX + scrollView.frame.size.width*0.5)/scrollView.frame.size.width;\n\n    \n\n    self.pageControl.currentPage = index;\n\n    \n\n}\n```\n\n\n4，Tg模型部分：\nTg.h文件：\n\n```\n#import <Foundation/Foundation.h>\n\n\n\n@interface MJTg : NSObject\n\n/** 标题 */\n\n@property(nonatomic,copy) NSString *title;\n\n/** 图标 */\n\n@property(nonatomic,copy) NSString *icon;\n\n/** 价格 */\n\n@property(nonatomic,copy) NSString *price;\n\n/** 购买人数 */\n\n@property(nonatomic,copy) NSString *buyCount;\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict;\n\n-(id)initWithDict:(NSDictionary *)dict;\n\n\n\n@end\n\n\n\nTg.m文件代码如下：\n\n\n\n#import \"MJTg.h\"\n\n\n\n@implementation MJTg\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict{\n\n    return [[self alloc] initWithDict:dict];\n\n}\n\n-(id)initWithDict:(NSDictionary *)dict{\n\n    if(self==[super init]){\n\n        [self setValuesForKeysWithDictionary:dict];\n\n    }\n\n    return self;\n\n}\n\n\n\n@end\n```\n\n注意部分：\n\n1，在TgCell.xib文件中，指定类为TgCell。\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg)\n\n2,在创建TgCell对象时，要采用Cell的重用。\n\n重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。\n\n代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n```\n\n3,使用xib封装一个view的步骤：\n\n>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）\n\n>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）\n\n>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）\n\n>4, 将xib中的空间和自定义类的.m文件进行连线\n\n>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)\n\n>6, 提供一个模型属性让外界传递模型数据\n\n>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面","source":"_posts/oc/UITableView/oc-UITableViewCell-xib.md","raw":"---\ntitle: 使用xib文件创建UITableViewCell\ndate: 2020-04-03 17:15:58\ncategories:\n- OC\n- UITableView\ntags: UITableViewCell\n---\n\n现在我们看一下最终效果： 上部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg)\n\n\n底部：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg)\n\n\n如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。\n\n一：代码结构如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg)\n\n代码部分解析：\n\n- 1, 第一部分是控制器\n\n- 2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .\n\n- 3, 第三部分是 尾部的view类和xib\n\n- 4, 第四部分是头部的view类和xib\n\n- 5, 第五部分是模型对象\n\n二：代码部分：\n\n1，ViewController.m文件：\n\n```\n#import \"MJViewController.h\"\n\n#import \"MJTg.h\"\n\n#import \"MJTgCell.h\"\n\n#import \"MJTgFooterView.h\"\n\n#import \"MJTgHeaderView.h\"\n\n\n\n@interface MJViewController () <UITableViewDataSource,MJTgFooterViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UITableView *tableView;\n\n@property(nonatomic,strong) NSMutableArray *tgs;\n\n@end\n\n@implementation MJViewController\n\n\n\n- (void)viewDidLoad\n\n{\n\n    [super viewDidLoad];\n\n    //设置每一行的高度\n\nself.tableView.rowHeight = 80;\n\n    \n\n    MJTgFooterView *footerView = [MJTgFooterView tgFooterView];\n\n    footerView.delegate =self;\n\n    self.tableView.tableFooterView = footerView;\n\n    \n\n    self.tableView.tableHeaderView = [MJTgHeaderView tgHeaderView];\n\n    \n\n}\n\n#pragma mark - MJTgFooterViewDelegate的代理方法\n\n/** 加载按钮的更多数据 */\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView{\n\n   \n\n    //加载更多的模型数据\n\n    int count = self.tgs.count;\n\n    NSArray *array = self.tgs;\n\n    for (int i=0; i<count; i++) {\n\n        MJTg *tg = array[i];\n\n        MJTg *tempTg = [[MJTg alloc] init];\n\n        tempTg.title = tg.title;\n\n        tempTg.icon =tg.icon;\n\n        tempTg.price = tg.price;\n\n        tempTg.buyCount = tg.buyCount;\n\n        \n\n        [self.tgs addObject:tempTg];\n\n    }    \n\n    //2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法\n\n    [self.tableView reloadData];\n\n}\n\n\n\n-(NSMutableArray *)tgs{\n\n    if(_tgs == nil){\n\n        // 初始化\n\n        // 1. 获得plist的全路径\n\n        NSString *path = [[NSBundle mainBundle] pathForResource:@\"tgs.plist\" ofType:nil];\n\n        //2,健在数组\n\n        NSArray *dictArray = [NSArray arrayWithContentsOfFile:path];\n\n        \n\n        //3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中\n\n        NSMutableArray *tgArray = [NSMutableArray array];\n\n        for (NSDictionary *dict in dictArray) {\n\n            // 3.1 创建模型对象\n\n            MJTg *tg=[MJTg tgWithDict:dict];\n\n            // 3.2 添加模型对象到数组中\n\n            [tgArray addObject:tg];\n\n        }\n\n        //4,赋值\n\n        _tgs = tgArray;\n\n    }\n\n    return _tgs;\n\n}\n\n#pragma mark - 数据源方法\n\n/** 一共有多少行数据 */\n\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\n    return self.tgs.count;\n\n}\n\n/** 每一行显示怎么样的cell */\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{ \n\n    MJTgCell *cell =[MJTgCell cellWithTableView:tableView];\n\n    MJTg *tg = self.tgs[indexPath.row];\n\n    cell.tg =tg;\n\n    return cell;\n\n}\n\n@end\n\n```\n\n2，TgCell的xib文件和TgCell.h对应的部分，如图：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg)\n\nTgCell.h代码如下：\n\n\n```\n#import <Foundation/Foundation.h>\n\n@class MJTg;\n\n@interface MJTgCell : UITableViewCell\n\n\n\n@property (weak, nonatomic) IBOutlet UIImageView *iconView;\n\n\n\n@property (weak, nonatomic) IBOutlet UILabel *titleLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *priceLbl;\n\n@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;\n\n\n\n/** 团购模型 */\n\n@property(nonatomic,strong) MJTg *tg;\n\n\n\n/**\n\n 通过一个tableView来创建一个cell\n\n */\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView;\n\n\n\n@end\n\n\n\nTgCell.m文件如下：\n\n\n\n#import \"MJTgCell.h\"\n\n#import \"MJTg.h\"\n\n@implementation MJTgCell\n\n\n\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n\n\n\n-(void)setTg:(MJTg *)tg{\n\n    self.iconView.image = [UIImage imageNamed:tg.icon];\n\n    self.titleLbl.text = tg.title;\n\n    self.priceLbl.text = [NSString stringWithFormat:@\"￥%@\",tg.price];\n\n    self.buyCountLbl.text = [NSString stringWithFormat:@\"%@人已购买\",tg.buyCount];\n\n}\n\n\n\n@end\n```\n\n3，TgFooterView的xib文件和TgFooterView.h对象如下：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg)\n\n这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。\n\nTgFooterView.h代码如下：\n\n```\n#import <UIKit/UIKit.h>\n\n@class MJTgFooterView;\n\n@protocol MJTgFooterViewDelegate <NSObject>\n\n\n\n@optional\n\n-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;\n\n\n\n@end\n\n\n\n@interface MJTgFooterView : UIView\n\n\n\n@property(nonatomic,weak) id<MJTgFooterViewDelegate> delegate;\n\n\n\n+(id)tgFooterView;\n\n\n\n@end\n\n\n\nTgFooterView.m文件代码：\n\n\n\n#import \"MJTgFooterView.h\"\n\n\n\n@interface MJTgFooterView ()\n\n@property (weak, nonatomic) IBOutlet UIButton *loadBtn;\n\n@property (weak, nonatomic) IBOutlet UIView *loadingView;\n\n- (IBAction)loadBtnClick;\n\n\n\n@end\n\n@implementation MJTgFooterView\n\n\n\n+(id)tgFooterView{\n\n    //创建Nib对象\n\n//    UINib *nib = [UINib nibWithNibName:@\"MJTgFooterView\" bundle:[NSBundle mainBundle]];\n\n//    return [[nib instantiateWithOwner:nil options:nil] lastObject];\n\n    \n\n    return [[NSBundle mainBundle] loadNibNamed:@\"MJTgFooterView\" owner:nil options:nil][0];\n\n}\n\n\n\n- (IBAction)loadBtnClick {\n\n    \n\n    //1,将加载按钮隐藏\n\n    self.loadBtn.hidden = YES;\n\n    \n\n    //2,刷新按钮显示出来\n\n    self.loadingView.hidden = NO;\n\n    \n\n    //3.0秒之后执行block中\n\n    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));\n\n    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n\n        //3,通知代理，按钮被人点击了\n\n        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)]){\n\n            [self.delegate tgFooterViewDidLoadBtnClick:self];\n\n        }\n\n        \n\n        //4,加载按钮显示，刷新按钮隐藏\n\n        self.loadBtn.hidden = NO;\n\n        self.loadingView.hidden = YES;\n\n        \n\n    });\n\n}\n\n@end\n```\n\n3，TgHeaderView的xib和TgHeaderView属性对应部分：\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg)\n\nTgHeaderView.h文件的代码：\n\n```\n#import <UIKit/UIKit.h>\n\n\n\n@interface MJTgHeaderView : UIView\n\n\n\n+(id)tgHeaderView;\n\n\n\n@end\n\n\n\nTgHeaderView.m文件代码：\n\n\n\n#import \"MJTgHeaderView.h\"\n\n\n\n#define MJImgCount 5\n\n\n\n@interface MJTgHeaderView () <UIScrollViewDelegate>\n\n@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;\n\n@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;\n\n\n\n@property(nonatomic,strong) NSTimer *timer;\n\n@end\n\n\n\n@implementation MJTgHeaderView \n\n\n\n\n\n+(id)tgHeaderView{\n\n    \n\n    return [[[NSBundle mainBundle] loadNibNamed:@\"MJTgHeaderView\" owner:nil options:nil] lastObject];\n\n}\n\n\n\n/** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） */\n\n-(void)awakeFromNib{\n\n   \n\n    //1,设置scrollView的代理\n\n    self.scrollView.delegate = self;\n\n    //2,设置scrollView中的image中的参数\n\n    CGFloat imgViewY = 0;\n\n    CGFloat imgViewW = self.scrollView.frame.size.width;\n\n    CGFloat imgViewH = self.scrollView.frame.size.height;\n\n    \n\n    for (int i=0; i<MJImgCount; i++) {\n\n        UIImageView *imgView = [[UIImageView alloc] init];\n\n        UIImage *img = [UIImage imageNamed:[NSString stringWithFormat:@\"ad_0%i\",i]];\n\n        imgView.image = img;\n\n        CGFloat imgViewX = i*imgViewW;\n\n        imgView.frame = CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);\n\n        //3,将image添加到scrollView中\n\n        [self.scrollView addSubview:imgView];\n\n    }\n\n    \n\n    //4,设置scrollView的各项参数\n\n    //4.1,设置scrollView的滚动区域\n\n    self.scrollView.contentSize = CGSizeMake(imgViewW * MJImgCount, 0);\n\n    \n\n    //4.2, 不显示横向滚动条\n\n    self.scrollView.showsHorizontalScrollIndicator = NO;\n\n    //4.3  分页\n\n    self.scrollView.pagingEnabled = YES;\n\n\n\n    //5,设置pageControl的总共页数\n\n    self.pageControl.numberOfPages = MJImgCount;\n\n    \n\n    //6,添加定时器\n\n    [self addTimer];\n\n}\n\n/** 添加定时器 */\n\n-(void)addTimer{\n\n    self.timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];\n\n    //消息循环（设置当前定时器的优先级比较）\n\n    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];\n\n}\n\n\n\n-(void)nextImg{\n\n    //1,增加pageControl的页码\n\n    int currentIndex = self.pageControl.currentPage;\n\n    if(currentIndex == MJImgCount-1){\n\n        currentIndex = 0;\n\n    }else{\n\n        currentIndex += 1;\n\n    }\n\n    self.pageControl.currentPage = currentIndex;\n\n    \n\n    //2,计算scrollView的滚动位置\n\n    CGPoint offset = CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);\n\n    \n\n    //3,有滚动效果\n\n    [self.scrollView setContentOffset:offset animated:YES];\n\n\n\n}\n\n\n\n\n\n\n\n#pragma mark - scrollView的代理方法\n\n/** scrollView正在滚动 */\n\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView{\n\n    CGFloat offsetX = scrollView.contentOffset.x;\n\n    \n\n   \n\n    int index = (offsetX + scrollView.frame.size.width*0.5)/scrollView.frame.size.width;\n\n    \n\n    self.pageControl.currentPage = index;\n\n    \n\n}\n```\n\n\n4，Tg模型部分：\nTg.h文件：\n\n```\n#import <Foundation/Foundation.h>\n\n\n\n@interface MJTg : NSObject\n\n/** 标题 */\n\n@property(nonatomic,copy) NSString *title;\n\n/** 图标 */\n\n@property(nonatomic,copy) NSString *icon;\n\n/** 价格 */\n\n@property(nonatomic,copy) NSString *price;\n\n/** 购买人数 */\n\n@property(nonatomic,copy) NSString *buyCount;\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict;\n\n-(id)initWithDict:(NSDictionary *)dict;\n\n\n\n@end\n\n\n\nTg.m文件代码如下：\n\n\n\n#import \"MJTg.h\"\n\n\n\n@implementation MJTg\n\n\n\n+(id)tgWithDict:(NSDictionary *)dict{\n\n    return [[self alloc] initWithDict:dict];\n\n}\n\n-(id)initWithDict:(NSDictionary *)dict{\n\n    if(self==[super init]){\n\n        [self setValuesForKeysWithDictionary:dict];\n\n    }\n\n    return self;\n\n}\n\n\n\n@end\n```\n\n注意部分：\n\n1，在TgCell.xib文件中，指定类为TgCell。\n\n![](oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg)\n\n2,在创建TgCell对象时，要采用Cell的重用。\n\n重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。\n\n代码如下：\n\n```\n+(id)cellWithTableView:(UITableView *)tableView{\n\n    static NSString *flag= @\"tgs\";\n\n    \n\n    MJTgCell *cell = [tableView dequeueReusableCellWithIdentifier:flag];\n\n    if(cell ==nil){\n\n        cell = [[NSBundle mainBundle] loadNibNamed:@\"MJTgCell\" owner:nil options:nil][0];\n\n        \n\n    }\n\n    return cell;\n\n}\n```\n\n3,使用xib封装一个view的步骤：\n\n>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）\n\n>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）\n\n>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）\n\n>4, 将xib中的空间和自定义类的.m文件进行连线\n\n>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)\n\n>6, 提供一个模型属性让外界传递模型数据\n\n>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面","slug":"oc/UITableView/oc-UITableViewCell-xib","published":1,"updated":"2020-09-01T12:58:03.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenh8004mu3s626ub1snk","content":"<p>现在我们看一下最终效果： 上部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg\" alt></p>\n<p>底部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg\" alt></p>\n<p>如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。</p>\n<p>一：代码结构如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg\" alt></p>\n<p>代码部分解析：</p>\n<ul>\n<li><p>1, 第一部分是控制器</p>\n</li>\n<li><p>2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .</p>\n</li>\n<li><p>3, 第三部分是 尾部的view类和xib</p>\n</li>\n<li><p>4, 第四部分是头部的view类和xib</p>\n</li>\n<li><p>5, 第五部分是模型对象</p>\n</li>\n</ul>\n<p>二：代码部分：</p>\n<p>1，ViewController.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJViewController () &lt;UITableViewDataSource,MJTgFooterViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITableView *tableView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSMutableArray *tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置每一行的高度</span><br><span class=\"line\"></span><br><span class=\"line\">self.tableView.rowHeight &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgFooterView *footerView &#x3D; [MJTgFooterView tgFooterView];</span><br><span class=\"line\"></span><br><span class=\"line\">    footerView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableFooterView &#x3D; footerView;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableHeaderView &#x3D; [MJTgHeaderView tgHeaderView];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - MJTgFooterViewDelegate的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 加载按钮的更多数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;加载更多的模型数据</span><br><span class=\"line\"></span><br><span class=\"line\">    int count &#x3D; self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSArray *array &#x3D; self.tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tg &#x3D; array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tempTg &#x3D; [[MJTg alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.title &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.icon &#x3D;tg.icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.price &#x3D; tg.price;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.buyCount &#x3D; tg.buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        [self.tgs addObject:tempTg];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView reloadData];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)tgs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(_tgs &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 初始化</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 1. 获得plist的全路径</span><br><span class=\"line\"></span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;tgs.plist&quot; ofType:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;2,健在数组</span><br><span class=\"line\"></span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中</span><br><span class=\"line\"></span><br><span class=\"line\">        NSMutableArray *tgArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\"></span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.1 创建模型对象</span><br><span class=\"line\"></span><br><span class=\"line\">            MJTg *tg&#x3D;[MJTg tgWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.2 添加模型对象到数组中</span><br><span class=\"line\"></span><br><span class=\"line\">            [tgArray addObject:tg];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,赋值</span><br><span class=\"line\"></span><br><span class=\"line\">        _tgs &#x3D; tgArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 一共有多少行数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 每一行显示怎么样的cell *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D;[MJTgCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">    MJTg *tg &#x3D; self.tgs[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.tg &#x3D;tg;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，TgCell的xib文件和TgCell.h对应的部分，如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg\" alt></p>\n<p>TgCell.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTg;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgCell : UITableViewCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *iconView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *titleLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *priceLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 团购模型 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) MJTg *tg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> 通过一个tableView来创建一个cell</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgCell.m文件如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setTg:(MJTg *)tg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.iconView.image &#x3D; [UIImage imageNamed:tg.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.titleLbl.text &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.priceLbl.text &#x3D; [NSString stringWithFormat:@&quot;￥%@&quot;,tg.price];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.buyCountLbl.text &#x3D; [NSString stringWithFormat:@&quot;%@人已购买&quot;,tg.buyCount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgFooterView的xib文件和TgFooterView.h对象如下：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg\" alt></p>\n<p>这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。</p>\n<p>TgFooterView.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol MJTgFooterViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;MJTgFooterViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgFooterView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIButton *loadBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIView *loadingView;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgFooterView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;创建Nib对象</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    UINib *nib &#x3D; [UINib nibWithNibName:@&quot;MJTgFooterView&quot; bundle:[NSBundle mainBundle]];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    return [[nib instantiateWithOwner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgFooterView&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,将加载按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadBtn.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新按钮显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadingView.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3.0秒之后执行block中</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_time_t popTime &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,通知代理，按钮被人点击了</span><br><span class=\"line\"></span><br><span class=\"line\">        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            [self.delegate tgFooterViewDidLoadBtnClick:self];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,加载按钮显示，刷新按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadBtn.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadingView.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgHeaderView的xib和TgHeaderView属性对应部分：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg\" alt></p>\n<p>TgHeaderView.h文件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgHeaderView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define MJImgCount 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView () &lt;UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSTimer *timer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgHeaderView </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[[NSBundle mainBundle] loadNibNamed:@&quot;MJTgHeaderView&quot; owner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)awakeFromNib&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置scrollView的代理</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.delegate &#x3D; self;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,设置scrollView中的image中的参数</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewY &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewW &#x3D; self.scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewH &#x3D; self.scrollView.frame.size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;MJImgCount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImageView *imgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImage *img &#x3D; [UIImage imageNamed:[NSString stringWithFormat:@&quot;ad_0%i&quot;,i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.image &#x3D; img;</span><br><span class=\"line\"></span><br><span class=\"line\">        CGFloat imgViewX &#x3D; i*imgViewW;</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.frame &#x3D; CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将image添加到scrollView中</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.scrollView addSubview:imgView];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4,设置scrollView的各项参数</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.1,设置scrollView的滚动区域</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.contentSize &#x3D; CGSizeMake(imgViewW * MJImgCount, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.2, 不显示横向滚动条</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.showsHorizontalScrollIndicator &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.3  分页</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.pagingEnabled &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;5,设置pageControl的总共页数</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.numberOfPages &#x3D; MJImgCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;6,添加定时器</span><br><span class=\"line\"></span><br><span class=\"line\">    [self addTimer];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 添加定时器 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addTimer&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.timer &#x3D; [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;消息循环（设置当前定时器的优先级比较）</span><br><span class=\"line\"></span><br><span class=\"line\">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)nextImg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,增加pageControl的页码</span><br><span class=\"line\"></span><br><span class=\"line\">    int currentIndex &#x3D; self.pageControl.currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(currentIndex &#x3D;&#x3D; MJImgCount-1)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex +&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; currentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,计算scrollView的滚动位置</span><br><span class=\"line\"></span><br><span class=\"line\">    CGPoint offset &#x3D; CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3,有滚动效果</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.scrollView setContentOffset:offset animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - scrollView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** scrollView正在滚动 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat offsetX &#x3D; scrollView.contentOffset.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    int index &#x3D; (offsetX + scrollView.frame.size.width*0.5)&#x2F;scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; index;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>4，Tg模型部分：<br>Tg.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTg : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 标题 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 图标 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 价格 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *price;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 购买人数 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tg.m文件代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(self&#x3D;&#x3D;[super init])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>注意部分：</p>\n<p>1，在TgCell.xib文件中，指定类为TgCell。</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg\" alt></p>\n<p>2,在创建TgCell对象时，要采用Cell的重用。</p>\n<p>重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3,使用xib封装一个view的步骤：</p>\n<blockquote>\n<p>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）</p>\n</blockquote>\n<blockquote>\n<p>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）</p>\n</blockquote>\n<blockquote>\n<p>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）</p>\n</blockquote>\n<blockquote>\n<p>4, 将xib中的空间和自定义类的.m文件进行连线</p>\n</blockquote>\n<blockquote>\n<p>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)</p>\n</blockquote>\n<blockquote>\n<p>6, 提供一个模型属性让外界传递模型数据</p>\n</blockquote>\n<blockquote>\n<p>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>现在我们看一下最终效果： 上部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg\" alt></p>\n<p>底部：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg\" alt></p>\n<p>如上图中，可以使用表格UITableView， 顶部的图片轮换可以采用scrollView,加上一个定时器。中间部分，因为每一个cell的中子控件位置固定，大小固定。底部有一个加载更多的按钮。所以，我们可以对顶部图片轮换，中间固定部分，底部，加载更多部分，都使用xib文件  。顶部作为表格的头部，中间作为表格的每一个cell  ,底部加载更多作为表格的底部部分。</p>\n<p>一：代码结构如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg\" alt></p>\n<p>代码部分解析：</p>\n<ul>\n<li><p>1, 第一部分是控制器</p>\n</li>\n<li><p>2, 第二部分是cell的view类和xib文件，cell模型类继承自UITableViewCell  .</p>\n</li>\n<li><p>3, 第三部分是 尾部的view类和xib</p>\n</li>\n<li><p>4, 第四部分是头部的view类和xib</p>\n</li>\n<li><p>5, 第五部分是模型对象</p>\n</li>\n</ul>\n<p>二：代码部分：</p>\n<p>1，ViewController.m文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;MJViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJViewController () &lt;UITableViewDataSource,MJTgFooterViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UITableView *tableView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSMutableArray *tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;设置每一行的高度</span><br><span class=\"line\"></span><br><span class=\"line\">self.tableView.rowHeight &#x3D; 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgFooterView *footerView &#x3D; [MJTgFooterView tgFooterView];</span><br><span class=\"line\"></span><br><span class=\"line\">    footerView.delegate &#x3D;self;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableFooterView &#x3D; footerView;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.tableView.tableHeaderView &#x3D; [MJTgHeaderView tgHeaderView];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - MJTgFooterViewDelegate的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 加载按钮的更多数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;加载更多的模型数据</span><br><span class=\"line\"></span><br><span class=\"line\">    int count &#x3D; self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSArray *array &#x3D; self.tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;count; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tg &#x3D; array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        MJTg *tempTg &#x3D; [[MJTg alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.title &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.icon &#x3D;tg.icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.price &#x3D; tg.price;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempTg.buyCount &#x3D; tg.buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        [self.tgs addObject:tempTg];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新表格，高数tableView重新加载模型数据，调用tableView的reloadData方法</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.tableView reloadData];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(NSMutableArray *)tgs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(_tgs &#x3D;&#x3D; nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 初始化</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 1. 获得plist的全路径</span><br><span class=\"line\"></span><br><span class=\"line\">        NSString *path &#x3D; [[NSBundle mainBundle] pathForResource:@&quot;tgs.plist&quot; ofType:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;2,健在数组</span><br><span class=\"line\"></span><br><span class=\"line\">        NSArray *dictArray &#x3D; [NSArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将dictArray里面的所有字典都转换成模型对象，放到新的数组中</span><br><span class=\"line\"></span><br><span class=\"line\">        NSMutableArray *tgArray &#x3D; [NSMutableArray array];</span><br><span class=\"line\"></span><br><span class=\"line\">        for (NSDictionary *dict in dictArray) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.1 创建模型对象</span><br><span class=\"line\"></span><br><span class=\"line\">            MJTg *tg&#x3D;[MJTg tgWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 3.2 添加模型对象到数组中</span><br><span class=\"line\"></span><br><span class=\"line\">            [tgArray addObject:tg];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,赋值</span><br><span class=\"line\"></span><br><span class=\"line\">        _tgs &#x3D; tgArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _tgs;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 数据源方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 一共有多少行数据 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self.tgs.count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 每一行显示怎么样的cell *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D;[MJTgCell cellWithTableView:tableView];</span><br><span class=\"line\"></span><br><span class=\"line\">    MJTg *tg &#x3D; self.tgs[indexPath.row];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.tg &#x3D;tg;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>2，TgCell的xib文件和TgCell.h对应的部分，如图：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg\" alt></p>\n<p>TgCell.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTg;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgCell : UITableViewCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *iconView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *titleLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *priceLbl;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *buyCountLbl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 团购模型 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) MJTg *tg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"></span><br><span class=\"line\"> 通过一个tableView来创建一个cell</span><br><span class=\"line\"></span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgCell.m文件如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgCell.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgCell</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)setTg:(MJTg *)tg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.iconView.image &#x3D; [UIImage imageNamed:tg.icon];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.titleLbl.text &#x3D; tg.title;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.priceLbl.text &#x3D; [NSString stringWithFormat:@&quot;￥%@&quot;,tg.price];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.buyCountLbl.text &#x3D; [NSString stringWithFormat:@&quot;%@人已购买&quot;,tg.buyCount];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgFooterView的xib文件和TgFooterView.h对象如下：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg\" alt></p>\n<p>这儿需要注意一点：当点击加载更多按钮之后，将刷新按钮和正在拼命加载显示出来。所以，一开始的时候，将view隐藏，当点击按钮之后，再将按钮隐藏，view显示出来。</p>\n<p>TgFooterView.h代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@class MJTgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol MJTgFooterViewDelegate &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)tgFooterViewDidLoadBtnClick:(MJTgFooterView *)tgfooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;MJTgFooterViewDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgFooterView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgFooterView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgFooterView ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIButton *loadBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIView *loadingView;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgFooterView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgFooterView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;创建Nib对象</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    UINib *nib &#x3D; [UINib nibWithNibName:@&quot;MJTgFooterView&quot; bundle:[NSBundle mainBundle]];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;    return [[nib instantiateWithOwner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgFooterView&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)loadBtnClick &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,将加载按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadBtn.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,刷新按钮显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">    self.loadingView.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3.0秒之后执行block中</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_time_t popTime &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC));</span><br><span class=\"line\"></span><br><span class=\"line\">    dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,通知代理，按钮被人点击了</span><br><span class=\"line\"></span><br><span class=\"line\">        if([self.delegate respondsToSelector:@selector(tgFooterViewDidLoadBtnClick:)])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            [self.delegate tgFooterViewDidLoadBtnClick:self];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;4,加载按钮显示，刷新按钮隐藏</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadBtn.hidden &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.loadingView.hidden &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>3，TgHeaderView的xib和TgHeaderView属性对应部分：</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg\" alt></p>\n<p>TgHeaderView.h文件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView : UIView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TgHeaderView.m文件代码：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTgHeaderView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define MJImgCount 5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTgHeaderView () &lt;UIScrollViewDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,strong) NSTimer *timer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTgHeaderView </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgHeaderView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    return [[[NSBundle mainBundle] loadNibNamed:@&quot;MJTgHeaderView&quot; owner:nil options:nil] lastObject];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 当xib文件唤醒之后调用（就是xib文件上的空间加载完之后就会调用这个方法） *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)awakeFromNib&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,设置scrollView的代理</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.delegate &#x3D; self;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,设置scrollView中的image中的参数</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewY &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewW &#x3D; self.scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat imgViewH &#x3D; self.scrollView.frame.size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i&#x3D;0; i&lt;MJImgCount; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImageView *imgView &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">        UIImage *img &#x3D; [UIImage imageNamed:[NSString stringWithFormat:@&quot;ad_0%i&quot;,i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.image &#x3D; img;</span><br><span class=\"line\"></span><br><span class=\"line\">        CGFloat imgViewX &#x3D; i*imgViewW;</span><br><span class=\"line\"></span><br><span class=\"line\">        imgView.frame &#x3D; CGRectMake(imgViewX, imgViewY, imgViewW, imgViewH);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;3,将image添加到scrollView中</span><br><span class=\"line\"></span><br><span class=\"line\">        [self.scrollView addSubview:imgView];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4,设置scrollView的各项参数</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.1,设置scrollView的滚动区域</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.contentSize &#x3D; CGSizeMake(imgViewW * MJImgCount, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.2, 不显示横向滚动条</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.showsHorizontalScrollIndicator &#x3D; NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;4.3  分页</span><br><span class=\"line\"></span><br><span class=\"line\">    self.scrollView.pagingEnabled &#x3D; YES;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;5,设置pageControl的总共页数</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.numberOfPages &#x3D; MJImgCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;6,添加定时器</span><br><span class=\"line\"></span><br><span class=\"line\">    [self addTimer];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 添加定时器 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)addTimer&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.timer &#x3D; [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(nextImg) userInfo:nil repeats:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;消息循环（设置当前定时器的优先级比较）</span><br><span class=\"line\"></span><br><span class=\"line\">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)nextImg&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;1,增加pageControl的页码</span><br><span class=\"line\"></span><br><span class=\"line\">    int currentIndex &#x3D; self.pageControl.currentPage;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(currentIndex &#x3D;&#x3D; MJImgCount-1)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentIndex +&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; currentIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;2,计算scrollView的滚动位置</span><br><span class=\"line\"></span><br><span class=\"line\">    CGPoint offset &#x3D; CGPointMake(currentIndex * self.scrollView.frame.size.width, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;3,有滚动效果</span><br><span class=\"line\"></span><br><span class=\"line\">    [self.scrollView setContentOffset:offset animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - scrollView的代理方法</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** scrollView正在滚动 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    CGFloat offsetX &#x3D; scrollView.contentOffset.x;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">    int index &#x3D; (offsetX + scrollView.frame.size.width*0.5)&#x2F;scrollView.frame.size.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    self.pageControl.currentPage &#x3D; index;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>4，Tg模型部分：<br>Tg.h文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface MJTg : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 标题 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *title;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 图标 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *icon;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 价格 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *price;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 购买人数 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,copy) NSString *buyCount;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Tg.m文件代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;MJTg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation MJTg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+(id)tgWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [[self alloc] initWithDict:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(id)initWithDict:(NSDictionary *)dict&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(self&#x3D;&#x3D;[super init])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self setValuesForKeysWithDictionary:dict];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>注意部分：</p>\n<p>1，在TgCell.xib文件中，指定类为TgCell。</p>\n<p><img src=\"/2020/04/03/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg\" alt></p>\n<p>2,在创建TgCell对象时，要采用Cell的重用。</p>\n<p>重用原理：在tableView滚动时，部分UITableViewCell会移出窗口，UITableView会将窗口外的UITableViewCell放入到一个对象池中，等待着重用，当UITableView要求datasource返回UITableViewCell时，datasource会先查看这个对象池，如果池中有未使用的UITableViewCell,datasource会使用新的数据配置这个UITableViewCell,然后返回给UITableView,重新显示到窗口中，从而避免创建新对象。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(id)cellWithTableView:(UITableView *)tableView&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static NSString *flag&#x3D; @&quot;tgs&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    MJTgCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:flag];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(cell &#x3D;&#x3D;nil)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        cell &#x3D; [[NSBundle mainBundle] loadNibNamed:@&quot;MJTgCell&quot; owner:nil options:nil][0];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return cell;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3,使用xib封装一个view的步骤：</p>\n<blockquote>\n<p>1，新建一个xib文件描述一个view的内部结构（假设叫做TgCell.xib）</p>\n</blockquote>\n<blockquote>\n<p>2, 新建一个自定义类（自定义类需要继承自系统自带的view,继承自哪个类，取决于xib根对象的class）</p>\n</blockquote>\n<blockquote>\n<p>3, 新建的雷鸣最好跟xib文件名保持一致（比如类名就叫做TgCell）</p>\n</blockquote>\n<blockquote>\n<p>4, 将xib中的空间和自定义类的.m文件进行连线</p>\n</blockquote>\n<blockquote>\n<p>5, 提供一个类方法返回一个创建好的自定义view(屏蔽从xib加载的过程)</p>\n</blockquote>\n<blockquote>\n<p>6, 提供一个模型属性让外界传递模型数据</p>\n</blockquote>\n<blockquote>\n<p>7, 重写模型属性的setter方法，在这里将模型数据展示到对应的子控件上面</p>\n</blockquote>\n"},{"title":"ios原生API文件上传(NSURLSession)","date":"2020-04-03T11:06:04.000Z","_content":"\n\n## 一、 简介\n\n以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。\n\nNSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。\n\n## 二、使用 \n\n### 1、引入框架和定义编码宏\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]\n```\n\n### 2、编写上传方法\n\n```\n-(void)upload:(NSString *)filePath params:(NSDictionary *)params{\n    NSURL *url = [NSURL URLWithString:@\"http://192.168.1.103:9088/up/upload\"];\n    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n    [request setHTTPMethod:@\"POST\"];\n    \n    //分隔符\n    NSString *boundary = [self generateBoundaryString];\n    \n    //设置ContentType\n    NSString *contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", boundary];\n    [request setValue:contentType forHTTPHeaderField: @\"Content-Type\"];\n    \n    //获取body体数据\n    NSString *fieldName = @\"CustomFile\";\n    NSData *bodyData = [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];\n    \n    NSURLSessionTask *task = [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if (error) {\n            NSLog(@\"error : %@\", error);\n            return;\n        }\n        NSString *result = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n        NSLog(@\"上传返回结果 : %@\", result);\n    }];\n    \n    [task resume];\n}\n\n```\n\n### 3、body体拼接\n```\n- (NSData *)createBodyWithBoundary:(NSString *)boundary\n                        parameters:(NSDictionary *)parameters\n                          filePath:(NSString *)filePath\n                         fieldName:(NSString *)fieldName {\n    //创建可变Data\n    NSMutableData *bodyData = [NSMutableData data];\n    \n    //文本参数\n    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) {\n        //开始\n        NSString *startStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n        [bodyData appendData:GMEncode(startStr)];\n        \n        //描述\n        NSString *dispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key];\n        [bodyData appendData:GMEncode(dispositionStr)];\n        \n        //值\n        NSString *valueStr = [NSString stringWithFormat:@\"%@\\r\\n\", obj];\n        [bodyData appendData:GMEncode(valueStr)];\n    }];\n    \n    //文件\n    NSString *fileName  = [filePath lastPathComponent];\n    NSData   *data      = [NSData dataWithContentsOfFile:filePath];\n    NSString *mimetype  = [self mimeTypeForPath:filePath];\n    \n    //文件分割\n    NSString *fileBoundaryStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(fileBoundaryStr)];\n    \n    //文件描述\n    NSString *fileDispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fieldName, fileName];\n    [bodyData appendData:GMEncode(fileDispositionStr)];\n    \n    //类型\n    NSString *contentTypeStr = [NSString stringWithFormat:@\"Content-Type: %@\\r\\n\\r\\n\", mimetype];\n    [bodyData appendData:GMEncode(contentTypeStr)];\n    \n    //文件NSData\n    [bodyData appendData:data];\n    \n    //换行\n    [bodyData appendData:GMEncode(@\"\\r\\n\")];\n    \n    //结尾\n    NSString *endStr = [NSString stringWithFormat:@\"--%@--\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(endStr)];\n\n    return bodyData;\n}\n```\n\n### 4、获取mimeType\n```\n///根据文件路径获取mimeType\n- (NSString *)mimeTypeForPath:(NSString *)path {\n    CFStringRef extension = (__bridge CFStringRef)[path pathExtension];\n    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);\n    NSString *mimetype = CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));\n    \n    CFRelease(UTI);\n    \n    return mimetype;\n}\n```\n\n### 5、生成分隔符字符串\n\n```\n- (NSString *)generateBoundaryString {\n    return [NSString stringWithFormat:@\"Boundary-%@\", [[NSUUID UUID] UUIDString]];\n}\n```","source":"_posts/oc/Upload/oc-Upload-nativeUpload.md","raw":"---\ntitle: ios原生API文件上传(NSURLSession)\ndate: 2020-04-03 19:06:04\ncategories:\n- OC\n- 上传\ntags: 上传\n---\n\n\n## 一、 简介\n\n以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。\n\nNSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。\n\n## 二、使用 \n\n### 1、引入框架和定义编码宏\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]\n```\n\n### 2、编写上传方法\n\n```\n-(void)upload:(NSString *)filePath params:(NSDictionary *)params{\n    NSURL *url = [NSURL URLWithString:@\"http://192.168.1.103:9088/up/upload\"];\n    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n    [request setHTTPMethod:@\"POST\"];\n    \n    //分隔符\n    NSString *boundary = [self generateBoundaryString];\n    \n    //设置ContentType\n    NSString *contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", boundary];\n    [request setValue:contentType forHTTPHeaderField: @\"Content-Type\"];\n    \n    //获取body体数据\n    NSString *fieldName = @\"CustomFile\";\n    NSData *bodyData = [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];\n    \n    NSURLSessionTask *task = [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if (error) {\n            NSLog(@\"error : %@\", error);\n            return;\n        }\n        NSString *result = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n        NSLog(@\"上传返回结果 : %@\", result);\n    }];\n    \n    [task resume];\n}\n\n```\n\n### 3、body体拼接\n```\n- (NSData *)createBodyWithBoundary:(NSString *)boundary\n                        parameters:(NSDictionary *)parameters\n                          filePath:(NSString *)filePath\n                         fieldName:(NSString *)fieldName {\n    //创建可变Data\n    NSMutableData *bodyData = [NSMutableData data];\n    \n    //文本参数\n    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) {\n        //开始\n        NSString *startStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n        [bodyData appendData:GMEncode(startStr)];\n        \n        //描述\n        NSString *dispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key];\n        [bodyData appendData:GMEncode(dispositionStr)];\n        \n        //值\n        NSString *valueStr = [NSString stringWithFormat:@\"%@\\r\\n\", obj];\n        [bodyData appendData:GMEncode(valueStr)];\n    }];\n    \n    //文件\n    NSString *fileName  = [filePath lastPathComponent];\n    NSData   *data      = [NSData dataWithContentsOfFile:filePath];\n    NSString *mimetype  = [self mimeTypeForPath:filePath];\n    \n    //文件分割\n    NSString *fileBoundaryStr = [NSString stringWithFormat:@\"--%@\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(fileBoundaryStr)];\n    \n    //文件描述\n    NSString *fileDispositionStr = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fieldName, fileName];\n    [bodyData appendData:GMEncode(fileDispositionStr)];\n    \n    //类型\n    NSString *contentTypeStr = [NSString stringWithFormat:@\"Content-Type: %@\\r\\n\\r\\n\", mimetype];\n    [bodyData appendData:GMEncode(contentTypeStr)];\n    \n    //文件NSData\n    [bodyData appendData:data];\n    \n    //换行\n    [bodyData appendData:GMEncode(@\"\\r\\n\")];\n    \n    //结尾\n    NSString *endStr = [NSString stringWithFormat:@\"--%@--\\r\\n\",boundary];\n    [bodyData appendData:GMEncode(endStr)];\n\n    return bodyData;\n}\n```\n\n### 4、获取mimeType\n```\n///根据文件路径获取mimeType\n- (NSString *)mimeTypeForPath:(NSString *)path {\n    CFStringRef extension = (__bridge CFStringRef)[path pathExtension];\n    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);\n    NSString *mimetype = CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));\n    \n    CFRelease(UTI);\n    \n    return mimetype;\n}\n```\n\n### 5、生成分隔符字符串\n\n```\n- (NSString *)generateBoundaryString {\n    return [NSString stringWithFormat:@\"Boundary-%@\", [[NSUUID UUID] UUIDString]];\n}\n```","slug":"oc/Upload/oc-Upload-nativeUpload","published":1,"updated":"2020-09-01T12:58:07.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenha004qu3s698th3ej4","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。</p>\n<p>NSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。</p>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1、引入框架和定义编码宏\"><a href=\"#1、引入框架和定义编码宏\" class=\"headerlink\" title=\"1、引入框架和定义编码宏\"></a>1、引入框架和定义编码宏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices&#x2F;MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、编写上传方法\"><a href=\"#2、编写上传方法\" class=\"headerlink\" title=\"2、编写上传方法\"></a>2、编写上传方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)upload:(NSString *)filePath params:(NSDictionary *)params&#123;</span><br><span class=\"line\">    NSURL *url &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;192.168.1.103:9088&#x2F;up&#x2F;upload&quot;];</span><br><span class=\"line\">    NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:url];</span><br><span class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;分隔符</span><br><span class=\"line\">    NSString *boundary &#x3D; [self generateBoundaryString];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;设置ContentType</span><br><span class=\"line\">    NSString *contentType &#x3D; [NSString stringWithFormat:@&quot;multipart&#x2F;form-data; boundary&#x3D;%@&quot;, boundary];</span><br><span class=\"line\">    [request setValue:contentType forHTTPHeaderField: @&quot;Content-Type&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;获取body体数据</span><br><span class=\"line\">    NSString *fieldName &#x3D; @&quot;CustomFile&quot;;</span><br><span class=\"line\">    NSData *bodyData &#x3D; [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSURLSessionTask *task &#x3D; [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            NSLog(@&quot;error : %@&quot;, error);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NSString *result &#x3D; [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        NSLog(@&quot;上传返回结果 : %@&quot;, result);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [task resume];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、body体拼接\"><a href=\"#3、body体拼接\" class=\"headerlink\" title=\"3、body体拼接\"></a>3、body体拼接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSData *)createBodyWithBoundary:(NSString *)boundary</span><br><span class=\"line\">                        parameters:(NSDictionary *)parameters</span><br><span class=\"line\">                          filePath:(NSString *)filePath</span><br><span class=\"line\">                         fieldName:(NSString *)fieldName &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;创建可变Data</span><br><span class=\"line\">    NSMutableData *bodyData &#x3D; [NSMutableData data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文本参数</span><br><span class=\"line\">    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;开始</span><br><span class=\"line\">        NSString *startStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(startStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;描述</span><br><span class=\"line\">        NSString *dispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;, key];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(dispositionStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;值</span><br><span class=\"line\">        NSString *valueStr &#x3D; [NSString stringWithFormat:@&quot;%@\\r\\n&quot;, obj];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(valueStr)];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件</span><br><span class=\"line\">    NSString *fileName  &#x3D; [filePath lastPathComponent];</span><br><span class=\"line\">    NSData   *data      &#x3D; [NSData dataWithContentsOfFile:filePath];</span><br><span class=\"line\">    NSString *mimetype  &#x3D; [self mimeTypeForPath:filePath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件分割</span><br><span class=\"line\">    NSString *fileBoundaryStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileBoundaryStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件描述</span><br><span class=\"line\">    NSString *fileDispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;; filename&#x3D;\\&quot;%@\\&quot;\\r\\n&quot;, fieldName, fileName];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileDispositionStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;类型</span><br><span class=\"line\">    NSString *contentTypeStr &#x3D; [NSString stringWithFormat:@&quot;Content-Type: %@\\r\\n\\r\\n&quot;, mimetype];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(contentTypeStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件NSData</span><br><span class=\"line\">    [bodyData appendData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;换行</span><br><span class=\"line\">    [bodyData appendData:GMEncode(@&quot;\\r\\n&quot;)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;结尾</span><br><span class=\"line\">    NSString *endStr &#x3D; [NSString stringWithFormat:@&quot;--%@--\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(endStr)];</span><br><span class=\"line\"></span><br><span class=\"line\">    return bodyData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、获取mimeType\"><a href=\"#4、获取mimeType\" class=\"headerlink\" title=\"4、获取mimeType\"></a>4、获取mimeType</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文件路径获取mimeType</span><br><span class=\"line\">- (NSString *)mimeTypeForPath:(NSString *)path &#123;</span><br><span class=\"line\">    CFStringRef extension &#x3D; (__bridge CFStringRef)[path pathExtension];</span><br><span class=\"line\">    CFStringRef UTI &#x3D; UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);</span><br><span class=\"line\">    NSString *mimetype &#x3D; CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(UTI);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return mimetype;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、生成分隔符字符串\"><a href=\"#5、生成分隔符字符串\" class=\"headerlink\" title=\"5、生成分隔符字符串\"></a>5、生成分隔符字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)generateBoundaryString &#123;</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;Boundary-%@&quot;, [[NSUUID UUID] UUIDString]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>以前，在上传文件时，可以使用NSURLConnection类，由于这个类已经过期，只支持到ios9, 所以，本节使用NSURLSession来上传文件。</p>\n<p>NSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask 。创建的task都是挂起状态，需要resume才能执行。</p>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1、引入框架和定义编码宏\"><a href=\"#1、引入框架和定义编码宏\" class=\"headerlink\" title=\"1、引入框架和定义编码宏\"></a>1、引入框架和定义编码宏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices&#x2F;MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define GMEncode(str) [str dataUsingEncoding:NSUTF8StringEncoding]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、编写上传方法\"><a href=\"#2、编写上传方法\" class=\"headerlink\" title=\"2、编写上传方法\"></a>2、编写上传方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)upload:(NSString *)filePath params:(NSDictionary *)params&#123;</span><br><span class=\"line\">    NSURL *url &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;192.168.1.103:9088&#x2F;up&#x2F;upload&quot;];</span><br><span class=\"line\">    NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:url];</span><br><span class=\"line\">    [request setHTTPMethod:@&quot;POST&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;分隔符</span><br><span class=\"line\">    NSString *boundary &#x3D; [self generateBoundaryString];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;设置ContentType</span><br><span class=\"line\">    NSString *contentType &#x3D; [NSString stringWithFormat:@&quot;multipart&#x2F;form-data; boundary&#x3D;%@&quot;, boundary];</span><br><span class=\"line\">    [request setValue:contentType forHTTPHeaderField: @&quot;Content-Type&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;获取body体数据</span><br><span class=\"line\">    NSString *fieldName &#x3D; @&quot;CustomFile&quot;;</span><br><span class=\"line\">    NSData *bodyData &#x3D; [self createBodyWithBoundary:boundary parameters:params filePath:filePath fieldName:fieldName];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSURLSessionTask *task &#x3D; [[NSURLSession sharedSession] uploadTaskWithRequest:request fromData:bodyData completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            NSLog(@&quot;error : %@&quot;, error);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        NSString *result &#x3D; [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        NSLog(@&quot;上传返回结果 : %@&quot;, result);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [task resume];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、body体拼接\"><a href=\"#3、body体拼接\" class=\"headerlink\" title=\"3、body体拼接\"></a>3、body体拼接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSData *)createBodyWithBoundary:(NSString *)boundary</span><br><span class=\"line\">                        parameters:(NSDictionary *)parameters</span><br><span class=\"line\">                          filePath:(NSString *)filePath</span><br><span class=\"line\">                         fieldName:(NSString *)fieldName &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;创建可变Data</span><br><span class=\"line\">    NSMutableData *bodyData &#x3D; [NSMutableData data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文本参数</span><br><span class=\"line\">    [parameters enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;开始</span><br><span class=\"line\">        NSString *startStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(startStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;描述</span><br><span class=\"line\">        NSString *dispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;\\r\\n\\r\\n&quot;, key];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(dispositionStr)];</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;值</span><br><span class=\"line\">        NSString *valueStr &#x3D; [NSString stringWithFormat:@&quot;%@\\r\\n&quot;, obj];</span><br><span class=\"line\">        [bodyData appendData:GMEncode(valueStr)];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件</span><br><span class=\"line\">    NSString *fileName  &#x3D; [filePath lastPathComponent];</span><br><span class=\"line\">    NSData   *data      &#x3D; [NSData dataWithContentsOfFile:filePath];</span><br><span class=\"line\">    NSString *mimetype  &#x3D; [self mimeTypeForPath:filePath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件分割</span><br><span class=\"line\">    NSString *fileBoundaryStr &#x3D; [NSString stringWithFormat:@&quot;--%@\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileBoundaryStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件描述</span><br><span class=\"line\">    NSString *fileDispositionStr &#x3D; [NSString stringWithFormat:@&quot;Content-Disposition: form-data; name&#x3D;\\&quot;%@\\&quot;; filename&#x3D;\\&quot;%@\\&quot;\\r\\n&quot;, fieldName, fileName];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(fileDispositionStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;类型</span><br><span class=\"line\">    NSString *contentTypeStr &#x3D; [NSString stringWithFormat:@&quot;Content-Type: %@\\r\\n\\r\\n&quot;, mimetype];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(contentTypeStr)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;文件NSData</span><br><span class=\"line\">    [bodyData appendData:data];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;换行</span><br><span class=\"line\">    [bodyData appendData:GMEncode(@&quot;\\r\\n&quot;)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;结尾</span><br><span class=\"line\">    NSString *endStr &#x3D; [NSString stringWithFormat:@&quot;--%@--\\r\\n&quot;,boundary];</span><br><span class=\"line\">    [bodyData appendData:GMEncode(endStr)];</span><br><span class=\"line\"></span><br><span class=\"line\">    return bodyData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、获取mimeType\"><a href=\"#4、获取mimeType\" class=\"headerlink\" title=\"4、获取mimeType\"></a>4、获取mimeType</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文件路径获取mimeType</span><br><span class=\"line\">- (NSString *)mimeTypeForPath:(NSString *)path &#123;</span><br><span class=\"line\">    CFStringRef extension &#x3D; (__bridge CFStringRef)[path pathExtension];</span><br><span class=\"line\">    CFStringRef UTI &#x3D; UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);</span><br><span class=\"line\">    NSString *mimetype &#x3D; CFBridgingRelease(UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType));</span><br><span class=\"line\">    </span><br><span class=\"line\">    CFRelease(UTI);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return mimetype;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、生成分隔符字符串\"><a href=\"#5、生成分隔符字符串\" class=\"headerlink\" title=\"5、生成分隔符字符串\"></a>5、生成分隔符字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)generateBoundaryString &#123;</span><br><span class=\"line\">    return [NSString stringWithFormat:@&quot;Boundary-%@&quot;, [[NSUUID UUID] UUIDString]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IOS文件上传PUT和POST","date":"2020-04-03T10:55:42.000Z","_content":"\n## 一、 简介\n\n### 1、简单介绍\n\n1. 在HTTP协议请求中，有8种方法：\n\n-  GET：请求指定的页面信息，并返回实体主体。\n-  HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头\n-  POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。\n-  PUT：从客户端向服务器传送的数据取代指定的文档的内容。\n-  DELETE：请求服务器删除指定的页面。\n-  CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。\n-  OPTIONS：允许客户端查看服务器的性能。\n-  TRACE：回显服务器收到的请求，主要用于测试或诊断。\n-  PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。\n\n### 2、区别\n本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:\n\n1. PUT方法的特点：传输的实体部分是一个无结构的二进制数据。\n2. POST方法的特点：倾向于结构化的数据。\n\n上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。\n\n那为什么现在都流行使用post上传文件呢？\n\n因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。\n\n\n备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。\n\n## 二、HTML文件上传  \n这里为什么要写html的方式上传文件呢？ \n\n因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。\n\n### 1、post上传文件：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>post上传文件</title>\n</head>\n<body>\n   <form action=\"***这里是上传url***\" method=\"post\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"fileUpload\" />\n       <input type=\"submit\" value=\"上传文件\" />\n   </form>\n</body>\n</html>\n\n```\n\n### 2、put上传文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>XMLHttpRequest上传文件进度实现</title>\n    <script type=\"text/javascript\">\n        var xhr;\n        var ot;//\n        var oloaded;\n        //上传文件方法\n        function UpladFile() {\n            var file = document.getElementById(\"file\").files[0];\n            var reader = new FileReader();\n            //将文件以二进制形式读入页面\n            reader.readAsArrayBuffer(file);\n            reader.onload=function(f){\n                var rawData = reader.result;\n                var url = \"***上传路径***\"; // 接收上传文件的后台地址\n                xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\n                xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\n                xhr.setRequestHeader(\"Content-Type\", \"video/mp4\");\n                xhr.setRequestHeader(\"x-content-range\", \"bytes 0-298327/298328\"); //这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。\n                xhr.setRequestHeader(\"content-length\", \"298328\");   //这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件\n                xhr.onload = uploadComplete; //请求完成\n                xhr.onerror =  uploadFailed; //请求失败\n                xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\n                xhr.upload.onloadstart = function(){//上传开始执行方法\n                    ot = new Date().getTime();   //设置上传开始时间\n                    oloaded = 0;//设置上传开始时，以上传的文件大小为0\n                };\n                xhr.send(rawData); //开始上传\n            }\n            \n        }\n        //上传进度实现方法，上传过程中会频繁调用该方法\n        function progressFunction(evt) {\n            \n             var progressBar = document.getElementById(\"progressBar\");\n             var percentageDiv = document.getElementById(\"percentage\");\n             // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\n             if (evt.lengthComputable) {//\n                 progressBar.max = evt.total;\n                 progressBar.value = evt.loaded;\n                 percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\n             }\n            \n            var time = document.getElementById(\"time\");\n            var nt = new Date().getTime();//获取当前时间\n            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\n            ot = new Date().getTime(); //重新赋值时间，用于下次计算\n            \n            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\n            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\n        \n            //上传速度计算\n            var speed = perload/pertime;//单位b/s\n            var bspeed = speed;\n            var units = 'b/s';//单位名称\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'k/s';\n            }\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'M/s';\n            }\n            speed = speed.toFixed(1);\n            //剩余时间\n            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\n            time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\n               if(bspeed==0)\n                time.innerHTML = '上传已取消';\n        }\n        //上传成功响应\n        function uploadComplete(evt) {\n         //服务断接收完文件返回的结果\n         //    alert(evt.target.responseText);\n             alert(\"上传成功！\");\n        }\n        //上传失败\n        function uploadFailed(evt) {\n            alert(\"上传失败！\");\n        }\n          //取消上传\n        function cancleUploadFile(){\n            xhr.abort();\n        }\n    </script>\n</head>\n<body>\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width: 300px;\"></progress>\n    <span id=\"percentage\"></span><span id=\"time\"></span>\n    <br /><br />\n    <input type=\"file\" id=\"file\" name=\"myfile\" />\n    <input type=\"button\" onclick=\"UpladFile()\" value=\"上传\" />\n    <input type=\"button\" onclick=\"cancleUploadFile()\" value=\"取消\" />\n</body>\n</html>\n\n```\n\n## 三、 IOS上传文件\n以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)\n### 1、post方法上传\n\n```\nNSString *urlString = @\"\";\nAFHTTPRequestOperationManager *mgr = [AFHTTPRequestOperationManager manager];\n//普通参数\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\n[params setObject:@\"张三\" forKey:@\"username\"];\n[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n    NSData *imageData = UIImagePNGRepresentation([UIImage imageNamed:@\"\"]);   \n     /**\n     拼接文件参数\n     @fileData : 要上传的文件数据\n     @name : 后台定义文件的参数名\n     @fileName ： 上传到服务器的文件名称\n     @mimeType : 上传的文件类型\n   */\n    [formData appendPartWithFileData:imageData name:@\"file\" fileName:@\"text.png\" mimeType:@\"image/png\"];\n} success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n}];\n```\n\n```\n/**\n 获取文件的MIMEType\n @param url 文件路径\n @return 文件MIMEType\n */\n- (NSString *)MIMEType:(NSURL *)url{\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    NSURLResponse *response = nil;\n    [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:nil];\n    return response.MIMEType;\n}\n```\n\n### 2、put方法上传\n\n```\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"请求路径url\"]];\n//设置header参数\n[request setValue:@\"这是自定义头参数\" forHTTPHeaderField:@\"x-content-length\"];\n    \n//获取需要上传的Data， 将其保存到沙盒中\n_needUploadData = [self getNeedUploadData];\nNSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [docPath stringByAppendingPathComponent:@\"test\"];\n[_needUploadData writeToFile:filePath atomically:YES];\n    \nNSURL *url = [NSURL URLWithString:filePath];\n\nAFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n_uploadTask = [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) {\n    NSLog(@\"uploadProgress：%@\",uploadProgress);\n    float progress =  1.0 * uploadProgress.completedUnitCount/uploadProgress.totalUnitCount;\n    NSLog(@\"上传视频进度%f\",progress);\n} completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {\n    NSLog(@\"上传结果%@\",responseObject);\n}];\n    \n[_uploadTask resume];\n```\n\n注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。\n\n ![URI结构图](/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png)\n\n\n### 3、文件操作\n在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。\n\n*  NSFileHandle： 主要是对文件内容进行读取和写入操作\n\n*  NSFileManager： 主要是对文件进行的操作以及文件信息的获取\n\n在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法\n\n```\n//获取需要上传的数据\n-(NSData *)getNeedUploadData{\n    //使用传递过来的文件上传\n    NSFileHandle *fileHandle = [NSFileHandle fileHandleForReadingAtPath:_filePath];\n    [fileHandle seekToFileOffset:_startUploadLoaction];\n\n    NSInteger uploadLength = GMOTPosterAdd_uploadVideoSizeForEveryOne;\n    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) > _fileTotalSize){\n        uploadLength = _fileTotalSize - _startUploadLoaction;\n    }\n    NSData *data = [fileHandle readDataOfLength:uploadLength];\n\n    return data;\n}\n\n```\n\n## 四、 Content-Type类型介绍\n\nMediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。\n\n```\n类型格式：type/subtype(;parameter)? type  \n主类型，任意的字符串，如text，如果是*号代表所有；   \nsubtype 子类型，任意的字符串，如html，如果是*号代表所有；   \nparameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。   \n```\n\n常见的媒体格式类型如下：\n\n-   text/html ： HTML格式\n-   text/plain ：纯文本格式     \n-   text/xml ：  XML格式\n-   image/gif ：gif图片格式    \n-   image/jpeg ：jpg图片格式 \n-   image/png：png图片格式\n\n以application开头的媒体格式类型：\n\n-   application/xhtml+xml ：XHTML格式\n-   application/xml     ： XML数据格式\n-   application/atom+xml  ：Atom XML聚合格式  \n-   application/json    ： JSON数据格式\n-   application/pdf       ：pdf格式  \n-   application/msword  ： Word文档格式\n-   application/octet-stream ： 二进制流数据（如常见的文件下载）\n-   application/x-www-form-urlencoded ：  ( <form encType=\"\">)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）\n-    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。\n\n在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。\n\n\n### 1、application/x-www-form-urlencoded\n最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&key2=val2的方式进行编码，key和val都进行了URL转码。\n在ios中，如果请求参数为：\n\n```\nNSDictionary *params = @{\n        @\"body\":@{@\"reqType\":@\"0\"},\n        @\"sn\":@\"0cec3723ca95c7066a2d56e4ef110989ea7865cf\"\n        };\n```\n被转码以后：\n\n```\nbody=%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&sn=0cec3723ca95c7066a2d56e4ef110989ea7865cf\n```\n\n### 2、multipart/form-data\n\nMultipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.\n\n请求的头部信息如下:\n\n//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符\nContent-Type: multipart/form-data; boundary=xxxxx\n下面我们来看一下一个我的Multipart/form-data请求体:\n\n```\nPOST /uploadFile HTTP/1.1\nHost: 上传文件后台地址\nContent-Type: multipart/form-data; boundary=xxxxx\nConnection: keep-alive\nAccept: /\nUser-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0\nContent-Length: 32175\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\n\n--xxxxx\nContent-Disposition: form-data;name=\"file\"\n\nimg.jpeg\n--xxxxx\nContent-Disposition: form-data;name=\"businessType\"\n\nCC_USER_CENTER\n--xxxxx\nContent-Disposition: form-data;name=\"fileType\"\n\nimage\n--xxxxx\nContent-Disposition:form-data;name=\"file\";filename=\"img1.jpeg\"\nContent-Type:image/png\n\n这里是图片数据****************，比较长\n\n--xxxxx--\n\n\n```\n备注：\n>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。\n\n>2，可以上传多个文件。\n\n>3，比较常见的上传文件方式\n\n### 3、application/octet-stream\n这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。\n\n备注：\n>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。\n>\n>2,   只能上传单个文件，不常见。\n","source":"_posts/oc/Upload/oc-Upload-putAndPost.md","raw":"---\ntitle: IOS文件上传PUT和POST\ndate: 2020-04-03 18:55:42\ncategories:\n- OC\n- 上传\ntags: 上传\n---\n\n## 一、 简介\n\n### 1、简单介绍\n\n1. 在HTTP协议请求中，有8种方法：\n\n-  GET：请求指定的页面信息，并返回实体主体。\n-  HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头\n-  POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。\n-  PUT：从客户端向服务器传送的数据取代指定的文档的内容。\n-  DELETE：请求服务器删除指定的页面。\n-  CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。\n-  OPTIONS：允许客户端查看服务器的性能。\n-  TRACE：回显服务器收到的请求，主要用于测试或诊断。\n-  PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。\n\n### 2、区别\n本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:\n\n1. PUT方法的特点：传输的实体部分是一个无结构的二进制数据。\n2. POST方法的特点：倾向于结构化的数据。\n\n上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。\n\n那为什么现在都流行使用post上传文件呢？\n\n因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。\n\n\n备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。\n\n## 二、HTML文件上传  \n这里为什么要写html的方式上传文件呢？ \n\n因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。\n\n### 1、post上传文件：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>post上传文件</title>\n</head>\n<body>\n   <form action=\"***这里是上传url***\" method=\"post\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"fileUpload\" />\n       <input type=\"submit\" value=\"上传文件\" />\n   </form>\n</body>\n</html>\n\n```\n\n### 2、put上传文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n    <title>XMLHttpRequest上传文件进度实现</title>\n    <script type=\"text/javascript\">\n        var xhr;\n        var ot;//\n        var oloaded;\n        //上传文件方法\n        function UpladFile() {\n            var file = document.getElementById(\"file\").files[0];\n            var reader = new FileReader();\n            //将文件以二进制形式读入页面\n            reader.readAsArrayBuffer(file);\n            reader.onload=function(f){\n                var rawData = reader.result;\n                var url = \"***上传路径***\"; // 接收上传文件的后台地址\n                xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\n                xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\n                xhr.setRequestHeader(\"Content-Type\", \"video/mp4\");\n                xhr.setRequestHeader(\"x-content-range\", \"bytes 0-298327/298328\"); //这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。\n                xhr.setRequestHeader(\"content-length\", \"298328\");   //这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件\n                xhr.onload = uploadComplete; //请求完成\n                xhr.onerror =  uploadFailed; //请求失败\n                xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\n                xhr.upload.onloadstart = function(){//上传开始执行方法\n                    ot = new Date().getTime();   //设置上传开始时间\n                    oloaded = 0;//设置上传开始时，以上传的文件大小为0\n                };\n                xhr.send(rawData); //开始上传\n            }\n            \n        }\n        //上传进度实现方法，上传过程中会频繁调用该方法\n        function progressFunction(evt) {\n            \n             var progressBar = document.getElementById(\"progressBar\");\n             var percentageDiv = document.getElementById(\"percentage\");\n             // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\n             if (evt.lengthComputable) {//\n                 progressBar.max = evt.total;\n                 progressBar.value = evt.loaded;\n                 percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\n             }\n            \n            var time = document.getElementById(\"time\");\n            var nt = new Date().getTime();//获取当前时间\n            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\n            ot = new Date().getTime(); //重新赋值时间，用于下次计算\n            \n            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\n            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\n        \n            //上传速度计算\n            var speed = perload/pertime;//单位b/s\n            var bspeed = speed;\n            var units = 'b/s';//单位名称\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'k/s';\n            }\n            if(speed/1024>1){\n                speed = speed/1024;\n                units = 'M/s';\n            }\n            speed = speed.toFixed(1);\n            //剩余时间\n            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\n            time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\n               if(bspeed==0)\n                time.innerHTML = '上传已取消';\n        }\n        //上传成功响应\n        function uploadComplete(evt) {\n         //服务断接收完文件返回的结果\n         //    alert(evt.target.responseText);\n             alert(\"上传成功！\");\n        }\n        //上传失败\n        function uploadFailed(evt) {\n            alert(\"上传失败！\");\n        }\n          //取消上传\n        function cancleUploadFile(){\n            xhr.abort();\n        }\n    </script>\n</head>\n<body>\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width: 300px;\"></progress>\n    <span id=\"percentage\"></span><span id=\"time\"></span>\n    <br /><br />\n    <input type=\"file\" id=\"file\" name=\"myfile\" />\n    <input type=\"button\" onclick=\"UpladFile()\" value=\"上传\" />\n    <input type=\"button\" onclick=\"cancleUploadFile()\" value=\"取消\" />\n</body>\n</html>\n\n```\n\n## 三、 IOS上传文件\n以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)\n### 1、post方法上传\n\n```\nNSString *urlString = @\"\";\nAFHTTPRequestOperationManager *mgr = [AFHTTPRequestOperationManager manager];\n//普通参数\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\n[params setObject:@\"张三\" forKey:@\"username\"];\n[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n    NSData *imageData = UIImagePNGRepresentation([UIImage imageNamed:@\"\"]);   \n     /**\n     拼接文件参数\n     @fileData : 要上传的文件数据\n     @name : 后台定义文件的参数名\n     @fileName ： 上传到服务器的文件名称\n     @mimeType : 上传的文件类型\n   */\n    [formData appendPartWithFileData:imageData name:@\"file\" fileName:@\"text.png\" mimeType:@\"image/png\"];\n} success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n} failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n}];\n```\n\n```\n/**\n 获取文件的MIMEType\n @param url 文件路径\n @return 文件MIMEType\n */\n- (NSString *)MIMEType:(NSURL *)url{\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    NSURLResponse *response = nil;\n    [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:nil];\n    return response.MIMEType;\n}\n```\n\n### 2、put方法上传\n\n```\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"请求路径url\"]];\n//设置header参数\n[request setValue:@\"这是自定义头参数\" forHTTPHeaderField:@\"x-content-length\"];\n    \n//获取需要上传的Data， 将其保存到沙盒中\n_needUploadData = [self getNeedUploadData];\nNSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [docPath stringByAppendingPathComponent:@\"test\"];\n[_needUploadData writeToFile:filePath atomically:YES];\n    \nNSURL *url = [NSURL URLWithString:filePath];\n\nAFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n_uploadTask = [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) {\n    NSLog(@\"uploadProgress：%@\",uploadProgress);\n    float progress =  1.0 * uploadProgress.completedUnitCount/uploadProgress.totalUnitCount;\n    NSLog(@\"上传视频进度%f\",progress);\n} completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {\n    NSLog(@\"上传结果%@\",responseObject);\n}];\n    \n[_uploadTask resume];\n```\n\n注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。\n\n ![URI结构图](/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png)\n\n\n### 3、文件操作\n在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。\n\n*  NSFileHandle： 主要是对文件内容进行读取和写入操作\n\n*  NSFileManager： 主要是对文件进行的操作以及文件信息的获取\n\n在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法\n\n```\n//获取需要上传的数据\n-(NSData *)getNeedUploadData{\n    //使用传递过来的文件上传\n    NSFileHandle *fileHandle = [NSFileHandle fileHandleForReadingAtPath:_filePath];\n    [fileHandle seekToFileOffset:_startUploadLoaction];\n\n    NSInteger uploadLength = GMOTPosterAdd_uploadVideoSizeForEveryOne;\n    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) > _fileTotalSize){\n        uploadLength = _fileTotalSize - _startUploadLoaction;\n    }\n    NSData *data = [fileHandle readDataOfLength:uploadLength];\n\n    return data;\n}\n\n```\n\n## 四、 Content-Type类型介绍\n\nMediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。\n\n```\n类型格式：type/subtype(;parameter)? type  \n主类型，任意的字符串，如text，如果是*号代表所有；   \nsubtype 子类型，任意的字符串，如html，如果是*号代表所有；   \nparameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。   \n```\n\n常见的媒体格式类型如下：\n\n-   text/html ： HTML格式\n-   text/plain ：纯文本格式     \n-   text/xml ：  XML格式\n-   image/gif ：gif图片格式    \n-   image/jpeg ：jpg图片格式 \n-   image/png：png图片格式\n\n以application开头的媒体格式类型：\n\n-   application/xhtml+xml ：XHTML格式\n-   application/xml     ： XML数据格式\n-   application/atom+xml  ：Atom XML聚合格式  \n-   application/json    ： JSON数据格式\n-   application/pdf       ：pdf格式  \n-   application/msword  ： Word文档格式\n-   application/octet-stream ： 二进制流数据（如常见的文件下载）\n-   application/x-www-form-urlencoded ：  ( <form encType=\"\">)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）\n-    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。\n\n在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。\n\n\n### 1、application/x-www-form-urlencoded\n最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&key2=val2的方式进行编码，key和val都进行了URL转码。\n在ios中，如果请求参数为：\n\n```\nNSDictionary *params = @{\n        @\"body\":@{@\"reqType\":@\"0\"},\n        @\"sn\":@\"0cec3723ca95c7066a2d56e4ef110989ea7865cf\"\n        };\n```\n被转码以后：\n\n```\nbody=%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&sn=0cec3723ca95c7066a2d56e4ef110989ea7865cf\n```\n\n### 2、multipart/form-data\n\nMultipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.\n\n请求的头部信息如下:\n\n//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符\nContent-Type: multipart/form-data; boundary=xxxxx\n下面我们来看一下一个我的Multipart/form-data请求体:\n\n```\nPOST /uploadFile HTTP/1.1\nHost: 上传文件后台地址\nContent-Type: multipart/form-data; boundary=xxxxx\nConnection: keep-alive\nAccept: /\nUser-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0\nContent-Length: 32175\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\n\n--xxxxx\nContent-Disposition: form-data;name=\"file\"\n\nimg.jpeg\n--xxxxx\nContent-Disposition: form-data;name=\"businessType\"\n\nCC_USER_CENTER\n--xxxxx\nContent-Disposition: form-data;name=\"fileType\"\n\nimage\n--xxxxx\nContent-Disposition:form-data;name=\"file\";filename=\"img1.jpeg\"\nContent-Type:image/png\n\n这里是图片数据****************，比较长\n\n--xxxxx--\n\n\n```\n备注：\n>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。\n\n>2，可以上传多个文件。\n\n>3，比较常见的上传文件方式\n\n### 3、application/octet-stream\n这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。\n\n备注：\n>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。\n>\n>2,   只能上传单个文件，不常见。\n","slug":"oc/Upload/oc-Upload-putAndPost","published":1,"updated":"2020-09-01T12:58:10.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenha004tu3s6h4bchcll","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><h3 id=\"1、简单介绍\"><a href=\"#1、简单介绍\" class=\"headerlink\" title=\"1、简单介绍\"></a>1、简单介绍</h3><ol>\n<li>在HTTP协议请求中，有8种方法：</li>\n</ol>\n<ul>\n<li>GET：请求指定的页面信息，并返回实体主体。</li>\n<li>HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</li>\n<li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</li>\n<li>PUT：从客户端向服务器传送的数据取代指定的文档的内容。</li>\n<li>DELETE：请求服务器删除指定的页面。</li>\n<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li>OPTIONS：允许客户端查看服务器的性能。</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>\n<li>PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。</li>\n</ul>\n<h3 id=\"2、区别\"><a href=\"#2、区别\" class=\"headerlink\" title=\"2、区别\"></a>2、区别</h3><p>本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:</p>\n<ol>\n<li>PUT方法的特点：传输的实体部分是一个无结构的二进制数据。</li>\n<li>POST方法的特点：倾向于结构化的数据。</li>\n</ol>\n<p>上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。</p>\n<p>那为什么现在都流行使用post上传文件呢？</p>\n<p>因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。</p>\n<p>备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。</p>\n<h2 id=\"二、HTML文件上传\"><a href=\"#二、HTML文件上传\" class=\"headerlink\" title=\"二、HTML文件上传\"></a>二、HTML文件上传</h2><p>这里为什么要写html的方式上传文件呢？ </p>\n<p>因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。</p>\n<h3 id=\"1、post上传文件：\"><a href=\"#1、post上传文件：\" class=\"headerlink\" title=\"1、post上传文件：\"></a>1、post上传文件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;post上传文件&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;form action&#x3D;&quot;***这里是上传url***&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; &#x2F;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot; &#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put上传文件\"><a href=\"#2、put上传文件\" class=\"headerlink\" title=\"2、put上传文件\"></a>2、put上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;XMLHttpRequest上传文件进度实现&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">        var xhr;</span><br><span class=\"line\">        var ot;&#x2F;&#x2F;</span><br><span class=\"line\">        var oloaded;</span><br><span class=\"line\">        &#x2F;&#x2F;上传文件方法</span><br><span class=\"line\">        function UpladFile() &#123;</span><br><span class=\"line\">            var file &#x3D; document.getElementById(&quot;file&quot;).files[0];</span><br><span class=\"line\">            var reader &#x3D; new FileReader();</span><br><span class=\"line\">            &#x2F;&#x2F;将文件以二进制形式读入页面</span><br><span class=\"line\">            reader.readAsArrayBuffer(file);</span><br><span class=\"line\">            reader.onload&#x3D;function(f)&#123;</span><br><span class=\"line\">                var rawData &#x3D; reader.result;</span><br><span class=\"line\">                var url &#x3D; &quot;***上传路径***&quot;; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class=\"line\">                xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class=\"line\">                xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;video&#x2F;mp4&quot;);</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;x-content-range&quot;, &quot;bytes 0-298327&#x2F;298328&quot;); &#x2F;&#x2F;这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;content-length&quot;, &quot;298328&quot;);   &#x2F;&#x2F;这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件</span><br><span class=\"line\">                xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class=\"line\">                xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class=\"line\">                xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class=\"line\">                xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class=\"line\">                    ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class=\"line\">                    oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                xhr.send(rawData); &#x2F;&#x2F;开始上传</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class=\"line\">        function progressFunction(evt) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class=\"line\">             var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class=\"line\">             &#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class=\"line\">             if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class=\"line\">                 progressBar.max &#x3D; evt.total;</span><br><span class=\"line\">                 progressBar.value &#x3D; evt.loaded;</span><br><span class=\"line\">                 percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class=\"line\">            var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class=\"line\">            var pertime &#x3D; (nt-ot)&#x2F;1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class=\"line\">            ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class=\"line\">            </span><br><span class=\"line\">            var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class=\"line\">            oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#x2F;&#x2F;上传速度计算</span><br><span class=\"line\">            var speed &#x3D; perload&#x2F;pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class=\"line\">            var bspeed &#x3D; speed;</span><br><span class=\"line\">            var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            speed &#x3D; speed.toFixed(1);</span><br><span class=\"line\">            &#x2F;&#x2F;剩余时间</span><br><span class=\"line\">            var resttime &#x3D; ((evt.total-evt.loaded)&#x2F;bspeed).toFixed(1);</span><br><span class=\"line\">            time.innerHTML &#x3D; &#39;，速度：&#39;+speed+units+&#39;，剩余时间：&#39;+resttime+&#39;s&#39;;</span><br><span class=\"line\">               if(bspeed&#x3D;&#x3D;0)</span><br><span class=\"line\">                time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传成功响应</span><br><span class=\"line\">        function uploadComplete(evt) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class=\"line\">         &#x2F;&#x2F;    alert(evt.target.responseText);</span><br><span class=\"line\">             alert(&quot;上传成功！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传失败</span><br><span class=\"line\">        function uploadFailed(evt) &#123;</span><br><span class=\"line\">            alert(&quot;上传失败！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">          &#x2F;&#x2F;取消上传</span><br><span class=\"line\">        function cancleUploadFile()&#123;</span><br><span class=\"line\">            xhr.abort();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;progress id&#x3D;&quot;progressBar&quot; value&#x3D;&quot;0&quot; max&#x3D;&quot;100&quot; style&#x3D;&quot;width: 300px;&quot;&gt;&lt;&#x2F;progress&gt;</span><br><span class=\"line\">    &lt;span id&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;time&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;UpladFile()&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;cancleUploadFile()&quot; value&#x3D;&quot;取消&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、-IOS上传文件\"><a href=\"#三、-IOS上传文件\" class=\"headerlink\" title=\"三、 IOS上传文件\"></a>三、 IOS上传文件</h2><p>以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)</p>\n<h3 id=\"1、post方法上传\"><a href=\"#1、post方法上传\" class=\"headerlink\" title=\"1、post方法上传\"></a>1、post方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *urlString &#x3D; @&quot;&quot;;</span><br><span class=\"line\">AFHTTPRequestOperationManager *mgr &#x3D; [AFHTTPRequestOperationManager manager];</span><br><span class=\"line\">&#x2F;&#x2F;普通参数</span><br><span class=\"line\">NSMutableDictionary *params &#x3D; [NSMutableDictionary dictionary];</span><br><span class=\"line\">[params setObject:@&quot;张三&quot; forKey:@&quot;username&quot;];</span><br><span class=\"line\">[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) &#123;</span><br><span class=\"line\">    NSData *imageData &#x3D; UIImagePNGRepresentation([UIImage imageNamed:@&quot;&quot;]);   </span><br><span class=\"line\">     &#x2F;**</span><br><span class=\"line\">     拼接文件参数</span><br><span class=\"line\">     @fileData : 要上传的文件数据</span><br><span class=\"line\">     @name : 后台定义文件的参数名</span><br><span class=\"line\">     @fileName ： 上传到服务器的文件名称</span><br><span class=\"line\">     @mimeType : 上传的文件类型</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">    [formData appendPartWithFileData:imageData name:@&quot;file&quot; fileName:@&quot;text.png&quot; mimeType:@&quot;image&#x2F;png&quot;];</span><br><span class=\"line\">&#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 获取文件的MIMEType</span><br><span class=\"line\"> @param url 文件路径</span><br><span class=\"line\"> @return 文件MIMEType</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">- (NSString *)MIMEType:(NSURL *)url&#123;</span><br><span class=\"line\">    NSURLRequest *request &#x3D; [NSURLRequest requestWithURL:url];</span><br><span class=\"line\">    NSURLResponse *response &#x3D; nil;</span><br><span class=\"line\">    [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:nil];</span><br><span class=\"line\">    return response.MIMEType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put方法上传\"><a href=\"#2、put方法上传\" class=\"headerlink\" title=\"2、put方法上传\"></a>2、put方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@&quot;请求路径url&quot;]];</span><br><span class=\"line\">&#x2F;&#x2F;设置header参数</span><br><span class=\"line\">[request setValue:@&quot;这是自定义头参数&quot; forHTTPHeaderField:@&quot;x-content-length&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;获取需要上传的Data， 将其保存到沙盒中</span><br><span class=\"line\">_needUploadData &#x3D; [self getNeedUploadData];</span><br><span class=\"line\">NSString *docPath &#x3D; [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath &#x3D; [docPath stringByAppendingPathComponent:@&quot;test&quot;];</span><br><span class=\"line\">[_needUploadData writeToFile:filePath atomically:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSURL *url &#x3D; [NSURL URLWithString:filePath];</span><br><span class=\"line\"></span><br><span class=\"line\">AFHTTPSessionManager *manager &#x3D; [AFHTTPSessionManager manager];</span><br><span class=\"line\">_uploadTask &#x3D; [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class=\"line\">    NSLog(@&quot;uploadProgress：%@&quot;,uploadProgress);</span><br><span class=\"line\">    float progress &#x3D;  1.0 * uploadProgress.completedUnitCount&#x2F;uploadProgress.totalUnitCount;</span><br><span class=\"line\">    NSLog(@&quot;上传视频进度%f&quot;,progress);</span><br><span class=\"line\">&#125; completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;上传结果%@&quot;,responseObject);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[_uploadTask resume];</span><br></pre></td></tr></table></figure>\n\n<p>注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。</p>\n<p> <img src=\"/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png\" alt=\"URI结构图\"></p>\n<h3 id=\"3、文件操作\"><a href=\"#3、文件操作\" class=\"headerlink\" title=\"3、文件操作\"></a>3、文件操作</h3><p>在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。</p>\n<ul>\n<li><p>NSFileHandle： 主要是对文件内容进行读取和写入操作</p>\n</li>\n<li><p>NSFileManager： 主要是对文件进行的操作以及文件信息的获取</p>\n</li>\n</ul>\n<p>在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;获取需要上传的数据</span><br><span class=\"line\">-(NSData *)getNeedUploadData&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;使用传递过来的文件上传</span><br><span class=\"line\">    NSFileHandle *fileHandle &#x3D; [NSFileHandle fileHandleForReadingAtPath:_filePath];</span><br><span class=\"line\">    [fileHandle seekToFileOffset:_startUploadLoaction];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSInteger uploadLength &#x3D; GMOTPosterAdd_uploadVideoSizeForEveryOne;</span><br><span class=\"line\">    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) &gt; _fileTotalSize)&#123;</span><br><span class=\"line\">        uploadLength &#x3D; _fileTotalSize - _startUploadLoaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSData *data &#x3D; [fileHandle readDataOfLength:uploadLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-Content-Type类型介绍\"><a href=\"#四、-Content-Type类型介绍\" class=\"headerlink\" title=\"四、 Content-Type类型介绍\"></a>四、 Content-Type类型介绍</h2><p>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型格式：type&#x2F;subtype(;parameter)? type  </span><br><span class=\"line\">主类型，任意的字符串，如text，如果是*号代表所有；   </span><br><span class=\"line\">subtype 子类型，任意的字符串，如html，如果是*号代表所有；   </span><br><span class=\"line\">parameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。</span><br></pre></td></tr></table></figure>\n\n<p>常见的媒体格式类型如下：</p>\n<ul>\n<li>text/html ： HTML格式</li>\n<li>text/plain ：纯文本格式     </li>\n<li>text/xml ：  XML格式</li>\n<li>image/gif ：gif图片格式    </li>\n<li>image/jpeg ：jpg图片格式 </li>\n<li>image/png：png图片格式</li>\n</ul>\n<p>以application开头的媒体格式类型：</p>\n<ul>\n<li>application/xhtml+xml ：XHTML格式</li>\n<li>application/xml     ： XML数据格式</li>\n<li>application/atom+xml  ：Atom XML聚合格式  </li>\n<li>application/json    ： JSON数据格式</li>\n<li>application/pdf       ：pdf格式  </li>\n<li>application/msword  ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ：  ( <form enctype>)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</form></li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。</li>\n</ul>\n<p>在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。</p>\n<h3 id=\"1、application-x-www-form-urlencoded\"><a href=\"#1、application-x-www-form-urlencoded\" class=\"headerlink\" title=\"1、application/x-www-form-urlencoded\"></a>1、application/x-www-form-urlencoded</h3><p>最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&amp;key2=val2的方式进行编码，key和val都进行了URL转码。<br>在ios中，如果请求参数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *params &#x3D; @&#123;</span><br><span class=\"line\">        @&quot;body&quot;:@&#123;@&quot;reqType&quot;:@&quot;0&quot;&#125;,</span><br><span class=\"line\">        @&quot;sn&quot;:@&quot;0cec3723ca95c7066a2d56e4ef110989ea7865cf&quot;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>被转码以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#x3D;%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&amp;sn&#x3D;0cec3723ca95c7066a2d56e4ef110989ea7865cf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、multipart-form-data\"><a href=\"#2、multipart-form-data\" class=\"headerlink\" title=\"2、multipart/form-data\"></a>2、multipart/form-data</h3><p>Multipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.</p>\n<p>请求的头部信息如下:</p>\n<p>//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符<br>Content-Type: multipart/form-data; boundary=xxxxx<br>下面我们来看一下一个我的Multipart/form-data请求体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;uploadFile HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 上传文件后台地址</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;xxxxx</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Accept: &#x2F;</span><br><span class=\"line\">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB&#x2F;1 CFNetwork&#x2F;808.2.16 Darwin&#x2F;15.6.0</span><br><span class=\"line\">Content-Length: 32175</span><br><span class=\"line\">Accept-Language: en-us</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;file&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">img.jpeg</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;businessType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CC_USER_CENTER</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;fileType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">image</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition:form-data;name&#x3D;&quot;file&quot;;filename&#x3D;&quot;img1.jpeg&quot;</span><br><span class=\"line\">Content-Type:image&#x2F;png</span><br><span class=\"line\"></span><br><span class=\"line\">这里是图片数据****************，比较长</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx--</span><br></pre></td></tr></table></figure>\n<p>备注：</p>\n<blockquote>\n<p>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。</p>\n</blockquote>\n<blockquote>\n<p>2，可以上传多个文件。</p>\n</blockquote>\n<blockquote>\n<p>3，比较常见的上传文件方式</p>\n</blockquote>\n<h3 id=\"3、application-octet-stream\"><a href=\"#3、application-octet-stream\" class=\"headerlink\" title=\"3、application/octet-stream\"></a>3、application/octet-stream</h3><p>这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。</p>\n<p>备注：</p>\n<blockquote>\n<p>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。</p>\n<p>2,   只能上传单个文件，不常见。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><h3 id=\"1、简单介绍\"><a href=\"#1、简单介绍\" class=\"headerlink\" title=\"1、简单介绍\"></a>1、简单介绍</h3><ol>\n<li>在HTTP协议请求中，有8种方法：</li>\n</ol>\n<ul>\n<li>GET：请求指定的页面信息，并返回实体主体。</li>\n<li>HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</li>\n<li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</li>\n<li>PUT：从客户端向服务器传送的数据取代指定的文档的内容。</li>\n<li>DELETE：请求服务器删除指定的页面。</li>\n<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li>OPTIONS：允许客户端查看服务器的性能。</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>\n<li>PATCH：是对 PUT 方法的补充，用来对已知资源进行局部更新 。</li>\n</ul>\n<h3 id=\"2、区别\"><a href=\"#2、区别\" class=\"headerlink\" title=\"2、区别\"></a>2、区别</h3><p>本文主要介绍put和post上传文件的方式，先来看一下，他们的特点:</p>\n<ol>\n<li>PUT方法的特点：传输的实体部分是一个无结构的二进制数据。</li>\n<li>POST方法的特点：倾向于结构化的数据。</li>\n</ol>\n<p>上传文件这个行为本身就是无结构数据的传输（文件是一个整体，文件的内容与传输行为无关），所以使用PUT更合适。当然，上传文件这个行为不光是把文件丢到服务器上而已，可能还需要传递一些文件的相关信息，比如文件在客户端的文件名之类的，这在使用POST方法时很容易实现。其实使用PUT方法也不存在什么问题，这些额外信息完全可以用自定义的HTTP请求头来传输。</p>\n<p>那为什么现在都流行使用post上传文件呢？</p>\n<p>因为当年的Web没有太多API的支持，只能用表单来上传文件，所以后来大家也习惯了使用POST。</p>\n<p>备注：本篇只简单介绍有关put和post上传文件的不同，至于上传请求头设置，请求体设置(文件参数和非文件参数拼接)， 小编这里不再赘述，会找出专门的篇幅来叙述这个。</p>\n<h2 id=\"二、HTML文件上传\"><a href=\"#二、HTML文件上传\" class=\"headerlink\" title=\"二、HTML文件上传\"></a>二、HTML文件上传</h2><p>这里为什么要写html的方式上传文件呢？ </p>\n<p>因为在实际的项目编码中，有时候，使用ios上传文件不成功，可以先试着使用html网页上传文件的方式试一试，如果html的方式能成功，则可以对照html的方式，去找出ios对应的方法来。之前小编就是遇到了这样的问题，最后就是通过这样的方式试出来的。</p>\n<h3 id=\"1、post上传文件：\"><a href=\"#1、post上传文件：\" class=\"headerlink\" title=\"1、post上传文件：\"></a>1、post上传文件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;post上传文件&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;form action&#x3D;&quot;***这里是上传url***&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; &#x2F;&gt;</span><br><span class=\"line\">       &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot; &#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put上传文件\"><a href=\"#2、put上传文件\" class=\"headerlink\" title=\"2、put上传文件\"></a>2、put上传文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;XMLHttpRequest上传文件进度实现&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">        var xhr;</span><br><span class=\"line\">        var ot;&#x2F;&#x2F;</span><br><span class=\"line\">        var oloaded;</span><br><span class=\"line\">        &#x2F;&#x2F;上传文件方法</span><br><span class=\"line\">        function UpladFile() &#123;</span><br><span class=\"line\">            var file &#x3D; document.getElementById(&quot;file&quot;).files[0];</span><br><span class=\"line\">            var reader &#x3D; new FileReader();</span><br><span class=\"line\">            &#x2F;&#x2F;将文件以二进制形式读入页面</span><br><span class=\"line\">            reader.readAsArrayBuffer(file);</span><br><span class=\"line\">            reader.onload&#x3D;function(f)&#123;</span><br><span class=\"line\">                var rawData &#x3D; reader.result;</span><br><span class=\"line\">                var url &#x3D; &quot;***上传路径***&quot;; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class=\"line\">                xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class=\"line\">                xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;video&#x2F;mp4&quot;);</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;x-content-range&quot;, &quot;bytes 0-298327&#x2F;298328&quot;); &#x2F;&#x2F;这个参数是后台要求的，自定义的，目前是写死的，调试用，无所谓的。</span><br><span class=\"line\">                xhr.setRequestHeader(&quot;content-length&quot;, &quot;298328&quot;);   &#x2F;&#x2F;这个值是小编根据文件大小写上的，文件大小是多少，这里就是多少。为啥要写死？ 调试上传文件，不用每次都变一个上传文件</span><br><span class=\"line\">                xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class=\"line\">                xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class=\"line\">                xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class=\"line\">                xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class=\"line\">                    ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class=\"line\">                    oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                xhr.send(rawData); &#x2F;&#x2F;开始上传</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class=\"line\">        function progressFunction(evt) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class=\"line\">             var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class=\"line\">             &#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class=\"line\">             if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class=\"line\">                 progressBar.max &#x3D; evt.total;</span><br><span class=\"line\">                 progressBar.value &#x3D; evt.loaded;</span><br><span class=\"line\">                 percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class=\"line\">            var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class=\"line\">            var pertime &#x3D; (nt-ot)&#x2F;1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class=\"line\">            ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class=\"line\">            </span><br><span class=\"line\">            var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class=\"line\">            oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#x2F;&#x2F;上传速度计算</span><br><span class=\"line\">            var speed &#x3D; perload&#x2F;pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class=\"line\">            var bspeed &#x3D; speed;</span><br><span class=\"line\">            var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(speed&#x2F;1024&gt;1)&#123;</span><br><span class=\"line\">                speed &#x3D; speed&#x2F;1024;</span><br><span class=\"line\">                units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            speed &#x3D; speed.toFixed(1);</span><br><span class=\"line\">            &#x2F;&#x2F;剩余时间</span><br><span class=\"line\">            var resttime &#x3D; ((evt.total-evt.loaded)&#x2F;bspeed).toFixed(1);</span><br><span class=\"line\">            time.innerHTML &#x3D; &#39;，速度：&#39;+speed+units+&#39;，剩余时间：&#39;+resttime+&#39;s&#39;;</span><br><span class=\"line\">               if(bspeed&#x3D;&#x3D;0)</span><br><span class=\"line\">                time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传成功响应</span><br><span class=\"line\">        function uploadComplete(evt) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class=\"line\">         &#x2F;&#x2F;    alert(evt.target.responseText);</span><br><span class=\"line\">             alert(&quot;上传成功！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;上传失败</span><br><span class=\"line\">        function uploadFailed(evt) &#123;</span><br><span class=\"line\">            alert(&quot;上传失败！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">          &#x2F;&#x2F;取消上传</span><br><span class=\"line\">        function cancleUploadFile()&#123;</span><br><span class=\"line\">            xhr.abort();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;progress id&#x3D;&quot;progressBar&quot; value&#x3D;&quot;0&quot; max&#x3D;&quot;100&quot; style&#x3D;&quot;width: 300px;&quot;&gt;&lt;&#x2F;progress&gt;</span><br><span class=\"line\">    &lt;span id&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;time&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;UpladFile()&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;cancleUploadFile()&quot; value&#x3D;&quot;取消&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、-IOS上传文件\"><a href=\"#三、-IOS上传文件\" class=\"headerlink\" title=\"三、 IOS上传文件\"></a>三、 IOS上传文件</h2><p>以下都是使用AFN框架上传文件（使用 NSURLSession 上传文件，暂时未写)</p>\n<h3 id=\"1、post方法上传\"><a href=\"#1、post方法上传\" class=\"headerlink\" title=\"1、post方法上传\"></a>1、post方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *urlString &#x3D; @&quot;&quot;;</span><br><span class=\"line\">AFHTTPRequestOperationManager *mgr &#x3D; [AFHTTPRequestOperationManager manager];</span><br><span class=\"line\">&#x2F;&#x2F;普通参数</span><br><span class=\"line\">NSMutableDictionary *params &#x3D; [NSMutableDictionary dictionary];</span><br><span class=\"line\">[params setObject:@&quot;张三&quot; forKey:@&quot;username&quot;];</span><br><span class=\"line\">[mgr POST:urlString parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) &#123;</span><br><span class=\"line\">    NSData *imageData &#x3D; UIImagePNGRepresentation([UIImage imageNamed:@&quot;&quot;]);   </span><br><span class=\"line\">     &#x2F;**</span><br><span class=\"line\">     拼接文件参数</span><br><span class=\"line\">     @fileData : 要上传的文件数据</span><br><span class=\"line\">     @name : 后台定义文件的参数名</span><br><span class=\"line\">     @fileName ： 上传到服务器的文件名称</span><br><span class=\"line\">     @mimeType : 上传的文件类型</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">    [formData appendPartWithFileData:imageData name:@&quot;file&quot; fileName:@&quot;text.png&quot; mimeType:@&quot;image&#x2F;png&quot;];</span><br><span class=\"line\">&#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> 获取文件的MIMEType</span><br><span class=\"line\"> @param url 文件路径</span><br><span class=\"line\"> @return 文件MIMEType</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">- (NSString *)MIMEType:(NSURL *)url&#123;</span><br><span class=\"line\">    NSURLRequest *request &#x3D; [NSURLRequest requestWithURL:url];</span><br><span class=\"line\">    NSURLResponse *response &#x3D; nil;</span><br><span class=\"line\">    [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:nil];</span><br><span class=\"line\">    return response.MIMEType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、put方法上传\"><a href=\"#2、put方法上传\" class=\"headerlink\" title=\"2、put方法上传\"></a>2、put方法上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableURLRequest *request &#x3D; [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@&quot;请求路径url&quot;]];</span><br><span class=\"line\">&#x2F;&#x2F;设置header参数</span><br><span class=\"line\">[request setValue:@&quot;这是自定义头参数&quot; forHTTPHeaderField:@&quot;x-content-length&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;获取需要上传的Data， 将其保存到沙盒中</span><br><span class=\"line\">_needUploadData &#x3D; [self getNeedUploadData];</span><br><span class=\"line\">NSString *docPath &#x3D; [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath &#x3D; [docPath stringByAppendingPathComponent:@&quot;test&quot;];</span><br><span class=\"line\">[_needUploadData writeToFile:filePath atomically:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSURL *url &#x3D; [NSURL URLWithString:filePath];</span><br><span class=\"line\"></span><br><span class=\"line\">AFHTTPSessionManager *manager &#x3D; [AFHTTPSessionManager manager];</span><br><span class=\"line\">_uploadTask &#x3D; [manager uploadTaskWithRequest:request fromFile:url progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class=\"line\">    NSLog(@&quot;uploadProgress：%@&quot;,uploadProgress);</span><br><span class=\"line\">    float progress &#x3D;  1.0 * uploadProgress.completedUnitCount&#x2F;uploadProgress.totalUnitCount;</span><br><span class=\"line\">    NSLog(@&quot;上传视频进度%f&quot;,progress);</span><br><span class=\"line\">&#125; completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    NSLog(@&quot;上传结果%@&quot;,responseObject);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">[_uploadTask resume];</span><br></pre></td></tr></table></figure>\n\n<p>注： 通过抓包，要注意content-type 和 content-length, 这里的content-length一定要等于要上传的文件大小。</p>\n<p> <img src=\"/img/ios_pangzhanli/FileUpload/FileUpload_put_remark.png\" alt=\"URI结构图\"></p>\n<h3 id=\"3、文件操作\"><a href=\"#3、文件操作\" class=\"headerlink\" title=\"3、文件操作\"></a>3、文件操作</h3><p>在上传文件的时候，如果文件较小，可以一次性上传，如果文件比较大的话，得将文件切分，分成若干个片断，依次上传。在ios中，操作文件会使用到, NSFileHandle 和 NSFileManager 这两个类。</p>\n<ul>\n<li><p>NSFileHandle： 主要是对文件内容进行读取和写入操作</p>\n</li>\n<li><p>NSFileManager： 主要是对文件进行的操作以及文件信息的获取</p>\n</li>\n</ul>\n<p>在上边上传文件的过程，咱们就使用了切分文件这种操作，主要用到 NSFileHandle类的seekToFileOffset这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;获取需要上传的数据</span><br><span class=\"line\">-(NSData *)getNeedUploadData&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;使用传递过来的文件上传</span><br><span class=\"line\">    NSFileHandle *fileHandle &#x3D; [NSFileHandle fileHandleForReadingAtPath:_filePath];</span><br><span class=\"line\">    [fileHandle seekToFileOffset:_startUploadLoaction];</span><br><span class=\"line\"></span><br><span class=\"line\">    NSInteger uploadLength &#x3D; GMOTPosterAdd_uploadVideoSizeForEveryOne;</span><br><span class=\"line\">    if((_startUploadLoaction + GMOTPosterAdd_uploadVideoSizeForEveryOne) &gt; _fileTotalSize)&#123;</span><br><span class=\"line\">        uploadLength &#x3D; _fileTotalSize - _startUploadLoaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    NSData *data &#x3D; [fileHandle readDataOfLength:uploadLength];</span><br><span class=\"line\"></span><br><span class=\"line\">    return data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-Content-Type类型介绍\"><a href=\"#四、-Content-Type类型介绍\" class=\"headerlink\" title=\"四、 Content-Type类型介绍\"></a>四、 Content-Type类型介绍</h2><p>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型格式：type&#x2F;subtype(;parameter)? type  </span><br><span class=\"line\">主类型，任意的字符串，如text，如果是*号代表所有；   </span><br><span class=\"line\">subtype 子类型，任意的字符串，如html，如果是*号代表所有；   </span><br><span class=\"line\">parameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。</span><br></pre></td></tr></table></figure>\n\n<p>常见的媒体格式类型如下：</p>\n<ul>\n<li>text/html ： HTML格式</li>\n<li>text/plain ：纯文本格式     </li>\n<li>text/xml ：  XML格式</li>\n<li>image/gif ：gif图片格式    </li>\n<li>image/jpeg ：jpg图片格式 </li>\n<li>image/png：png图片格式</li>\n</ul>\n<p>以application开头的媒体格式类型：</p>\n<ul>\n<li>application/xhtml+xml ：XHTML格式</li>\n<li>application/xml     ： XML数据格式</li>\n<li>application/atom+xml  ：Atom XML聚合格式  </li>\n<li>application/json    ： JSON数据格式</li>\n<li>application/pdf       ：pdf格式  </li>\n<li>application/msword  ： Word文档格式</li>\n<li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded ：  ( <form enctype>)默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</form></li>\n<li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式。</li>\n</ul>\n<p>在这儿简单介绍一下  application/x-www-form-urlencoded 和  multipart/form-data 以及 application/octet-stream 这三种类型分别用在什么场景下。</p>\n<h3 id=\"1、application-x-www-form-urlencoded\"><a href=\"#1、application-x-www-form-urlencoded\" class=\"headerlink\" title=\"1、application/x-www-form-urlencoded\"></a>1、application/x-www-form-urlencoded</h3><p>最常见的post提交数据的方式。在浏览器的原生表单中，如果不设置enctype属性，那么最终就会以  application/x-www-form-urlencoded 方式提交数据，提交的数据按照 key1=val1&amp;key2=val2的方式进行编码，key和val都进行了URL转码。<br>在ios中，如果请求参数为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *params &#x3D; @&#123;</span><br><span class=\"line\">        @&quot;body&quot;:@&#123;@&quot;reqType&quot;:@&quot;0&quot;&#125;,</span><br><span class=\"line\">        @&quot;sn&quot;:@&quot;0cec3723ca95c7066a2d56e4ef110989ea7865cf&quot;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>被转码以后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#x3D;%7B%0A%20%20%22reqType%22%20%3A%20%220%22%0A%7D&amp;sn&#x3D;0cec3723ca95c7066a2d56e4ef110989ea7865cf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、multipart-form-data\"><a href=\"#2、multipart-form-data\" class=\"headerlink\" title=\"2、multipart/form-data\"></a>2、multipart/form-data</h3><p>Multipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的. Multipart/form-data与POST方法的不同之处在于请求头和请求体. Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了. Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.</p>\n<p>请求的头部信息如下:</p>\n<p>//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符<br>Content-Type: multipart/form-data; boundary=xxxxx<br>下面我们来看一下一个我的Multipart/form-data请求体:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST &#x2F;uploadFile HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 上传文件后台地址</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;xxxxx</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Accept: &#x2F;</span><br><span class=\"line\">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB&#x2F;1 CFNetwork&#x2F;808.2.16 Darwin&#x2F;15.6.0</span><br><span class=\"line\">Content-Length: 32175</span><br><span class=\"line\">Accept-Language: en-us</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;file&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">img.jpeg</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;businessType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CC_USER_CENTER</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition: form-data;name&#x3D;&quot;fileType&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">image</span><br><span class=\"line\">--xxxxx</span><br><span class=\"line\">Content-Disposition:form-data;name&#x3D;&quot;file&quot;;filename&#x3D;&quot;img1.jpeg&quot;</span><br><span class=\"line\">Content-Type:image&#x2F;png</span><br><span class=\"line\"></span><br><span class=\"line\">这里是图片数据****************，比较长</span><br><span class=\"line\"></span><br><span class=\"line\">--xxxxx--</span><br></pre></td></tr></table></figure>\n<p>备注：</p>\n<blockquote>\n<p>1，这里就对应了 第二项中的 【1、post文件上传】 和 第三项中的 【1、post方法上传】   这种类型。</p>\n</blockquote>\n<blockquote>\n<p>2，可以上传多个文件。</p>\n</blockquote>\n<blockquote>\n<p>3，比较常见的上传文件方式</p>\n</blockquote>\n<h3 id=\"3、application-octet-stream\"><a href=\"#3、application-octet-stream\" class=\"headerlink\" title=\"3、application/octet-stream\"></a>3、application/octet-stream</h3><p>这种方式只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）。</p>\n<p>备注：</p>\n<blockquote>\n<p>1,  这里对应了 第二项中的 【2、put上传文件】 和 第三项中的 【2、put方法上传】这种类型。</p>\n<p>2,   只能上传单个文件，不常见。</p>\n</blockquote>\n"},{"title":"水印","date":"2020-04-15T09:38:27.000Z","_content":"\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-wk/oc-WaterMark-wk-1.png)\n\n2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。\n\n第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。\n\n上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。\n\n## 二、 代码\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    self.view.backgroundColor = [UIColor whiteColor];\n\n    CGSize screenSize = [UIScreen mainScreen].bounds.size;\n    CGFloat screenW = screenSize.width;\n    CGFloat screenH = screenSize.height;\n\n    //水印图片\n    UIImage *img = [self generateWaterMark:@\"这是水印啦啦啦\"];\n\n    UIImageView *waterMarkImgv = [[UIImageView alloc] init];\n    \n    \n    waterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n    \n    //让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。\n    waterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\n    waterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\n    waterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n    [self.view addSubview:waterMarkImgv];\n}\n\n\n- (UIImage *)generateWaterMark:(NSString *)hint{\n    \n    UIColor *textColor = [UIColor colorWithRed:202.0/255.0\n                                         green:204.0/255.0\n                                          blue:207.0/255.0\n                                         alpha:0.4];\n    \n    UIFont *font = [UIFont systemFontOfSize:13];\n    \n    CGSize textSize = [self textSize:hint font:font];\n    \n    UIView *subv = [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];\n    \n    UILabel *m1 = [[UILabel alloc] init];\n    m1.frame = CGRectMake(0, 0, textSize.width, textSize.height);\n    m1.textColor = textColor;\n    m1.textAlignment = NSTextAlignmentCenter;\n    m1.font = font;\n    m1.text = hint;\n    \n    [subv addSubview:m1];\n    \n    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    [subv.layer renderInContext:currentContext];\n    UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return screenshot;\n}\n\n- (CGSize)textSize:(NSString *)text font:(UIFont *)font {\n    if (!text) return CGSizeZero;\n    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)\n                              options:NSStringDrawingUsesLineFragmentOrigin\n                           attributes:@{NSFontAttributeName : font}\n                              context:nil].size;\n}\n```\n\n- 1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 \n\n```\n//主要代码\nwaterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n```\n\n- 2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。\n\n```\nwaterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\nwaterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\nwaterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n```","source":"_posts/oc/WaterMark/oc-WaterMark-wk.md","raw":"---\ntitle: 水印\ndate: 2020-04-15 17:38:27\ncategories:\n- OC\n- 水印\ntags: [动画,水印]\n---\n\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-wk/oc-WaterMark-wk-1.png)\n\n2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。\n\n第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。\n\n上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。\n\n## 二、 代码\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    self.view.backgroundColor = [UIColor whiteColor];\n\n    CGSize screenSize = [UIScreen mainScreen].bounds.size;\n    CGFloat screenW = screenSize.width;\n    CGFloat screenH = screenSize.height;\n\n    //水印图片\n    UIImage *img = [self generateWaterMark:@\"这是水印啦啦啦\"];\n\n    UIImageView *waterMarkImgv = [[UIImageView alloc] init];\n    \n    \n    waterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n    \n    //让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。\n    waterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\n    waterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\n    waterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n    [self.view addSubview:waterMarkImgv];\n}\n\n\n- (UIImage *)generateWaterMark:(NSString *)hint{\n    \n    UIColor *textColor = [UIColor colorWithRed:202.0/255.0\n                                         green:204.0/255.0\n                                          blue:207.0/255.0\n                                         alpha:0.4];\n    \n    UIFont *font = [UIFont systemFontOfSize:13];\n    \n    CGSize textSize = [self textSize:hint font:font];\n    \n    UIView *subv = [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];\n    \n    UILabel *m1 = [[UILabel alloc] init];\n    m1.frame = CGRectMake(0, 0, textSize.width, textSize.height);\n    m1.textColor = textColor;\n    m1.textAlignment = NSTextAlignmentCenter;\n    m1.font = font;\n    m1.text = hint;\n    \n    [subv addSubview:m1];\n    \n    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);\n    CGContextRef currentContext = UIGraphicsGetCurrentContext();\n    [subv.layer renderInContext:currentContext];\n    UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return screenshot;\n}\n\n- (CGSize)textSize:(NSString *)text font:(UIFont *)font {\n    if (!text) return CGSizeZero;\n    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)\n                              options:NSStringDrawingUsesLineFragmentOrigin\n                           attributes:@{NSFontAttributeName : font}\n                              context:nil].size;\n}\n```\n\n- 1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 \n\n```\n//主要代码\nwaterMarkImgv.backgroundColor = [UIColor colorWithPatternImage:img];\n```\n\n- 2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。\n\n```\nwaterMarkImgv.frame =  CGRectMake(0, 0, screenW * 2, screenH * 2);\nwaterMarkImgv.transform = CGAffineTransformMakeTranslation(-screenW,-screenH);\nwaterMarkImgv.transform = CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2/3.0);\n```","slug":"oc/WaterMark/oc-WaterMark-wk","published":1,"updated":"2020-09-01T12:58:24.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenhb004wu3s6hl2p5n6h","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png\" alt=\"图1\"></p>\n<p>2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。</p>\n<p>第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。</p>\n<p>上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。</p>\n<h2 id=\"二、-代码\"><a href=\"#二、-代码\" class=\"headerlink\" title=\"二、 代码\"></a>二、 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.view.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\"></span><br><span class=\"line\">    CGSize screenSize &#x3D; [UIScreen mainScreen].bounds.size;</span><br><span class=\"line\">    CGFloat screenW &#x3D; screenSize.width;</span><br><span class=\"line\">    CGFloat screenH &#x3D; screenSize.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;水印图片</span><br><span class=\"line\">    UIImage *img &#x3D; [self generateWaterMark:@&quot;这是水印啦啦啦&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *waterMarkImgv &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。</span><br><span class=\"line\">    waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br><span class=\"line\">    [self.view addSubview:waterMarkImgv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (UIImage *)generateWaterMark:(NSString *)hint&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIColor *textColor &#x3D; [UIColor colorWithRed:202.0&#x2F;255.0</span><br><span class=\"line\">                                         green:204.0&#x2F;255.0</span><br><span class=\"line\">                                          blue:207.0&#x2F;255.0</span><br><span class=\"line\">                                         alpha:0.4];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIFont *font &#x3D; [UIFont systemFontOfSize:13];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGSize textSize &#x3D; [self textSize:hint font:font];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIView *subv &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *m1 &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">    m1.frame &#x3D; CGRectMake(0, 0, textSize.width, textSize.height);</span><br><span class=\"line\">    m1.textColor &#x3D; textColor;</span><br><span class=\"line\">    m1.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    m1.font &#x3D; font;</span><br><span class=\"line\">    m1.text &#x3D; hint;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [subv addSubview:m1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);</span><br><span class=\"line\">    CGContextRef currentContext &#x3D; UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    [subv.layer renderInContext:currentContext];</span><br><span class=\"line\">    UIImage *screenshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">    return screenshot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)textSize:(NSString *)text font:(UIFont *)font &#123;</span><br><span class=\"line\">    if (!text) return CGSizeZero;</span><br><span class=\"line\">    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)</span><br><span class=\"line\">                              options:NSStringDrawingUsesLineFragmentOrigin</span><br><span class=\"line\">                           attributes:@&#123;NSFontAttributeName : font&#125;</span><br><span class=\"line\">                              context:nil].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;主要代码</span><br><span class=\"line\">waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png\" alt=\"图1\"></p>\n<p>2， 第一种做法：可以让UI做一张有倾斜字体的图片，然后平铺一下图片，就ok了。</p>\n<p>第二种做法： 根据文字，生成这种倾斜的图片，然后平铺。</p>\n<p>上边这两种方法都可以实现，但是，第一种做法，图片是固定的，第二种做法可以根据接口返回的字符串，来动态实现水印。也许有人说了，第一种做法中的图片，也可以通过网络下载下来，然后形成水印。 毕竟条条大路通罗马，小编今天只实现第二种做法。</p>\n<h2 id=\"二、-代码\"><a href=\"#二、-代码\" class=\"headerlink\" title=\"二、 代码\"></a>二、 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.view.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\"></span><br><span class=\"line\">    CGSize screenSize &#x3D; [UIScreen mainScreen].bounds.size;</span><br><span class=\"line\">    CGFloat screenW &#x3D; screenSize.width;</span><br><span class=\"line\">    CGFloat screenH &#x3D; screenSize.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;水印图片</span><br><span class=\"line\">    UIImage *img &#x3D; [self generateWaterMark:@&quot;这是水印啦啦啦&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    UIImageView *waterMarkImgv &#x3D; [[UIImageView alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;让图片的宽高放大一倍，然后移动位置，在旋转，这样，手机屏幕左上角的位置就成了图片imgv的锚点了。</span><br><span class=\"line\">    waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">    waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br><span class=\"line\">    [self.view addSubview:waterMarkImgv];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (UIImage *)generateWaterMark:(NSString *)hint&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIColor *textColor &#x3D; [UIColor colorWithRed:202.0&#x2F;255.0</span><br><span class=\"line\">                                         green:204.0&#x2F;255.0</span><br><span class=\"line\">                                          blue:207.0&#x2F;255.0</span><br><span class=\"line\">                                         alpha:0.4];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIFont *font &#x3D; [UIFont systemFontOfSize:13];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CGSize textSize &#x3D; [self textSize:hint font:font];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIView *subv &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, textSize.width + 100.0, textSize.height + 100.0)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *m1 &#x3D; [[UILabel alloc] init];</span><br><span class=\"line\">    m1.frame &#x3D; CGRectMake(0, 0, textSize.width, textSize.height);</span><br><span class=\"line\">    m1.textColor &#x3D; textColor;</span><br><span class=\"line\">    m1.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    m1.font &#x3D; font;</span><br><span class=\"line\">    m1.text &#x3D; hint;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [subv addSubview:m1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(subv.frame.size, NO, 2.0);</span><br><span class=\"line\">    CGContextRef currentContext &#x3D; UIGraphicsGetCurrentContext();</span><br><span class=\"line\">    [subv.layer renderInContext:currentContext];</span><br><span class=\"line\">    UIImage *screenshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    </span><br><span class=\"line\">    return screenshot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)textSize:(NSString *)text font:(UIFont *)font &#123;</span><br><span class=\"line\">    if (!text) return CGSizeZero;</span><br><span class=\"line\">    return [text boundingRectWithSize:CGSizeMake(MAXFLOAT, MAXFLOAT)</span><br><span class=\"line\">                              options:NSStringDrawingUsesLineFragmentOrigin</span><br><span class=\"line\">                           attributes:@&#123;NSFontAttributeName : font&#125;</span><br><span class=\"line\">                              context:nil].size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1, 上边的代码中，是通过生成一张水印图片，然后放到UIImageView控件中，平铺的形式来展现。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;主要代码</span><br><span class=\"line\">waterMarkImgv.backgroundColor &#x3D; [UIColor colorWithPatternImage:img];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2,  旋转逻辑， 让控件大一倍，并且控件的center正好位于屏幕的左上角远点，这样，就可以直接旋转了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waterMarkImgv.frame &#x3D;  CGRectMake(0, 0, screenW * 2, screenH * 2);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformMakeTranslation(-screenW,-screenH);</span><br><span class=\"line\">waterMarkImgv.transform &#x3D; CGAffineTransformRotate(waterMarkImgv.transform, -M_PI_2&#x2F;3.0);</span><br></pre></td></tr></table></figure>"},{"title":"旋转UILabel","date":"2020-04-15T09:16:51.000Z","_content":"\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png)\n\n![图2](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg)\n\n就是上图中的 “剩余3天” 和 \"延期\" 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？\n\n2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ \n\n经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。\n\n## 二、 实现代码 \n\n\n```\n///根据文字，获取倾斜的图片\n- (UIImage *)imageWithText:(NSString *)text{\n    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];\n    view.backgroundColor = [UIColor clearColor];\n    \n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];\n    label.backgroundColor = RGBAllColor(0xFF2C68);\n    label.textColor = [UIColor whiteColor];\n    label.text = text;\n    label.font = FONT_QuanJiao(10.f);\n    label.textAlignment = NSTextAlignmentCenter;\n    label.transform = CGAffineTransformMakeRotation(M_PI / 4.0);\n    [view addSubview:label];\n    \n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image=UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n\n\n","source":"_posts/oc/WaterMark/oc-WaterMark-rotateLabel.md","raw":"---\ntitle: 旋转UILabel\ndate: 2020-04-15 17:16:51\ncategories:\n- OC\n- 水印\ntags: [动画,水印]\n---\n\n## 一、 简介\n\n1， 先看一下，我们要实现的效果：\n\n![图1](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png)\n\n![图2](oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg)\n\n就是上图中的 “剩余3天” 和 \"延期\" 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？\n\n2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ \n\n经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。\n\n## 二、 实现代码 \n\n\n```\n///根据文字，获取倾斜的图片\n- (UIImage *)imageWithText:(NSString *)text{\n    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];\n    view.backgroundColor = [UIColor clearColor];\n    \n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];\n    label.backgroundColor = RGBAllColor(0xFF2C68);\n    label.textColor = [UIColor whiteColor];\n    label.text = text;\n    label.font = FONT_QuanJiao(10.f);\n    label.textAlignment = NSTextAlignmentCenter;\n    label.transform = CGAffineTransformMakeRotation(M_PI / 4.0);\n    [view addSubview:label];\n    \n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);\n    [view.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *image=UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return image;\n}\n```\n\n\n","slug":"oc/WaterMark/oc-WaterMark-rotateLabel","published":1,"updated":"2020-09-09T02:05:07.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenlx008nu3s66zzzgz6p","content":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg\" alt=\"图2\"></p>\n<p>就是上图中的 “剩余3天” 和 “延期” 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？</p>\n<p>2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ </p>\n<p>经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。</p>\n<h2 id=\"二、-实现代码\"><a href=\"#二、-实现代码\" class=\"headerlink\" title=\"二、 实现代码\"></a>二、 实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文字，获取倾斜的图片</span><br><span class=\"line\">- (UIImage *)imageWithText:(NSString *)text&#123;</span><br><span class=\"line\">    UIView *view &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</span><br><span class=\"line\">    view.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *label &#x3D; [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];</span><br><span class=\"line\">    label.backgroundColor &#x3D; RGBAllColor(0xFF2C68);</span><br><span class=\"line\">    label.textColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\">    label.text &#x3D; text;</span><br><span class=\"line\">    label.font &#x3D; FONT_QuanJiao(10.f);</span><br><span class=\"line\">    label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    label.transform &#x3D; CGAffineTransformMakeRotation(M_PI &#x2F; 4.0);</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    [view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">    UIImage *image&#x3D;UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    return image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h2><p>1， 先看一下，我们要实现的效果：</p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png\" alt=\"图1\"></p>\n<p><img src=\"/2020/04/15/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg\" alt=\"图2\"></p>\n<p>就是上图中的 “剩余3天” 和 “延期” 这种效果，这种是一个倾斜的控件， 如果文字是固定的一种或者多种，可以通过图标的方式来设置，但是，如果倾斜的文字内容前端无法确定，需要接口返回，那么，这种效果该怎么实现呢？</p>\n<p>2， 设想，如果使用UILabel这个控件，设置背景色，文字颜色，然后通过控件的transform方法（设置锚点）旋转一下，能否？ </p>\n<p>经过实际测试，小编发现，旋转之后， UILabel的高度变了，这不符合需求。经过查找，发现使用UIButton, 把里边的UILabel旋转即可。</p>\n<h2 id=\"二、-实现代码\"><a href=\"#二、-实现代码\" class=\"headerlink\" title=\"二、 实现代码\"></a>二、 实现代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F;根据文字，获取倾斜的图片</span><br><span class=\"line\">- (UIImage *)imageWithText:(NSString *)text&#123;</span><br><span class=\"line\">    UIView *view &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</span><br><span class=\"line\">    view.backgroundColor &#x3D; [UIColor clearColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UILabel *label &#x3D; [[UILabel alloc] initWithFrame:CGRectMake(-3.5, 8.5, 71, 19)];</span><br><span class=\"line\">    label.backgroundColor &#x3D; RGBAllColor(0xFF2C68);</span><br><span class=\"line\">    label.textColor &#x3D; [UIColor whiteColor];</span><br><span class=\"line\">    label.text &#x3D; text;</span><br><span class=\"line\">    label.font &#x3D; FONT_QuanJiao(10.f);</span><br><span class=\"line\">    label.textAlignment &#x3D; NSTextAlignmentCenter;</span><br><span class=\"line\">    label.transform &#x3D; CGAffineTransformMakeRotation(M_PI &#x2F; 4.0);</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">    UIGraphicsBeginImageContextWithOptions(view.bounds.size, NO, [UIScreen mainScreen].scale);</span><br><span class=\"line\">    [view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">    UIImage *image&#x3D;UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">    UIGraphicsEndImageContext();</span><br><span class=\"line\">    return image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"01-python基础","toc":true,"date":"2020-09-22T09:14:52.000Z","_content":"\n\n# 一. 变量和常量\n\n```\nusername = \"jack\"\nprint(username)\n\nprint(type(username))\n\nusername = 8\nprint(username)\n\nprint(username+5)\n\nprint(type(username))\n\n```\n\n# 二. 变量_对象和引用\n\n```\n\"\"\"\n操作流程\n1，创建一个数字对象100\n2， 创建一个变量a\n3, 将100赋值给变量a\n\"\"\"\n\na = 100\nprint(a)\n\n # id(a),   变量a中所存放的内存地址\nprint(id(a))\n\na = 108\nprint(a)\nprint(id(a))\n```\n\n# 三. 垃圾回收_共享引用\n\n```\n\"\"\"\n在程序运行的过程中，把创建的对象而且已经是没有用的对象自动回收，这个过程，称之为垃圾回收\n\"\"\"\n\na = \"python\"\nb = a\n\n #a, b两个变量共享引用数据 python\nprint(id(a))\nprint(id(b))\n\na = \"wolfcode\"\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n\n# 四. 数字基本操作\n\n```\n\"\"\"\n数值类型：整数(int) ,和 小数(float), 复数\n1，数值是不可变类型的对象\n2，数值的表达方式有： 十进制，十六进制，八进制， 二进制\n3，数据之间的进制转换 \n    hex()，转换成十六进制\n    oct(), 转换成八进制\n    bin(), 转换成二进制\n    int(),  转换成十进制\n\"\"\"\n#十进制\nnum1 = 100\nprint(num1)\n\n#十六进制\nnum2 = 0xff\nprint(num2)\n\n#八进制\nnum3 = 0o75\nprint(num3)\n\n#二进制\nnum4 = 0b101\nprint(num4)\n\n#进制之间的转换\nnum5 = 6890\nprint(num5)\n#bin(num)  使用二进制表示\nprint(bin(num5))\n\n#hex(num)  使用十六进制表示\nprint(hex(num5))\n\n#oct(num)  使用八进制表示\nprint(oct(num5))\n\n#把八进制转换成十进制\nprint(int(0o77))\n\n#把字符串转换成数字\nprint(int(\"1099\"))\n```\n\n# 五. 数字的其他操作\n\n```\n\"\"\"\n表达式操作\nx//y  整除， 取x除以y的整除部分\nx%y   取余数， x除以y的余数部分\nx**Y   x的y次方\n\npow(x,y)  ==>   x**y 的次方\nabs(x) ==> |x| 返回的是x的绝对值\n\"\"\"\n\nimport  random\n\nprint(5/2)\nprint(-5/2)\nprint(5//2)\nprint(-5//2)\nprint(5%2)\nprint(5*2)\nprint(5**2)\n\nprint(pow(5,3))\nprint(abs(-3))\n\nprint(\"int转换=================\")\nprint(int(\"100\"))   #100，   转换成十进制数字\nprint(int(\"100\",2))  # 100是二进制数字，转换成十进制数字=4\nprint(int(\"100\",16))\n\nprint(\"随机数=======================\")\n\n#生成一个1-10之间的随机数字\nprint(random.randint(1,10))\n\n#dir 显示模块有哪些方法可以使用\nprint(dir(random))\n\n#help 查看方法的帮助文档\nprint(help(random.randint))\n```\n\n# 六. 布尔类型\n\n```\n\"\"\"\n布尔类型： 只有两个值，True,和 False,\n1, 可以和整数直接参数运算\n2, 如果把True, False 转换为数字， True --> 1, False --> 0\n3, 数字可以转换为布尔类型， 0-->False，非0 -->Ture   使用bool(num)函数\n4, 在python中，所有的数据都可以表示为True,False, \n    在字符串中，空字符串表示为False, 非空字符串表示True,   bool(str) 函数\n\"\"\"\n\nflag = True\n\nprint(flag)\n\n# 进行加法运算\nprint(flag+4)\n\n# bool(num)  把一个数字转换为布尔类型\nprint(bool(0.0))\nprint(bool(100))\n\nprint(bool(\"\"))\nprint(bool(\"\\n\"))\n\n```\n\n# 七. 字符串基本操作\n\n```\n\"\"\"\n字符串：使用引号括起来的文字，通常情况表达的是文字的信息，有序的字符集合\n1, 使用单引号\n2，使用双引号\n3, 使用三重引号，可以对字符串换行\n\n字符串的特点：\n1，有序的字符集合\n2，对于字符串中的每一个字符串都有一个对应的索引，从左往右，从0开始， text[0]\n    索引特点： 从左往右，从0开始， 从右往左，从-1开始\n3，对于字符串是不可变对象，跟数字一样\n4，对于字符串的长度，可以使用len()函数\n5，str()函数，可以把其他对应转换为字符串\n\"\"\"\ntext = \"python\"\nprint(text)\n#type(text) 查看对象的类型\nprint(type(text))\n\ntext2 = \"wolfcode\"\nprint(text2)\n\ntext3 = \"\"\"呵呵呵\n 你好啊\n\"\"\"\nprint(text3)\nprint(type(text3))\n\nprint(\"======================================\")\n#访问text的第一个字符\nprint(text[0])\n#访问text的最后一个字符\nprint(text[-1])\n\n#错误，不能修改字符串中的字符\n#text[-1]=\"B\"\n\n#len(text) text的长度\nprint(len(text))\n\n#去除最后一个元素\nprint(text[len(text) -1])\n\n#str(123), 将数字123转换成字符串\nprint(str(123456))\nprint(type(str(123456)))\n\nprint(\"====加法和乘法====\")\n#字符串连接符号\nprint(\"python\" + \"java\")\nprint(\"123\" + str(456))\nprint(int(123) + 456)\n\n#乘法操作, 显示50个 = 字符\nprint(\"=\"*50)\n```\n\n# 八. 转义字符_原始字符\n\n```\n\"\"\"\n转义字符：\n转义序列可以让我们在字符串中表示不容易通过键盘输入或者在输入过程中字符本身有一些特殊意义的，\n我们需要使用转义字符来表示\n\\n 表示换行\n转义字符： \\+固定的字符\n比如：\n\\'  单引号，普通的字符串，不在是字符串的边界标记\n\\\"  双引号，普通的字符串，不在是字符串的边界标记\n\\n  换行符, 输入换行符\n\\t  制表符\n\\r  回车， 返回到当前行最开始的位置\n\"\"\"\n\ntext = \"abc\\nmp\"\nprint(text)\nprint(len(text))\n\ntext2 = 'abc\\'\\\"mp'\nprint(text2)\n\ntext3 = \"abc\\tdef\"\nprint(text3)\n\n# \\r返回当前行最开始的地方\nprint(\"abcdefghijk\\r呵呵呵\")\n\nprint(\"abc\\\\tdef\")\n\n#filename = \"d:\\\\name\\\\text2.txt\"\n#在字符串的前面加上r, 代表原始字符串\nfilename = r\"d:\\name\\text2.txt\"\nprint(filename)\n\n```\n\n# 九. 字符串转换\n\n```\n\"\"\"\nstr()   把一个对象转换为字符串\nord()   返回字符的unicode编码\nchr()   把unicode编码转换为字符\n\"\"\"\n\n#字符串拼接\nprint(\"123\"+str(456))\n\n#中 对应的unicode编码\nprint(ord(\"A\"))\n\n# 将unicode编码转换成字符\nprint(chr(65))\n\n```\n\n# 十. 字符串分片.py\n\n```\n\"\"\"\n字符串是一个有序的字符的集合\n通过字符串索引text[0] 是可以获取到一个字符\n如果需要从字符串中获取多个字符的话，需要用到分片\n\nstr[start:end:step]\n如果start省略，默认0\n如果end省略， 默认len(str)\n如果step省略， 默认1\nstart: 正整数，负整数\nend:正整数，负整数\nstep: 正整数，正偏移， 负整数，负偏移\n\"\"\"\ntext = \"python\"\ntext2 = \"wolfcode\"\n\ntext3 = text2[4:8]\nprint(text3)\n\n#如果不写结束索引，默认为结尾，即字符串的长度len(text2)\nprint(text2[2:])\n\n#如果不写开始索引，默认为0\nprint(text2[:4])\n\n#拷贝出一个新的字符串\ntext4 = text2[:]\nprint(text4)\n\nprint(\"=\"*50)\n\n#步长： 默认为1\n#text2[start:end:step]\n#需求： 索引值0 2 4 6 8 这样的字符\ntext5 = text2[::2]\nprint(text5)\n\n#需求： 获取wolfcode的最后三个字符\nprint(text2[-3:])\n\n#需求，将字符串wolfcode倒叙过来，组成edocflow这个字符串\nprint(text2[-1::-1])\n\n```\n\n# 十一. 字符串格式化\n\n```\n\"\"\"\n方式一： %占位符来表示字符串中的变量\n%s 字符串  %d整数 %f小数\n\"\"\"\n\n#方式一\nname = \"lucy\"\nage = 19\nprint(\"my name is %s\"%name)\nprint(\"my name is %s, I am %d\"%(name,age))\n\njob = \"IT\"\nprint(\"my job is %s, your job is %s\"%(job,job))\n\n# %.2f 保留两位小数\nprint(\"this number is %.2f\"%3.1415926)\n\nprint(\"=\"*50)\n\n#使用位置占位符，如果不写，默认是从0开始\n#text = \"my name is {}, I am {}\".format(name,age)\n#text = \"my name is {0}, I am {1}\".format(name,age)\n\n#使用名称占位符\ntext = \"my name is {name}, I am {age}\".format(name=\"jack\", age=18)\nprint(text)\n```\n\n# 十二. 字符串的常用方法\n\n```\n\"\"\"\n查找：x.find(y) 在字符串x中查找y,如果找到，返回第一次找到对应的索引值,\n    如果没有找到，返回-1\n    text = \" good good study day day up\"\n    num = text.find(\"study1\")\n    print(num)\n\nx.index(y): 在字符串x中查找y, 如果找到，返回第一次找到的索引，如果找不到，\n    报错 ValueError\n    text = \" good good study day day up\"\n    num = text.index(\"study1\")\n    print(num)\n\n替换：\nx.replace(y,z), 把字符串x中的y替换为z, 替换完之后返回一个新的字符串，\n    原来的字符串不变\n    x = \"I am good boy\"\n    text2 = x.replace(\"good\",\"bad\")\n    print(text2)\n\n字符串分割：x.split([y]), 把字符串x按照y进行分割\n字符串合并: y.join(x),  用字符串y将x中的每个数据进行连接\n去除空格： x.strip(), 把字符串x两边的空格去掉\n编码： x.encode(\"utf-8\")   把字符串x编码为字节数据，参数为编码规则，默认为utf-8\n解码： x.decode(\"utf-8\")   把字节数据x解码为字符串，参数为解码规则，同编码一致\n\"\"\"\n\nx = \"你好,谢谢,对不起,请,再见\"\ntext3 = x.split(\",\")\nprint(text3)\n\ntext4 = \"%4%\".join(text3)\nprint(text4)\n\nx = \"   wolf code,   code color   \"\ny = x.strip()\nprint(x)\nprint(y)\n\nprint(\"=\"*50)\nx = \"hello,你好\"\ny = x.encode(\"utf-8\")   #b开头\nprint(x)\nprint(y)\nprint(type(x))\nprint(type(y))\ntext5 = y.decode()\nprint(text5)\n```\n\n# 十三. 运算符操作\n\n```\n\"\"\"\n1，复合运算符 + - * / +=\nx+=y  ==> x = x+y\n\n2，关系运算符 > < >= <=  == 返回结果是布尔值，True,False\n\n3, 逻辑运算符, 对于所有的对象数据都可以转换为布尔类型\n    逻辑与： and\n    逻辑或： or\n    逻辑非:  not\nx and y:  如果x为False，那么返回x, 否则返回y, 返回第一个为False的值， 或者是最后一个值\nx or y: 如果x为True, 那么返回x, 否则就返回y, 返回第一个为True的值，或者是最后一个值\nnot x: x如果为True的话，返回False, 否则返回True\n\"\"\"\n\nprint(0 and 100)\nprint(1 and 100)\nprint(\"wolf\" and 80)\n\nprint(\"=\"*50)\nprint(\"wolf\" or 1)\nprint(\"\" or 10)\nprint(0 or 10)\nprint(1 or 0)\n\nprint(\"=\"*50)\nprint(not \"wolf\")\nprint(not \"\")\nprint(not 0)\nprint(not 10)\n\n```\n\n# 十四. 运算符_实体关系\n\n```\n\"\"\"\n成员关系： 体现的是对象(序列对象，字符串，元组，列表，集合)之间的包含关系\nx in y:   如果在y中包含x, 返回True, 否则返回False\nx not in y: 如果在y中不包含x, 返回True, 否则返回False\n\n实体对象测试：判断两个变量是否存的是同一个对象（共享引用），id(x) == id(y)\nx is y: 表示x和y是同一个对象 即id(x)=id(y), 内存地址是同一个\nx is not y: 表示x和y不是同一个对象,即内存地址不一样\n\"\"\"\n\ntext1 = \"wolfcode\"\ntext2 = \"code\"\nprint(text2 in text1)  #True\nprint(text2 not in text1) #False\nprint(\"00xx\" not in text1) #True\n\ntext3 = text1\n\nprint(id(text1))\nprint(id(text3))\nprint(text1 is text3)  #这儿比较的是内存地址\nprint(text1 == text3)  #这儿比较的是值\n\n```","source":"_posts/python/base/01-python基础.md","raw":"---\ntitle: 01-python基础\ntoc: true\ndate: 2020-09-22 17:14:52\ncategories:\n- python\n- python基础\ntags:\n\n---\n\n\n# 一. 变量和常量\n\n```\nusername = \"jack\"\nprint(username)\n\nprint(type(username))\n\nusername = 8\nprint(username)\n\nprint(username+5)\n\nprint(type(username))\n\n```\n\n# 二. 变量_对象和引用\n\n```\n\"\"\"\n操作流程\n1，创建一个数字对象100\n2， 创建一个变量a\n3, 将100赋值给变量a\n\"\"\"\n\na = 100\nprint(a)\n\n # id(a),   变量a中所存放的内存地址\nprint(id(a))\n\na = 108\nprint(a)\nprint(id(a))\n```\n\n# 三. 垃圾回收_共享引用\n\n```\n\"\"\"\n在程序运行的过程中，把创建的对象而且已经是没有用的对象自动回收，这个过程，称之为垃圾回收\n\"\"\"\n\na = \"python\"\nb = a\n\n #a, b两个变量共享引用数据 python\nprint(id(a))\nprint(id(b))\n\na = \"wolfcode\"\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n\n# 四. 数字基本操作\n\n```\n\"\"\"\n数值类型：整数(int) ,和 小数(float), 复数\n1，数值是不可变类型的对象\n2，数值的表达方式有： 十进制，十六进制，八进制， 二进制\n3，数据之间的进制转换 \n    hex()，转换成十六进制\n    oct(), 转换成八进制\n    bin(), 转换成二进制\n    int(),  转换成十进制\n\"\"\"\n#十进制\nnum1 = 100\nprint(num1)\n\n#十六进制\nnum2 = 0xff\nprint(num2)\n\n#八进制\nnum3 = 0o75\nprint(num3)\n\n#二进制\nnum4 = 0b101\nprint(num4)\n\n#进制之间的转换\nnum5 = 6890\nprint(num5)\n#bin(num)  使用二进制表示\nprint(bin(num5))\n\n#hex(num)  使用十六进制表示\nprint(hex(num5))\n\n#oct(num)  使用八进制表示\nprint(oct(num5))\n\n#把八进制转换成十进制\nprint(int(0o77))\n\n#把字符串转换成数字\nprint(int(\"1099\"))\n```\n\n# 五. 数字的其他操作\n\n```\n\"\"\"\n表达式操作\nx//y  整除， 取x除以y的整除部分\nx%y   取余数， x除以y的余数部分\nx**Y   x的y次方\n\npow(x,y)  ==>   x**y 的次方\nabs(x) ==> |x| 返回的是x的绝对值\n\"\"\"\n\nimport  random\n\nprint(5/2)\nprint(-5/2)\nprint(5//2)\nprint(-5//2)\nprint(5%2)\nprint(5*2)\nprint(5**2)\n\nprint(pow(5,3))\nprint(abs(-3))\n\nprint(\"int转换=================\")\nprint(int(\"100\"))   #100，   转换成十进制数字\nprint(int(\"100\",2))  # 100是二进制数字，转换成十进制数字=4\nprint(int(\"100\",16))\n\nprint(\"随机数=======================\")\n\n#生成一个1-10之间的随机数字\nprint(random.randint(1,10))\n\n#dir 显示模块有哪些方法可以使用\nprint(dir(random))\n\n#help 查看方法的帮助文档\nprint(help(random.randint))\n```\n\n# 六. 布尔类型\n\n```\n\"\"\"\n布尔类型： 只有两个值，True,和 False,\n1, 可以和整数直接参数运算\n2, 如果把True, False 转换为数字， True --> 1, False --> 0\n3, 数字可以转换为布尔类型， 0-->False，非0 -->Ture   使用bool(num)函数\n4, 在python中，所有的数据都可以表示为True,False, \n    在字符串中，空字符串表示为False, 非空字符串表示True,   bool(str) 函数\n\"\"\"\n\nflag = True\n\nprint(flag)\n\n# 进行加法运算\nprint(flag+4)\n\n# bool(num)  把一个数字转换为布尔类型\nprint(bool(0.0))\nprint(bool(100))\n\nprint(bool(\"\"))\nprint(bool(\"\\n\"))\n\n```\n\n# 七. 字符串基本操作\n\n```\n\"\"\"\n字符串：使用引号括起来的文字，通常情况表达的是文字的信息，有序的字符集合\n1, 使用单引号\n2，使用双引号\n3, 使用三重引号，可以对字符串换行\n\n字符串的特点：\n1，有序的字符集合\n2，对于字符串中的每一个字符串都有一个对应的索引，从左往右，从0开始， text[0]\n    索引特点： 从左往右，从0开始， 从右往左，从-1开始\n3，对于字符串是不可变对象，跟数字一样\n4，对于字符串的长度，可以使用len()函数\n5，str()函数，可以把其他对应转换为字符串\n\"\"\"\ntext = \"python\"\nprint(text)\n#type(text) 查看对象的类型\nprint(type(text))\n\ntext2 = \"wolfcode\"\nprint(text2)\n\ntext3 = \"\"\"呵呵呵\n 你好啊\n\"\"\"\nprint(text3)\nprint(type(text3))\n\nprint(\"======================================\")\n#访问text的第一个字符\nprint(text[0])\n#访问text的最后一个字符\nprint(text[-1])\n\n#错误，不能修改字符串中的字符\n#text[-1]=\"B\"\n\n#len(text) text的长度\nprint(len(text))\n\n#去除最后一个元素\nprint(text[len(text) -1])\n\n#str(123), 将数字123转换成字符串\nprint(str(123456))\nprint(type(str(123456)))\n\nprint(\"====加法和乘法====\")\n#字符串连接符号\nprint(\"python\" + \"java\")\nprint(\"123\" + str(456))\nprint(int(123) + 456)\n\n#乘法操作, 显示50个 = 字符\nprint(\"=\"*50)\n```\n\n# 八. 转义字符_原始字符\n\n```\n\"\"\"\n转义字符：\n转义序列可以让我们在字符串中表示不容易通过键盘输入或者在输入过程中字符本身有一些特殊意义的，\n我们需要使用转义字符来表示\n\\n 表示换行\n转义字符： \\+固定的字符\n比如：\n\\'  单引号，普通的字符串，不在是字符串的边界标记\n\\\"  双引号，普通的字符串，不在是字符串的边界标记\n\\n  换行符, 输入换行符\n\\t  制表符\n\\r  回车， 返回到当前行最开始的位置\n\"\"\"\n\ntext = \"abc\\nmp\"\nprint(text)\nprint(len(text))\n\ntext2 = 'abc\\'\\\"mp'\nprint(text2)\n\ntext3 = \"abc\\tdef\"\nprint(text3)\n\n# \\r返回当前行最开始的地方\nprint(\"abcdefghijk\\r呵呵呵\")\n\nprint(\"abc\\\\tdef\")\n\n#filename = \"d:\\\\name\\\\text2.txt\"\n#在字符串的前面加上r, 代表原始字符串\nfilename = r\"d:\\name\\text2.txt\"\nprint(filename)\n\n```\n\n# 九. 字符串转换\n\n```\n\"\"\"\nstr()   把一个对象转换为字符串\nord()   返回字符的unicode编码\nchr()   把unicode编码转换为字符\n\"\"\"\n\n#字符串拼接\nprint(\"123\"+str(456))\n\n#中 对应的unicode编码\nprint(ord(\"A\"))\n\n# 将unicode编码转换成字符\nprint(chr(65))\n\n```\n\n# 十. 字符串分片.py\n\n```\n\"\"\"\n字符串是一个有序的字符的集合\n通过字符串索引text[0] 是可以获取到一个字符\n如果需要从字符串中获取多个字符的话，需要用到分片\n\nstr[start:end:step]\n如果start省略，默认0\n如果end省略， 默认len(str)\n如果step省略， 默认1\nstart: 正整数，负整数\nend:正整数，负整数\nstep: 正整数，正偏移， 负整数，负偏移\n\"\"\"\ntext = \"python\"\ntext2 = \"wolfcode\"\n\ntext3 = text2[4:8]\nprint(text3)\n\n#如果不写结束索引，默认为结尾，即字符串的长度len(text2)\nprint(text2[2:])\n\n#如果不写开始索引，默认为0\nprint(text2[:4])\n\n#拷贝出一个新的字符串\ntext4 = text2[:]\nprint(text4)\n\nprint(\"=\"*50)\n\n#步长： 默认为1\n#text2[start:end:step]\n#需求： 索引值0 2 4 6 8 这样的字符\ntext5 = text2[::2]\nprint(text5)\n\n#需求： 获取wolfcode的最后三个字符\nprint(text2[-3:])\n\n#需求，将字符串wolfcode倒叙过来，组成edocflow这个字符串\nprint(text2[-1::-1])\n\n```\n\n# 十一. 字符串格式化\n\n```\n\"\"\"\n方式一： %占位符来表示字符串中的变量\n%s 字符串  %d整数 %f小数\n\"\"\"\n\n#方式一\nname = \"lucy\"\nage = 19\nprint(\"my name is %s\"%name)\nprint(\"my name is %s, I am %d\"%(name,age))\n\njob = \"IT\"\nprint(\"my job is %s, your job is %s\"%(job,job))\n\n# %.2f 保留两位小数\nprint(\"this number is %.2f\"%3.1415926)\n\nprint(\"=\"*50)\n\n#使用位置占位符，如果不写，默认是从0开始\n#text = \"my name is {}, I am {}\".format(name,age)\n#text = \"my name is {0}, I am {1}\".format(name,age)\n\n#使用名称占位符\ntext = \"my name is {name}, I am {age}\".format(name=\"jack\", age=18)\nprint(text)\n```\n\n# 十二. 字符串的常用方法\n\n```\n\"\"\"\n查找：x.find(y) 在字符串x中查找y,如果找到，返回第一次找到对应的索引值,\n    如果没有找到，返回-1\n    text = \" good good study day day up\"\n    num = text.find(\"study1\")\n    print(num)\n\nx.index(y): 在字符串x中查找y, 如果找到，返回第一次找到的索引，如果找不到，\n    报错 ValueError\n    text = \" good good study day day up\"\n    num = text.index(\"study1\")\n    print(num)\n\n替换：\nx.replace(y,z), 把字符串x中的y替换为z, 替换完之后返回一个新的字符串，\n    原来的字符串不变\n    x = \"I am good boy\"\n    text2 = x.replace(\"good\",\"bad\")\n    print(text2)\n\n字符串分割：x.split([y]), 把字符串x按照y进行分割\n字符串合并: y.join(x),  用字符串y将x中的每个数据进行连接\n去除空格： x.strip(), 把字符串x两边的空格去掉\n编码： x.encode(\"utf-8\")   把字符串x编码为字节数据，参数为编码规则，默认为utf-8\n解码： x.decode(\"utf-8\")   把字节数据x解码为字符串，参数为解码规则，同编码一致\n\"\"\"\n\nx = \"你好,谢谢,对不起,请,再见\"\ntext3 = x.split(\",\")\nprint(text3)\n\ntext4 = \"%4%\".join(text3)\nprint(text4)\n\nx = \"   wolf code,   code color   \"\ny = x.strip()\nprint(x)\nprint(y)\n\nprint(\"=\"*50)\nx = \"hello,你好\"\ny = x.encode(\"utf-8\")   #b开头\nprint(x)\nprint(y)\nprint(type(x))\nprint(type(y))\ntext5 = y.decode()\nprint(text5)\n```\n\n# 十三. 运算符操作\n\n```\n\"\"\"\n1，复合运算符 + - * / +=\nx+=y  ==> x = x+y\n\n2，关系运算符 > < >= <=  == 返回结果是布尔值，True,False\n\n3, 逻辑运算符, 对于所有的对象数据都可以转换为布尔类型\n    逻辑与： and\n    逻辑或： or\n    逻辑非:  not\nx and y:  如果x为False，那么返回x, 否则返回y, 返回第一个为False的值， 或者是最后一个值\nx or y: 如果x为True, 那么返回x, 否则就返回y, 返回第一个为True的值，或者是最后一个值\nnot x: x如果为True的话，返回False, 否则返回True\n\"\"\"\n\nprint(0 and 100)\nprint(1 and 100)\nprint(\"wolf\" and 80)\n\nprint(\"=\"*50)\nprint(\"wolf\" or 1)\nprint(\"\" or 10)\nprint(0 or 10)\nprint(1 or 0)\n\nprint(\"=\"*50)\nprint(not \"wolf\")\nprint(not \"\")\nprint(not 0)\nprint(not 10)\n\n```\n\n# 十四. 运算符_实体关系\n\n```\n\"\"\"\n成员关系： 体现的是对象(序列对象，字符串，元组，列表，集合)之间的包含关系\nx in y:   如果在y中包含x, 返回True, 否则返回False\nx not in y: 如果在y中不包含x, 返回True, 否则返回False\n\n实体对象测试：判断两个变量是否存的是同一个对象（共享引用），id(x) == id(y)\nx is y: 表示x和y是同一个对象 即id(x)=id(y), 内存地址是同一个\nx is not y: 表示x和y不是同一个对象,即内存地址不一样\n\"\"\"\n\ntext1 = \"wolfcode\"\ntext2 = \"code\"\nprint(text2 in text1)  #True\nprint(text2 not in text1) #False\nprint(\"00xx\" not in text1) #True\n\ntext3 = text1\n\nprint(id(text1))\nprint(id(text3))\nprint(text1 is text3)  #这儿比较的是内存地址\nprint(text1 == text3)  #这儿比较的是值\n\n```","slug":"python/base/01-python基础","published":1,"updated":"2020-09-23T02:20:54.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenlx008ou3s62ud1gcyk","content":"<h1 id=\"一-变量和常量\"><a href=\"#一-变量和常量\" class=\"headerlink\" title=\"一. 变量和常量\"></a>一. 变量和常量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username &#x3D; &quot;jack&quot;</span><br><span class=\"line\">print(username)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(username))</span><br><span class=\"line\"></span><br><span class=\"line\">username &#x3D; 8</span><br><span class=\"line\">print(username)</span><br><span class=\"line\"></span><br><span class=\"line\">print(username+5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(username))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-变量-对象和引用\"><a href=\"#二-变量-对象和引用\" class=\"headerlink\" title=\"二. 变量_对象和引用\"></a>二. 变量_对象和引用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">操作流程</span><br><span class=\"line\">1，创建一个数字对象100</span><br><span class=\"line\">2， 创建一个变量a</span><br><span class=\"line\">3, 将100赋值给变量a</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 100</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"> # id(a),   变量a中所存放的内存地址</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 108</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(id(a))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-垃圾回收-共享引用\"><a href=\"#三-垃圾回收-共享引用\" class=\"headerlink\" title=\"三. 垃圾回收_共享引用\"></a>三. 垃圾回收_共享引用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">在程序运行的过程中，把创建的对象而且已经是没有用的对象自动回收，这个过程，称之为垃圾回收</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; &quot;python&quot;</span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\"> #a, b两个变量共享引用数据 python</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\">print(id(b))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\">print(id(b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-数字基本操作\"><a href=\"#四-数字基本操作\" class=\"headerlink\" title=\"四. 数字基本操作\"></a>四. 数字基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">数值类型：整数(int) ,和 小数(float), 复数</span><br><span class=\"line\">1，数值是不可变类型的对象</span><br><span class=\"line\">2，数值的表达方式有： 十进制，十六进制，八进制， 二进制</span><br><span class=\"line\">3，数据之间的进制转换 </span><br><span class=\"line\">    hex()，转换成十六进制</span><br><span class=\"line\">    oct(), 转换成八进制</span><br><span class=\"line\">    bin(), 转换成二进制</span><br><span class=\"line\">    int(),  转换成十进制</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#十进制</span><br><span class=\"line\">num1 &#x3D; 100</span><br><span class=\"line\">print(num1)</span><br><span class=\"line\"></span><br><span class=\"line\">#十六进制</span><br><span class=\"line\">num2 &#x3D; 0xff</span><br><span class=\"line\">print(num2)</span><br><span class=\"line\"></span><br><span class=\"line\">#八进制</span><br><span class=\"line\">num3 &#x3D; 0o75</span><br><span class=\"line\">print(num3)</span><br><span class=\"line\"></span><br><span class=\"line\">#二进制</span><br><span class=\"line\">num4 &#x3D; 0b101</span><br><span class=\"line\">print(num4)</span><br><span class=\"line\"></span><br><span class=\"line\">#进制之间的转换</span><br><span class=\"line\">num5 &#x3D; 6890</span><br><span class=\"line\">print(num5)</span><br><span class=\"line\">#bin(num)  使用二进制表示</span><br><span class=\"line\">print(bin(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#hex(num)  使用十六进制表示</span><br><span class=\"line\">print(hex(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#oct(num)  使用八进制表示</span><br><span class=\"line\">print(oct(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#把八进制转换成十进制</span><br><span class=\"line\">print(int(0o77))</span><br><span class=\"line\"></span><br><span class=\"line\">#把字符串转换成数字</span><br><span class=\"line\">print(int(&quot;1099&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-数字的其他操作\"><a href=\"#五-数字的其他操作\" class=\"headerlink\" title=\"五. 数字的其他操作\"></a>五. 数字的其他操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">表达式操作</span><br><span class=\"line\">x&#x2F;&#x2F;y  整除， 取x除以y的整除部分</span><br><span class=\"line\">x%y   取余数， x除以y的余数部分</span><br><span class=\"line\">x**Y   x的y次方</span><br><span class=\"line\"></span><br><span class=\"line\">pow(x,y)  &#x3D;&#x3D;&gt;   x**y 的次方</span><br><span class=\"line\">abs(x) &#x3D;&#x3D;&gt; |x| 返回的是x的绝对值</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">import  random</span><br><span class=\"line\"></span><br><span class=\"line\">print(5&#x2F;2)</span><br><span class=\"line\">print(-5&#x2F;2)</span><br><span class=\"line\">print(5&#x2F;&#x2F;2)</span><br><span class=\"line\">print(-5&#x2F;&#x2F;2)</span><br><span class=\"line\">print(5%2)</span><br><span class=\"line\">print(5*2)</span><br><span class=\"line\">print(5**2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(pow(5,3))</span><br><span class=\"line\">print(abs(-3))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;int转换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">print(int(&quot;100&quot;))   #100，   转换成十进制数字</span><br><span class=\"line\">print(int(&quot;100&quot;,2))  # 100是二进制数字，转换成十进制数字&#x3D;4</span><br><span class=\"line\">print(int(&quot;100&quot;,16))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;随机数&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#生成一个1-10之间的随机数字</span><br><span class=\"line\">print(random.randint(1,10))</span><br><span class=\"line\"></span><br><span class=\"line\">#dir 显示模块有哪些方法可以使用</span><br><span class=\"line\">print(dir(random))</span><br><span class=\"line\"></span><br><span class=\"line\">#help 查看方法的帮助文档</span><br><span class=\"line\">print(help(random.randint))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-布尔类型\"><a href=\"#六-布尔类型\" class=\"headerlink\" title=\"六. 布尔类型\"></a>六. 布尔类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">布尔类型： 只有两个值，True,和 False,</span><br><span class=\"line\">1, 可以和整数直接参数运算</span><br><span class=\"line\">2, 如果把True, False 转换为数字， True --&gt; 1, False --&gt; 0</span><br><span class=\"line\">3, 数字可以转换为布尔类型， 0--&gt;False，非0 --&gt;Ture   使用bool(num)函数</span><br><span class=\"line\">4, 在python中，所有的数据都可以表示为True,False, </span><br><span class=\"line\">    在字符串中，空字符串表示为False, 非空字符串表示True,   bool(str) 函数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">flag &#x3D; True</span><br><span class=\"line\"></span><br><span class=\"line\">print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进行加法运算</span><br><span class=\"line\">print(flag+4)</span><br><span class=\"line\"></span><br><span class=\"line\"># bool(num)  把一个数字转换为布尔类型</span><br><span class=\"line\">print(bool(0.0))</span><br><span class=\"line\">print(bool(100))</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&quot;&quot;))</span><br><span class=\"line\">print(bool(&quot;\\n&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-字符串基本操作\"><a href=\"#七-字符串基本操作\" class=\"headerlink\" title=\"七. 字符串基本操作\"></a>七. 字符串基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字符串：使用引号括起来的文字，通常情况表达的是文字的信息，有序的字符集合</span><br><span class=\"line\">1, 使用单引号</span><br><span class=\"line\">2，使用双引号</span><br><span class=\"line\">3, 使用三重引号，可以对字符串换行</span><br><span class=\"line\"></span><br><span class=\"line\">字符串的特点：</span><br><span class=\"line\">1，有序的字符集合</span><br><span class=\"line\">2，对于字符串中的每一个字符串都有一个对应的索引，从左往右，从0开始， text[0]</span><br><span class=\"line\">    索引特点： 从左往右，从0开始， 从右往左，从-1开始</span><br><span class=\"line\">3，对于字符串是不可变对象，跟数字一样</span><br><span class=\"line\">4，对于字符串的长度，可以使用len()函数</span><br><span class=\"line\">5，str()函数，可以把其他对应转换为字符串</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;python&quot;</span><br><span class=\"line\">print(text)</span><br><span class=\"line\">#type(text) 查看对象的类型</span><br><span class=\"line\">print(type(text))</span><br><span class=\"line\"></span><br><span class=\"line\">text2 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; &quot;&quot;&quot;呵呵呵</span><br><span class=\"line\"> 你好啊</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\">print(type(text3))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">#访问text的第一个字符</span><br><span class=\"line\">print(text[0])</span><br><span class=\"line\">#访问text的最后一个字符</span><br><span class=\"line\">print(text[-1])</span><br><span class=\"line\"></span><br><span class=\"line\">#错误，不能修改字符串中的字符</span><br><span class=\"line\">#text[-1]&#x3D;&quot;B&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#len(text) text的长度</span><br><span class=\"line\">print(len(text))</span><br><span class=\"line\"></span><br><span class=\"line\">#去除最后一个元素</span><br><span class=\"line\">print(text[len(text) -1])</span><br><span class=\"line\"></span><br><span class=\"line\">#str(123), 将数字123转换成字符串</span><br><span class=\"line\">print(str(123456))</span><br><span class=\"line\">print(type(str(123456)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;加法和乘法&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">#字符串连接符号</span><br><span class=\"line\">print(&quot;python&quot; + &quot;java&quot;)</span><br><span class=\"line\">print(&quot;123&quot; + str(456))</span><br><span class=\"line\">print(int(123) + 456)</span><br><span class=\"line\"></span><br><span class=\"line\">#乘法操作, 显示50个 &#x3D; 字符</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-转义字符-原始字符\"><a href=\"#八-转义字符-原始字符\" class=\"headerlink\" title=\"八. 转义字符_原始字符\"></a>八. 转义字符_原始字符</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">转义字符：</span><br><span class=\"line\">转义序列可以让我们在字符串中表示不容易通过键盘输入或者在输入过程中字符本身有一些特殊意义的，</span><br><span class=\"line\">我们需要使用转义字符来表示</span><br><span class=\"line\">\\n 表示换行</span><br><span class=\"line\">转义字符： \\+固定的字符</span><br><span class=\"line\">比如：</span><br><span class=\"line\">\\&#39;  单引号，普通的字符串，不在是字符串的边界标记</span><br><span class=\"line\">\\&quot;  双引号，普通的字符串，不在是字符串的边界标记</span><br><span class=\"line\">\\n  换行符, 输入换行符</span><br><span class=\"line\">\\t  制表符</span><br><span class=\"line\">\\r  回车， 返回到当前行最开始的位置</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text &#x3D; &quot;abc\\nmp&quot;</span><br><span class=\"line\">print(text)</span><br><span class=\"line\">print(len(text))</span><br><span class=\"line\"></span><br><span class=\"line\">text2 &#x3D; &#39;abc\\&#39;\\&quot;mp&#39;</span><br><span class=\"line\">print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; &quot;abc\\tdef&quot;</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\"># \\r返回当前行最开始的地方</span><br><span class=\"line\">print(&quot;abcdefghijk\\r呵呵呵&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;abc\\\\tdef&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#filename &#x3D; &quot;d:\\\\name\\\\text2.txt&quot;</span><br><span class=\"line\">#在字符串的前面加上r, 代表原始字符串</span><br><span class=\"line\">filename &#x3D; r&quot;d:\\name\\text2.txt&quot;</span><br><span class=\"line\">print(filename)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-字符串转换\"><a href=\"#九-字符串转换\" class=\"headerlink\" title=\"九. 字符串转换\"></a>九. 字符串转换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">str()   把一个对象转换为字符串</span><br><span class=\"line\">ord()   返回字符的unicode编码</span><br><span class=\"line\">chr()   把unicode编码转换为字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#字符串拼接</span><br><span class=\"line\">print(&quot;123&quot;+str(456))</span><br><span class=\"line\"></span><br><span class=\"line\">#中 对应的unicode编码</span><br><span class=\"line\">print(ord(&quot;A&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 将unicode编码转换成字符</span><br><span class=\"line\">print(chr(65))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-字符串分片-py\"><a href=\"#十-字符串分片-py\" class=\"headerlink\" title=\"十. 字符串分片.py\"></a>十. 字符串分片.py</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字符串是一个有序的字符的集合</span><br><span class=\"line\">通过字符串索引text[0] 是可以获取到一个字符</span><br><span class=\"line\">如果需要从字符串中获取多个字符的话，需要用到分片</span><br><span class=\"line\"></span><br><span class=\"line\">str[start:end:step]</span><br><span class=\"line\">如果start省略，默认0</span><br><span class=\"line\">如果end省略， 默认len(str)</span><br><span class=\"line\">如果step省略， 默认1</span><br><span class=\"line\">start: 正整数，负整数</span><br><span class=\"line\">end:正整数，负整数</span><br><span class=\"line\">step: 正整数，正偏移， 负整数，负偏移</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;python&quot;</span><br><span class=\"line\">text2 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; text2[4:8]</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\">#如果不写结束索引，默认为结尾，即字符串的长度len(text2)</span><br><span class=\"line\">print(text2[2:])</span><br><span class=\"line\"></span><br><span class=\"line\">#如果不写开始索引，默认为0</span><br><span class=\"line\">print(text2[:4])</span><br><span class=\"line\"></span><br><span class=\"line\">#拷贝出一个新的字符串</span><br><span class=\"line\">text4 &#x3D; text2[:]</span><br><span class=\"line\">print(text4)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#步长： 默认为1</span><br><span class=\"line\">#text2[start:end:step]</span><br><span class=\"line\">#需求： 索引值0 2 4 6 8 这样的字符</span><br><span class=\"line\">text5 &#x3D; text2[::2]</span><br><span class=\"line\">print(text5)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求： 获取wolfcode的最后三个字符</span><br><span class=\"line\">print(text2[-3:])</span><br><span class=\"line\"></span><br><span class=\"line\">#需求，将字符串wolfcode倒叙过来，组成edocflow这个字符串</span><br><span class=\"line\">print(text2[-1::-1])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-字符串格式化\"><a href=\"#十一-字符串格式化\" class=\"headerlink\" title=\"十一. 字符串格式化\"></a>十一. 字符串格式化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">方式一： %占位符来表示字符串中的变量</span><br><span class=\"line\">%s 字符串  %d整数 %f小数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#方式一</span><br><span class=\"line\">name &#x3D; &quot;lucy&quot;</span><br><span class=\"line\">age &#x3D; 19</span><br><span class=\"line\">print(&quot;my name is %s&quot;%name)</span><br><span class=\"line\">print(&quot;my name is %s, I am %d&quot;%(name,age))</span><br><span class=\"line\"></span><br><span class=\"line\">job &#x3D; &quot;IT&quot;</span><br><span class=\"line\">print(&quot;my job is %s, your job is %s&quot;%(job,job))</span><br><span class=\"line\"></span><br><span class=\"line\"># %.2f 保留两位小数</span><br><span class=\"line\">print(&quot;this number is %.2f&quot;%3.1415926)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#使用位置占位符，如果不写，默认是从0开始</span><br><span class=\"line\">#text &#x3D; &quot;my name is &#123;&#125;, I am &#123;&#125;&quot;.format(name,age)</span><br><span class=\"line\">#text &#x3D; &quot;my name is &#123;0&#125;, I am &#123;1&#125;&quot;.format(name,age)</span><br><span class=\"line\"></span><br><span class=\"line\">#使用名称占位符</span><br><span class=\"line\">text &#x3D; &quot;my name is &#123;name&#125;, I am &#123;age&#125;&quot;.format(name&#x3D;&quot;jack&quot;, age&#x3D;18)</span><br><span class=\"line\">print(text)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十二-字符串的常用方法\"><a href=\"#十二-字符串的常用方法\" class=\"headerlink\" title=\"十二. 字符串的常用方法\"></a>十二. 字符串的常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">查找：x.find(y) 在字符串x中查找y,如果找到，返回第一次找到对应的索引值,</span><br><span class=\"line\">    如果没有找到，返回-1</span><br><span class=\"line\">    text &#x3D; &quot; good good study day day up&quot;</span><br><span class=\"line\">    num &#x3D; text.find(&quot;study1&quot;)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">x.index(y): 在字符串x中查找y, 如果找到，返回第一次找到的索引，如果找不到，</span><br><span class=\"line\">    报错 ValueError</span><br><span class=\"line\">    text &#x3D; &quot; good good study day day up&quot;</span><br><span class=\"line\">    num &#x3D; text.index(&quot;study1&quot;)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">替换：</span><br><span class=\"line\">x.replace(y,z), 把字符串x中的y替换为z, 替换完之后返回一个新的字符串，</span><br><span class=\"line\">    原来的字符串不变</span><br><span class=\"line\">    x &#x3D; &quot;I am good boy&quot;</span><br><span class=\"line\">    text2 &#x3D; x.replace(&quot;good&quot;,&quot;bad&quot;)</span><br><span class=\"line\">    print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">字符串分割：x.split([y]), 把字符串x按照y进行分割</span><br><span class=\"line\">字符串合并: y.join(x),  用字符串y将x中的每个数据进行连接</span><br><span class=\"line\">去除空格： x.strip(), 把字符串x两边的空格去掉</span><br><span class=\"line\">编码： x.encode(&quot;utf-8&quot;)   把字符串x编码为字节数据，参数为编码规则，默认为utf-8</span><br><span class=\"line\">解码： x.decode(&quot;utf-8&quot;)   把字节数据x解码为字符串，参数为解码规则，同编码一致</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; &quot;你好,谢谢,对不起,请,再见&quot;</span><br><span class=\"line\">text3 &#x3D; x.split(&quot;,&quot;)</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\">text4 &#x3D; &quot;%4%&quot;.join(text3)</span><br><span class=\"line\">print(text4)</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; &quot;   wolf code,   code color   &quot;</span><br><span class=\"line\">y &#x3D; x.strip()</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(y)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">x &#x3D; &quot;hello,你好&quot;</span><br><span class=\"line\">y &#x3D; x.encode(&quot;utf-8&quot;)   #b开头</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(y)</span><br><span class=\"line\">print(type(x))</span><br><span class=\"line\">print(type(y))</span><br><span class=\"line\">text5 &#x3D; y.decode()</span><br><span class=\"line\">print(text5)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-运算符操作\"><a href=\"#十三-运算符操作\" class=\"headerlink\" title=\"十三. 运算符操作\"></a>十三. 运算符操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">1，复合运算符 + - * &#x2F; +&#x3D;</span><br><span class=\"line\">x+&#x3D;y  &#x3D;&#x3D;&gt; x &#x3D; x+y</span><br><span class=\"line\"></span><br><span class=\"line\">2，关系运算符 &gt; &lt; &gt;&#x3D; &lt;&#x3D;  &#x3D;&#x3D; 返回结果是布尔值，True,False</span><br><span class=\"line\"></span><br><span class=\"line\">3, 逻辑运算符, 对于所有的对象数据都可以转换为布尔类型</span><br><span class=\"line\">    逻辑与： and</span><br><span class=\"line\">    逻辑或： or</span><br><span class=\"line\">    逻辑非:  not</span><br><span class=\"line\">x and y:  如果x为False，那么返回x, 否则返回y, 返回第一个为False的值， 或者是最后一个值</span><br><span class=\"line\">x or y: 如果x为True, 那么返回x, 否则就返回y, 返回第一个为True的值，或者是最后一个值</span><br><span class=\"line\">not x: x如果为True的话，返回False, 否则返回True</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(0 and 100)</span><br><span class=\"line\">print(1 and 100)</span><br><span class=\"line\">print(&quot;wolf&quot; and 80)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(&quot;wolf&quot; or 1)</span><br><span class=\"line\">print(&quot;&quot; or 10)</span><br><span class=\"line\">print(0 or 10)</span><br><span class=\"line\">print(1 or 0)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(not &quot;wolf&quot;)</span><br><span class=\"line\">print(not &quot;&quot;)</span><br><span class=\"line\">print(not 0)</span><br><span class=\"line\">print(not 10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-运算符-实体关系\"><a href=\"#十四-运算符-实体关系\" class=\"headerlink\" title=\"十四. 运算符_实体关系\"></a>十四. 运算符_实体关系</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">成员关系： 体现的是对象(序列对象，字符串，元组，列表，集合)之间的包含关系</span><br><span class=\"line\">x in y:   如果在y中包含x, 返回True, 否则返回False</span><br><span class=\"line\">x not in y: 如果在y中不包含x, 返回True, 否则返回False</span><br><span class=\"line\"></span><br><span class=\"line\">实体对象测试：判断两个变量是否存的是同一个对象（共享引用），id(x) &#x3D;&#x3D; id(y)</span><br><span class=\"line\">x is y: 表示x和y是同一个对象 即id(x)&#x3D;id(y), 内存地址是同一个</span><br><span class=\"line\">x is not y: 表示x和y不是同一个对象,即内存地址不一样</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text1 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">text2 &#x3D; &quot;code&quot;</span><br><span class=\"line\">print(text2 in text1)  #True</span><br><span class=\"line\">print(text2 not in text1) #False</span><br><span class=\"line\">print(&quot;00xx&quot; not in text1) #True</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; text1</span><br><span class=\"line\"></span><br><span class=\"line\">print(id(text1))</span><br><span class=\"line\">print(id(text3))</span><br><span class=\"line\">print(text1 is text3)  #这儿比较的是内存地址</span><br><span class=\"line\">print(text1 &#x3D;&#x3D; text3)  #这儿比较的是值</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-变量和常量\"><a href=\"#一-变量和常量\" class=\"headerlink\" title=\"一. 变量和常量\"></a>一. 变量和常量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username &#x3D; &quot;jack&quot;</span><br><span class=\"line\">print(username)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(username))</span><br><span class=\"line\"></span><br><span class=\"line\">username &#x3D; 8</span><br><span class=\"line\">print(username)</span><br><span class=\"line\"></span><br><span class=\"line\">print(username+5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(username))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-变量-对象和引用\"><a href=\"#二-变量-对象和引用\" class=\"headerlink\" title=\"二. 变量_对象和引用\"></a>二. 变量_对象和引用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">操作流程</span><br><span class=\"line\">1，创建一个数字对象100</span><br><span class=\"line\">2， 创建一个变量a</span><br><span class=\"line\">3, 将100赋值给变量a</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 100</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"> # id(a),   变量a中所存放的内存地址</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; 108</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(id(a))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-垃圾回收-共享引用\"><a href=\"#三-垃圾回收-共享引用\" class=\"headerlink\" title=\"三. 垃圾回收_共享引用\"></a>三. 垃圾回收_共享引用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">在程序运行的过程中，把创建的对象而且已经是没有用的对象自动回收，这个过程，称之为垃圾回收</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; &quot;python&quot;</span><br><span class=\"line\">b &#x3D; a</span><br><span class=\"line\"></span><br><span class=\"line\"> #a, b两个变量共享引用数据 python</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\">print(id(b))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(id(a))</span><br><span class=\"line\">print(id(b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-数字基本操作\"><a href=\"#四-数字基本操作\" class=\"headerlink\" title=\"四. 数字基本操作\"></a>四. 数字基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">数值类型：整数(int) ,和 小数(float), 复数</span><br><span class=\"line\">1，数值是不可变类型的对象</span><br><span class=\"line\">2，数值的表达方式有： 十进制，十六进制，八进制， 二进制</span><br><span class=\"line\">3，数据之间的进制转换 </span><br><span class=\"line\">    hex()，转换成十六进制</span><br><span class=\"line\">    oct(), 转换成八进制</span><br><span class=\"line\">    bin(), 转换成二进制</span><br><span class=\"line\">    int(),  转换成十进制</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#十进制</span><br><span class=\"line\">num1 &#x3D; 100</span><br><span class=\"line\">print(num1)</span><br><span class=\"line\"></span><br><span class=\"line\">#十六进制</span><br><span class=\"line\">num2 &#x3D; 0xff</span><br><span class=\"line\">print(num2)</span><br><span class=\"line\"></span><br><span class=\"line\">#八进制</span><br><span class=\"line\">num3 &#x3D; 0o75</span><br><span class=\"line\">print(num3)</span><br><span class=\"line\"></span><br><span class=\"line\">#二进制</span><br><span class=\"line\">num4 &#x3D; 0b101</span><br><span class=\"line\">print(num4)</span><br><span class=\"line\"></span><br><span class=\"line\">#进制之间的转换</span><br><span class=\"line\">num5 &#x3D; 6890</span><br><span class=\"line\">print(num5)</span><br><span class=\"line\">#bin(num)  使用二进制表示</span><br><span class=\"line\">print(bin(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#hex(num)  使用十六进制表示</span><br><span class=\"line\">print(hex(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#oct(num)  使用八进制表示</span><br><span class=\"line\">print(oct(num5))</span><br><span class=\"line\"></span><br><span class=\"line\">#把八进制转换成十进制</span><br><span class=\"line\">print(int(0o77))</span><br><span class=\"line\"></span><br><span class=\"line\">#把字符串转换成数字</span><br><span class=\"line\">print(int(&quot;1099&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-数字的其他操作\"><a href=\"#五-数字的其他操作\" class=\"headerlink\" title=\"五. 数字的其他操作\"></a>五. 数字的其他操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">表达式操作</span><br><span class=\"line\">x&#x2F;&#x2F;y  整除， 取x除以y的整除部分</span><br><span class=\"line\">x%y   取余数， x除以y的余数部分</span><br><span class=\"line\">x**Y   x的y次方</span><br><span class=\"line\"></span><br><span class=\"line\">pow(x,y)  &#x3D;&#x3D;&gt;   x**y 的次方</span><br><span class=\"line\">abs(x) &#x3D;&#x3D;&gt; |x| 返回的是x的绝对值</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">import  random</span><br><span class=\"line\"></span><br><span class=\"line\">print(5&#x2F;2)</span><br><span class=\"line\">print(-5&#x2F;2)</span><br><span class=\"line\">print(5&#x2F;&#x2F;2)</span><br><span class=\"line\">print(-5&#x2F;&#x2F;2)</span><br><span class=\"line\">print(5%2)</span><br><span class=\"line\">print(5*2)</span><br><span class=\"line\">print(5**2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(pow(5,3))</span><br><span class=\"line\">print(abs(-3))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;int转换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">print(int(&quot;100&quot;))   #100，   转换成十进制数字</span><br><span class=\"line\">print(int(&quot;100&quot;,2))  # 100是二进制数字，转换成十进制数字&#x3D;4</span><br><span class=\"line\">print(int(&quot;100&quot;,16))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;随机数&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#生成一个1-10之间的随机数字</span><br><span class=\"line\">print(random.randint(1,10))</span><br><span class=\"line\"></span><br><span class=\"line\">#dir 显示模块有哪些方法可以使用</span><br><span class=\"line\">print(dir(random))</span><br><span class=\"line\"></span><br><span class=\"line\">#help 查看方法的帮助文档</span><br><span class=\"line\">print(help(random.randint))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-布尔类型\"><a href=\"#六-布尔类型\" class=\"headerlink\" title=\"六. 布尔类型\"></a>六. 布尔类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">布尔类型： 只有两个值，True,和 False,</span><br><span class=\"line\">1, 可以和整数直接参数运算</span><br><span class=\"line\">2, 如果把True, False 转换为数字， True --&gt; 1, False --&gt; 0</span><br><span class=\"line\">3, 数字可以转换为布尔类型， 0--&gt;False，非0 --&gt;Ture   使用bool(num)函数</span><br><span class=\"line\">4, 在python中，所有的数据都可以表示为True,False, </span><br><span class=\"line\">    在字符串中，空字符串表示为False, 非空字符串表示True,   bool(str) 函数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">flag &#x3D; True</span><br><span class=\"line\"></span><br><span class=\"line\">print(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进行加法运算</span><br><span class=\"line\">print(flag+4)</span><br><span class=\"line\"></span><br><span class=\"line\"># bool(num)  把一个数字转换为布尔类型</span><br><span class=\"line\">print(bool(0.0))</span><br><span class=\"line\">print(bool(100))</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&quot;&quot;))</span><br><span class=\"line\">print(bool(&quot;\\n&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-字符串基本操作\"><a href=\"#七-字符串基本操作\" class=\"headerlink\" title=\"七. 字符串基本操作\"></a>七. 字符串基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字符串：使用引号括起来的文字，通常情况表达的是文字的信息，有序的字符集合</span><br><span class=\"line\">1, 使用单引号</span><br><span class=\"line\">2，使用双引号</span><br><span class=\"line\">3, 使用三重引号，可以对字符串换行</span><br><span class=\"line\"></span><br><span class=\"line\">字符串的特点：</span><br><span class=\"line\">1，有序的字符集合</span><br><span class=\"line\">2，对于字符串中的每一个字符串都有一个对应的索引，从左往右，从0开始， text[0]</span><br><span class=\"line\">    索引特点： 从左往右，从0开始， 从右往左，从-1开始</span><br><span class=\"line\">3，对于字符串是不可变对象，跟数字一样</span><br><span class=\"line\">4，对于字符串的长度，可以使用len()函数</span><br><span class=\"line\">5，str()函数，可以把其他对应转换为字符串</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;python&quot;</span><br><span class=\"line\">print(text)</span><br><span class=\"line\">#type(text) 查看对象的类型</span><br><span class=\"line\">print(type(text))</span><br><span class=\"line\"></span><br><span class=\"line\">text2 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; &quot;&quot;&quot;呵呵呵</span><br><span class=\"line\"> 你好啊</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\">print(type(text3))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">#访问text的第一个字符</span><br><span class=\"line\">print(text[0])</span><br><span class=\"line\">#访问text的最后一个字符</span><br><span class=\"line\">print(text[-1])</span><br><span class=\"line\"></span><br><span class=\"line\">#错误，不能修改字符串中的字符</span><br><span class=\"line\">#text[-1]&#x3D;&quot;B&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#len(text) text的长度</span><br><span class=\"line\">print(len(text))</span><br><span class=\"line\"></span><br><span class=\"line\">#去除最后一个元素</span><br><span class=\"line\">print(text[len(text) -1])</span><br><span class=\"line\"></span><br><span class=\"line\">#str(123), 将数字123转换成字符串</span><br><span class=\"line\">print(str(123456))</span><br><span class=\"line\">print(type(str(123456)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;加法和乘法&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class=\"line\">#字符串连接符号</span><br><span class=\"line\">print(&quot;python&quot; + &quot;java&quot;)</span><br><span class=\"line\">print(&quot;123&quot; + str(456))</span><br><span class=\"line\">print(int(123) + 456)</span><br><span class=\"line\"></span><br><span class=\"line\">#乘法操作, 显示50个 &#x3D; 字符</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-转义字符-原始字符\"><a href=\"#八-转义字符-原始字符\" class=\"headerlink\" title=\"八. 转义字符_原始字符\"></a>八. 转义字符_原始字符</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">转义字符：</span><br><span class=\"line\">转义序列可以让我们在字符串中表示不容易通过键盘输入或者在输入过程中字符本身有一些特殊意义的，</span><br><span class=\"line\">我们需要使用转义字符来表示</span><br><span class=\"line\">\\n 表示换行</span><br><span class=\"line\">转义字符： \\+固定的字符</span><br><span class=\"line\">比如：</span><br><span class=\"line\">\\&#39;  单引号，普通的字符串，不在是字符串的边界标记</span><br><span class=\"line\">\\&quot;  双引号，普通的字符串，不在是字符串的边界标记</span><br><span class=\"line\">\\n  换行符, 输入换行符</span><br><span class=\"line\">\\t  制表符</span><br><span class=\"line\">\\r  回车， 返回到当前行最开始的位置</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text &#x3D; &quot;abc\\nmp&quot;</span><br><span class=\"line\">print(text)</span><br><span class=\"line\">print(len(text))</span><br><span class=\"line\"></span><br><span class=\"line\">text2 &#x3D; &#39;abc\\&#39;\\&quot;mp&#39;</span><br><span class=\"line\">print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; &quot;abc\\tdef&quot;</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\"># \\r返回当前行最开始的地方</span><br><span class=\"line\">print(&quot;abcdefghijk\\r呵呵呵&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;abc\\\\tdef&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#filename &#x3D; &quot;d:\\\\name\\\\text2.txt&quot;</span><br><span class=\"line\">#在字符串的前面加上r, 代表原始字符串</span><br><span class=\"line\">filename &#x3D; r&quot;d:\\name\\text2.txt&quot;</span><br><span class=\"line\">print(filename)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-字符串转换\"><a href=\"#九-字符串转换\" class=\"headerlink\" title=\"九. 字符串转换\"></a>九. 字符串转换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">str()   把一个对象转换为字符串</span><br><span class=\"line\">ord()   返回字符的unicode编码</span><br><span class=\"line\">chr()   把unicode编码转换为字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#字符串拼接</span><br><span class=\"line\">print(&quot;123&quot;+str(456))</span><br><span class=\"line\"></span><br><span class=\"line\">#中 对应的unicode编码</span><br><span class=\"line\">print(ord(&quot;A&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 将unicode编码转换成字符</span><br><span class=\"line\">print(chr(65))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-字符串分片-py\"><a href=\"#十-字符串分片-py\" class=\"headerlink\" title=\"十. 字符串分片.py\"></a>十. 字符串分片.py</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字符串是一个有序的字符的集合</span><br><span class=\"line\">通过字符串索引text[0] 是可以获取到一个字符</span><br><span class=\"line\">如果需要从字符串中获取多个字符的话，需要用到分片</span><br><span class=\"line\"></span><br><span class=\"line\">str[start:end:step]</span><br><span class=\"line\">如果start省略，默认0</span><br><span class=\"line\">如果end省略， 默认len(str)</span><br><span class=\"line\">如果step省略， 默认1</span><br><span class=\"line\">start: 正整数，负整数</span><br><span class=\"line\">end:正整数，负整数</span><br><span class=\"line\">step: 正整数，正偏移， 负整数，负偏移</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;python&quot;</span><br><span class=\"line\">text2 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; text2[4:8]</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\">#如果不写结束索引，默认为结尾，即字符串的长度len(text2)</span><br><span class=\"line\">print(text2[2:])</span><br><span class=\"line\"></span><br><span class=\"line\">#如果不写开始索引，默认为0</span><br><span class=\"line\">print(text2[:4])</span><br><span class=\"line\"></span><br><span class=\"line\">#拷贝出一个新的字符串</span><br><span class=\"line\">text4 &#x3D; text2[:]</span><br><span class=\"line\">print(text4)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#步长： 默认为1</span><br><span class=\"line\">#text2[start:end:step]</span><br><span class=\"line\">#需求： 索引值0 2 4 6 8 这样的字符</span><br><span class=\"line\">text5 &#x3D; text2[::2]</span><br><span class=\"line\">print(text5)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求： 获取wolfcode的最后三个字符</span><br><span class=\"line\">print(text2[-3:])</span><br><span class=\"line\"></span><br><span class=\"line\">#需求，将字符串wolfcode倒叙过来，组成edocflow这个字符串</span><br><span class=\"line\">print(text2[-1::-1])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-字符串格式化\"><a href=\"#十一-字符串格式化\" class=\"headerlink\" title=\"十一. 字符串格式化\"></a>十一. 字符串格式化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">方式一： %占位符来表示字符串中的变量</span><br><span class=\"line\">%s 字符串  %d整数 %f小数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#方式一</span><br><span class=\"line\">name &#x3D; &quot;lucy&quot;</span><br><span class=\"line\">age &#x3D; 19</span><br><span class=\"line\">print(&quot;my name is %s&quot;%name)</span><br><span class=\"line\">print(&quot;my name is %s, I am %d&quot;%(name,age))</span><br><span class=\"line\"></span><br><span class=\"line\">job &#x3D; &quot;IT&quot;</span><br><span class=\"line\">print(&quot;my job is %s, your job is %s&quot;%(job,job))</span><br><span class=\"line\"></span><br><span class=\"line\"># %.2f 保留两位小数</span><br><span class=\"line\">print(&quot;this number is %.2f&quot;%3.1415926)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#使用位置占位符，如果不写，默认是从0开始</span><br><span class=\"line\">#text &#x3D; &quot;my name is &#123;&#125;, I am &#123;&#125;&quot;.format(name,age)</span><br><span class=\"line\">#text &#x3D; &quot;my name is &#123;0&#125;, I am &#123;1&#125;&quot;.format(name,age)</span><br><span class=\"line\"></span><br><span class=\"line\">#使用名称占位符</span><br><span class=\"line\">text &#x3D; &quot;my name is &#123;name&#125;, I am &#123;age&#125;&quot;.format(name&#x3D;&quot;jack&quot;, age&#x3D;18)</span><br><span class=\"line\">print(text)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十二-字符串的常用方法\"><a href=\"#十二-字符串的常用方法\" class=\"headerlink\" title=\"十二. 字符串的常用方法\"></a>十二. 字符串的常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">查找：x.find(y) 在字符串x中查找y,如果找到，返回第一次找到对应的索引值,</span><br><span class=\"line\">    如果没有找到，返回-1</span><br><span class=\"line\">    text &#x3D; &quot; good good study day day up&quot;</span><br><span class=\"line\">    num &#x3D; text.find(&quot;study1&quot;)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">x.index(y): 在字符串x中查找y, 如果找到，返回第一次找到的索引，如果找不到，</span><br><span class=\"line\">    报错 ValueError</span><br><span class=\"line\">    text &#x3D; &quot; good good study day day up&quot;</span><br><span class=\"line\">    num &#x3D; text.index(&quot;study1&quot;)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">替换：</span><br><span class=\"line\">x.replace(y,z), 把字符串x中的y替换为z, 替换完之后返回一个新的字符串，</span><br><span class=\"line\">    原来的字符串不变</span><br><span class=\"line\">    x &#x3D; &quot;I am good boy&quot;</span><br><span class=\"line\">    text2 &#x3D; x.replace(&quot;good&quot;,&quot;bad&quot;)</span><br><span class=\"line\">    print(text2)</span><br><span class=\"line\"></span><br><span class=\"line\">字符串分割：x.split([y]), 把字符串x按照y进行分割</span><br><span class=\"line\">字符串合并: y.join(x),  用字符串y将x中的每个数据进行连接</span><br><span class=\"line\">去除空格： x.strip(), 把字符串x两边的空格去掉</span><br><span class=\"line\">编码： x.encode(&quot;utf-8&quot;)   把字符串x编码为字节数据，参数为编码规则，默认为utf-8</span><br><span class=\"line\">解码： x.decode(&quot;utf-8&quot;)   把字节数据x解码为字符串，参数为解码规则，同编码一致</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; &quot;你好,谢谢,对不起,请,再见&quot;</span><br><span class=\"line\">text3 &#x3D; x.split(&quot;,&quot;)</span><br><span class=\"line\">print(text3)</span><br><span class=\"line\"></span><br><span class=\"line\">text4 &#x3D; &quot;%4%&quot;.join(text3)</span><br><span class=\"line\">print(text4)</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; &quot;   wolf code,   code color   &quot;</span><br><span class=\"line\">y &#x3D; x.strip()</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(y)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">x &#x3D; &quot;hello,你好&quot;</span><br><span class=\"line\">y &#x3D; x.encode(&quot;utf-8&quot;)   #b开头</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(y)</span><br><span class=\"line\">print(type(x))</span><br><span class=\"line\">print(type(y))</span><br><span class=\"line\">text5 &#x3D; y.decode()</span><br><span class=\"line\">print(text5)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-运算符操作\"><a href=\"#十三-运算符操作\" class=\"headerlink\" title=\"十三. 运算符操作\"></a>十三. 运算符操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">1，复合运算符 + - * &#x2F; +&#x3D;</span><br><span class=\"line\">x+&#x3D;y  &#x3D;&#x3D;&gt; x &#x3D; x+y</span><br><span class=\"line\"></span><br><span class=\"line\">2，关系运算符 &gt; &lt; &gt;&#x3D; &lt;&#x3D;  &#x3D;&#x3D; 返回结果是布尔值，True,False</span><br><span class=\"line\"></span><br><span class=\"line\">3, 逻辑运算符, 对于所有的对象数据都可以转换为布尔类型</span><br><span class=\"line\">    逻辑与： and</span><br><span class=\"line\">    逻辑或： or</span><br><span class=\"line\">    逻辑非:  not</span><br><span class=\"line\">x and y:  如果x为False，那么返回x, 否则返回y, 返回第一个为False的值， 或者是最后一个值</span><br><span class=\"line\">x or y: 如果x为True, 那么返回x, 否则就返回y, 返回第一个为True的值，或者是最后一个值</span><br><span class=\"line\">not x: x如果为True的话，返回False, 否则返回True</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(0 and 100)</span><br><span class=\"line\">print(1 and 100)</span><br><span class=\"line\">print(&quot;wolf&quot; and 80)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(&quot;wolf&quot; or 1)</span><br><span class=\"line\">print(&quot;&quot; or 10)</span><br><span class=\"line\">print(0 or 10)</span><br><span class=\"line\">print(1 or 0)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(not &quot;wolf&quot;)</span><br><span class=\"line\">print(not &quot;&quot;)</span><br><span class=\"line\">print(not 0)</span><br><span class=\"line\">print(not 10)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-运算符-实体关系\"><a href=\"#十四-运算符-实体关系\" class=\"headerlink\" title=\"十四. 运算符_实体关系\"></a>十四. 运算符_实体关系</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">成员关系： 体现的是对象(序列对象，字符串，元组，列表，集合)之间的包含关系</span><br><span class=\"line\">x in y:   如果在y中包含x, 返回True, 否则返回False</span><br><span class=\"line\">x not in y: 如果在y中不包含x, 返回True, 否则返回False</span><br><span class=\"line\"></span><br><span class=\"line\">实体对象测试：判断两个变量是否存的是同一个对象（共享引用），id(x) &#x3D;&#x3D; id(y)</span><br><span class=\"line\">x is y: 表示x和y是同一个对象 即id(x)&#x3D;id(y), 内存地址是同一个</span><br><span class=\"line\">x is not y: 表示x和y不是同一个对象,即内存地址不一样</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">text1 &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\">text2 &#x3D; &quot;code&quot;</span><br><span class=\"line\">print(text2 in text1)  #True</span><br><span class=\"line\">print(text2 not in text1) #False</span><br><span class=\"line\">print(&quot;00xx&quot; not in text1) #True</span><br><span class=\"line\"></span><br><span class=\"line\">text3 &#x3D; text1</span><br><span class=\"line\"></span><br><span class=\"line\">print(id(text1))</span><br><span class=\"line\">print(id(text3))</span><br><span class=\"line\">print(text1 is text3)  #这儿比较的是内存地址</span><br><span class=\"line\">print(text1 &#x3D;&#x3D; text3)  #这儿比较的是值</span><br></pre></td></tr></table></figure>"},{"title":"02-python流程控制","toc":true,"date":"2020-09-22T09:32:26.000Z","_content":"\n\n# 一.条件控制_if\n\n```\n\"\"\"\n流程控制：\npython解释器：从上往下依次顺序解释执行\n    顺序结构\n    条件判断语句\n    循环语句\n\"\"\"\n\nprint(\"坐车去上班\")\nprint(\"认真工作\")\nweather = 1 #0:天气不好 1：天气好\nif weather == 0:\n    #缩进语句\n    print(\"去打篮球\")   #只有在天气好的时候才打篮球\nprint(\"回家\")\n\n```\n\n# 二.条件控制_if_else\n\n```\n\"\"\"\n语法格式：\nif 条件1：\n    语句1\nelse:\n    语句2\n\n\"\"\"\n#需求： 订单金额 >= 128 EMS包邮 否则 韵达包邮\namount = int(input(\"请输入您的订单金额：\"))\nif amount >= 128:\n    print(\"金额超过128元\")\n    print(\"EMS包邮\")\nelse:\n    print(\"韵达包邮\")\n```\n\n# 三.流程控制_if_elif_else\n\n```\n\"\"\"\n如果需要有超过2个结果需要处理，我们需要使用多个条件表达式进行判断\n格式：\nif 表达式1：\n    语句1\nelif 表达式2：\n    语句2\nelse:\n    语句3\n\n需要：订单金额 >= 128 EMS包邮\n      订单金额 》 68  韵达保留\n      否则：邮费自理\n\"\"\"\n\namount = int(input(\"请输入您的订单金额：\"))\nprint(\"---------start-------------\")\nif amount >= 128:\n    print(\"EMS包邮\")\nelif amount > 68:\n    print(\"韵达包邮\")\nelse:\n    print(\"运费自理\")\nprint(\"---------end-------------\")\n\n```\n\n# 四.条件判断_嵌套\n\n```\n\"\"\"\n需求：\n    你女朋友需要买一个lv, 需要向你借钱N(未知)元\n    如果你的卡余额超过8000，\n        输入密码转账操作\n        如果输入的密码正确：123456\n            转账成功\n        否则：\n            转账失败，密码错误\n    否则：\n        余额不足\n\n\"\"\"\n\namount = int(input(\"宝贝,你需要多少钱啊：\"))\nprint(\"-----start------\")\nif amount <= 8000:\n    password = input(\"请输入密码:\")\n    if password == \"123456\":\n        print(\"转账成功\")\n        print(\"宝贝，钱收到了没有\")\n    else:\n        print(\"密码错误\")\nelse:\n    print(\"钱不够\")\nprint(\"------end------\")\n\n```\n\n# 五.流程控制_练习\n\n```\n\"\"\"\n需求：\n    输入用户名，密码\n    后台的用户名admin, 密码123456\n    如果用户名密码都正确，登录成功\n    如果只有用户名错误，提示用户名错误\n    如果只有密码错误，提示密码错误\n    否则： 用户名和密码都错误\n\"\"\"\n\nusername = input(\"请输入用户名：\")\npassword = input(\"请输入密码：\")\n\nif username == \"admin\" and password == \"123456\":\n    print(\"登录成功\")\nelif username == \"admin\":\n    print(\"密码错误\")\nelif password == \"123456\":\n    print(\"用户名错误\")\nelse:\n    print(\"用户名和密码都错误\")\n\n```\n\n# 六.while循环\n\n```\n\"\"\"\n循环结构： 一些代码需要不断重复的去执行\n\nwhile 条件：\n    语句1\n    语句2\n\n\"\"\"\n\n#需求：说100遍我爱你\n\nstart = 0\nprint(\"----start------\")\nwhile start < 100:\n    print(\"我爱你%d\"%start)\n    start += 1\nprint(\"-----end-----\")\n\n```\n\n# 七.while循环2\n\n```\n\"\"\"\n计算1-100之间的和\n\"\"\"\n\nstart = 1\nsum = 0\n\nwhile start <= 100:\n    sum += start\n    start += 1\n\nprint(sum)\n\n```\n\n# 八.while循环_矩形\n\n```\n\"\"\"\n要求：打印 三行，每行5个*号\n*****\n*****\n*****\n\"\"\"\n\nstart = 1\nwhile start <= 3:\n    count = 1\n    #每行打印5个*号\n    while count <= 5:\n        print(\"*\",end=\"\")  #end=\"\" 打印结尾默认end=\"\\n\"\n        count += 1\n    #换行\n    print()\n    start += 1\n\n```\n\n# 九.while循环_三角形\n\n```\n\"\"\"\n打印：三角形*号\n*\n**\n***\n\"\"\"\n\nprint(\"-----start------\")\nline = 1\nwhile line <= 3:\n    count = 1\n    while count <= line:\n        print(\"*\",end=\"\")\n        count += 1\n    print()\n    line += 1\nprint(\"-----end------\")\n\n```\n\n# 十.while循环_九九乘法表\n\n```\n\"\"\"\n\n\"\"\"\n\nx = 1\ny = 1\n\nwhile y <= 9:\n    x = 1\n    while x <= y:\n        print(\"%d*%d=%d\"%(x,y,(x*y)),end=\"\\t\")\n        x += 1\n    print()\n    y += 1\n\n```\n\n# 十一.for循环\n\n```\n\"\"\"\n打印字符串 wolfcode 中的每一个字符\n\"\"\"\n\n#while循环\ntext = \"wolfcode\"\n\nprint(\"while循环:\")\nlength = len(text)\nstart = 0\nwhile start < length:\n    print(text[start])\n    start += 1\n\nprint(\"for循环:\")\nfor item in text:\n    print(item)\n\n```\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/02-python流程控制.md","raw":"---\ntitle: 02-python流程控制\ntoc: true\ndate: 2020-09-22 17:32:26\ntags:\ncategories:\n- python\n- python基础\n---\n\n\n# 一.条件控制_if\n\n```\n\"\"\"\n流程控制：\npython解释器：从上往下依次顺序解释执行\n    顺序结构\n    条件判断语句\n    循环语句\n\"\"\"\n\nprint(\"坐车去上班\")\nprint(\"认真工作\")\nweather = 1 #0:天气不好 1：天气好\nif weather == 0:\n    #缩进语句\n    print(\"去打篮球\")   #只有在天气好的时候才打篮球\nprint(\"回家\")\n\n```\n\n# 二.条件控制_if_else\n\n```\n\"\"\"\n语法格式：\nif 条件1：\n    语句1\nelse:\n    语句2\n\n\"\"\"\n#需求： 订单金额 >= 128 EMS包邮 否则 韵达包邮\namount = int(input(\"请输入您的订单金额：\"))\nif amount >= 128:\n    print(\"金额超过128元\")\n    print(\"EMS包邮\")\nelse:\n    print(\"韵达包邮\")\n```\n\n# 三.流程控制_if_elif_else\n\n```\n\"\"\"\n如果需要有超过2个结果需要处理，我们需要使用多个条件表达式进行判断\n格式：\nif 表达式1：\n    语句1\nelif 表达式2：\n    语句2\nelse:\n    语句3\n\n需要：订单金额 >= 128 EMS包邮\n      订单金额 》 68  韵达保留\n      否则：邮费自理\n\"\"\"\n\namount = int(input(\"请输入您的订单金额：\"))\nprint(\"---------start-------------\")\nif amount >= 128:\n    print(\"EMS包邮\")\nelif amount > 68:\n    print(\"韵达包邮\")\nelse:\n    print(\"运费自理\")\nprint(\"---------end-------------\")\n\n```\n\n# 四.条件判断_嵌套\n\n```\n\"\"\"\n需求：\n    你女朋友需要买一个lv, 需要向你借钱N(未知)元\n    如果你的卡余额超过8000，\n        输入密码转账操作\n        如果输入的密码正确：123456\n            转账成功\n        否则：\n            转账失败，密码错误\n    否则：\n        余额不足\n\n\"\"\"\n\namount = int(input(\"宝贝,你需要多少钱啊：\"))\nprint(\"-----start------\")\nif amount <= 8000:\n    password = input(\"请输入密码:\")\n    if password == \"123456\":\n        print(\"转账成功\")\n        print(\"宝贝，钱收到了没有\")\n    else:\n        print(\"密码错误\")\nelse:\n    print(\"钱不够\")\nprint(\"------end------\")\n\n```\n\n# 五.流程控制_练习\n\n```\n\"\"\"\n需求：\n    输入用户名，密码\n    后台的用户名admin, 密码123456\n    如果用户名密码都正确，登录成功\n    如果只有用户名错误，提示用户名错误\n    如果只有密码错误，提示密码错误\n    否则： 用户名和密码都错误\n\"\"\"\n\nusername = input(\"请输入用户名：\")\npassword = input(\"请输入密码：\")\n\nif username == \"admin\" and password == \"123456\":\n    print(\"登录成功\")\nelif username == \"admin\":\n    print(\"密码错误\")\nelif password == \"123456\":\n    print(\"用户名错误\")\nelse:\n    print(\"用户名和密码都错误\")\n\n```\n\n# 六.while循环\n\n```\n\"\"\"\n循环结构： 一些代码需要不断重复的去执行\n\nwhile 条件：\n    语句1\n    语句2\n\n\"\"\"\n\n#需求：说100遍我爱你\n\nstart = 0\nprint(\"----start------\")\nwhile start < 100:\n    print(\"我爱你%d\"%start)\n    start += 1\nprint(\"-----end-----\")\n\n```\n\n# 七.while循环2\n\n```\n\"\"\"\n计算1-100之间的和\n\"\"\"\n\nstart = 1\nsum = 0\n\nwhile start <= 100:\n    sum += start\n    start += 1\n\nprint(sum)\n\n```\n\n# 八.while循环_矩形\n\n```\n\"\"\"\n要求：打印 三行，每行5个*号\n*****\n*****\n*****\n\"\"\"\n\nstart = 1\nwhile start <= 3:\n    count = 1\n    #每行打印5个*号\n    while count <= 5:\n        print(\"*\",end=\"\")  #end=\"\" 打印结尾默认end=\"\\n\"\n        count += 1\n    #换行\n    print()\n    start += 1\n\n```\n\n# 九.while循环_三角形\n\n```\n\"\"\"\n打印：三角形*号\n*\n**\n***\n\"\"\"\n\nprint(\"-----start------\")\nline = 1\nwhile line <= 3:\n    count = 1\n    while count <= line:\n        print(\"*\",end=\"\")\n        count += 1\n    print()\n    line += 1\nprint(\"-----end------\")\n\n```\n\n# 十.while循环_九九乘法表\n\n```\n\"\"\"\n\n\"\"\"\n\nx = 1\ny = 1\n\nwhile y <= 9:\n    x = 1\n    while x <= y:\n        print(\"%d*%d=%d\"%(x,y,(x*y)),end=\"\\t\")\n        x += 1\n    print()\n    y += 1\n\n```\n\n# 十一.for循环\n\n```\n\"\"\"\n打印字符串 wolfcode 中的每一个字符\n\"\"\"\n\n#while循环\ntext = \"wolfcode\"\n\nprint(\"while循环:\")\nlength = len(text)\nstart = 0\nwhile start < length:\n    print(text[start])\n    start += 1\n\nprint(\"for循环:\")\nfor item in text:\n    print(item)\n\n```\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/02-python流程控制","published":1,"updated":"2020-09-23T02:20:54.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenly008qu3s66mqo3sx9","content":"<h1 id=\"一-条件控制-if\"><a href=\"#一-条件控制-if\" class=\"headerlink\" title=\"一.条件控制_if\"></a>一.条件控制_if</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">流程控制：</span><br><span class=\"line\">python解释器：从上往下依次顺序解释执行</span><br><span class=\"line\">    顺序结构</span><br><span class=\"line\">    条件判断语句</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;坐车去上班&quot;)</span><br><span class=\"line\">print(&quot;认真工作&quot;)</span><br><span class=\"line\">weather &#x3D; 1 #0:天气不好 1：天气好</span><br><span class=\"line\">if weather &#x3D;&#x3D; 0:</span><br><span class=\"line\">    #缩进语句</span><br><span class=\"line\">    print(&quot;去打篮球&quot;)   #只有在天气好的时候才打篮球</span><br><span class=\"line\">print(&quot;回家&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-条件控制-if-else\"><a href=\"#二-条件控制-if-else\" class=\"headerlink\" title=\"二.条件控制_if_else\"></a>二.条件控制_if_else</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">语法格式：</span><br><span class=\"line\">if 条件1：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">else:</span><br><span class=\"line\">    语句2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#需求： 订单金额 &gt;&#x3D; 128 EMS包邮 否则 韵达包邮</span><br><span class=\"line\">amount &#x3D; int(input(&quot;请输入您的订单金额：&quot;))</span><br><span class=\"line\">if amount &gt;&#x3D; 128:</span><br><span class=\"line\">    print(&quot;金额超过128元&quot;)</span><br><span class=\"line\">    print(&quot;EMS包邮&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;韵达包邮&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-流程控制-if-elif-else\"><a href=\"#三-流程控制-if-elif-else\" class=\"headerlink\" title=\"三.流程控制_if_elif_else\"></a>三.流程控制_if_elif_else</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">如果需要有超过2个结果需要处理，我们需要使用多个条件表达式进行判断</span><br><span class=\"line\">格式：</span><br><span class=\"line\">if 表达式1：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">elif 表达式2：</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">else:</span><br><span class=\"line\">    语句3</span><br><span class=\"line\"></span><br><span class=\"line\">需要：订单金额 &gt;&#x3D; 128 EMS包邮</span><br><span class=\"line\">      订单金额 》 68  韵达保留</span><br><span class=\"line\">      否则：邮费自理</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">amount &#x3D; int(input(&quot;请输入您的订单金额：&quot;))</span><br><span class=\"line\">print(&quot;---------start-------------&quot;)</span><br><span class=\"line\">if amount &gt;&#x3D; 128:</span><br><span class=\"line\">    print(&quot;EMS包邮&quot;)</span><br><span class=\"line\">elif amount &gt; 68:</span><br><span class=\"line\">    print(&quot;韵达包邮&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;运费自理&quot;)</span><br><span class=\"line\">print(&quot;---------end-------------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-条件判断-嵌套\"><a href=\"#四-条件判断-嵌套\" class=\"headerlink\" title=\"四.条件判断_嵌套\"></a>四.条件判断_嵌套</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：</span><br><span class=\"line\">    你女朋友需要买一个lv, 需要向你借钱N(未知)元</span><br><span class=\"line\">    如果你的卡余额超过8000，</span><br><span class=\"line\">        输入密码转账操作</span><br><span class=\"line\">        如果输入的密码正确：123456</span><br><span class=\"line\">            转账成功</span><br><span class=\"line\">        否则：</span><br><span class=\"line\">            转账失败，密码错误</span><br><span class=\"line\">    否则：</span><br><span class=\"line\">        余额不足</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">amount &#x3D; int(input(&quot;宝贝,你需要多少钱啊：&quot;))</span><br><span class=\"line\">print(&quot;-----start------&quot;)</span><br><span class=\"line\">if amount &lt;&#x3D; 8000:</span><br><span class=\"line\">    password &#x3D; input(&quot;请输入密码:&quot;)</span><br><span class=\"line\">    if password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">        print(&quot;转账成功&quot;)</span><br><span class=\"line\">        print(&quot;宝贝，钱收到了没有&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;密码错误&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;钱不够&quot;)</span><br><span class=\"line\">print(&quot;------end------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-流程控制-练习\"><a href=\"#五-流程控制-练习\" class=\"headerlink\" title=\"五.流程控制_练习\"></a>五.流程控制_练习</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：</span><br><span class=\"line\">    输入用户名，密码</span><br><span class=\"line\">    后台的用户名admin, 密码123456</span><br><span class=\"line\">    如果用户名密码都正确，登录成功</span><br><span class=\"line\">    如果只有用户名错误，提示用户名错误</span><br><span class=\"line\">    如果只有密码错误，提示密码错误</span><br><span class=\"line\">    否则： 用户名和密码都错误</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">username &#x3D; input(&quot;请输入用户名：&quot;)</span><br><span class=\"line\">password &#x3D; input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if username &#x3D;&#x3D; &quot;admin&quot; and password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">    print(&quot;登录成功&quot;)</span><br><span class=\"line\">elif username &#x3D;&#x3D; &quot;admin&quot;:</span><br><span class=\"line\">    print(&quot;密码错误&quot;)</span><br><span class=\"line\">elif password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">    print(&quot;用户名错误&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;用户名和密码都错误&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-while循环\"><a href=\"#六-while循环\" class=\"headerlink\" title=\"六.while循环\"></a>六.while循环</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">循环结构： 一些代码需要不断重复的去执行</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：说100遍我爱你</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 0</span><br><span class=\"line\">print(&quot;----start------&quot;)</span><br><span class=\"line\">while start &lt; 100:</span><br><span class=\"line\">    print(&quot;我爱你%d&quot;%start)</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\">print(&quot;-----end-----&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-while循环2\"><a href=\"#七-while循环2\" class=\"headerlink\" title=\"七.while循环2\"></a>七.while循环2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">计算1-100之间的和</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 1</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">while start &lt;&#x3D; 100:</span><br><span class=\"line\">    sum +&#x3D; start</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-while循环-矩形\"><a href=\"#八-while循环-矩形\" class=\"headerlink\" title=\"八.while循环_矩形\"></a>八.while循环_矩形</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">要求：打印 三行，每行5个*号</span><br><span class=\"line\">*****</span><br><span class=\"line\">*****</span><br><span class=\"line\">*****</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 1</span><br><span class=\"line\">while start &lt;&#x3D; 3:</span><br><span class=\"line\">    count &#x3D; 1</span><br><span class=\"line\">    #每行打印5个*号</span><br><span class=\"line\">    while count &lt;&#x3D; 5:</span><br><span class=\"line\">        print(&quot;*&quot;,end&#x3D;&quot;&quot;)  #end&#x3D;&quot;&quot; 打印结尾默认end&#x3D;&quot;\\n&quot;</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">    #换行</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    start +&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-while循环-三角形\"><a href=\"#九-while循环-三角形\" class=\"headerlink\" title=\"九.while循环_三角形\"></a>九.while循环_三角形</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">打印：三角形*号</span><br><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;-----start------&quot;)</span><br><span class=\"line\">line &#x3D; 1</span><br><span class=\"line\">while line &lt;&#x3D; 3:</span><br><span class=\"line\">    count &#x3D; 1</span><br><span class=\"line\">    while count &lt;&#x3D; line:</span><br><span class=\"line\">        print(&quot;*&quot;,end&#x3D;&quot;&quot;)</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    line +&#x3D; 1</span><br><span class=\"line\">print(&quot;-----end------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-while循环-九九乘法表\"><a href=\"#十-while循环-九九乘法表\" class=\"headerlink\" title=\"十.while循环_九九乘法表\"></a>十.while循环_九九乘法表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; 1</span><br><span class=\"line\">y &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">while y &lt;&#x3D; 9:</span><br><span class=\"line\">    x &#x3D; 1</span><br><span class=\"line\">    while x &lt;&#x3D; y:</span><br><span class=\"line\">        print(&quot;%d*%d&#x3D;%d&quot;%(x,y,(x*y)),end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">        x +&#x3D; 1</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    y +&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-for循环\"><a href=\"#十一-for循环\" class=\"headerlink\" title=\"十一.for循环\"></a>十一.for循环</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">打印字符串 wolfcode 中的每一个字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#while循环</span><br><span class=\"line\">text &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;while循环:&quot;)</span><br><span class=\"line\">length &#x3D; len(text)</span><br><span class=\"line\">start &#x3D; 0</span><br><span class=\"line\">while start &lt; length:</span><br><span class=\"line\">    print(text[start])</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;for循环:&quot;)</span><br><span class=\"line\">for item in text:</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-条件控制-if\"><a href=\"#一-条件控制-if\" class=\"headerlink\" title=\"一.条件控制_if\"></a>一.条件控制_if</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">流程控制：</span><br><span class=\"line\">python解释器：从上往下依次顺序解释执行</span><br><span class=\"line\">    顺序结构</span><br><span class=\"line\">    条件判断语句</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;坐车去上班&quot;)</span><br><span class=\"line\">print(&quot;认真工作&quot;)</span><br><span class=\"line\">weather &#x3D; 1 #0:天气不好 1：天气好</span><br><span class=\"line\">if weather &#x3D;&#x3D; 0:</span><br><span class=\"line\">    #缩进语句</span><br><span class=\"line\">    print(&quot;去打篮球&quot;)   #只有在天气好的时候才打篮球</span><br><span class=\"line\">print(&quot;回家&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-条件控制-if-else\"><a href=\"#二-条件控制-if-else\" class=\"headerlink\" title=\"二.条件控制_if_else\"></a>二.条件控制_if_else</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">语法格式：</span><br><span class=\"line\">if 条件1：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">else:</span><br><span class=\"line\">    语句2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#需求： 订单金额 &gt;&#x3D; 128 EMS包邮 否则 韵达包邮</span><br><span class=\"line\">amount &#x3D; int(input(&quot;请输入您的订单金额：&quot;))</span><br><span class=\"line\">if amount &gt;&#x3D; 128:</span><br><span class=\"line\">    print(&quot;金额超过128元&quot;)</span><br><span class=\"line\">    print(&quot;EMS包邮&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;韵达包邮&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-流程控制-if-elif-else\"><a href=\"#三-流程控制-if-elif-else\" class=\"headerlink\" title=\"三.流程控制_if_elif_else\"></a>三.流程控制_if_elif_else</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">如果需要有超过2个结果需要处理，我们需要使用多个条件表达式进行判断</span><br><span class=\"line\">格式：</span><br><span class=\"line\">if 表达式1：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">elif 表达式2：</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">else:</span><br><span class=\"line\">    语句3</span><br><span class=\"line\"></span><br><span class=\"line\">需要：订单金额 &gt;&#x3D; 128 EMS包邮</span><br><span class=\"line\">      订单金额 》 68  韵达保留</span><br><span class=\"line\">      否则：邮费自理</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">amount &#x3D; int(input(&quot;请输入您的订单金额：&quot;))</span><br><span class=\"line\">print(&quot;---------start-------------&quot;)</span><br><span class=\"line\">if amount &gt;&#x3D; 128:</span><br><span class=\"line\">    print(&quot;EMS包邮&quot;)</span><br><span class=\"line\">elif amount &gt; 68:</span><br><span class=\"line\">    print(&quot;韵达包邮&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;运费自理&quot;)</span><br><span class=\"line\">print(&quot;---------end-------------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-条件判断-嵌套\"><a href=\"#四-条件判断-嵌套\" class=\"headerlink\" title=\"四.条件判断_嵌套\"></a>四.条件判断_嵌套</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：</span><br><span class=\"line\">    你女朋友需要买一个lv, 需要向你借钱N(未知)元</span><br><span class=\"line\">    如果你的卡余额超过8000，</span><br><span class=\"line\">        输入密码转账操作</span><br><span class=\"line\">        如果输入的密码正确：123456</span><br><span class=\"line\">            转账成功</span><br><span class=\"line\">        否则：</span><br><span class=\"line\">            转账失败，密码错误</span><br><span class=\"line\">    否则：</span><br><span class=\"line\">        余额不足</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">amount &#x3D; int(input(&quot;宝贝,你需要多少钱啊：&quot;))</span><br><span class=\"line\">print(&quot;-----start------&quot;)</span><br><span class=\"line\">if amount &lt;&#x3D; 8000:</span><br><span class=\"line\">    password &#x3D; input(&quot;请输入密码:&quot;)</span><br><span class=\"line\">    if password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">        print(&quot;转账成功&quot;)</span><br><span class=\"line\">        print(&quot;宝贝，钱收到了没有&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;密码错误&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;钱不够&quot;)</span><br><span class=\"line\">print(&quot;------end------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-流程控制-练习\"><a href=\"#五-流程控制-练习\" class=\"headerlink\" title=\"五.流程控制_练习\"></a>五.流程控制_练习</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：</span><br><span class=\"line\">    输入用户名，密码</span><br><span class=\"line\">    后台的用户名admin, 密码123456</span><br><span class=\"line\">    如果用户名密码都正确，登录成功</span><br><span class=\"line\">    如果只有用户名错误，提示用户名错误</span><br><span class=\"line\">    如果只有密码错误，提示密码错误</span><br><span class=\"line\">    否则： 用户名和密码都错误</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">username &#x3D; input(&quot;请输入用户名：&quot;)</span><br><span class=\"line\">password &#x3D; input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if username &#x3D;&#x3D; &quot;admin&quot; and password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">    print(&quot;登录成功&quot;)</span><br><span class=\"line\">elif username &#x3D;&#x3D; &quot;admin&quot;:</span><br><span class=\"line\">    print(&quot;密码错误&quot;)</span><br><span class=\"line\">elif password &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class=\"line\">    print(&quot;用户名错误&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;用户名和密码都错误&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-while循环\"><a href=\"#六-while循环\" class=\"headerlink\" title=\"六.while循环\"></a>六.while循环</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">循环结构： 一些代码需要不断重复的去执行</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件：</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：说100遍我爱你</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 0</span><br><span class=\"line\">print(&quot;----start------&quot;)</span><br><span class=\"line\">while start &lt; 100:</span><br><span class=\"line\">    print(&quot;我爱你%d&quot;%start)</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\">print(&quot;-----end-----&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-while循环2\"><a href=\"#七-while循环2\" class=\"headerlink\" title=\"七.while循环2\"></a>七.while循环2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">计算1-100之间的和</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 1</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">while start &lt;&#x3D; 100:</span><br><span class=\"line\">    sum +&#x3D; start</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-while循环-矩形\"><a href=\"#八-while循环-矩形\" class=\"headerlink\" title=\"八.while循环_矩形\"></a>八.while循环_矩形</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">要求：打印 三行，每行5个*号</span><br><span class=\"line\">*****</span><br><span class=\"line\">*****</span><br><span class=\"line\">*****</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">start &#x3D; 1</span><br><span class=\"line\">while start &lt;&#x3D; 3:</span><br><span class=\"line\">    count &#x3D; 1</span><br><span class=\"line\">    #每行打印5个*号</span><br><span class=\"line\">    while count &lt;&#x3D; 5:</span><br><span class=\"line\">        print(&quot;*&quot;,end&#x3D;&quot;&quot;)  #end&#x3D;&quot;&quot; 打印结尾默认end&#x3D;&quot;\\n&quot;</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">    #换行</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    start +&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-while循环-三角形\"><a href=\"#九-while循环-三角形\" class=\"headerlink\" title=\"九.while循环_三角形\"></a>九.while循环_三角形</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">打印：三角形*号</span><br><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;-----start------&quot;)</span><br><span class=\"line\">line &#x3D; 1</span><br><span class=\"line\">while line &lt;&#x3D; 3:</span><br><span class=\"line\">    count &#x3D; 1</span><br><span class=\"line\">    while count &lt;&#x3D; line:</span><br><span class=\"line\">        print(&quot;*&quot;,end&#x3D;&quot;&quot;)</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    line +&#x3D; 1</span><br><span class=\"line\">print(&quot;-----end------&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-while循环-九九乘法表\"><a href=\"#十-while循环-九九乘法表\" class=\"headerlink\" title=\"十.while循环_九九乘法表\"></a>十.while循环_九九乘法表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">x &#x3D; 1</span><br><span class=\"line\">y &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">while y &lt;&#x3D; 9:</span><br><span class=\"line\">    x &#x3D; 1</span><br><span class=\"line\">    while x &lt;&#x3D; y:</span><br><span class=\"line\">        print(&quot;%d*%d&#x3D;%d&quot;%(x,y,(x*y)),end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">        x +&#x3D; 1</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    y +&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-for循环\"><a href=\"#十一-for循环\" class=\"headerlink\" title=\"十一.for循环\"></a>十一.for循环</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">打印字符串 wolfcode 中的每一个字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#while循环</span><br><span class=\"line\">text &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;while循环:&quot;)</span><br><span class=\"line\">length &#x3D; len(text)</span><br><span class=\"line\">start &#x3D; 0</span><br><span class=\"line\">while start &lt; length:</span><br><span class=\"line\">    print(text[start])</span><br><span class=\"line\">    start +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;for循环:&quot;)</span><br><span class=\"line\">for item in text:</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"04-函数","toc":true,"date":"2020-09-22T09:33:08.000Z","_content":"\n\n# 一.01_函数的定义和调用\n\n```\n\"\"\"\n函数的定义：\n    def 函数名([参数1,参数2,...,参数n]):\n        函数体\n        [return 值]\n\"\"\"\n\ndef talk():\n    print(\"你好，兄弟\")\n\ntalk()\ntalk()\nprint(type(talk))\n\n#内置模块\nimport builtins\n#dir 查看模块中有哪些方法和函数\nprint(dir(builtins))\n\n```\n\n# 二.02_函数的形参和实参\n\n```\n\"\"\"\n形参(变量): 在定义函数的时候的参数列表，在小括号中\n实参(对象)：在函数调用的时候传入的一个实际的对象，会赋值给形参\n\"\"\"\n\n#这里的name,就是形参\ndef talk(name,age):\n    print(\"{},你好，兄弟，是不是{}岁了\".format(name,age))\n\ntalk(\"jack\",21)\ntalk(\"lucy\",18)\n\n```\n\n# 三.03_函数的形参和实参_补充\n\n```\n\"\"\"\n\"\"\"\n\ndef fn(x,y):\n    x[0] = 1\n    y[0] = 5\n    print(\"x:{}, y:{}\".format(x,y))\n\na = [100]\nb = [200]\n\n#如果传递的是可变类型的数据，可能会对外面的数据值发生改变\nfn(a,b)\n\nprint(\"a:{}, b:{}\".format(a,b))\n\n```\n\n# 四.04_函数的返回值\n\n```\n\"\"\"\n\"\"\"\n\ndef fn():\n    print(\"执行函数\")\n    #元组的装包功能\n    return 100,200,300\n\n#定义一个ret变量接收fn函数的返回值\n#没有return,则返回None, 如果有return，直接返回后面的值\n#如果返回多个值，则会包装成一个元组返回\n\n#ret = fn()\n#print(\"函数返回结果：\",ret)\n\nx,y,z = fn()\nprint(\"函数返回结果:\",x,y,z)\n\n```\n\n# 五.05_函数的类型\n\n```\n\"\"\"\n函数类型：\n1，无参数无返回值\n2，无参数有返回值\n3，有参数无返回值\n4，有参数有返回值\n\"\"\"\n\n#无参数无返回值\ndef talk():\n    print(\"talk\")\n\ntalk()\n\n#无参数有返回值\ndef get_time():\n    return \"20200806\"\n    \nret = get_time()\nprint(\"时间:\",ret)\n\n#有参数无返回值\ndef insert(record):\n    print(\"插入数据{}成功\".format(record))\n\ninsert(123)\n\n#有参数有返回值\ndef get_sum(x,y):\n    print(x,y)\n    return x+y\nret = get_sum(10,11)\nprint(\"结果:\",ret)\n\n```\n\n# 六.06_函数的嵌套\n\n```\n\"\"\"\n#函数的嵌套调用\ndef fun_a():\n    print(\"执行函数a\")\n\ndef fun_b():\n    print(\"执行函数b\")\n    fun_a()\n    print(\"函数b执行完毕\")\n\nfun_b()\n\"\"\"\n\n#函数的嵌套定义\ndef fun_a():\n    print(\"开始执行函数a\")\n    \n    def fun_b():\n        print(\"执行函数b\")\n    \n    fun_b()\n    print(\"函数a执行完毕\")\n\nfun_a()\n\n```\n\n# 七.07_函数的参数\n\n```\n\"\"\"\n\"\"\"\ndef fun_a(x,y):\n    print(\"fun_a:\",x,y)\n\n#关键字参数，在函数调用的时候，使用name=value\nfun_a(y=1,x=2)\n\ndef fun_b(x,y,z):\n    print(\"fun_b:\",x,y,z)\n    \n\nfun_b(1,2,3)\n#对于关键字参数和位置可以结合使用\n#位置参数必须在关键字参数前面\nfun_b(1,z=100,y=300)    #显示位置参数，再是关键字参数\n\n#这是错误的，位置参数必须在关键字参数前面\n#fun_b(z=3,2,x=1)\n\nprint(\"=\"*50)\ndef fun_c(x,y=10,z=20):\n    print(\"fun_c:\",x,y,z)\n\nfun_c(1)\nfun_c(1,2)\nfun_c(1,2,3)\n#需要： 如果y使用默认值，其他餐宿x=4, z=6\nfun_c(4,z=6)\n\nprint(123,end=\"\\t\")\nprint(456,end=\"\\t\")\nprint(help(print))\n\n```\n\n# 八.08_函数的参数2\n\n```\n\"\"\"\n\"\"\"\n\n#不定长参数\n# *args代表可以接受多个非关键字参数\n# 如果在 *args 前面的参数，可以通过位置参数来赋值，\n# 在 *args后面的参数，可以通过关键字参数赋值\ndef sum(x,*args,y):\n    print(\"args:\",args)\n    print(\"x:\",x)\n    print(\"y:\",y)\n\nsum(1,2,4,y=3)\n\nprint(\"*\"*50)\n\n#必须使用关键字参数传递\ndef fun_b(*args, x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_b(x = 1, y = 2,z = 3)\n\n#必须使用关键字参数传递，而且只能是3个参数\n# 当只使用*符号，代表后面的必须是关键字参数，而且参数个数必须相等\ndef fun_c(*,x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\nfun_c(x = 1,y=2,z=3)\n\n```\n\n# 九.09_关键字参数3\n\n```\n\"\"\"\n\"\"\"\n\n#不定长参数\ndef fun_a(*args,x,y,z):\n    print(\"args:\",args)\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_a(88,x = 1,y=2,z=3)\n\nprint(\"*\"*50)\n\n#不定长关键参数\n#如果需要接收多个关键字参数，需要使用**keywords, 必须放到最后一个参数\ndef fun_b(*args,x,y,z,**keywords):\n    print(\"args:\",args)\n    print(\"keywords:\",keywords)\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_b(88, x = 1,y = 2,z = 3, key=99,num=1000)\n\n```\n\n# 十.10_函数的参数4\n\n```\n\"\"\"\n\"\"\"\ndef fun_a(x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_a(1,2,3)\n#a 是一个元组\na = (8,9,10)\n#在调用的时候，通过*对元组进行解包操作\nfun_a(*a)\n\nprint(\"*\"*50)\n\n#必须是关键字参数\ndef fun_b(*,x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n    \nfun_b(x = 1,y = 2, z= 3)\n\nd = {\"x\":40,\"y\":50,\"z\":60}\n#对字典进行拆包为关键字参数\nfun_b(**d)\n\n#总结：\n# *args 在函数定义的时候，不定长的非关键字参数\n# **keywords 在函数定义的时候，不定长的关键字参数\n# *a  在函数调用的时候，把元组拆包为对应的参数\n# **d 在函数调用的时候，把字典拆包为对应的参数\n\n```\n\n# 十一.11_票务管理系统\n\n```\nprint(\"*\"*50)\nprint(\"1 查询所有车票\")\nprint(\"2 根据开始站点,目的站点,时间来查询\")\nprint(\"3 购买车票\")\nprint(\"4 退票\")\nprint(\"5 退出系统\")\nprint(\"*\"*50)\n\ntickets = [\n    {\"开始站点\":\"广州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":500,\"数量\":100},\n    {\"开始站点\":\"广州\",\"目的站点\":\"武汉\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"青岛\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"郑州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"丽江\",\"日期\":\"20200101\",\"票价\":600,\"数量\":100},\n]\n\nwhile True:\n    model = input(\"请输入你选择的操作序号:\")\n    if model == \"1\":\n        for ticket in tickets:\n            print(ticket)\n    elif model == \"2\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        for ticket in tickets:\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end and ticket[\"日期\"] == date :\n                print(\"票务信息:\",ticket)\n                break\n        else:\n            print(\"没有找到你需要的车票信息\")\n    elif model == \"3\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        for ticket in tickets :\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end  and ticket[\"日期\"] == date :\n                if ticket[\"数量\"] > 0 :\n                    ticket[\"数量\"] -= 1\n                    print(\"购票成功\")\n                else:\n                    print(\"余票不足\")\n                break\n        else:\n            print(\"没有找到对应的票务信息\")\n    elif model == \"4\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        price = input(\"请输入票价:\")\n        for ticket in tickets:\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end and ticket[\"日期\"] == date :\n                ticket[\"数量\"] += 1\n                break\n        else:\n            tickets.append({\"开始站点\":start,\"目的站点\":end,\"日期\":date,\"票价\":price,\"数量\":1})\n            \n        print(\"退票成功\")\n    elif model == \"5\":\n        break\n    else:\n        print(\"输入序号有误，请重新输入\")\n\n```\n\n# 十一.12_函数文档\n\n```\ndef fun_a(x,y,z):\n    \"\"\" 这是测试函数 \n        x:int\n        y:int\n        z:int\n    \"\"\"\n    print(x,y,z)\n\n#help 查看帮助信息\nprint(help(fun_a))\n\n```\n\n# 十三.13_票务管理系统_函数版\n\n```\n\"\"\"\n函数版\n\"\"\"\n\n#打印菜单\ndef print_menu():\n    print(\"*\"*50)\n    print(\"1 查询所有车票\")\n    print(\"2 根据开始站点,目的站点,时间来查询\")\n    print(\"3 购买车票\")\n    print(\"4 退票\")\n    print(\"5 退出系统\")\n    print(\"*\"*50)\n\ntickets = [\n    {\"开始站点\":\"广州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":500,\"数量\":100},\n    {\"开始站点\":\"广州\",\"目的站点\":\"武汉\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"青岛\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"郑州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"丽江\",\"日期\":\"20200101\",\"票价\":600,\"数量\":100},\n]\n\n#查询所有车票\ndef query_all():\n    for ticket in tickets:\n        print(ticket)\n        \n#根据条件查询\ndef query_by_params(start_tmp,end_tmp,date):\n     for ticket in tickets:\n        if ticket[\"开始站点\"] == start_tmp and ticket[\"目的站点\"] == end_tmp and ticket[\"日期\"] == date :\n            return ticket\n     return None;\n\n#购买车票\ndef buy_ticket(start_tmp,end_tmp,date):\n    ticket = query_by_params(start_tmp,end_tmp,date)\n    if ticket == None:\n        print(\"没有找到对应的票务信息\")\n    else:\n        if ticket[\"数量\"] > 0 :\n            ticket[\"数量\"] -= 1\n            print(\"购票成功\")\n        else:\n            print(\"余票不足\")\n\n#退票\ndef return_ticket(start_tmp,end_tmp,date,price):\n    ticket = query_by_params(start_tmp,end_tmp,date)\n    if ticket == None:\n        tickets.append({\"开始站点\":start,\"目的站点\":end,\"日期\":date,\"票价\":price,\"数量\":1})\n    else:\n        ticket[\"数量\"] += 1\n    print(\"退票成功\")\n\n#打印菜单\nprint_menu()\n\nwhile True:\n    model = input(\"请输入你选择的操作序号:\")\n    if model == \"1\":\n        query_all()\n    elif model == \"2\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        ticket = query_by_params(start,end,date)\n        if ticket == None:\n            print(\"没有找到你需要的车票信息\")\n        else:\n            print(\"票务信息:\",ticket)\n    elif model == \"3\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        buy_ticket(start,end,date)\n    elif model == \"4\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        price = input(\"请输入票价:\")\n        return_ticket(start,end,date,price)\n    elif model == \"5\":\n        break\n    else:\n        print(\"输入序号有误，请重新输入\")\n\n```\n\n# 十四.14_回调函数\n\n```\ndef send_msg():\n    \"\"\"发送消息\"\"\"\n    print(\"亲爱的，我到家了\")\n\n#回调函数，传函数名称即可\ndef go_home(callback):\n    \"\"\"回家\n        callback:function\n    \"\"\"\n    print(\"打出租车回家了\")\n    print(\"到家了\")\n    callback()\n\ndef eat():\n    print(\"肚子饿了，吃点方便面\")\n\n#go_home(eat)\n#go_home(send_msg)\n\n#lambda: 匿名函数\ngo_home(lambda: print(\"再和别人去看电影\"))\n\n```\n\n# 十五.15_lambda表达式\n\n```\n#用于计算两个数字的和\ndef sum(x,y):\n    \"\"\"用于计算两个数字之和\"\"\"\n    return x+y\n\n#通过 lambda表达式 可以简化代码\nsum2 = lambda x,y: x+y\nprint(sum(1,2))\nprint(sum2(3,4))\n\ndef go_home(callback):\n    print(\"开始执行\")\n    callback()\n    print(\"完成执行\")\n\ngo_home(lambda: print(\"lambda函数\"))\n\nprint(\"*\"*50)\n\ndef max(x,y):\n    \"\"\" 返回x,y中最大数 \"\"\"\n    \"\"\"\n    if x >= y:\n        return x\n    else:\n        return y\n    \"\"\"\n    #三元运算符\n    # x if x>= y   表示：默认返回x,是在x>=y的情况返回的\n    # else y  表示：前边的x>=y不成立，返回的是y值\n    return x if x >=y else y\n    \n#lambda表达式\nmax2 = lambda x,y: x if x>=y else y\nprint(max(1,4))\nprint(max(1,4))\n\nprint(\"*\"*50)\n\ndef max3(x,y,z):\n    \"\"\" 返回x,y,z中的最大数 \"\"\"\n    \"\"\"\n    #普通方式\n    if x>= y and x>=z:\n        return x\n    elif y>=x and y>=z:\n        return y\n    else:\n        return z\n    \"\"\"\n    #使用lambda表达式, 在不够清晰的时候，不建议使用lambda表达式\n    return x if x>=y and x>=z else y if y>=x and y>=z else z\nprint(max3(1,3,5))\n\nprint(\"*\"*50)\ndef max4(x,y,z):\n    \"\"\" 返回x,y,z中的最大数 \"\"\"\n    #普通方式\n    print(\"max4：123\")\n    print(\"max4: 456\")\n    if x>= y and x>=z:\n        return x\n    elif y>=x and y>=z:\n        return y\n    else:\n        return z\n\n#在表达式中执行多个语句时，需要使用逻辑运算符 or 或者 and\nmax5 = lambda x,y,z: print(\"max5: 123\") or print(\"max5: 456\") or (x if x>=y and x>=z else y if y>=x and y>=z else z)\nprint(max4(10,3,5))\nprint(max5(10,3,5))\n\n```\n\n# 十六.16_函数递归\n\n```\n#需求：计算 1 - N之间的整数加和\n\n#普通的循环\ndef sum(x):\n    value = 0\n    for item in range(1,x+1):\n        value += item\n    return value\n\nprint(sum(10))\n\n#递归\ndef sum2(x):\n    value = 0\n    if x > 1:\n        value = x + sum2(x-1)\n    else:\n        value = 1\n    return value\n    \nprint(sum2(10))\n\n```\n\n# 十七.17_高阶函数\n\n```\n\"\"\"\n高阶函数定义：（满足下边两个条件之一）\n1，接受一个或者多个函数作为参数\n2，输出一个函数\n\"\"\"\n\n\"\"\"\n#高阶函数\ndef fun_a(callback):\n    callback()\n    print(\"fun_a\")\n\ndef fun_b():\n    print(\"fun_b\")\n\nfun_a(fun_b)\n\ndef fun_c():\n    print(\"fun_c\")\n    return fun_b\n\nret = fun_c()\nprint(ret)\nret()\n\"\"\"\n\n#需求：将列表[1,2,3,4,5]中的每个元素都加上10，生成一个新的列表\n\n\"\"\"\n#for循环方式\nlist_a = [1,2,3,4,5]\nlist_b = []\nfor item in list_a:\n    list_b.append(item+10)\nprint(list_b)\n\"\"\"\n\n#map方式\n#map 是一个映射，接收两个参数，第一个参数为一个函数，第二个参数为序列（列表，元组）\n# map的返回值是一个可迭代的对象，使用list(ret)转换为序列\nlist_a = [1,2,3,4,5]\nfn = lambda x: x+10\nret = map(fn,list_a)\nprint(ret)\nprint(list(ret))\n\nprint(\"需求二:\")\nprint(\"*\"*50)\n#将两个列表中的索引对应的元素加起来，形成一个新的列表\nlist_x = [11,12,13,14,15]\nlist_y = [21,22,23,24,25]\nret = map(lambda x,y:x+y, list_x,list_y)\nprint(list(ret))\n\n```\n\n# 十八.18_高阶函数2\n\n```\n#reduce(fn,序列) 用于做累计运算\n#fn: 函数，有2个参数，返回一个值\n#整体返回一个需要累计运算的值\n\n#需求：计算数字列表中，所有的数字乘积\n\nfrom functools import reduce\nlist_a = [2,4,6,8,10]\nret = reduce(lambda x,y:x*y, list_a)\nprint(ret)\n\n#需求：给定一个list集合，找出所有大于80的数据\n\n#filter(fn,序列) ：用来做过滤\n#fn: 接受一个参数，返回一个布尔值\nlist_b = [112,134,34,60,100]\nret = filter(lambda x: x>=80, list_b)\nprint(ret)\nprint(list(ret))\n\n\"\"\"\n总结：\n高阶函数有:\nmap, reduce, filter, sorted\n\"\"\"\n\n```\n\n# 十九.19_闭包\n\n```\n#闭包定义：\n#1，函数A 中定义函数B\n#2，函数A 返回 函数B\n#3，函数B 中访问了 函数A中的变量\n\n#需求：提供一个函数，用于生成一个自动增长的数字1,2,3,4\n\ndef get_id():\n    num = 0\n    def gen_id():\n        #非全局变量\n        nonlocal num\n        num += 1\n        return num\n    return gen_id\n    \ncallback = get_id()\nprint(callback())\nprint(callback())\nprint(callback())\nprint(callback())\n\n```\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/04-函数.md","raw":"---\ntitle: 04-函数\ntoc: true\ndate: 2020-09-22 17:33:08\ntags:\ncategories:\n- python\n- python基础\n---\n\n\n# 一.01_函数的定义和调用\n\n```\n\"\"\"\n函数的定义：\n    def 函数名([参数1,参数2,...,参数n]):\n        函数体\n        [return 值]\n\"\"\"\n\ndef talk():\n    print(\"你好，兄弟\")\n\ntalk()\ntalk()\nprint(type(talk))\n\n#内置模块\nimport builtins\n#dir 查看模块中有哪些方法和函数\nprint(dir(builtins))\n\n```\n\n# 二.02_函数的形参和实参\n\n```\n\"\"\"\n形参(变量): 在定义函数的时候的参数列表，在小括号中\n实参(对象)：在函数调用的时候传入的一个实际的对象，会赋值给形参\n\"\"\"\n\n#这里的name,就是形参\ndef talk(name,age):\n    print(\"{},你好，兄弟，是不是{}岁了\".format(name,age))\n\ntalk(\"jack\",21)\ntalk(\"lucy\",18)\n\n```\n\n# 三.03_函数的形参和实参_补充\n\n```\n\"\"\"\n\"\"\"\n\ndef fn(x,y):\n    x[0] = 1\n    y[0] = 5\n    print(\"x:{}, y:{}\".format(x,y))\n\na = [100]\nb = [200]\n\n#如果传递的是可变类型的数据，可能会对外面的数据值发生改变\nfn(a,b)\n\nprint(\"a:{}, b:{}\".format(a,b))\n\n```\n\n# 四.04_函数的返回值\n\n```\n\"\"\"\n\"\"\"\n\ndef fn():\n    print(\"执行函数\")\n    #元组的装包功能\n    return 100,200,300\n\n#定义一个ret变量接收fn函数的返回值\n#没有return,则返回None, 如果有return，直接返回后面的值\n#如果返回多个值，则会包装成一个元组返回\n\n#ret = fn()\n#print(\"函数返回结果：\",ret)\n\nx,y,z = fn()\nprint(\"函数返回结果:\",x,y,z)\n\n```\n\n# 五.05_函数的类型\n\n```\n\"\"\"\n函数类型：\n1，无参数无返回值\n2，无参数有返回值\n3，有参数无返回值\n4，有参数有返回值\n\"\"\"\n\n#无参数无返回值\ndef talk():\n    print(\"talk\")\n\ntalk()\n\n#无参数有返回值\ndef get_time():\n    return \"20200806\"\n    \nret = get_time()\nprint(\"时间:\",ret)\n\n#有参数无返回值\ndef insert(record):\n    print(\"插入数据{}成功\".format(record))\n\ninsert(123)\n\n#有参数有返回值\ndef get_sum(x,y):\n    print(x,y)\n    return x+y\nret = get_sum(10,11)\nprint(\"结果:\",ret)\n\n```\n\n# 六.06_函数的嵌套\n\n```\n\"\"\"\n#函数的嵌套调用\ndef fun_a():\n    print(\"执行函数a\")\n\ndef fun_b():\n    print(\"执行函数b\")\n    fun_a()\n    print(\"函数b执行完毕\")\n\nfun_b()\n\"\"\"\n\n#函数的嵌套定义\ndef fun_a():\n    print(\"开始执行函数a\")\n    \n    def fun_b():\n        print(\"执行函数b\")\n    \n    fun_b()\n    print(\"函数a执行完毕\")\n\nfun_a()\n\n```\n\n# 七.07_函数的参数\n\n```\n\"\"\"\n\"\"\"\ndef fun_a(x,y):\n    print(\"fun_a:\",x,y)\n\n#关键字参数，在函数调用的时候，使用name=value\nfun_a(y=1,x=2)\n\ndef fun_b(x,y,z):\n    print(\"fun_b:\",x,y,z)\n    \n\nfun_b(1,2,3)\n#对于关键字参数和位置可以结合使用\n#位置参数必须在关键字参数前面\nfun_b(1,z=100,y=300)    #显示位置参数，再是关键字参数\n\n#这是错误的，位置参数必须在关键字参数前面\n#fun_b(z=3,2,x=1)\n\nprint(\"=\"*50)\ndef fun_c(x,y=10,z=20):\n    print(\"fun_c:\",x,y,z)\n\nfun_c(1)\nfun_c(1,2)\nfun_c(1,2,3)\n#需要： 如果y使用默认值，其他餐宿x=4, z=6\nfun_c(4,z=6)\n\nprint(123,end=\"\\t\")\nprint(456,end=\"\\t\")\nprint(help(print))\n\n```\n\n# 八.08_函数的参数2\n\n```\n\"\"\"\n\"\"\"\n\n#不定长参数\n# *args代表可以接受多个非关键字参数\n# 如果在 *args 前面的参数，可以通过位置参数来赋值，\n# 在 *args后面的参数，可以通过关键字参数赋值\ndef sum(x,*args,y):\n    print(\"args:\",args)\n    print(\"x:\",x)\n    print(\"y:\",y)\n\nsum(1,2,4,y=3)\n\nprint(\"*\"*50)\n\n#必须使用关键字参数传递\ndef fun_b(*args, x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_b(x = 1, y = 2,z = 3)\n\n#必须使用关键字参数传递，而且只能是3个参数\n# 当只使用*符号，代表后面的必须是关键字参数，而且参数个数必须相等\ndef fun_c(*,x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\nfun_c(x = 1,y=2,z=3)\n\n```\n\n# 九.09_关键字参数3\n\n```\n\"\"\"\n\"\"\"\n\n#不定长参数\ndef fun_a(*args,x,y,z):\n    print(\"args:\",args)\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_a(88,x = 1,y=2,z=3)\n\nprint(\"*\"*50)\n\n#不定长关键参数\n#如果需要接收多个关键字参数，需要使用**keywords, 必须放到最后一个参数\ndef fun_b(*args,x,y,z,**keywords):\n    print(\"args:\",args)\n    print(\"keywords:\",keywords)\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_b(88, x = 1,y = 2,z = 3, key=99,num=1000)\n\n```\n\n# 十.10_函数的参数4\n\n```\n\"\"\"\n\"\"\"\ndef fun_a(x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n\nfun_a(1,2,3)\n#a 是一个元组\na = (8,9,10)\n#在调用的时候，通过*对元组进行解包操作\nfun_a(*a)\n\nprint(\"*\"*50)\n\n#必须是关键字参数\ndef fun_b(*,x,y,z):\n    print(\"x:{},y:{},z:{}\".format(x,y,z))\n    \nfun_b(x = 1,y = 2, z= 3)\n\nd = {\"x\":40,\"y\":50,\"z\":60}\n#对字典进行拆包为关键字参数\nfun_b(**d)\n\n#总结：\n# *args 在函数定义的时候，不定长的非关键字参数\n# **keywords 在函数定义的时候，不定长的关键字参数\n# *a  在函数调用的时候，把元组拆包为对应的参数\n# **d 在函数调用的时候，把字典拆包为对应的参数\n\n```\n\n# 十一.11_票务管理系统\n\n```\nprint(\"*\"*50)\nprint(\"1 查询所有车票\")\nprint(\"2 根据开始站点,目的站点,时间来查询\")\nprint(\"3 购买车票\")\nprint(\"4 退票\")\nprint(\"5 退出系统\")\nprint(\"*\"*50)\n\ntickets = [\n    {\"开始站点\":\"广州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":500,\"数量\":100},\n    {\"开始站点\":\"广州\",\"目的站点\":\"武汉\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"青岛\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"郑州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"丽江\",\"日期\":\"20200101\",\"票价\":600,\"数量\":100},\n]\n\nwhile True:\n    model = input(\"请输入你选择的操作序号:\")\n    if model == \"1\":\n        for ticket in tickets:\n            print(ticket)\n    elif model == \"2\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        for ticket in tickets:\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end and ticket[\"日期\"] == date :\n                print(\"票务信息:\",ticket)\n                break\n        else:\n            print(\"没有找到你需要的车票信息\")\n    elif model == \"3\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        for ticket in tickets :\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end  and ticket[\"日期\"] == date :\n                if ticket[\"数量\"] > 0 :\n                    ticket[\"数量\"] -= 1\n                    print(\"购票成功\")\n                else:\n                    print(\"余票不足\")\n                break\n        else:\n            print(\"没有找到对应的票务信息\")\n    elif model == \"4\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        price = input(\"请输入票价:\")\n        for ticket in tickets:\n            if ticket[\"开始站点\"] == start and ticket[\"目的站点\"] == end and ticket[\"日期\"] == date :\n                ticket[\"数量\"] += 1\n                break\n        else:\n            tickets.append({\"开始站点\":start,\"目的站点\":end,\"日期\":date,\"票价\":price,\"数量\":1})\n            \n        print(\"退票成功\")\n    elif model == \"5\":\n        break\n    else:\n        print(\"输入序号有误，请重新输入\")\n\n```\n\n# 十一.12_函数文档\n\n```\ndef fun_a(x,y,z):\n    \"\"\" 这是测试函数 \n        x:int\n        y:int\n        z:int\n    \"\"\"\n    print(x,y,z)\n\n#help 查看帮助信息\nprint(help(fun_a))\n\n```\n\n# 十三.13_票务管理系统_函数版\n\n```\n\"\"\"\n函数版\n\"\"\"\n\n#打印菜单\ndef print_menu():\n    print(\"*\"*50)\n    print(\"1 查询所有车票\")\n    print(\"2 根据开始站点,目的站点,时间来查询\")\n    print(\"3 购买车票\")\n    print(\"4 退票\")\n    print(\"5 退出系统\")\n    print(\"*\"*50)\n\ntickets = [\n    {\"开始站点\":\"广州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":500,\"数量\":100},\n    {\"开始站点\":\"广州\",\"目的站点\":\"武汉\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"青岛\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"郑州\",\"目的站点\":\"北京\",\"日期\":\"20200101\",\"票价\":300,\"数量\":100},\n    {\"开始站点\":\"北京\",\"目的站点\":\"丽江\",\"日期\":\"20200101\",\"票价\":600,\"数量\":100},\n]\n\n#查询所有车票\ndef query_all():\n    for ticket in tickets:\n        print(ticket)\n        \n#根据条件查询\ndef query_by_params(start_tmp,end_tmp,date):\n     for ticket in tickets:\n        if ticket[\"开始站点\"] == start_tmp and ticket[\"目的站点\"] == end_tmp and ticket[\"日期\"] == date :\n            return ticket\n     return None;\n\n#购买车票\ndef buy_ticket(start_tmp,end_tmp,date):\n    ticket = query_by_params(start_tmp,end_tmp,date)\n    if ticket == None:\n        print(\"没有找到对应的票务信息\")\n    else:\n        if ticket[\"数量\"] > 0 :\n            ticket[\"数量\"] -= 1\n            print(\"购票成功\")\n        else:\n            print(\"余票不足\")\n\n#退票\ndef return_ticket(start_tmp,end_tmp,date,price):\n    ticket = query_by_params(start_tmp,end_tmp,date)\n    if ticket == None:\n        tickets.append({\"开始站点\":start,\"目的站点\":end,\"日期\":date,\"票价\":price,\"数量\":1})\n    else:\n        ticket[\"数量\"] += 1\n    print(\"退票成功\")\n\n#打印菜单\nprint_menu()\n\nwhile True:\n    model = input(\"请输入你选择的操作序号:\")\n    if model == \"1\":\n        query_all()\n    elif model == \"2\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        ticket = query_by_params(start,end,date)\n        if ticket == None:\n            print(\"没有找到你需要的车票信息\")\n        else:\n            print(\"票务信息:\",ticket)\n    elif model == \"3\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        buy_ticket(start,end,date)\n    elif model == \"4\":\n        start = input(\"请输入开始站点:\")\n        end = input(\"请输入目的站点:\")\n        date = input(\"请输入日期:\")\n        price = input(\"请输入票价:\")\n        return_ticket(start,end,date,price)\n    elif model == \"5\":\n        break\n    else:\n        print(\"输入序号有误，请重新输入\")\n\n```\n\n# 十四.14_回调函数\n\n```\ndef send_msg():\n    \"\"\"发送消息\"\"\"\n    print(\"亲爱的，我到家了\")\n\n#回调函数，传函数名称即可\ndef go_home(callback):\n    \"\"\"回家\n        callback:function\n    \"\"\"\n    print(\"打出租车回家了\")\n    print(\"到家了\")\n    callback()\n\ndef eat():\n    print(\"肚子饿了，吃点方便面\")\n\n#go_home(eat)\n#go_home(send_msg)\n\n#lambda: 匿名函数\ngo_home(lambda: print(\"再和别人去看电影\"))\n\n```\n\n# 十五.15_lambda表达式\n\n```\n#用于计算两个数字的和\ndef sum(x,y):\n    \"\"\"用于计算两个数字之和\"\"\"\n    return x+y\n\n#通过 lambda表达式 可以简化代码\nsum2 = lambda x,y: x+y\nprint(sum(1,2))\nprint(sum2(3,4))\n\ndef go_home(callback):\n    print(\"开始执行\")\n    callback()\n    print(\"完成执行\")\n\ngo_home(lambda: print(\"lambda函数\"))\n\nprint(\"*\"*50)\n\ndef max(x,y):\n    \"\"\" 返回x,y中最大数 \"\"\"\n    \"\"\"\n    if x >= y:\n        return x\n    else:\n        return y\n    \"\"\"\n    #三元运算符\n    # x if x>= y   表示：默认返回x,是在x>=y的情况返回的\n    # else y  表示：前边的x>=y不成立，返回的是y值\n    return x if x >=y else y\n    \n#lambda表达式\nmax2 = lambda x,y: x if x>=y else y\nprint(max(1,4))\nprint(max(1,4))\n\nprint(\"*\"*50)\n\ndef max3(x,y,z):\n    \"\"\" 返回x,y,z中的最大数 \"\"\"\n    \"\"\"\n    #普通方式\n    if x>= y and x>=z:\n        return x\n    elif y>=x and y>=z:\n        return y\n    else:\n        return z\n    \"\"\"\n    #使用lambda表达式, 在不够清晰的时候，不建议使用lambda表达式\n    return x if x>=y and x>=z else y if y>=x and y>=z else z\nprint(max3(1,3,5))\n\nprint(\"*\"*50)\ndef max4(x,y,z):\n    \"\"\" 返回x,y,z中的最大数 \"\"\"\n    #普通方式\n    print(\"max4：123\")\n    print(\"max4: 456\")\n    if x>= y and x>=z:\n        return x\n    elif y>=x and y>=z:\n        return y\n    else:\n        return z\n\n#在表达式中执行多个语句时，需要使用逻辑运算符 or 或者 and\nmax5 = lambda x,y,z: print(\"max5: 123\") or print(\"max5: 456\") or (x if x>=y and x>=z else y if y>=x and y>=z else z)\nprint(max4(10,3,5))\nprint(max5(10,3,5))\n\n```\n\n# 十六.16_函数递归\n\n```\n#需求：计算 1 - N之间的整数加和\n\n#普通的循环\ndef sum(x):\n    value = 0\n    for item in range(1,x+1):\n        value += item\n    return value\n\nprint(sum(10))\n\n#递归\ndef sum2(x):\n    value = 0\n    if x > 1:\n        value = x + sum2(x-1)\n    else:\n        value = 1\n    return value\n    \nprint(sum2(10))\n\n```\n\n# 十七.17_高阶函数\n\n```\n\"\"\"\n高阶函数定义：（满足下边两个条件之一）\n1，接受一个或者多个函数作为参数\n2，输出一个函数\n\"\"\"\n\n\"\"\"\n#高阶函数\ndef fun_a(callback):\n    callback()\n    print(\"fun_a\")\n\ndef fun_b():\n    print(\"fun_b\")\n\nfun_a(fun_b)\n\ndef fun_c():\n    print(\"fun_c\")\n    return fun_b\n\nret = fun_c()\nprint(ret)\nret()\n\"\"\"\n\n#需求：将列表[1,2,3,4,5]中的每个元素都加上10，生成一个新的列表\n\n\"\"\"\n#for循环方式\nlist_a = [1,2,3,4,5]\nlist_b = []\nfor item in list_a:\n    list_b.append(item+10)\nprint(list_b)\n\"\"\"\n\n#map方式\n#map 是一个映射，接收两个参数，第一个参数为一个函数，第二个参数为序列（列表，元组）\n# map的返回值是一个可迭代的对象，使用list(ret)转换为序列\nlist_a = [1,2,3,4,5]\nfn = lambda x: x+10\nret = map(fn,list_a)\nprint(ret)\nprint(list(ret))\n\nprint(\"需求二:\")\nprint(\"*\"*50)\n#将两个列表中的索引对应的元素加起来，形成一个新的列表\nlist_x = [11,12,13,14,15]\nlist_y = [21,22,23,24,25]\nret = map(lambda x,y:x+y, list_x,list_y)\nprint(list(ret))\n\n```\n\n# 十八.18_高阶函数2\n\n```\n#reduce(fn,序列) 用于做累计运算\n#fn: 函数，有2个参数，返回一个值\n#整体返回一个需要累计运算的值\n\n#需求：计算数字列表中，所有的数字乘积\n\nfrom functools import reduce\nlist_a = [2,4,6,8,10]\nret = reduce(lambda x,y:x*y, list_a)\nprint(ret)\n\n#需求：给定一个list集合，找出所有大于80的数据\n\n#filter(fn,序列) ：用来做过滤\n#fn: 接受一个参数，返回一个布尔值\nlist_b = [112,134,34,60,100]\nret = filter(lambda x: x>=80, list_b)\nprint(ret)\nprint(list(ret))\n\n\"\"\"\n总结：\n高阶函数有:\nmap, reduce, filter, sorted\n\"\"\"\n\n```\n\n# 十九.19_闭包\n\n```\n#闭包定义：\n#1，函数A 中定义函数B\n#2，函数A 返回 函数B\n#3，函数B 中访问了 函数A中的变量\n\n#需求：提供一个函数，用于生成一个自动增长的数字1,2,3,4\n\ndef get_id():\n    num = 0\n    def gen_id():\n        #非全局变量\n        nonlocal num\n        num += 1\n        return num\n    return gen_id\n    \ncallback = get_id()\nprint(callback())\nprint(callback())\nprint(callback())\nprint(callback())\n\n```\n\n\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/04-函数","published":1,"updated":"2020-09-23T02:20:54.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenm5008tu3s63e145v35","content":"<h1 id=\"一-01-函数的定义和调用\"><a href=\"#一-01-函数的定义和调用\" class=\"headerlink\" title=\"一.01_函数的定义和调用\"></a>一.01_函数的定义和调用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数的定义：</span><br><span class=\"line\">    def 函数名([参数1,参数2,...,参数n]):</span><br><span class=\"line\">        函数体</span><br><span class=\"line\">        [return 值]</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def talk():</span><br><span class=\"line\">    print(&quot;你好，兄弟&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">talk()</span><br><span class=\"line\">talk()</span><br><span class=\"line\">print(type(talk))</span><br><span class=\"line\"></span><br><span class=\"line\">#内置模块</span><br><span class=\"line\">import builtins</span><br><span class=\"line\">#dir 查看模块中有哪些方法和函数</span><br><span class=\"line\">print(dir(builtins))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-函数的形参和实参\"><a href=\"#二-02-函数的形参和实参\" class=\"headerlink\" title=\"二.02_函数的形参和实参\"></a>二.02_函数的形参和实参</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">形参(变量): 在定义函数的时候的参数列表，在小括号中</span><br><span class=\"line\">实参(对象)：在函数调用的时候传入的一个实际的对象，会赋值给形参</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#这里的name,就是形参</span><br><span class=\"line\">def talk(name,age):</span><br><span class=\"line\">    print(&quot;&#123;&#125;,你好，兄弟，是不是&#123;&#125;岁了&quot;.format(name,age))</span><br><span class=\"line\"></span><br><span class=\"line\">talk(&quot;jack&quot;,21)</span><br><span class=\"line\">talk(&quot;lucy&quot;,18)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-函数的形参和实参-补充\"><a href=\"#三-03-函数的形参和实参-补充\" class=\"headerlink\" title=\"三.03_函数的形参和实参_补充\"></a>三.03_函数的形参和实参_补充</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def fn(x,y):</span><br><span class=\"line\">    x[0] &#x3D; 1</span><br><span class=\"line\">    y[0] &#x3D; 5</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;, y:&#123;&#125;&quot;.format(x,y))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; [100]</span><br><span class=\"line\">b &#x3D; [200]</span><br><span class=\"line\"></span><br><span class=\"line\">#如果传递的是可变类型的数据，可能会对外面的数据值发生改变</span><br><span class=\"line\">fn(a,b)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;a:&#123;&#125;, b:&#123;&#125;&quot;.format(a,b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-函数的返回值\"><a href=\"#四-04-函数的返回值\" class=\"headerlink\" title=\"四.04_函数的返回值\"></a>四.04_函数的返回值</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def fn():</span><br><span class=\"line\">    print(&quot;执行函数&quot;)</span><br><span class=\"line\">    #元组的装包功能</span><br><span class=\"line\">    return 100,200,300</span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个ret变量接收fn函数的返回值</span><br><span class=\"line\">#没有return,则返回None, 如果有return，直接返回后面的值</span><br><span class=\"line\">#如果返回多个值，则会包装成一个元组返回</span><br><span class=\"line\"></span><br><span class=\"line\">#ret &#x3D; fn()</span><br><span class=\"line\">#print(&quot;函数返回结果：&quot;,ret)</span><br><span class=\"line\"></span><br><span class=\"line\">x,y,z &#x3D; fn()</span><br><span class=\"line\">print(&quot;函数返回结果:&quot;,x,y,z)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-函数的类型\"><a href=\"#五-05-函数的类型\" class=\"headerlink\" title=\"五.05_函数的类型\"></a>五.05_函数的类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数类型：</span><br><span class=\"line\">1，无参数无返回值</span><br><span class=\"line\">2，无参数有返回值</span><br><span class=\"line\">3，有参数无返回值</span><br><span class=\"line\">4，有参数有返回值</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#无参数无返回值</span><br><span class=\"line\">def talk():</span><br><span class=\"line\">    print(&quot;talk&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">talk()</span><br><span class=\"line\"></span><br><span class=\"line\">#无参数有返回值</span><br><span class=\"line\">def get_time():</span><br><span class=\"line\">    return &quot;20200806&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">ret &#x3D; get_time()</span><br><span class=\"line\">print(&quot;时间:&quot;,ret)</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数无返回值</span><br><span class=\"line\">def insert(record):</span><br><span class=\"line\">    print(&quot;插入数据&#123;&#125;成功&quot;.format(record))</span><br><span class=\"line\"></span><br><span class=\"line\">insert(123)</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数有返回值</span><br><span class=\"line\">def get_sum(x,y):</span><br><span class=\"line\">    print(x,y)</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\">ret &#x3D; get_sum(10,11)</span><br><span class=\"line\">print(&quot;结果:&quot;,ret)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-函数的嵌套\"><a href=\"#六-06-函数的嵌套\" class=\"headerlink\" title=\"六.06_函数的嵌套\"></a>六.06_函数的嵌套</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#函数的嵌套调用</span><br><span class=\"line\">def fun_a():</span><br><span class=\"line\">    print(&quot;执行函数a&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b():</span><br><span class=\"line\">    print(&quot;执行函数b&quot;)</span><br><span class=\"line\">    fun_a()</span><br><span class=\"line\">    print(&quot;函数b执行完毕&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b()</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#函数的嵌套定义</span><br><span class=\"line\">def fun_a():</span><br><span class=\"line\">    print(&quot;开始执行函数a&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def fun_b():</span><br><span class=\"line\">        print(&quot;执行函数b&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun_b()</span><br><span class=\"line\">    print(&quot;函数a执行完毕&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-函数的参数\"><a href=\"#七-07-函数的参数\" class=\"headerlink\" title=\"七.07_函数的参数\"></a>七.07_函数的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def fun_a(x,y):</span><br><span class=\"line\">    print(&quot;fun_a:&quot;,x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">#关键字参数，在函数调用的时候，使用name&#x3D;value</span><br><span class=\"line\">fun_a(y&#x3D;1,x&#x3D;2)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b(x,y,z):</span><br><span class=\"line\">    print(&quot;fun_b:&quot;,x,y,z)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(1,2,3)</span><br><span class=\"line\">#对于关键字参数和位置可以结合使用</span><br><span class=\"line\">#位置参数必须在关键字参数前面</span><br><span class=\"line\">fun_b(1,z&#x3D;100,y&#x3D;300)    #显示位置参数，再是关键字参数</span><br><span class=\"line\"></span><br><span class=\"line\">#这是错误的，位置参数必须在关键字参数前面</span><br><span class=\"line\">#fun_b(z&#x3D;3,2,x&#x3D;1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">def fun_c(x,y&#x3D;10,z&#x3D;20):</span><br><span class=\"line\">    print(&quot;fun_c:&quot;,x,y,z)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_c(1)</span><br><span class=\"line\">fun_c(1,2)</span><br><span class=\"line\">fun_c(1,2,3)</span><br><span class=\"line\">#需要： 如果y使用默认值，其他餐宿x&#x3D;4, z&#x3D;6</span><br><span class=\"line\">fun_c(4,z&#x3D;6)</span><br><span class=\"line\"></span><br><span class=\"line\">print(123,end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">print(456,end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">print(help(print))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-函数的参数2\"><a href=\"#八-08-函数的参数2\" class=\"headerlink\" title=\"八.08_函数的参数2\"></a>八.08_函数的参数2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长参数</span><br><span class=\"line\"># *args代表可以接受多个非关键字参数</span><br><span class=\"line\"># 如果在 *args 前面的参数，可以通过位置参数来赋值，</span><br><span class=\"line\"># 在 *args后面的参数，可以通过关键字参数赋值</span><br><span class=\"line\">def sum(x,*args,y):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;x:&quot;,x)</span><br><span class=\"line\">    print(&quot;y:&quot;,y)</span><br><span class=\"line\"></span><br><span class=\"line\">sum(1,2,4,y&#x3D;3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须使用关键字参数传递</span><br><span class=\"line\">def fun_b(*args, x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(x &#x3D; 1, y &#x3D; 2,z &#x3D; 3)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须使用关键字参数传递，而且只能是3个参数</span><br><span class=\"line\"># 当只使用*符号，代表后面的必须是关键字参数，而且参数个数必须相等</span><br><span class=\"line\">def fun_c(*,x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\">fun_c(x &#x3D; 1,y&#x3D;2,z&#x3D;3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-关键字参数3\"><a href=\"#九-09-关键字参数3\" class=\"headerlink\" title=\"九.09_关键字参数3\"></a>九.09_关键字参数3</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长参数</span><br><span class=\"line\">def fun_a(*args,x,y,z):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(88,x &#x3D; 1,y&#x3D;2,z&#x3D;3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长关键参数</span><br><span class=\"line\">#如果需要接收多个关键字参数，需要使用**keywords, 必须放到最后一个参数</span><br><span class=\"line\">def fun_b(*args,x,y,z,**keywords):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;keywords:&quot;,keywords)</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(88, x &#x3D; 1,y &#x3D; 2,z &#x3D; 3, key&#x3D;99,num&#x3D;1000)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-函数的参数4\"><a href=\"#十-10-函数的参数4\" class=\"headerlink\" title=\"十.10_函数的参数4\"></a>十.10_函数的参数4</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def fun_a(x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(1,2,3)</span><br><span class=\"line\">#a 是一个元组</span><br><span class=\"line\">a &#x3D; (8,9,10)</span><br><span class=\"line\">#在调用的时候，通过*对元组进行解包操作</span><br><span class=\"line\">fun_a(*a)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须是关键字参数</span><br><span class=\"line\">def fun_b(*,x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\">    </span><br><span class=\"line\">fun_b(x &#x3D; 1,y &#x3D; 2, z&#x3D; 3)</span><br><span class=\"line\"></span><br><span class=\"line\">d &#x3D; &#123;&quot;x&quot;:40,&quot;y&quot;:50,&quot;z&quot;:60&#125;</span><br><span class=\"line\">#对字典进行拆包为关键字参数</span><br><span class=\"line\">fun_b(**d)</span><br><span class=\"line\"></span><br><span class=\"line\">#总结：</span><br><span class=\"line\"># *args 在函数定义的时候，不定长的非关键字参数</span><br><span class=\"line\"># **keywords 在函数定义的时候，不定长的关键字参数</span><br><span class=\"line\"># *a  在函数调用的时候，把元组拆包为对应的参数</span><br><span class=\"line\"># **d 在函数调用的时候，把字典拆包为对应的参数</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-票务管理系统\"><a href=\"#十一-11-票务管理系统\" class=\"headerlink\" title=\"十一.11_票务管理系统\"></a>十一.11_票务管理系统</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">print(&quot;1 查询所有车票&quot;)</span><br><span class=\"line\">print(&quot;2 根据开始站点,目的站点,时间来查询&quot;)</span><br><span class=\"line\">print(&quot;3 购买车票&quot;)</span><br><span class=\"line\">print(&quot;4 退票&quot;)</span><br><span class=\"line\">print(&quot;5 退出系统&quot;)</span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">tickets &#x3D; [</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:500,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;武汉&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;青岛&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;郑州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;丽江&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:600,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; input(&quot;请输入你选择的操作序号:&quot;)</span><br><span class=\"line\">    if model &#x3D;&#x3D; &quot;1&quot;:</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            print(ticket)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;2&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                print(&quot;票务信息:&quot;,ticket)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到你需要的车票信息&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;3&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        for ticket in tickets :</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end  and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                if ticket[&quot;数量&quot;] &gt; 0 :</span><br><span class=\"line\">                    ticket[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">                    print(&quot;购票成功&quot;)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    print(&quot;余票不足&quot;)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到对应的票务信息&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;4&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        price &#x3D; input(&quot;请输入票价:&quot;)</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                ticket[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            tickets.append(&#123;&quot;开始站点&quot;:start,&quot;目的站点&quot;:end,&quot;日期&quot;:date,&quot;票价&quot;:price,&quot;数量&quot;:1&#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        print(&quot;退票成功&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;5&quot;:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;输入序号有误，请重新输入&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-12-函数文档\"><a href=\"#十一-12-函数文档\" class=\"headerlink\" title=\"十一.12_函数文档\"></a>十一.12_函数文档</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun_a(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 这是测试函数 </span><br><span class=\"line\">        x:int</span><br><span class=\"line\">        y:int</span><br><span class=\"line\">        z:int</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(x,y,z)</span><br><span class=\"line\"></span><br><span class=\"line\">#help 查看帮助信息</span><br><span class=\"line\">print(help(fun_a))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-13-票务管理系统-函数版\"><a href=\"#十三-13-票务管理系统-函数版\" class=\"headerlink\" title=\"十三.13_票务管理系统_函数版\"></a>十三.13_票务管理系统_函数版</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数版</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#打印菜单</span><br><span class=\"line\">def print_menu():</span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\">    print(&quot;1 查询所有车票&quot;)</span><br><span class=\"line\">    print(&quot;2 根据开始站点,目的站点,时间来查询&quot;)</span><br><span class=\"line\">    print(&quot;3 购买车票&quot;)</span><br><span class=\"line\">    print(&quot;4 退票&quot;)</span><br><span class=\"line\">    print(&quot;5 退出系统&quot;)</span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">tickets &#x3D; [</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:500,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;武汉&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;青岛&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;郑州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;丽江&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:600,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">#查询所有车票</span><br><span class=\"line\">def query_all():</span><br><span class=\"line\">    for ticket in tickets:</span><br><span class=\"line\">        print(ticket)</span><br><span class=\"line\">        </span><br><span class=\"line\">#根据条件查询</span><br><span class=\"line\">def query_by_params(start_tmp,end_tmp,date):</span><br><span class=\"line\">     for ticket in tickets:</span><br><span class=\"line\">        if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start_tmp and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end_tmp and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">            return ticket</span><br><span class=\"line\">     return None;</span><br><span class=\"line\"></span><br><span class=\"line\">#购买车票</span><br><span class=\"line\">def buy_ticket(start_tmp,end_tmp,date):</span><br><span class=\"line\">    ticket &#x3D; query_by_params(start_tmp,end_tmp,date)</span><br><span class=\"line\">    if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">        print(&quot;没有找到对应的票务信息&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        if ticket[&quot;数量&quot;] &gt; 0 :</span><br><span class=\"line\">            ticket[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">            print(&quot;购票成功&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;余票不足&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#退票</span><br><span class=\"line\">def return_ticket(start_tmp,end_tmp,date,price):</span><br><span class=\"line\">    ticket &#x3D; query_by_params(start_tmp,end_tmp,date)</span><br><span class=\"line\">    if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">        tickets.append(&#123;&quot;开始站点&quot;:start,&quot;目的站点&quot;:end,&quot;日期&quot;:date,&quot;票价&quot;:price,&quot;数量&quot;:1&#125;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        ticket[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">    print(&quot;退票成功&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#打印菜单</span><br><span class=\"line\">print_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; input(&quot;请输入你选择的操作序号:&quot;)</span><br><span class=\"line\">    if model &#x3D;&#x3D; &quot;1&quot;:</span><br><span class=\"line\">        query_all()</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;2&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        ticket &#x3D; query_by_params(start,end,date)</span><br><span class=\"line\">        if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">            print(&quot;没有找到你需要的车票信息&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;票务信息:&quot;,ticket)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;3&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        buy_ticket(start,end,date)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;4&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        price &#x3D; input(&quot;请输入票价:&quot;)</span><br><span class=\"line\">        return_ticket(start,end,date,price)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;5&quot;:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;输入序号有误，请重新输入&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-14-回调函数\"><a href=\"#十四-14-回调函数\" class=\"headerlink\" title=\"十四.14_回调函数\"></a>十四.14_回调函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def send_msg():</span><br><span class=\"line\">    &quot;&quot;&quot;发送消息&quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;亲爱的，我到家了&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#回调函数，传函数名称即可</span><br><span class=\"line\">def go_home(callback):</span><br><span class=\"line\">    &quot;&quot;&quot;回家</span><br><span class=\"line\">        callback:function</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;打出租车回家了&quot;)</span><br><span class=\"line\">    print(&quot;到家了&quot;)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\"></span><br><span class=\"line\">def eat():</span><br><span class=\"line\">    print(&quot;肚子饿了，吃点方便面&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#go_home(eat)</span><br><span class=\"line\">#go_home(send_msg)</span><br><span class=\"line\"></span><br><span class=\"line\">#lambda: 匿名函数</span><br><span class=\"line\">go_home(lambda: print(&quot;再和别人去看电影&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十五-15-lambda表达式\"><a href=\"#十五-15-lambda表达式\" class=\"headerlink\" title=\"十五.15_lambda表达式\"></a>十五.15_lambda表达式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用于计算两个数字的和</span><br><span class=\"line\">def sum(x,y):</span><br><span class=\"line\">    &quot;&quot;&quot;用于计算两个数字之和&quot;&quot;&quot;</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#通过 lambda表达式 可以简化代码</span><br><span class=\"line\">sum2 &#x3D; lambda x,y: x+y</span><br><span class=\"line\">print(sum(1,2))</span><br><span class=\"line\">print(sum2(3,4))</span><br><span class=\"line\"></span><br><span class=\"line\">def go_home(callback):</span><br><span class=\"line\">    print(&quot;开始执行&quot;)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">    print(&quot;完成执行&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">go_home(lambda: print(&quot;lambda函数&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">def max(x,y):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y中最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    if x &gt;&#x3D; y:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #三元运算符</span><br><span class=\"line\">    # x if x&gt;&#x3D; y   表示：默认返回x,是在x&gt;&#x3D;y的情况返回的</span><br><span class=\"line\">    # else y  表示：前边的x&gt;&#x3D;y不成立，返回的是y值</span><br><span class=\"line\">    return x if x &gt;&#x3D;y else y</span><br><span class=\"line\">    </span><br><span class=\"line\">#lambda表达式</span><br><span class=\"line\">max2 &#x3D; lambda x,y: x if x&gt;&#x3D;y else y</span><br><span class=\"line\">print(max(1,4))</span><br><span class=\"line\">print(max(1,4))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">def max3(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y,z中的最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #普通方式</span><br><span class=\"line\">    if x&gt;&#x3D; y and x&gt;&#x3D;z:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    elif y&gt;&#x3D;x and y&gt;&#x3D;z:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return z</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #使用lambda表达式, 在不够清晰的时候，不建议使用lambda表达式</span><br><span class=\"line\">    return x if x&gt;&#x3D;y and x&gt;&#x3D;z else y if y&gt;&#x3D;x and y&gt;&#x3D;z else z</span><br><span class=\"line\">print(max3(1,3,5))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">def max4(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y,z中的最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    #普通方式</span><br><span class=\"line\">    print(&quot;max4：123&quot;)</span><br><span class=\"line\">    print(&quot;max4: 456&quot;)</span><br><span class=\"line\">    if x&gt;&#x3D; y and x&gt;&#x3D;z:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    elif y&gt;&#x3D;x and y&gt;&#x3D;z:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return z</span><br><span class=\"line\"></span><br><span class=\"line\">#在表达式中执行多个语句时，需要使用逻辑运算符 or 或者 and</span><br><span class=\"line\">max5 &#x3D; lambda x,y,z: print(&quot;max5: 123&quot;) or print(&quot;max5: 456&quot;) or (x if x&gt;&#x3D;y and x&gt;&#x3D;z else y if y&gt;&#x3D;x and y&gt;&#x3D;z else z)</span><br><span class=\"line\">print(max4(10,3,5))</span><br><span class=\"line\">print(max5(10,3,5))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十六-16-函数递归\"><a href=\"#十六-16-函数递归\" class=\"headerlink\" title=\"十六.16_函数递归\"></a>十六.16_函数递归</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#需求：计算 1 - N之间的整数加和</span><br><span class=\"line\"></span><br><span class=\"line\">#普通的循环</span><br><span class=\"line\">def sum(x):</span><br><span class=\"line\">    value &#x3D; 0</span><br><span class=\"line\">    for item in range(1,x+1):</span><br><span class=\"line\">        value +&#x3D; item</span><br><span class=\"line\">    return value</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum(10))</span><br><span class=\"line\"></span><br><span class=\"line\">#递归</span><br><span class=\"line\">def sum2(x):</span><br><span class=\"line\">    value &#x3D; 0</span><br><span class=\"line\">    if x &gt; 1:</span><br><span class=\"line\">        value &#x3D; x + sum2(x-1)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; 1</span><br><span class=\"line\">    return value</span><br><span class=\"line\">    </span><br><span class=\"line\">print(sum2(10))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十七-17-高阶函数\"><a href=\"#十七-17-高阶函数\" class=\"headerlink\" title=\"十七.17_高阶函数\"></a>十七.17_高阶函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">高阶函数定义：（满足下边两个条件之一）</span><br><span class=\"line\">1，接受一个或者多个函数作为参数</span><br><span class=\"line\">2，输出一个函数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#高阶函数</span><br><span class=\"line\">def fun_a(callback):</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">    print(&quot;fun_a&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b():</span><br><span class=\"line\">    print(&quot;fun_b&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(fun_b)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_c():</span><br><span class=\"line\">    print(&quot;fun_c&quot;)</span><br><span class=\"line\">    return fun_b</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; fun_c()</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">ret()</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：将列表[1,2,3,4,5]中的每个元素都加上10，生成一个新的列表</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#for循环方式</span><br><span class=\"line\">list_a &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">list_b &#x3D; []</span><br><span class=\"line\">for item in list_a:</span><br><span class=\"line\">    list_b.append(item+10)</span><br><span class=\"line\">print(list_b)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#map方式</span><br><span class=\"line\">#map 是一个映射，接收两个参数，第一个参数为一个函数，第二个参数为序列（列表，元组）</span><br><span class=\"line\"># map的返回值是一个可迭代的对象，使用list(ret)转换为序列</span><br><span class=\"line\">list_a &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">fn &#x3D; lambda x: x+10</span><br><span class=\"line\">ret &#x3D; map(fn,list_a)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">print(list(ret))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;需求二:&quot;)</span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">#将两个列表中的索引对应的元素加起来，形成一个新的列表</span><br><span class=\"line\">list_x &#x3D; [11,12,13,14,15]</span><br><span class=\"line\">list_y &#x3D; [21,22,23,24,25]</span><br><span class=\"line\">ret &#x3D; map(lambda x,y:x+y, list_x,list_y)</span><br><span class=\"line\">print(list(ret))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十八-18-高阶函数2\"><a href=\"#十八-18-高阶函数2\" class=\"headerlink\" title=\"十八.18_高阶函数2\"></a>十八.18_高阶函数2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#reduce(fn,序列) 用于做累计运算</span><br><span class=\"line\">#fn: 函数，有2个参数，返回一个值</span><br><span class=\"line\">#整体返回一个需要累计运算的值</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：计算数字列表中，所有的数字乘积</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a &#x3D; [2,4,6,8,10]</span><br><span class=\"line\">ret &#x3D; reduce(lambda x,y:x*y, list_a)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：给定一个list集合，找出所有大于80的数据</span><br><span class=\"line\"></span><br><span class=\"line\">#filter(fn,序列) ：用来做过滤</span><br><span class=\"line\">#fn: 接受一个参数，返回一个布尔值</span><br><span class=\"line\">list_b &#x3D; [112,134,34,60,100]</span><br><span class=\"line\">ret &#x3D; filter(lambda x: x&gt;&#x3D;80, list_b)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">print(list(ret))</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">总结：</span><br><span class=\"line\">高阶函数有:</span><br><span class=\"line\">map, reduce, filter, sorted</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十九-19-闭包\"><a href=\"#十九-19-闭包\" class=\"headerlink\" title=\"十九.19_闭包\"></a>十九.19_闭包</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包定义：</span><br><span class=\"line\">#1，函数A 中定义函数B</span><br><span class=\"line\">#2，函数A 返回 函数B</span><br><span class=\"line\">#3，函数B 中访问了 函数A中的变量</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：提供一个函数，用于生成一个自动增长的数字1,2,3,4</span><br><span class=\"line\"></span><br><span class=\"line\">def get_id():</span><br><span class=\"line\">    num &#x3D; 0</span><br><span class=\"line\">    def gen_id():</span><br><span class=\"line\">        #非全局变量</span><br><span class=\"line\">        nonlocal num</span><br><span class=\"line\">        num +&#x3D; 1</span><br><span class=\"line\">        return num</span><br><span class=\"line\">    return gen_id</span><br><span class=\"line\">    </span><br><span class=\"line\">callback &#x3D; get_id()</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-01-函数的定义和调用\"><a href=\"#一-01-函数的定义和调用\" class=\"headerlink\" title=\"一.01_函数的定义和调用\"></a>一.01_函数的定义和调用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数的定义：</span><br><span class=\"line\">    def 函数名([参数1,参数2,...,参数n]):</span><br><span class=\"line\">        函数体</span><br><span class=\"line\">        [return 值]</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def talk():</span><br><span class=\"line\">    print(&quot;你好，兄弟&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">talk()</span><br><span class=\"line\">talk()</span><br><span class=\"line\">print(type(talk))</span><br><span class=\"line\"></span><br><span class=\"line\">#内置模块</span><br><span class=\"line\">import builtins</span><br><span class=\"line\">#dir 查看模块中有哪些方法和函数</span><br><span class=\"line\">print(dir(builtins))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-函数的形参和实参\"><a href=\"#二-02-函数的形参和实参\" class=\"headerlink\" title=\"二.02_函数的形参和实参\"></a>二.02_函数的形参和实参</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">形参(变量): 在定义函数的时候的参数列表，在小括号中</span><br><span class=\"line\">实参(对象)：在函数调用的时候传入的一个实际的对象，会赋值给形参</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#这里的name,就是形参</span><br><span class=\"line\">def talk(name,age):</span><br><span class=\"line\">    print(&quot;&#123;&#125;,你好，兄弟，是不是&#123;&#125;岁了&quot;.format(name,age))</span><br><span class=\"line\"></span><br><span class=\"line\">talk(&quot;jack&quot;,21)</span><br><span class=\"line\">talk(&quot;lucy&quot;,18)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-函数的形参和实参-补充\"><a href=\"#三-03-函数的形参和实参-补充\" class=\"headerlink\" title=\"三.03_函数的形参和实参_补充\"></a>三.03_函数的形参和实参_补充</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def fn(x,y):</span><br><span class=\"line\">    x[0] &#x3D; 1</span><br><span class=\"line\">    y[0] &#x3D; 5</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;, y:&#123;&#125;&quot;.format(x,y))</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; [100]</span><br><span class=\"line\">b &#x3D; [200]</span><br><span class=\"line\"></span><br><span class=\"line\">#如果传递的是可变类型的数据，可能会对外面的数据值发生改变</span><br><span class=\"line\">fn(a,b)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;a:&#123;&#125;, b:&#123;&#125;&quot;.format(a,b))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-函数的返回值\"><a href=\"#四-04-函数的返回值\" class=\"headerlink\" title=\"四.04_函数的返回值\"></a>四.04_函数的返回值</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def fn():</span><br><span class=\"line\">    print(&quot;执行函数&quot;)</span><br><span class=\"line\">    #元组的装包功能</span><br><span class=\"line\">    return 100,200,300</span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个ret变量接收fn函数的返回值</span><br><span class=\"line\">#没有return,则返回None, 如果有return，直接返回后面的值</span><br><span class=\"line\">#如果返回多个值，则会包装成一个元组返回</span><br><span class=\"line\"></span><br><span class=\"line\">#ret &#x3D; fn()</span><br><span class=\"line\">#print(&quot;函数返回结果：&quot;,ret)</span><br><span class=\"line\"></span><br><span class=\"line\">x,y,z &#x3D; fn()</span><br><span class=\"line\">print(&quot;函数返回结果:&quot;,x,y,z)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-函数的类型\"><a href=\"#五-05-函数的类型\" class=\"headerlink\" title=\"五.05_函数的类型\"></a>五.05_函数的类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数类型：</span><br><span class=\"line\">1，无参数无返回值</span><br><span class=\"line\">2，无参数有返回值</span><br><span class=\"line\">3，有参数无返回值</span><br><span class=\"line\">4，有参数有返回值</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#无参数无返回值</span><br><span class=\"line\">def talk():</span><br><span class=\"line\">    print(&quot;talk&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">talk()</span><br><span class=\"line\"></span><br><span class=\"line\">#无参数有返回值</span><br><span class=\"line\">def get_time():</span><br><span class=\"line\">    return &quot;20200806&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">ret &#x3D; get_time()</span><br><span class=\"line\">print(&quot;时间:&quot;,ret)</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数无返回值</span><br><span class=\"line\">def insert(record):</span><br><span class=\"line\">    print(&quot;插入数据&#123;&#125;成功&quot;.format(record))</span><br><span class=\"line\"></span><br><span class=\"line\">insert(123)</span><br><span class=\"line\"></span><br><span class=\"line\">#有参数有返回值</span><br><span class=\"line\">def get_sum(x,y):</span><br><span class=\"line\">    print(x,y)</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\">ret &#x3D; get_sum(10,11)</span><br><span class=\"line\">print(&quot;结果:&quot;,ret)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-函数的嵌套\"><a href=\"#六-06-函数的嵌套\" class=\"headerlink\" title=\"六.06_函数的嵌套\"></a>六.06_函数的嵌套</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#函数的嵌套调用</span><br><span class=\"line\">def fun_a():</span><br><span class=\"line\">    print(&quot;执行函数a&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b():</span><br><span class=\"line\">    print(&quot;执行函数b&quot;)</span><br><span class=\"line\">    fun_a()</span><br><span class=\"line\">    print(&quot;函数b执行完毕&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b()</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#函数的嵌套定义</span><br><span class=\"line\">def fun_a():</span><br><span class=\"line\">    print(&quot;开始执行函数a&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def fun_b():</span><br><span class=\"line\">        print(&quot;执行函数b&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun_b()</span><br><span class=\"line\">    print(&quot;函数a执行完毕&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-函数的参数\"><a href=\"#七-07-函数的参数\" class=\"headerlink\" title=\"七.07_函数的参数\"></a>七.07_函数的参数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def fun_a(x,y):</span><br><span class=\"line\">    print(&quot;fun_a:&quot;,x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">#关键字参数，在函数调用的时候，使用name&#x3D;value</span><br><span class=\"line\">fun_a(y&#x3D;1,x&#x3D;2)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b(x,y,z):</span><br><span class=\"line\">    print(&quot;fun_b:&quot;,x,y,z)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(1,2,3)</span><br><span class=\"line\">#对于关键字参数和位置可以结合使用</span><br><span class=\"line\">#位置参数必须在关键字参数前面</span><br><span class=\"line\">fun_b(1,z&#x3D;100,y&#x3D;300)    #显示位置参数，再是关键字参数</span><br><span class=\"line\"></span><br><span class=\"line\">#这是错误的，位置参数必须在关键字参数前面</span><br><span class=\"line\">#fun_b(z&#x3D;3,2,x&#x3D;1)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">def fun_c(x,y&#x3D;10,z&#x3D;20):</span><br><span class=\"line\">    print(&quot;fun_c:&quot;,x,y,z)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_c(1)</span><br><span class=\"line\">fun_c(1,2)</span><br><span class=\"line\">fun_c(1,2,3)</span><br><span class=\"line\">#需要： 如果y使用默认值，其他餐宿x&#x3D;4, z&#x3D;6</span><br><span class=\"line\">fun_c(4,z&#x3D;6)</span><br><span class=\"line\"></span><br><span class=\"line\">print(123,end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">print(456,end&#x3D;&quot;\\t&quot;)</span><br><span class=\"line\">print(help(print))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-函数的参数2\"><a href=\"#八-08-函数的参数2\" class=\"headerlink\" title=\"八.08_函数的参数2\"></a>八.08_函数的参数2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长参数</span><br><span class=\"line\"># *args代表可以接受多个非关键字参数</span><br><span class=\"line\"># 如果在 *args 前面的参数，可以通过位置参数来赋值，</span><br><span class=\"line\"># 在 *args后面的参数，可以通过关键字参数赋值</span><br><span class=\"line\">def sum(x,*args,y):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;x:&quot;,x)</span><br><span class=\"line\">    print(&quot;y:&quot;,y)</span><br><span class=\"line\"></span><br><span class=\"line\">sum(1,2,4,y&#x3D;3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须使用关键字参数传递</span><br><span class=\"line\">def fun_b(*args, x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(x &#x3D; 1, y &#x3D; 2,z &#x3D; 3)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须使用关键字参数传递，而且只能是3个参数</span><br><span class=\"line\"># 当只使用*符号，代表后面的必须是关键字参数，而且参数个数必须相等</span><br><span class=\"line\">def fun_c(*,x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\">fun_c(x &#x3D; 1,y&#x3D;2,z&#x3D;3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-关键字参数3\"><a href=\"#九-09-关键字参数3\" class=\"headerlink\" title=\"九.09_关键字参数3\"></a>九.09_关键字参数3</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长参数</span><br><span class=\"line\">def fun_a(*args,x,y,z):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(88,x &#x3D; 1,y&#x3D;2,z&#x3D;3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#不定长关键参数</span><br><span class=\"line\">#如果需要接收多个关键字参数，需要使用**keywords, 必须放到最后一个参数</span><br><span class=\"line\">def fun_b(*args,x,y,z,**keywords):</span><br><span class=\"line\">    print(&quot;args:&quot;,args)</span><br><span class=\"line\">    print(&quot;keywords:&quot;,keywords)</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_b(88, x &#x3D; 1,y &#x3D; 2,z &#x3D; 3, key&#x3D;99,num&#x3D;1000)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-函数的参数4\"><a href=\"#十-10-函数的参数4\" class=\"headerlink\" title=\"十.10_函数的参数4\"></a>十.10_函数的参数4</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def fun_a(x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(1,2,3)</span><br><span class=\"line\">#a 是一个元组</span><br><span class=\"line\">a &#x3D; (8,9,10)</span><br><span class=\"line\">#在调用的时候，通过*对元组进行解包操作</span><br><span class=\"line\">fun_a(*a)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#必须是关键字参数</span><br><span class=\"line\">def fun_b(*,x,y,z):</span><br><span class=\"line\">    print(&quot;x:&#123;&#125;,y:&#123;&#125;,z:&#123;&#125;&quot;.format(x,y,z))</span><br><span class=\"line\">    </span><br><span class=\"line\">fun_b(x &#x3D; 1,y &#x3D; 2, z&#x3D; 3)</span><br><span class=\"line\"></span><br><span class=\"line\">d &#x3D; &#123;&quot;x&quot;:40,&quot;y&quot;:50,&quot;z&quot;:60&#125;</span><br><span class=\"line\">#对字典进行拆包为关键字参数</span><br><span class=\"line\">fun_b(**d)</span><br><span class=\"line\"></span><br><span class=\"line\">#总结：</span><br><span class=\"line\"># *args 在函数定义的时候，不定长的非关键字参数</span><br><span class=\"line\"># **keywords 在函数定义的时候，不定长的关键字参数</span><br><span class=\"line\"># *a  在函数调用的时候，把元组拆包为对应的参数</span><br><span class=\"line\"># **d 在函数调用的时候，把字典拆包为对应的参数</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-票务管理系统\"><a href=\"#十一-11-票务管理系统\" class=\"headerlink\" title=\"十一.11_票务管理系统\"></a>十一.11_票务管理系统</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">print(&quot;1 查询所有车票&quot;)</span><br><span class=\"line\">print(&quot;2 根据开始站点,目的站点,时间来查询&quot;)</span><br><span class=\"line\">print(&quot;3 购买车票&quot;)</span><br><span class=\"line\">print(&quot;4 退票&quot;)</span><br><span class=\"line\">print(&quot;5 退出系统&quot;)</span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">tickets &#x3D; [</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:500,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;武汉&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;青岛&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;郑州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;丽江&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:600,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; input(&quot;请输入你选择的操作序号:&quot;)</span><br><span class=\"line\">    if model &#x3D;&#x3D; &quot;1&quot;:</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            print(ticket)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;2&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                print(&quot;票务信息:&quot;,ticket)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到你需要的车票信息&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;3&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        for ticket in tickets :</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end  and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                if ticket[&quot;数量&quot;] &gt; 0 :</span><br><span class=\"line\">                    ticket[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">                    print(&quot;购票成功&quot;)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    print(&quot;余票不足&quot;)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到对应的票务信息&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;4&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        price &#x3D; input(&quot;请输入票价:&quot;)</span><br><span class=\"line\">        for ticket in tickets:</span><br><span class=\"line\">            if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">                ticket[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            tickets.append(&#123;&quot;开始站点&quot;:start,&quot;目的站点&quot;:end,&quot;日期&quot;:date,&quot;票价&quot;:price,&quot;数量&quot;:1&#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        print(&quot;退票成功&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;5&quot;:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;输入序号有误，请重新输入&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-12-函数文档\"><a href=\"#十一-12-函数文档\" class=\"headerlink\" title=\"十一.12_函数文档\"></a>十一.12_函数文档</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun_a(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 这是测试函数 </span><br><span class=\"line\">        x:int</span><br><span class=\"line\">        y:int</span><br><span class=\"line\">        z:int</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(x,y,z)</span><br><span class=\"line\"></span><br><span class=\"line\">#help 查看帮助信息</span><br><span class=\"line\">print(help(fun_a))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-13-票务管理系统-函数版\"><a href=\"#十三-13-票务管理系统-函数版\" class=\"headerlink\" title=\"十三.13_票务管理系统_函数版\"></a>十三.13_票务管理系统_函数版</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">函数版</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#打印菜单</span><br><span class=\"line\">def print_menu():</span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\">    print(&quot;1 查询所有车票&quot;)</span><br><span class=\"line\">    print(&quot;2 根据开始站点,目的站点,时间来查询&quot;)</span><br><span class=\"line\">    print(&quot;3 购买车票&quot;)</span><br><span class=\"line\">    print(&quot;4 退票&quot;)</span><br><span class=\"line\">    print(&quot;5 退出系统&quot;)</span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">tickets &#x3D; [</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:500,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;广州&quot;,&quot;目的站点&quot;:&quot;武汉&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;青岛&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;郑州&quot;,&quot;目的站点&quot;:&quot;北京&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:300,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">    &#123;&quot;开始站点&quot;:&quot;北京&quot;,&quot;目的站点&quot;:&quot;丽江&quot;,&quot;日期&quot;:&quot;20200101&quot;,&quot;票价&quot;:600,&quot;数量&quot;:100&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">#查询所有车票</span><br><span class=\"line\">def query_all():</span><br><span class=\"line\">    for ticket in tickets:</span><br><span class=\"line\">        print(ticket)</span><br><span class=\"line\">        </span><br><span class=\"line\">#根据条件查询</span><br><span class=\"line\">def query_by_params(start_tmp,end_tmp,date):</span><br><span class=\"line\">     for ticket in tickets:</span><br><span class=\"line\">        if ticket[&quot;开始站点&quot;] &#x3D;&#x3D; start_tmp and ticket[&quot;目的站点&quot;] &#x3D;&#x3D; end_tmp and ticket[&quot;日期&quot;] &#x3D;&#x3D; date :</span><br><span class=\"line\">            return ticket</span><br><span class=\"line\">     return None;</span><br><span class=\"line\"></span><br><span class=\"line\">#购买车票</span><br><span class=\"line\">def buy_ticket(start_tmp,end_tmp,date):</span><br><span class=\"line\">    ticket &#x3D; query_by_params(start_tmp,end_tmp,date)</span><br><span class=\"line\">    if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">        print(&quot;没有找到对应的票务信息&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        if ticket[&quot;数量&quot;] &gt; 0 :</span><br><span class=\"line\">            ticket[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">            print(&quot;购票成功&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;余票不足&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#退票</span><br><span class=\"line\">def return_ticket(start_tmp,end_tmp,date,price):</span><br><span class=\"line\">    ticket &#x3D; query_by_params(start_tmp,end_tmp,date)</span><br><span class=\"line\">    if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">        tickets.append(&#123;&quot;开始站点&quot;:start,&quot;目的站点&quot;:end,&quot;日期&quot;:date,&quot;票价&quot;:price,&quot;数量&quot;:1&#125;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        ticket[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">    print(&quot;退票成功&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#打印菜单</span><br><span class=\"line\">print_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; input(&quot;请输入你选择的操作序号:&quot;)</span><br><span class=\"line\">    if model &#x3D;&#x3D; &quot;1&quot;:</span><br><span class=\"line\">        query_all()</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;2&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        ticket &#x3D; query_by_params(start,end,date)</span><br><span class=\"line\">        if ticket &#x3D;&#x3D; None:</span><br><span class=\"line\">            print(&quot;没有找到你需要的车票信息&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;票务信息:&quot;,ticket)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;3&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        buy_ticket(start,end,date)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;4&quot;:</span><br><span class=\"line\">        start &#x3D; input(&quot;请输入开始站点:&quot;)</span><br><span class=\"line\">        end &#x3D; input(&quot;请输入目的站点:&quot;)</span><br><span class=\"line\">        date &#x3D; input(&quot;请输入日期:&quot;)</span><br><span class=\"line\">        price &#x3D; input(&quot;请输入票价:&quot;)</span><br><span class=\"line\">        return_ticket(start,end,date,price)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; &quot;5&quot;:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;输入序号有误，请重新输入&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-14-回调函数\"><a href=\"#十四-14-回调函数\" class=\"headerlink\" title=\"十四.14_回调函数\"></a>十四.14_回调函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def send_msg():</span><br><span class=\"line\">    &quot;&quot;&quot;发送消息&quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;亲爱的，我到家了&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#回调函数，传函数名称即可</span><br><span class=\"line\">def go_home(callback):</span><br><span class=\"line\">    &quot;&quot;&quot;回家</span><br><span class=\"line\">        callback:function</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;打出租车回家了&quot;)</span><br><span class=\"line\">    print(&quot;到家了&quot;)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\"></span><br><span class=\"line\">def eat():</span><br><span class=\"line\">    print(&quot;肚子饿了，吃点方便面&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#go_home(eat)</span><br><span class=\"line\">#go_home(send_msg)</span><br><span class=\"line\"></span><br><span class=\"line\">#lambda: 匿名函数</span><br><span class=\"line\">go_home(lambda: print(&quot;再和别人去看电影&quot;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十五-15-lambda表达式\"><a href=\"#十五-15-lambda表达式\" class=\"headerlink\" title=\"十五.15_lambda表达式\"></a>十五.15_lambda表达式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用于计算两个数字的和</span><br><span class=\"line\">def sum(x,y):</span><br><span class=\"line\">    &quot;&quot;&quot;用于计算两个数字之和&quot;&quot;&quot;</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#通过 lambda表达式 可以简化代码</span><br><span class=\"line\">sum2 &#x3D; lambda x,y: x+y</span><br><span class=\"line\">print(sum(1,2))</span><br><span class=\"line\">print(sum2(3,4))</span><br><span class=\"line\"></span><br><span class=\"line\">def go_home(callback):</span><br><span class=\"line\">    print(&quot;开始执行&quot;)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">    print(&quot;完成执行&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">go_home(lambda: print(&quot;lambda函数&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">def max(x,y):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y中最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    if x &gt;&#x3D; y:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #三元运算符</span><br><span class=\"line\">    # x if x&gt;&#x3D; y   表示：默认返回x,是在x&gt;&#x3D;y的情况返回的</span><br><span class=\"line\">    # else y  表示：前边的x&gt;&#x3D;y不成立，返回的是y值</span><br><span class=\"line\">    return x if x &gt;&#x3D;y else y</span><br><span class=\"line\">    </span><br><span class=\"line\">#lambda表达式</span><br><span class=\"line\">max2 &#x3D; lambda x,y: x if x&gt;&#x3D;y else y</span><br><span class=\"line\">print(max(1,4))</span><br><span class=\"line\">print(max(1,4))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">def max3(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y,z中的最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #普通方式</span><br><span class=\"line\">    if x&gt;&#x3D; y and x&gt;&#x3D;z:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    elif y&gt;&#x3D;x and y&gt;&#x3D;z:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return z</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    #使用lambda表达式, 在不够清晰的时候，不建议使用lambda表达式</span><br><span class=\"line\">    return x if x&gt;&#x3D;y and x&gt;&#x3D;z else y if y&gt;&#x3D;x and y&gt;&#x3D;z else z</span><br><span class=\"line\">print(max3(1,3,5))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">def max4(x,y,z):</span><br><span class=\"line\">    &quot;&quot;&quot; 返回x,y,z中的最大数 &quot;&quot;&quot;</span><br><span class=\"line\">    #普通方式</span><br><span class=\"line\">    print(&quot;max4：123&quot;)</span><br><span class=\"line\">    print(&quot;max4: 456&quot;)</span><br><span class=\"line\">    if x&gt;&#x3D; y and x&gt;&#x3D;z:</span><br><span class=\"line\">        return x</span><br><span class=\"line\">    elif y&gt;&#x3D;x and y&gt;&#x3D;z:</span><br><span class=\"line\">        return y</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return z</span><br><span class=\"line\"></span><br><span class=\"line\">#在表达式中执行多个语句时，需要使用逻辑运算符 or 或者 and</span><br><span class=\"line\">max5 &#x3D; lambda x,y,z: print(&quot;max5: 123&quot;) or print(&quot;max5: 456&quot;) or (x if x&gt;&#x3D;y and x&gt;&#x3D;z else y if y&gt;&#x3D;x and y&gt;&#x3D;z else z)</span><br><span class=\"line\">print(max4(10,3,5))</span><br><span class=\"line\">print(max5(10,3,5))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十六-16-函数递归\"><a href=\"#十六-16-函数递归\" class=\"headerlink\" title=\"十六.16_函数递归\"></a>十六.16_函数递归</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#需求：计算 1 - N之间的整数加和</span><br><span class=\"line\"></span><br><span class=\"line\">#普通的循环</span><br><span class=\"line\">def sum(x):</span><br><span class=\"line\">    value &#x3D; 0</span><br><span class=\"line\">    for item in range(1,x+1):</span><br><span class=\"line\">        value +&#x3D; item</span><br><span class=\"line\">    return value</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum(10))</span><br><span class=\"line\"></span><br><span class=\"line\">#递归</span><br><span class=\"line\">def sum2(x):</span><br><span class=\"line\">    value &#x3D; 0</span><br><span class=\"line\">    if x &gt; 1:</span><br><span class=\"line\">        value &#x3D; x + sum2(x-1)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; 1</span><br><span class=\"line\">    return value</span><br><span class=\"line\">    </span><br><span class=\"line\">print(sum2(10))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十七-17-高阶函数\"><a href=\"#十七-17-高阶函数\" class=\"headerlink\" title=\"十七.17_高阶函数\"></a>十七.17_高阶函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">高阶函数定义：（满足下边两个条件之一）</span><br><span class=\"line\">1，接受一个或者多个函数作为参数</span><br><span class=\"line\">2，输出一个函数</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#高阶函数</span><br><span class=\"line\">def fun_a(callback):</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">    print(&quot;fun_a&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_b():</span><br><span class=\"line\">    print(&quot;fun_b&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">fun_a(fun_b)</span><br><span class=\"line\"></span><br><span class=\"line\">def fun_c():</span><br><span class=\"line\">    print(&quot;fun_c&quot;)</span><br><span class=\"line\">    return fun_b</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; fun_c()</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">ret()</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：将列表[1,2,3,4,5]中的每个元素都加上10，生成一个新的列表</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#for循环方式</span><br><span class=\"line\">list_a &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">list_b &#x3D; []</span><br><span class=\"line\">for item in list_a:</span><br><span class=\"line\">    list_b.append(item+10)</span><br><span class=\"line\">print(list_b)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#map方式</span><br><span class=\"line\">#map 是一个映射，接收两个参数，第一个参数为一个函数，第二个参数为序列（列表，元组）</span><br><span class=\"line\"># map的返回值是一个可迭代的对象，使用list(ret)转换为序列</span><br><span class=\"line\">list_a &#x3D; [1,2,3,4,5]</span><br><span class=\"line\">fn &#x3D; lambda x: x+10</span><br><span class=\"line\">ret &#x3D; map(fn,list_a)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">print(list(ret))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;需求二:&quot;)</span><br><span class=\"line\">print(&quot;*&quot;*50)</span><br><span class=\"line\">#将两个列表中的索引对应的元素加起来，形成一个新的列表</span><br><span class=\"line\">list_x &#x3D; [11,12,13,14,15]</span><br><span class=\"line\">list_y &#x3D; [21,22,23,24,25]</span><br><span class=\"line\">ret &#x3D; map(lambda x,y:x+y, list_x,list_y)</span><br><span class=\"line\">print(list(ret))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十八-18-高阶函数2\"><a href=\"#十八-18-高阶函数2\" class=\"headerlink\" title=\"十八.18_高阶函数2\"></a>十八.18_高阶函数2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#reduce(fn,序列) 用于做累计运算</span><br><span class=\"line\">#fn: 函数，有2个参数，返回一个值</span><br><span class=\"line\">#整体返回一个需要累计运算的值</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：计算数字列表中，所有的数字乘积</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a &#x3D; [2,4,6,8,10]</span><br><span class=\"line\">ret &#x3D; reduce(lambda x,y:x*y, list_a)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：给定一个list集合，找出所有大于80的数据</span><br><span class=\"line\"></span><br><span class=\"line\">#filter(fn,序列) ：用来做过滤</span><br><span class=\"line\">#fn: 接受一个参数，返回一个布尔值</span><br><span class=\"line\">list_b &#x3D; [112,134,34,60,100]</span><br><span class=\"line\">ret &#x3D; filter(lambda x: x&gt;&#x3D;80, list_b)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">print(list(ret))</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">总结：</span><br><span class=\"line\">高阶函数有:</span><br><span class=\"line\">map, reduce, filter, sorted</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十九-19-闭包\"><a href=\"#十九-19-闭包\" class=\"headerlink\" title=\"十九.19_闭包\"></a>十九.19_闭包</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包定义：</span><br><span class=\"line\">#1，函数A 中定义函数B</span><br><span class=\"line\">#2，函数A 返回 函数B</span><br><span class=\"line\">#3，函数B 中访问了 函数A中的变量</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：提供一个函数，用于生成一个自动增长的数字1,2,3,4</span><br><span class=\"line\"></span><br><span class=\"line\">def get_id():</span><br><span class=\"line\">    num &#x3D; 0</span><br><span class=\"line\">    def gen_id():</span><br><span class=\"line\">        #非全局变量</span><br><span class=\"line\">        nonlocal num</span><br><span class=\"line\">        num +&#x3D; 1</span><br><span class=\"line\">        return num</span><br><span class=\"line\">    return gen_id</span><br><span class=\"line\">    </span><br><span class=\"line\">callback &#x3D; get_id()</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br><span class=\"line\">print(callback())</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"05-面向对象","toc":true,"date":"2020-09-22T09:33:25.000Z","_content":"\n# 一.01_类的定义和创建\n\n```\n\"\"\"\n类名： 首字母大写，驼峰命名\n模块名称：英文小写\n函数名称: 英文小写，多个单词之间使用下划线 _\n\"\"\"\n\n\n#定义一个人类\nclass Person:\n    #pass代表先过去，以后再填充代码\n    pass\n\n\n#创建一个对象 类名()\np1 = Person()\nprint(p1)\nprint(id(p1))\nprint(type(p1))\n\np2 = Person()\n\n#isinstance ： 某个对象是否属于这个类\nprint(isinstance(p2,Person))\n\n```\n\n# 二.02_类的属性和方法\n\n```\n\"\"\"\n类 概念： 事物的特征和行为的描述\n人类：\n    特征(属性)\n        name:姓名\n        age: 年龄\n    行为(方法)\n        eat():吃饭\n        sleep():睡觉\n\"\"\"\n\n\n#定义一个人类 Person\nclass Person:\n    #定义一个初始化方法，用来设置name 和 age\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n\n    #定义一个普通的方法，定义格式和函数一样，区别：必须有一个参数self\n    def eat(self):\n        print(self)\n        print(\"吃饱喝足...玩好\")\n\n    def sleep(self):\n        print(\"好好睡觉...做个美梦\")\n\n#创建对应p1\n# p1 --> self\n# \"张三\" --> name\n# 18 --> age\np1 = Person(\"张三\",18)\nprint(\"person:\",p1.name,p1.age)\n\np1.age = 20\nprint(\"person:\",p1.name,p1.age)\n\n#将p1赋值给self\np1.eat()\np1.sleep()\n\n```\n\n# 三.03_老贾造车\n\n```\n\"\"\"\n老贾造车：\n    造车 ---> 返回{\"name\":\"FF9001\", \"speed\":260}\n    驾驶 ---> 把车的信息传入到驾驶的功能里面\n\"\"\"\n\ndef make_car(name,speed):\n    \"\"\"\n    :param name: 型号\n    :param speed: 最高时速\n    :return: 返回造好的车\n    \"\"\"\n    print(\"老贾造车\")\n    return {\"name\":name, \"speed\":speed}\n\n\ndef drive(car):\n    print(\"老周驾驶老贾造的%s车，最高时速%s\" %(car[\"name\"],car[\"speed\"]))\n\n\ndef main():\n    #造车\n    car = make_car(\"FF9001\",280)\n    #驾驶\n    drive(car)\n\nmain()\n\n```\n\n# 四.04_老贾造车_面向对象\n\n```\nclass Person:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n    #造车\n    def make_car(self,name,speed):\n        print(\"%s造车\"%self.name)\n        car = Car(name,speed)\n        return car\n\n    #驾驶\n    def drive(self, car):\n        car.run()\n        print(\"%s开着%s车,最高时速%s\"%(self.name,car.name,car.speed))\n\n\nclass Car:\n    def __init__(self,name,speed):\n        self.name = name\n        self.speed = speed\n\n    def run(self):\n        print(\"小电车正在公路上行驶着......\")\n\n\ndef main():\n    #创建Person对象, 老贾\n    p1 = Person(\"老贾\", 38)\n    #造车，返回一辆车\n    car = p1.make_car(\"FF9001\",280)\n    #老贾去驾驶这辆车\n    p1.drive(car)\n\nmain()\n\n```\n\n# 五.05_封装\n\n```\nclass Person:\n    def __init__(self, name, age):\n        #在所有的属性名称前面加上两个下划线，表示当前这个属性为私有的\n        self.__name = name\n        self.__age = age\n\n    def get_name(self):\n        self.__test()\n        return self.__name\n\n    def get_age(self):\n        return self.__age\n\n    def set_age(self,age):\n        if age <= 0:\n            age = 1\n        elif age > 120:\n            age = 120\n        self.__age = age\n\n    #私有化方法，方法的名称前面，加上双下划线\n    def __test(self):\n        print(\"test....\")\n\ndef main():\n    p1 = Person(\"张三\", 18)\n    p1.set_age(-100)\n    print(\"%s的年龄%s\"%(p1.get_name(),p1.get_age()))\n\nmain()\n\n```\n\n# 六.06_继承\n\n```\nclass Person:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n    def eat(self):\n        print(\"%s正在吃饭\"%self.name)\n\n    def sleep(self):\n        print(\"%s正在睡觉\"%self.name)\n\nclass Student(Person):\n    def __init__(self,name,age, sn):\n        #调用父类的方法\n        super().__init__(name,age)\n        self.sn = sn\n\n    def eat(self):\n        super().eat()\n        print(\"作为学生，多吃粗粮，可以长身体\")\n\n    def study(self):\n        print(\"好好学习，天天向上\")\n\ndef main():\n    s1 = Student(\"张三\",18,\"0001\")\n    print(s1)\n    print(s1.name,s1.age,s1.sn)\n\n    s1.eat()\n    s1.sleep()\n    s1.study()\n\nmain()\n\n```\n\n# 七.07_多继承\n\n```\n#水栖动物, 如果不写继承的话，默认继承object\nclass AquaticAnimal(object):\n    def __init__(self,name):\n        self.name = name\n\n    def swim(self):\n        print(\"在水中愉快的游泳\")\n\n    def sleep(self):\n        print(\"我可以在水中睡觉，屌不屌\")\n\n#陆栖动物\nclass TerrestrialAnimal:\n    def __init__(self,name):\n        self.name = name\n\n    def run(self):\n        print(\"我可以在草原上奔跑\")\n\n    def sleep(self):\n        print(\"我可以在陆地上睡觉\")\n\n#两栖动物\nclass Amphibians(TerrestrialAnimal,AquaticAnimal):\n    pass\n\ndef main():\n    #1，创建一个水栖动物\n    a1 = AquaticAnimal(\"小金鱼\")\n    a1.swim()\n    a1.sleep()\n\n    print(\"*\"*50)\n\n    #创建一个陆栖动物\n    a2 = TerrestrialAnimal(\"华南虎\")\n    a2.run()\n    a2.sleep()\n\n    print(\"*\" * 50)\n\n    #创建一个两栖动物\n    a1 = Amphibians(\"青蛙\")\n    a1.swim()\n    a1.run()\n    a1.sleep()\n\n    #获取方法的解析顺序\n    print(Amphibians.mro())\n\nmain()\n\n```\n\n# 八.08_多态_鸭子类型\n\n```\n\"\"\"\n多态： 变量a 在定义的时候类型是A, 在运行时类型是B, A是B的父类\n\n静态语言：\njava c++. C#，在编译就知道a中存放的数据类型\n\n动态语言:\npython ，没有多态， 所有变量都是没有数据类型的，在运行的时候才确定变量存放的数据类型\n\"\"\"\n\n```\n\n# 九.09_类属性\n\n```\nclass Person:\n\n    #定义类属性\n    count = 10\n\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        Person.count += 1\n\n    #类方法\n    @classmethod\n    def get_count(cls):\n        #cls代表当前的类,方法调用的时候，不需要传递参数\n        return Person.count\n\n    #静态方法\n    @staticmethod\n    def main():\n        print(\"这是静态入口函数\")\n        #......\n        print(\"静态方法执行结束\")\n\ndef main():\n    # print(Person.count)\n    # p1 = Person(\"lucy\",16)\n    # print(Person.count)\n    # p2 = Person(\"marry\",18)\n\n    # print(p1)\n    # print(p2)\n    # #访问类属性，通过 类名.属性\n    # print(Person.count)\n    #\n    # #首先会去找对象的属性，如果对象没有该属性，才会去找类属性\n    # print(p1.count)\n    # print(p2.count)\n\n    print(Person.get_count())\n\n# main()\nPerson.main()\n\n```\n\n# 十.10_构造和析构\n\n```\n\"\"\"\n构造函数: 通常指的是用来创建对象和给对象进行初始化操作的函数\n析构函数：在创建的对象进行销毁的时候需要执行的函数，用户做相关的\n        清理工作和资源的释放，它与构造函数的功能正好相反\n\n__new__: 创建对象的函数，接受一个参数cls, 字节码对象，用来创建对象，并且需要返回当前所床架你的对象\n__init__: 对创建的对象进行初始化赋值的操作\n__del__:  当一个对象在内存中被销毁的时候回执行该方法\n\n\"\"\"\n\nclass Student:\n\n    def __new__(cls, *args, **kwargs):\n        print(\"... new .... \")\n        obj = object.__new__(cls)\n        return obj\n\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"... init ....\")\n\n    #在程序结束，会释放资源, 或者 被当做垃圾回收的时候\n    def __del__(self):\n        print(\"... del ... \")\n\n    @staticmethod\n    def main():\n        s1 = Student(\"marray\",18)\n        s1 = None\n        print(\"main .... end ....\")\n\n\nStudent.main()\n\n```\n\n# 十一.11_魔法方法和魔法属性\n\n```\n\"\"\"\n魔法方法和魔法属性\n在python中，有一些内置的特定的方法，这些方法在进行特定的操作时会自动被调用，称之为魔法方法\n下面几种常见的魔法方法：\n对于魔法方式， 总是以双下划线开头，双下划线结束 例如： __方法名称__\n\"\"\"\n\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return \"Student: {'name':%s,'age':%s}\"%(self.name,self.age)\n\n    def __len__(self):\n        return len(self.name)\n\n    def __call__(self, *args, **kwargs):\n        print(\"123\")\n        print(\"456\")\n\n    @staticmethod\n    def main():\n        s1 = Student(\"lucy\",18)\n\n        #调用了 __str__ 方法\n        print(s1)\n\n        #对象是哪个类创出来的\n        print(s1.__class__)\n\n        #该类的调用顺序\n        print(Student.__mro__)\n\n        #调用了 __len__方法\n        print(len(s1))\n\n        #调用了 s1.__call__方法\n        print(s1())\n\nStudent.main()\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/05-面向对象.md","raw":"---\ntitle: 05-面向对象\ntoc: true\ndate: 2020-09-22 17:33:25\ntags:\ncategories:\n- python\n- python基础\n---\n\n# 一.01_类的定义和创建\n\n```\n\"\"\"\n类名： 首字母大写，驼峰命名\n模块名称：英文小写\n函数名称: 英文小写，多个单词之间使用下划线 _\n\"\"\"\n\n\n#定义一个人类\nclass Person:\n    #pass代表先过去，以后再填充代码\n    pass\n\n\n#创建一个对象 类名()\np1 = Person()\nprint(p1)\nprint(id(p1))\nprint(type(p1))\n\np2 = Person()\n\n#isinstance ： 某个对象是否属于这个类\nprint(isinstance(p2,Person))\n\n```\n\n# 二.02_类的属性和方法\n\n```\n\"\"\"\n类 概念： 事物的特征和行为的描述\n人类：\n    特征(属性)\n        name:姓名\n        age: 年龄\n    行为(方法)\n        eat():吃饭\n        sleep():睡觉\n\"\"\"\n\n\n#定义一个人类 Person\nclass Person:\n    #定义一个初始化方法，用来设置name 和 age\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n\n    #定义一个普通的方法，定义格式和函数一样，区别：必须有一个参数self\n    def eat(self):\n        print(self)\n        print(\"吃饱喝足...玩好\")\n\n    def sleep(self):\n        print(\"好好睡觉...做个美梦\")\n\n#创建对应p1\n# p1 --> self\n# \"张三\" --> name\n# 18 --> age\np1 = Person(\"张三\",18)\nprint(\"person:\",p1.name,p1.age)\n\np1.age = 20\nprint(\"person:\",p1.name,p1.age)\n\n#将p1赋值给self\np1.eat()\np1.sleep()\n\n```\n\n# 三.03_老贾造车\n\n```\n\"\"\"\n老贾造车：\n    造车 ---> 返回{\"name\":\"FF9001\", \"speed\":260}\n    驾驶 ---> 把车的信息传入到驾驶的功能里面\n\"\"\"\n\ndef make_car(name,speed):\n    \"\"\"\n    :param name: 型号\n    :param speed: 最高时速\n    :return: 返回造好的车\n    \"\"\"\n    print(\"老贾造车\")\n    return {\"name\":name, \"speed\":speed}\n\n\ndef drive(car):\n    print(\"老周驾驶老贾造的%s车，最高时速%s\" %(car[\"name\"],car[\"speed\"]))\n\n\ndef main():\n    #造车\n    car = make_car(\"FF9001\",280)\n    #驾驶\n    drive(car)\n\nmain()\n\n```\n\n# 四.04_老贾造车_面向对象\n\n```\nclass Person:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n    #造车\n    def make_car(self,name,speed):\n        print(\"%s造车\"%self.name)\n        car = Car(name,speed)\n        return car\n\n    #驾驶\n    def drive(self, car):\n        car.run()\n        print(\"%s开着%s车,最高时速%s\"%(self.name,car.name,car.speed))\n\n\nclass Car:\n    def __init__(self,name,speed):\n        self.name = name\n        self.speed = speed\n\n    def run(self):\n        print(\"小电车正在公路上行驶着......\")\n\n\ndef main():\n    #创建Person对象, 老贾\n    p1 = Person(\"老贾\", 38)\n    #造车，返回一辆车\n    car = p1.make_car(\"FF9001\",280)\n    #老贾去驾驶这辆车\n    p1.drive(car)\n\nmain()\n\n```\n\n# 五.05_封装\n\n```\nclass Person:\n    def __init__(self, name, age):\n        #在所有的属性名称前面加上两个下划线，表示当前这个属性为私有的\n        self.__name = name\n        self.__age = age\n\n    def get_name(self):\n        self.__test()\n        return self.__name\n\n    def get_age(self):\n        return self.__age\n\n    def set_age(self,age):\n        if age <= 0:\n            age = 1\n        elif age > 120:\n            age = 120\n        self.__age = age\n\n    #私有化方法，方法的名称前面，加上双下划线\n    def __test(self):\n        print(\"test....\")\n\ndef main():\n    p1 = Person(\"张三\", 18)\n    p1.set_age(-100)\n    print(\"%s的年龄%s\"%(p1.get_name(),p1.get_age()))\n\nmain()\n\n```\n\n# 六.06_继承\n\n```\nclass Person:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n\n    def eat(self):\n        print(\"%s正在吃饭\"%self.name)\n\n    def sleep(self):\n        print(\"%s正在睡觉\"%self.name)\n\nclass Student(Person):\n    def __init__(self,name,age, sn):\n        #调用父类的方法\n        super().__init__(name,age)\n        self.sn = sn\n\n    def eat(self):\n        super().eat()\n        print(\"作为学生，多吃粗粮，可以长身体\")\n\n    def study(self):\n        print(\"好好学习，天天向上\")\n\ndef main():\n    s1 = Student(\"张三\",18,\"0001\")\n    print(s1)\n    print(s1.name,s1.age,s1.sn)\n\n    s1.eat()\n    s1.sleep()\n    s1.study()\n\nmain()\n\n```\n\n# 七.07_多继承\n\n```\n#水栖动物, 如果不写继承的话，默认继承object\nclass AquaticAnimal(object):\n    def __init__(self,name):\n        self.name = name\n\n    def swim(self):\n        print(\"在水中愉快的游泳\")\n\n    def sleep(self):\n        print(\"我可以在水中睡觉，屌不屌\")\n\n#陆栖动物\nclass TerrestrialAnimal:\n    def __init__(self,name):\n        self.name = name\n\n    def run(self):\n        print(\"我可以在草原上奔跑\")\n\n    def sleep(self):\n        print(\"我可以在陆地上睡觉\")\n\n#两栖动物\nclass Amphibians(TerrestrialAnimal,AquaticAnimal):\n    pass\n\ndef main():\n    #1，创建一个水栖动物\n    a1 = AquaticAnimal(\"小金鱼\")\n    a1.swim()\n    a1.sleep()\n\n    print(\"*\"*50)\n\n    #创建一个陆栖动物\n    a2 = TerrestrialAnimal(\"华南虎\")\n    a2.run()\n    a2.sleep()\n\n    print(\"*\" * 50)\n\n    #创建一个两栖动物\n    a1 = Amphibians(\"青蛙\")\n    a1.swim()\n    a1.run()\n    a1.sleep()\n\n    #获取方法的解析顺序\n    print(Amphibians.mro())\n\nmain()\n\n```\n\n# 八.08_多态_鸭子类型\n\n```\n\"\"\"\n多态： 变量a 在定义的时候类型是A, 在运行时类型是B, A是B的父类\n\n静态语言：\njava c++. C#，在编译就知道a中存放的数据类型\n\n动态语言:\npython ，没有多态， 所有变量都是没有数据类型的，在运行的时候才确定变量存放的数据类型\n\"\"\"\n\n```\n\n# 九.09_类属性\n\n```\nclass Person:\n\n    #定义类属性\n    count = 10\n\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        Person.count += 1\n\n    #类方法\n    @classmethod\n    def get_count(cls):\n        #cls代表当前的类,方法调用的时候，不需要传递参数\n        return Person.count\n\n    #静态方法\n    @staticmethod\n    def main():\n        print(\"这是静态入口函数\")\n        #......\n        print(\"静态方法执行结束\")\n\ndef main():\n    # print(Person.count)\n    # p1 = Person(\"lucy\",16)\n    # print(Person.count)\n    # p2 = Person(\"marry\",18)\n\n    # print(p1)\n    # print(p2)\n    # #访问类属性，通过 类名.属性\n    # print(Person.count)\n    #\n    # #首先会去找对象的属性，如果对象没有该属性，才会去找类属性\n    # print(p1.count)\n    # print(p2.count)\n\n    print(Person.get_count())\n\n# main()\nPerson.main()\n\n```\n\n# 十.10_构造和析构\n\n```\n\"\"\"\n构造函数: 通常指的是用来创建对象和给对象进行初始化操作的函数\n析构函数：在创建的对象进行销毁的时候需要执行的函数，用户做相关的\n        清理工作和资源的释放，它与构造函数的功能正好相反\n\n__new__: 创建对象的函数，接受一个参数cls, 字节码对象，用来创建对象，并且需要返回当前所床架你的对象\n__init__: 对创建的对象进行初始化赋值的操作\n__del__:  当一个对象在内存中被销毁的时候回执行该方法\n\n\"\"\"\n\nclass Student:\n\n    def __new__(cls, *args, **kwargs):\n        print(\"... new .... \")\n        obj = object.__new__(cls)\n        return obj\n\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"... init ....\")\n\n    #在程序结束，会释放资源, 或者 被当做垃圾回收的时候\n    def __del__(self):\n        print(\"... del ... \")\n\n    @staticmethod\n    def main():\n        s1 = Student(\"marray\",18)\n        s1 = None\n        print(\"main .... end ....\")\n\n\nStudent.main()\n\n```\n\n# 十一.11_魔法方法和魔法属性\n\n```\n\"\"\"\n魔法方法和魔法属性\n在python中，有一些内置的特定的方法，这些方法在进行特定的操作时会自动被调用，称之为魔法方法\n下面几种常见的魔法方法：\n对于魔法方式， 总是以双下划线开头，双下划线结束 例如： __方法名称__\n\"\"\"\n\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return \"Student: {'name':%s,'age':%s}\"%(self.name,self.age)\n\n    def __len__(self):\n        return len(self.name)\n\n    def __call__(self, *args, **kwargs):\n        print(\"123\")\n        print(\"456\")\n\n    @staticmethod\n    def main():\n        s1 = Student(\"lucy\",18)\n\n        #调用了 __str__ 方法\n        print(s1)\n\n        #对象是哪个类创出来的\n        print(s1.__class__)\n\n        #该类的调用顺序\n        print(Student.__mro__)\n\n        #调用了 __len__方法\n        print(len(s1))\n\n        #调用了 s1.__call__方法\n        print(s1())\n\nStudent.main()\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/05-面向对象","published":1,"updated":"2020-09-23T02:20:54.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenm5008vu3s65mdbc0vs","content":"<h1 id=\"一-01-类的定义和创建\"><a href=\"#一-01-类的定义和创建\" class=\"headerlink\" title=\"一.01_类的定义和创建\"></a>一.01_类的定义和创建</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">类名： 首字母大写，驼峰命名</span><br><span class=\"line\">模块名称：英文小写</span><br><span class=\"line\">函数名称: 英文小写，多个单词之间使用下划线 _</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个人类</span><br><span class=\"line\">class Person:</span><br><span class=\"line\">    #pass代表先过去，以后再填充代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#创建一个对象 类名()</span><br><span class=\"line\">p1 &#x3D; Person()</span><br><span class=\"line\">print(p1)</span><br><span class=\"line\">print(id(p1))</span><br><span class=\"line\">print(type(p1))</span><br><span class=\"line\"></span><br><span class=\"line\">p2 &#x3D; Person()</span><br><span class=\"line\"></span><br><span class=\"line\">#isinstance ： 某个对象是否属于这个类</span><br><span class=\"line\">print(isinstance(p2,Person))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-类的属性和方法\"><a href=\"#二-02-类的属性和方法\" class=\"headerlink\" title=\"二.02_类的属性和方法\"></a>二.02_类的属性和方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">类 概念： 事物的特征和行为的描述</span><br><span class=\"line\">人类：</span><br><span class=\"line\">    特征(属性)</span><br><span class=\"line\">        name:姓名</span><br><span class=\"line\">        age: 年龄</span><br><span class=\"line\">    行为(方法)</span><br><span class=\"line\">        eat():吃饭</span><br><span class=\"line\">        sleep():睡觉</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个人类 Person</span><br><span class=\"line\">class Person:</span><br><span class=\"line\">    #定义一个初始化方法，用来设置name 和 age</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #定义一个普通的方法，定义格式和函数一样，区别：必须有一个参数self</span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        print(self)</span><br><span class=\"line\">        print(&quot;吃饱喝足...玩好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;好好睡觉...做个美梦&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#创建对应p1</span><br><span class=\"line\"># p1 --&gt; self</span><br><span class=\"line\"># &quot;张三&quot; --&gt; name</span><br><span class=\"line\"># 18 --&gt; age</span><br><span class=\"line\">p1 &#x3D; Person(&quot;张三&quot;,18)</span><br><span class=\"line\">print(&quot;person:&quot;,p1.name,p1.age)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.age &#x3D; 20</span><br><span class=\"line\">print(&quot;person:&quot;,p1.name,p1.age)</span><br><span class=\"line\"></span><br><span class=\"line\">#将p1赋值给self</span><br><span class=\"line\">p1.eat()</span><br><span class=\"line\">p1.sleep()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-老贾造车\"><a href=\"#三-03-老贾造车\" class=\"headerlink\" title=\"三.03_老贾造车\"></a>三.03_老贾造车</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">老贾造车：</span><br><span class=\"line\">    造车 ---&gt; 返回&#123;&quot;name&quot;:&quot;FF9001&quot;, &quot;speed&quot;:260&#125;</span><br><span class=\"line\">    驾驶 ---&gt; 把车的信息传入到驾驶的功能里面</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def make_car(name,speed):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    :param name: 型号</span><br><span class=\"line\">    :param speed: 最高时速</span><br><span class=\"line\">    :return: 返回造好的车</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;老贾造车&quot;)</span><br><span class=\"line\">    return &#123;&quot;name&quot;:name, &quot;speed&quot;:speed&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def drive(car):</span><br><span class=\"line\">    print(&quot;老周驾驶老贾造的%s车，最高时速%s&quot; %(car[&quot;name&quot;],car[&quot;speed&quot;]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #造车</span><br><span class=\"line\">    car &#x3D; make_car(&quot;FF9001&quot;,280)</span><br><span class=\"line\">    #驾驶</span><br><span class=\"line\">    drive(car)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-老贾造车-面向对象\"><a href=\"#四-04-老贾造车-面向对象\" class=\"headerlink\" title=\"四.04_老贾造车_面向对象\"></a>四.04_老贾造车_面向对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    #造车</span><br><span class=\"line\">    def make_car(self,name,speed):</span><br><span class=\"line\">        print(&quot;%s造车&quot;%self.name)</span><br><span class=\"line\">        car &#x3D; Car(name,speed)</span><br><span class=\"line\">        return car</span><br><span class=\"line\"></span><br><span class=\"line\">    #驾驶</span><br><span class=\"line\">    def drive(self, car):</span><br><span class=\"line\">        car.run()</span><br><span class=\"line\">        print(&quot;%s开着%s车,最高时速%s&quot;%(self.name,car.name,car.speed))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Car:</span><br><span class=\"line\">    def __init__(self,name,speed):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.speed &#x3D; speed</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        print(&quot;小电车正在公路上行驶着......&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #创建Person对象, 老贾</span><br><span class=\"line\">    p1 &#x3D; Person(&quot;老贾&quot;, 38)</span><br><span class=\"line\">    #造车，返回一辆车</span><br><span class=\"line\">    car &#x3D; p1.make_car(&quot;FF9001&quot;,280)</span><br><span class=\"line\">    #老贾去驾驶这辆车</span><br><span class=\"line\">    p1.drive(car)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-封装\"><a href=\"#五-05-封装\" class=\"headerlink\" title=\"五.05_封装\"></a>五.05_封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        #在所有的属性名称前面加上两个下划线，表示当前这个属性为私有的</span><br><span class=\"line\">        self.__name &#x3D; name</span><br><span class=\"line\">        self.__age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        self.__test()</span><br><span class=\"line\">        return self.__name</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_age(self):</span><br><span class=\"line\">        return self.__age</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_age(self,age):</span><br><span class=\"line\">        if age &lt;&#x3D; 0:</span><br><span class=\"line\">            age &#x3D; 1</span><br><span class=\"line\">        elif age &gt; 120:</span><br><span class=\"line\">            age &#x3D; 120</span><br><span class=\"line\">        self.__age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    #私有化方法，方法的名称前面，加上双下划线</span><br><span class=\"line\">    def __test(self):</span><br><span class=\"line\">        print(&quot;test....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    p1 &#x3D; Person(&quot;张三&quot;, 18)</span><br><span class=\"line\">    p1.set_age(-100)</span><br><span class=\"line\">    print(&quot;%s的年龄%s&quot;%(p1.get_name(),p1.get_age()))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-继承\"><a href=\"#六-06-继承\" class=\"headerlink\" title=\"六.06_继承\"></a>六.06_继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        print(&quot;%s正在吃饭&quot;%self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;%s正在睡觉&quot;%self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Person):</span><br><span class=\"line\">    def __init__(self,name,age, sn):</span><br><span class=\"line\">        #调用父类的方法</span><br><span class=\"line\">        super().__init__(name,age)</span><br><span class=\"line\">        self.sn &#x3D; sn</span><br><span class=\"line\"></span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        super().eat()</span><br><span class=\"line\">        print(&quot;作为学生，多吃粗粮，可以长身体&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def study(self):</span><br><span class=\"line\">        print(&quot;好好学习，天天向上&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    s1 &#x3D; Student(&quot;张三&quot;,18,&quot;0001&quot;)</span><br><span class=\"line\">    print(s1)</span><br><span class=\"line\">    print(s1.name,s1.age,s1.sn)</span><br><span class=\"line\"></span><br><span class=\"line\">    s1.eat()</span><br><span class=\"line\">    s1.sleep()</span><br><span class=\"line\">    s1.study()</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-多继承\"><a href=\"#七-07-多继承\" class=\"headerlink\" title=\"七.07_多继承\"></a>七.07_多继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#水栖动物, 如果不写继承的话，默认继承object</span><br><span class=\"line\">class AquaticAnimal(object):</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\"></span><br><span class=\"line\">    def swim(self):</span><br><span class=\"line\">        print(&quot;在水中愉快的游泳&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;我可以在水中睡觉，屌不屌&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#陆栖动物</span><br><span class=\"line\">class TerrestrialAnimal:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        print(&quot;我可以在草原上奔跑&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;我可以在陆地上睡觉&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#两栖动物</span><br><span class=\"line\">class Amphibians(TerrestrialAnimal,AquaticAnimal):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #1，创建一个水栖动物</span><br><span class=\"line\">    a1 &#x3D; AquaticAnimal(&quot;小金鱼&quot;)</span><br><span class=\"line\">    a1.swim()</span><br><span class=\"line\">    a1.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个陆栖动物</span><br><span class=\"line\">    a2 &#x3D; TerrestrialAnimal(&quot;华南虎&quot;)</span><br><span class=\"line\">    a2.run()</span><br><span class=\"line\">    a2.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot; * 50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个两栖动物</span><br><span class=\"line\">    a1 &#x3D; Amphibians(&quot;青蛙&quot;)</span><br><span class=\"line\">    a1.swim()</span><br><span class=\"line\">    a1.run()</span><br><span class=\"line\">    a1.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    #获取方法的解析顺序</span><br><span class=\"line\">    print(Amphibians.mro())</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-多态-鸭子类型\"><a href=\"#八-08-多态-鸭子类型\" class=\"headerlink\" title=\"八.08_多态_鸭子类型\"></a>八.08_多态_鸭子类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">多态： 变量a 在定义的时候类型是A, 在运行时类型是B, A是B的父类</span><br><span class=\"line\"></span><br><span class=\"line\">静态语言：</span><br><span class=\"line\">java c++. C#，在编译就知道a中存放的数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">动态语言:</span><br><span class=\"line\">python ，没有多态， 所有变量都是没有数据类型的，在运行的时候才确定变量存放的数据类型</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-类属性\"><a href=\"#九-09-类属性\" class=\"headerlink\" title=\"九.09_类属性\"></a>九.09_类属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义类属性</span><br><span class=\"line\">    count &#x3D; 10</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\">        Person.count +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">    #类方法</span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def get_count(cls):</span><br><span class=\"line\">        #cls代表当前的类,方法调用的时候，不需要传递参数</span><br><span class=\"line\">        return Person.count</span><br><span class=\"line\"></span><br><span class=\"line\">    #静态方法</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        print(&quot;这是静态入口函数&quot;)</span><br><span class=\"line\">        #......</span><br><span class=\"line\">        print(&quot;静态方法执行结束&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    # p1 &#x3D; Person(&quot;lucy&quot;,16)</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    # p2 &#x3D; Person(&quot;marry&quot;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">    # print(p1)</span><br><span class=\"line\">    # print(p2)</span><br><span class=\"line\">    # #访问类属性，通过 类名.属性</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # #首先会去找对象的属性，如果对象没有该属性，才会去找类属性</span><br><span class=\"line\">    # print(p1.count)</span><br><span class=\"line\">    # print(p2.count)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(Person.get_count())</span><br><span class=\"line\"></span><br><span class=\"line\"># main()</span><br><span class=\"line\">Person.main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-构造和析构\"><a href=\"#十-10-构造和析构\" class=\"headerlink\" title=\"十.10_构造和析构\"></a>十.10_构造和析构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">构造函数: 通常指的是用来创建对象和给对象进行初始化操作的函数</span><br><span class=\"line\">析构函数：在创建的对象进行销毁的时候需要执行的函数，用户做相关的</span><br><span class=\"line\">        清理工作和资源的释放，它与构造函数的功能正好相反</span><br><span class=\"line\"></span><br><span class=\"line\">__new__: 创建对象的函数，接受一个参数cls, 字节码对象，用来创建对象，并且需要返回当前所床架你的对象</span><br><span class=\"line\">__init__: 对创建的对象进行初始化赋值的操作</span><br><span class=\"line\">__del__:  当一个对象在内存中被销毁的时候回执行该方法</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student:</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        print(&quot;... new .... &quot;)</span><br><span class=\"line\">        obj &#x3D; object.__new__(cls)</span><br><span class=\"line\">        return obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\">        print(&quot;... init ....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    #在程序结束，会释放资源, 或者 被当做垃圾回收的时候</span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(&quot;... del ... &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        s1 &#x3D; Student(&quot;marray&quot;,18)</span><br><span class=\"line\">        s1 &#x3D; None</span><br><span class=\"line\">        print(&quot;main .... end ....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Student.main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-魔法方法和魔法属性\"><a href=\"#十一-11-魔法方法和魔法属性\" class=\"headerlink\" title=\"十一.11_魔法方法和魔法属性\"></a>十一.11_魔法方法和魔法属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">魔法方法和魔法属性</span><br><span class=\"line\">在python中，有一些内置的特定的方法，这些方法在进行特定的操作时会自动被调用，称之为魔法方法</span><br><span class=\"line\">下面几种常见的魔法方法：</span><br><span class=\"line\">对于魔法方式， 总是以双下划线开头，双下划线结束 例如： __方法名称__</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return &quot;Student: &#123;&#39;name&#39;:%s,&#39;age&#39;:%s&#125;&quot;%(self.name,self.age)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return len(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(&quot;123&quot;)</span><br><span class=\"line\">        print(&quot;456&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        s1 &#x3D; Student(&quot;lucy&quot;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 __str__ 方法</span><br><span class=\"line\">        print(s1)</span><br><span class=\"line\"></span><br><span class=\"line\">        #对象是哪个类创出来的</span><br><span class=\"line\">        print(s1.__class__)</span><br><span class=\"line\"></span><br><span class=\"line\">        #该类的调用顺序</span><br><span class=\"line\">        print(Student.__mro__)</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 __len__方法</span><br><span class=\"line\">        print(len(s1))</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 s1.__call__方法</span><br><span class=\"line\">        print(s1())</span><br><span class=\"line\"></span><br><span class=\"line\">Student.main()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-01-类的定义和创建\"><a href=\"#一-01-类的定义和创建\" class=\"headerlink\" title=\"一.01_类的定义和创建\"></a>一.01_类的定义和创建</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">类名： 首字母大写，驼峰命名</span><br><span class=\"line\">模块名称：英文小写</span><br><span class=\"line\">函数名称: 英文小写，多个单词之间使用下划线 _</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个人类</span><br><span class=\"line\">class Person:</span><br><span class=\"line\">    #pass代表先过去，以后再填充代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#创建一个对象 类名()</span><br><span class=\"line\">p1 &#x3D; Person()</span><br><span class=\"line\">print(p1)</span><br><span class=\"line\">print(id(p1))</span><br><span class=\"line\">print(type(p1))</span><br><span class=\"line\"></span><br><span class=\"line\">p2 &#x3D; Person()</span><br><span class=\"line\"></span><br><span class=\"line\">#isinstance ： 某个对象是否属于这个类</span><br><span class=\"line\">print(isinstance(p2,Person))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-类的属性和方法\"><a href=\"#二-02-类的属性和方法\" class=\"headerlink\" title=\"二.02_类的属性和方法\"></a>二.02_类的属性和方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">类 概念： 事物的特征和行为的描述</span><br><span class=\"line\">人类：</span><br><span class=\"line\">    特征(属性)</span><br><span class=\"line\">        name:姓名</span><br><span class=\"line\">        age: 年龄</span><br><span class=\"line\">    行为(方法)</span><br><span class=\"line\">        eat():吃饭</span><br><span class=\"line\">        sleep():睡觉</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#定义一个人类 Person</span><br><span class=\"line\">class Person:</span><br><span class=\"line\">    #定义一个初始化方法，用来设置name 和 age</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #定义一个普通的方法，定义格式和函数一样，区别：必须有一个参数self</span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        print(self)</span><br><span class=\"line\">        print(&quot;吃饱喝足...玩好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;好好睡觉...做个美梦&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#创建对应p1</span><br><span class=\"line\"># p1 --&gt; self</span><br><span class=\"line\"># &quot;张三&quot; --&gt; name</span><br><span class=\"line\"># 18 --&gt; age</span><br><span class=\"line\">p1 &#x3D; Person(&quot;张三&quot;,18)</span><br><span class=\"line\">print(&quot;person:&quot;,p1.name,p1.age)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.age &#x3D; 20</span><br><span class=\"line\">print(&quot;person:&quot;,p1.name,p1.age)</span><br><span class=\"line\"></span><br><span class=\"line\">#将p1赋值给self</span><br><span class=\"line\">p1.eat()</span><br><span class=\"line\">p1.sleep()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-老贾造车\"><a href=\"#三-03-老贾造车\" class=\"headerlink\" title=\"三.03_老贾造车\"></a>三.03_老贾造车</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">老贾造车：</span><br><span class=\"line\">    造车 ---&gt; 返回&#123;&quot;name&quot;:&quot;FF9001&quot;, &quot;speed&quot;:260&#125;</span><br><span class=\"line\">    驾驶 ---&gt; 把车的信息传入到驾驶的功能里面</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def make_car(name,speed):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    :param name: 型号</span><br><span class=\"line\">    :param speed: 最高时速</span><br><span class=\"line\">    :return: 返回造好的车</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    print(&quot;老贾造车&quot;)</span><br><span class=\"line\">    return &#123;&quot;name&quot;:name, &quot;speed&quot;:speed&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def drive(car):</span><br><span class=\"line\">    print(&quot;老周驾驶老贾造的%s车，最高时速%s&quot; %(car[&quot;name&quot;],car[&quot;speed&quot;]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #造车</span><br><span class=\"line\">    car &#x3D; make_car(&quot;FF9001&quot;,280)</span><br><span class=\"line\">    #驾驶</span><br><span class=\"line\">    drive(car)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-老贾造车-面向对象\"><a href=\"#四-04-老贾造车-面向对象\" class=\"headerlink\" title=\"四.04_老贾造车_面向对象\"></a>四.04_老贾造车_面向对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    #造车</span><br><span class=\"line\">    def make_car(self,name,speed):</span><br><span class=\"line\">        print(&quot;%s造车&quot;%self.name)</span><br><span class=\"line\">        car &#x3D; Car(name,speed)</span><br><span class=\"line\">        return car</span><br><span class=\"line\"></span><br><span class=\"line\">    #驾驶</span><br><span class=\"line\">    def drive(self, car):</span><br><span class=\"line\">        car.run()</span><br><span class=\"line\">        print(&quot;%s开着%s车,最高时速%s&quot;%(self.name,car.name,car.speed))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Car:</span><br><span class=\"line\">    def __init__(self,name,speed):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.speed &#x3D; speed</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        print(&quot;小电车正在公路上行驶着......&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #创建Person对象, 老贾</span><br><span class=\"line\">    p1 &#x3D; Person(&quot;老贾&quot;, 38)</span><br><span class=\"line\">    #造车，返回一辆车</span><br><span class=\"line\">    car &#x3D; p1.make_car(&quot;FF9001&quot;,280)</span><br><span class=\"line\">    #老贾去驾驶这辆车</span><br><span class=\"line\">    p1.drive(car)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-封装\"><a href=\"#五-05-封装\" class=\"headerlink\" title=\"五.05_封装\"></a>五.05_封装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        #在所有的属性名称前面加上两个下划线，表示当前这个属性为私有的</span><br><span class=\"line\">        self.__name &#x3D; name</span><br><span class=\"line\">        self.__age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        self.__test()</span><br><span class=\"line\">        return self.__name</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_age(self):</span><br><span class=\"line\">        return self.__age</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_age(self,age):</span><br><span class=\"line\">        if age &lt;&#x3D; 0:</span><br><span class=\"line\">            age &#x3D; 1</span><br><span class=\"line\">        elif age &gt; 120:</span><br><span class=\"line\">            age &#x3D; 120</span><br><span class=\"line\">        self.__age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    #私有化方法，方法的名称前面，加上双下划线</span><br><span class=\"line\">    def __test(self):</span><br><span class=\"line\">        print(&quot;test....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    p1 &#x3D; Person(&quot;张三&quot;, 18)</span><br><span class=\"line\">    p1.set_age(-100)</span><br><span class=\"line\">    print(&quot;%s的年龄%s&quot;%(p1.get_name(),p1.get_age()))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-继承\"><a href=\"#六-06-继承\" class=\"headerlink\" title=\"六.06_继承\"></a>六.06_继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        print(&quot;%s正在吃饭&quot;%self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;%s正在睡觉&quot;%self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Person):</span><br><span class=\"line\">    def __init__(self,name,age, sn):</span><br><span class=\"line\">        #调用父类的方法</span><br><span class=\"line\">        super().__init__(name,age)</span><br><span class=\"line\">        self.sn &#x3D; sn</span><br><span class=\"line\"></span><br><span class=\"line\">    def eat(self):</span><br><span class=\"line\">        super().eat()</span><br><span class=\"line\">        print(&quot;作为学生，多吃粗粮，可以长身体&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def study(self):</span><br><span class=\"line\">        print(&quot;好好学习，天天向上&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    s1 &#x3D; Student(&quot;张三&quot;,18,&quot;0001&quot;)</span><br><span class=\"line\">    print(s1)</span><br><span class=\"line\">    print(s1.name,s1.age,s1.sn)</span><br><span class=\"line\"></span><br><span class=\"line\">    s1.eat()</span><br><span class=\"line\">    s1.sleep()</span><br><span class=\"line\">    s1.study()</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-多继承\"><a href=\"#七-07-多继承\" class=\"headerlink\" title=\"七.07_多继承\"></a>七.07_多继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#水栖动物, 如果不写继承的话，默认继承object</span><br><span class=\"line\">class AquaticAnimal(object):</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\"></span><br><span class=\"line\">    def swim(self):</span><br><span class=\"line\">        print(&quot;在水中愉快的游泳&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;我可以在水中睡觉，屌不屌&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#陆栖动物</span><br><span class=\"line\">class TerrestrialAnimal:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        print(&quot;我可以在草原上奔跑&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def sleep(self):</span><br><span class=\"line\">        print(&quot;我可以在陆地上睡觉&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#两栖动物</span><br><span class=\"line\">class Amphibians(TerrestrialAnimal,AquaticAnimal):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #1，创建一个水栖动物</span><br><span class=\"line\">    a1 &#x3D; AquaticAnimal(&quot;小金鱼&quot;)</span><br><span class=\"line\">    a1.swim()</span><br><span class=\"line\">    a1.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个陆栖动物</span><br><span class=\"line\">    a2 &#x3D; TerrestrialAnimal(&quot;华南虎&quot;)</span><br><span class=\"line\">    a2.run()</span><br><span class=\"line\">    a2.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot; * 50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个两栖动物</span><br><span class=\"line\">    a1 &#x3D; Amphibians(&quot;青蛙&quot;)</span><br><span class=\"line\">    a1.swim()</span><br><span class=\"line\">    a1.run()</span><br><span class=\"line\">    a1.sleep()</span><br><span class=\"line\"></span><br><span class=\"line\">    #获取方法的解析顺序</span><br><span class=\"line\">    print(Amphibians.mro())</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-多态-鸭子类型\"><a href=\"#八-08-多态-鸭子类型\" class=\"headerlink\" title=\"八.08_多态_鸭子类型\"></a>八.08_多态_鸭子类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">多态： 变量a 在定义的时候类型是A, 在运行时类型是B, A是B的父类</span><br><span class=\"line\"></span><br><span class=\"line\">静态语言：</span><br><span class=\"line\">java c++. C#，在编译就知道a中存放的数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">动态语言:</span><br><span class=\"line\">python ，没有多态， 所有变量都是没有数据类型的，在运行的时候才确定变量存放的数据类型</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-类属性\"><a href=\"#九-09-类属性\" class=\"headerlink\" title=\"九.09_类属性\"></a>九.09_类属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person:</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义类属性</span><br><span class=\"line\">    count &#x3D; 10</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\">        Person.count +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">    #类方法</span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def get_count(cls):</span><br><span class=\"line\">        #cls代表当前的类,方法调用的时候，不需要传递参数</span><br><span class=\"line\">        return Person.count</span><br><span class=\"line\"></span><br><span class=\"line\">    #静态方法</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        print(&quot;这是静态入口函数&quot;)</span><br><span class=\"line\">        #......</span><br><span class=\"line\">        print(&quot;静态方法执行结束&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    # p1 &#x3D; Person(&quot;lucy&quot;,16)</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    # p2 &#x3D; Person(&quot;marry&quot;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">    # print(p1)</span><br><span class=\"line\">    # print(p2)</span><br><span class=\"line\">    # #访问类属性，通过 类名.属性</span><br><span class=\"line\">    # print(Person.count)</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # #首先会去找对象的属性，如果对象没有该属性，才会去找类属性</span><br><span class=\"line\">    # print(p1.count)</span><br><span class=\"line\">    # print(p2.count)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(Person.get_count())</span><br><span class=\"line\"></span><br><span class=\"line\"># main()</span><br><span class=\"line\">Person.main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-构造和析构\"><a href=\"#十-10-构造和析构\" class=\"headerlink\" title=\"十.10_构造和析构\"></a>十.10_构造和析构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">构造函数: 通常指的是用来创建对象和给对象进行初始化操作的函数</span><br><span class=\"line\">析构函数：在创建的对象进行销毁的时候需要执行的函数，用户做相关的</span><br><span class=\"line\">        清理工作和资源的释放，它与构造函数的功能正好相反</span><br><span class=\"line\"></span><br><span class=\"line\">__new__: 创建对象的函数，接受一个参数cls, 字节码对象，用来创建对象，并且需要返回当前所床架你的对象</span><br><span class=\"line\">__init__: 对创建的对象进行初始化赋值的操作</span><br><span class=\"line\">__del__:  当一个对象在内存中被销毁的时候回执行该方法</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student:</span><br><span class=\"line\"></span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        print(&quot;... new .... &quot;)</span><br><span class=\"line\">        obj &#x3D; object.__new__(cls)</span><br><span class=\"line\">        return obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\">        print(&quot;... init ....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    #在程序结束，会释放资源, 或者 被当做垃圾回收的时候</span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(&quot;... del ... &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        s1 &#x3D; Student(&quot;marray&quot;,18)</span><br><span class=\"line\">        s1 &#x3D; None</span><br><span class=\"line\">        print(&quot;main .... end ....&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Student.main()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-魔法方法和魔法属性\"><a href=\"#十一-11-魔法方法和魔法属性\" class=\"headerlink\" title=\"十一.11_魔法方法和魔法属性\"></a>十一.11_魔法方法和魔法属性</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">魔法方法和魔法属性</span><br><span class=\"line\">在python中，有一些内置的特定的方法，这些方法在进行特定的操作时会自动被调用，称之为魔法方法</span><br><span class=\"line\">下面几种常见的魔法方法：</span><br><span class=\"line\">对于魔法方式， 总是以双下划线开头，双下划线结束 例如： __方法名称__</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    def __init__(self, name, age):</span><br><span class=\"line\">        self.name &#x3D; name</span><br><span class=\"line\">        self.age &#x3D; age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return &quot;Student: &#123;&#39;name&#39;:%s,&#39;age&#39;:%s&#125;&quot;%(self.name,self.age)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return len(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(&quot;123&quot;)</span><br><span class=\"line\">        print(&quot;456&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def main():</span><br><span class=\"line\">        s1 &#x3D; Student(&quot;lucy&quot;,18)</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 __str__ 方法</span><br><span class=\"line\">        print(s1)</span><br><span class=\"line\"></span><br><span class=\"line\">        #对象是哪个类创出来的</span><br><span class=\"line\">        print(s1.__class__)</span><br><span class=\"line\"></span><br><span class=\"line\">        #该类的调用顺序</span><br><span class=\"line\">        print(Student.__mro__)</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 __len__方法</span><br><span class=\"line\">        print(len(s1))</span><br><span class=\"line\"></span><br><span class=\"line\">        #调用了 s1.__call__方法</span><br><span class=\"line\">        print(s1())</span><br><span class=\"line\"></span><br><span class=\"line\">Student.main()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"03-高级数据类型","toc":true,"date":"2020-09-22T09:32:53.000Z","_content":"\n\n# 一.01_列表的创建\n\n```\n\"\"\"\n列表的基本描述：\n1，列表的创建方式 a = [1,2,3]\n2，列表是有序的集合，可以通过索引，分片进行元素的操作\n3，列表是一个可变对象，对于列表的元素，可以进行修改，删除等操作\n4，列表中元素的数据类型可以是任意的数据类型，数字，字符串\n5，列表可以嵌套，列表中的原酸可以是列表数据类型\n6，列表中存放的是每个元素的对象的引用\n7，列表的数据的表示方式是使用一对中括号[],每个元素之间使用逗号隔开\n\"\"\"\n\nlist1 = [1,2,3]\nprint(list1)\nprint(type(list1))\nprint(len(list1))\n\n#可变对象，长度可以修改，元素可以添加，删除，修改\nlist2 = [1,2,\"a\"]\nprint(list2)\n\nlist3 = [1,2,[2,3]]\nprint(list3)\nprint(len(list3))\n\n```\n\n# 二.02_列表的索引和分片\n\n```\n\"\"\"\n\"\"\"\nlist1 = [1,2,3]\nprint(\"list1:\",list1)\n\n#索引操作\nprint(list1[1])\nlist1[1] = 100\nprint(list1)\n\n#删除\ndel list1[1]\nprint(\"删除后，list1:\",list1)\n\n#分片操作, [:]操作 【:), 前包括后不包括\nlist2 = list1[0:2]\nprint(\"list2:\",list2)\nprint(\"id,list1=，\",id(list1))\nprint(\"id,list2= \",id(list2))\n\nprint(\"=\"*50)\n\nlist1[2:2] = [4,5] \nprint(\"插入之前：\",list1)\n\n#先删除,在插入 【0:）操作，在0的位置上，插入[\"a\",\"b\",\"c\"]\nlist1[1:2] = [\"a\",\"b\",\"c\"]\nprint(list1) \n\n#只删除第0个元素\nlist1[0:1] = []\nprint(list1)\n\n#只添加操作\nlist1[0:0] = [100,200]\nprint(list1)\n\n#for 遍历\nfor item in list1:\n    print(item)\n\n```\n\n# 三.03_列表的加号和乘号\n\n```\n\"\"\"\n+ 连接符\n* 复制符号\n\"\"\"\n\n#必须是相同类型的序列， list()函数，可以将字符串分解成list\nlist1 = [1,2,3] + list(\"abc\")\nprint(list1)\n\n# * 复制符号\nlist2 = [1,[2]] * 2\nprint(list2)        # [1,[2],1,[2]]\n\n#把第一个元素改成100\nlist2[0] = 100\nprint(list2)        #[100,[2],1,[2]]\n\n#把第二个元素中的第一个元素改成200\nlist2[1][0] = 200\nprint(list2) #[100,[200],1,[200]], 这里你会发现，第2个元素和第4个元素，同时修改了值\n\nlist2[1] = [300]\nprint(list2) # 只改第2个元素\n\n```\n\n# 四.04_列表的常用方法\n\n```\n\nlist1 = [1,2,3]\n\n#append， 在末尾增加一个元素，在原来的list1的基础上进行修改，返回值是None\nret = list1.append(50)\n\n#插入 索引\nlist1.insert(1,100)\n#如果索引不在范围内，如果索引是正数，则会插入到末尾，如果是负数，则会插入到第一个元素\nlist1.insert(1000,1000)\n\n#删除，根据值来删除, 如果没有，直接报错 ValueError\n#list1.remove(500)\n\n#查询\n#返回查到的次数，如果没有，返回0\nprint(list1.count(4))\n\n#返回查到的索引，如果没有，直接报错 ValueError\nprint(list1.index(1))\n\n#返回True ，False\nprint(500 in list1)\n\n#合并两个元素\nlist1.append([\"x\",\"y\",\"z\"]) #这里是追加元素，把[\"x\",\"y\",\"z\"] 当成一个元素\nlist1.extend([\"a\",\"b\",\"c\"])  #这里是将两个列表合并，[\"x\",\"y\",\"z\"] 合并之后，成为3个元素\n\nprint(list1)\n\n#翻转,倒叙\nlist1.reverse()\nprint(list1)\n\n```\n\n# 五.05_列表推导式\n\n```\n\"\"\"\n需求：将字符串wolfcode中每一个字符取出来，放到list中\n\n#第一种方式，常见for循环\nlist1 = []\nfor item in text:\n    list1.append(item)\n\nprint(list1)\n\n\"\"\"\ntext = \"wolfcode\"\n\n#列表推导式\nlist1 = [item for item in text]\nprint(list1)\n\n#需求，将字符串 MF 和 SMLX 中每一个字符去除，交叉组成新的字符串，放到list中\n\n\"\"\"\n#for循环\nlist2 = []\nfor sex in \"MF\":\n    for size in \"SMLX\":\n       list2.append(sex+size)\n\nprint(list2)\n\"\"\"\n\n#列表推导式\n#刨除FX型号\nlist2 = [sex+size for sex in \"MF\" for size in \"SMLX\" if not (sex==\"F\" and size==\"X\")]\nprint(list2)\n\n\n```\n\n# 六.06_元组的基本操作\n\n```\n\"\"\"\n\"\"\"\n#创建元组\nt1 = (1,2,3)\nprint(len(t1))\nprint(t1)\nprint(type(t1))\n\nt2 = (1,[1,2])\nprint(t2)\n\n#元组是不可变的，这里会报错\n#t2[0] = 1000\n\n#这里是正确的，因为，元组中最后一个元素是一个列表，列表是可变的\nt2[-1][1] = 100\nprint(t2)\n\n#分片操作\nprint(\"分片:\",t1[1:])\nt1 = t1[1:]\nprint(t1)\n\n```\n\n# 七.07_元组的基本操作2\n\n```\n\"\"\"\n\"\"\"\n\nt1 = (1,2,3)\nprint(t1)\nprint(type(t1))\n\n#count()\nprint(t1.count(10))\nprint(t1.index(2))\n\nfor item in t1:\n    print(item)\n\n#元组的装包和拆包\n#在赋值符号的右边，会把多个值包装成一个元组\na = 3,4,5\nprint(a)\nprint(type(a))\n\nprint(\"=\"*50)\n\n#把一个元组拆分成三个赋值给a,b,c\n#在元组拆包的时候，变量的个数必须和元组的数据个数一致，否则报错\na,b,c = (3,4,5)\nprint(a)\nprint(b)\n\n```\n\n# 八.08_range的基本操作\n\n```\n\"\"\"\nrange是一个不可变的序列对象，主要用于生产整数的序列，\n通常是配合for循环用于生成循环次数，可以把range对象的数据\n转换为list数据\n\"\"\"\n\n#创建一个range\n#创建一个[0,10) 的一个整数的数据\nr1 = range(10)\nprint(r1)\nprint(len(r1))\nprint(type(r1))\nprint(list(r1))\n\n#有序序列\nprint(r1[0])\nprint(r1[-1])\n\nfor item in r1:\n    print(item)\n\nprint(\"=\"*50)\n\nlist1 = list(r1)\nprint(list1)\nprint(100 in r1)\n\n#生成[5,10)的range数据\nr2 = range(5,10,2)   #start,stop, step\nprint(list(r2))\n\n```\n\n# 九.09_set集合的基本操作\n\n```\n\"\"\"\nset集合：\n没有顺序，不允许元素重复\n\"\"\"\n\ns1 = {1,2,4,3}\nprint(type(s1))\nprint(len(s1))\nprint(s1)\n\n#报错\n#print(s1[0])\n\ns2 = {1,2,1,3,1,4}\nprint(s2)\n\nlist1 = {1,2,1,100,200}\ns3 = set(list1)\nprint(s3)\nprint(list(s3))\n\n#创建空集合\ns4 = set(), #并不是{},这个{}的类型是dict\nprint(type(s4))\n\n```\n\n# 十.10_set集合的常用操作\n\n```\n\"\"\"\n\"\"\"\ns1 = {1,3,2,4}\ns2 = {3,1,8,0}\ns1.add(100)\n\n#在set集合中，可以存放不可变的数据，但是对于可变的数据列表list, 集合数据set不行, 元组可以\ns1.add((200,300))\n\n#删除100这个元素\ns1.remove(100)\n\n#随机删除一个元素\n# s1.pop()\n\n#清空集合\n# s1.clear()\n\n#两个集合的交集\nprint(\"交集:\",s1 & s2)\n\n#两个集合的并集\nprint(\"并集:\",s1 | s2)\n\n#两个集合的差集\nprint(\"差集:\",s1 - s2)\n\nprint(s1)\nprint(s2)\n\n#循环遍历集合\nfor item in s1:\n    print(item)\n\nprint(\"=\"*50)\n#集合推导式\ns3 = {index for index in range(10) if index%2 == 0}\nprint(s3)\n\n```\n\n# 十一.11_字典dict的基本操作\n\n```\n\"\"\"\n字典：\n1, 创建方式 a = {\"number\":\"001\", \"score\":100}\n2, 数据是无序的，不能通过索引，分片操作，获取字典元素需要通过键来获取\n    键值对一一对应的\n3，字典是一个可变的集合，可以对字典进行添加，删除，修改等操作\n4，字典的key 通常是一个字符串类型，也可以是数字，元组等不可变类型，\n    但不能是集合set和列表list以及字典类型，但是对于字典的值可以是任意类型\n\n\"\"\"\n\nd1 = {\"姓名\":\"张三\",\"语文\":90, \"数学\":85,\"英语\":60}\nprint(d1)\nprint(len(d1))\nprint(type(d1))\n\nprint(d1[\"姓名\"])\n\n#这儿报错，key不能是list\n#d3 = {[1,2]:3}\n\n#key可以是元组\nd3 = {(1,3):3}\nprint(d3)\n\n```\n\n# 十二.12_字典dict常用方法\n\n```\n\"\"\"\n\"\"\"\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\nd2 = {\"姓名\":\"李四\",\"语文\":100,\"数学\":70,\"英语\":75}\n\nprint(d1[\"姓名\"])\n\n\n#设置总成绩，添加字段\nd1[\"总成绩\"] = 240\nd2[\"总成绩\"] = 245\n\n#修改，如果有key, 则进行修改，如果没有，则添加\nd1[\"英语\"] = 100\nd1[\"历史\"] = 75\n\n#删除\ndel d1[\"历史\"]\n\n#通过方法\nprint(\"获取成绩:\",d1.get(\"语文\"))\n#get方法，第一个参数为key值，第二个参数为默认值，如果没有key, \n#则将默认值返回\nprint(\"获取成绩:\",d1.get(\"地理\",95))\n\n#删除语文\n#d1.pop(\"语文\")\n\n#同时修改姓名和数学成绩\nd1.update([(\"姓名\",\"王五\"),(\"数学\",20)])\n\nprint(d1)\nprint(d2)\n\nprint(\"=\"*100)\n\n#把两个学生放到list集合\nlist1 = [d1,d2]\nfor item in list1:\n    print(item)\n\n#in 在字典中，用来判断key是否存在\nprint(\"姓名\" in d1)\n\n#获取所有的key\nprint(\"keys:\",d1.keys())\n\n#获取所有的value\nprint(\"values:\",d1.values())\n\n#获取所有的键值对\nprint(\"键值对:\",d1.items())\n\n```\n\n# 十三.13_字典dict推导式\n\n```\n\"\"\"\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\n需求：通过循环的方式打印所有的信息\n\"\"\"\n\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\n\nprint(\"方法一：\")\n#方法一：\nkeys = d1.keys()\nfor key in keys:\n    print(\"{0}-->{1}\".format(key,d1[key]))\n\nprint(\"方法二：\")\n#方法二：\nitems = d1.items()\n#这里本来应该是item, 通过拆包操作，将元组item拆分为key,value\nfor key,value in items:\n    print(\"{0}-->{1}\".format(key,value))\n    \n\nprint(\"方法三：\")\n#方法三, 对于字典的for=遍历，默认情况下是遍历所有的keys\nfor key in d1:\n    print(\"{0}-->{1}\".format(key,d1[key]))\n\n\n#需求2， 生成1-10之间所有数字的平法，并且对应起来 {1:1,2:4,3:9,...9:81}\nd3 = {key:key**2 for key in range(1,10)}\nprint(\"d3:\",d3)\n\n```\n\n# 十四.14_图书管理系统\n\n```\n\"\"\"\n图书管理系统\n1.查找图书\n2.借阅图书\n3.归还图书\n4.显示所有图书\n5.退出系统\n\"\"\"\n\nprint(\"=\"*50)\nprint(\"图书管理系统\")\nprint(\"1.查找图书\")\nprint(\"2.借阅图书\")\nprint(\"3.归还图书\")\nprint(\"4.显示所有图书\")\nprint(\"5.退出系统\")\nprint(\"=\"*50)\n\nbooks = [\n    {\"名称\":\"python\",\"数量\":10},\n    {\"名称\":\"java\",\"数量\":10},\n    {\"名称\":\"c\",\"数量\":10},\n]\n\nwhile True:\n    model = int(input(\"请输入你的选择序号:\"))\n    if model == 1:\n        print(\"1.查找图书\")\n        book_name = input(\"请输入图书名称:\")\n        for book in books:\n            if book_name == book[\"名称\"]:\n                print(\"找到你需要的图书信息:\",book)\n                break\n        #循环中的else, 一般都是配合break使用，当没有执行break的时候，会执行else中的语句\n        #如果执行了break,就不会执行else的语句\n        else:\n            print(\"未找到当前图书,\",book_name)\n    elif model == 2:\n        #print(\"2.借阅图书\")\n        book_name = input(\"请输入你要借阅的图书书名:\")\n        for book in books:\n            if book_name == book[\"名称\"] and book[\"数量\"] > 0:\n                print(\"借阅成功\")\n                book[\"数量\"] -= 1\n                break\n        else:\n            print(\"没有找到你需要的图书,\",book_name)\n    elif model == 3:\n        #print(\"3.归还图书\")\n        book_name = input(\"请输入你要归还的图书书名:\")\n        for book in books:\n            if book_name == book[\"名称\"] :\n                book[\"数量\"] += 1\n                break\n        else:\n            books.append({\"名称\":book_name,\"数量\":1},)\n        print(\"归还成功\")\n    elif model == 4:\n        #循环遍历图书信息\n        for book in books:\n            print(book)\n    elif model == 5:\n        break\n    else :\n        print(\"输入序号错误\")\n\n```\n\n# 十五.15_对象的拷贝\n\n```\n\"\"\"\nlist1 = [1,2,3]\nlist2 = list1;\nprint(list1)\nprint(list2)\n\n#修改list2里面的值\nprint(\"=\"*50)\nlist2[0] = 100\n\nprint(list1)\nprint(list2)\n\n#内存地址\nprint(\"list1:\",id(list1))\nprint(\"list2:\",id(list2))\n\"\"\"\n\nlist1 = [1,2,3]\nlist2 = list1[:] #通过分片操作，拷贝对象\n\nprint(list1)\nprint(list2)\n\nprint(\"=\"*50)\nlist2[0] = 100\n\nprint(list1)\nprint(list2)\n\n#内存地址\nprint(\"list1:\",id(list1))\nprint(\"list2:\",id(list2))\n\n```\n\n# 十六.16_对象的拷贝2\n\n```\n\"\"\"\n对于浅拷贝和深拷贝，在python中，有专门的copy模块，有2个方法,\ncopy 和 deepcopy\n\n#列表中没有集合元素\n#导入拷贝的模块\nimport copy\na = [1,2,3]\nb = copy.copy(a)\nprint(\"浅拷贝:\",id(a),id(b))\nb[1] = 100\nprint(a)\nprint(b)\n\"\"\"\n\n#导入拷贝的模块\nimport copy\na = [1,[2]]\nb = copy.copy(a)\n#a[1] 和 b[1] 是相同的内存地址\nprint(\"浅拷贝:\",a,b, id(a),id(b), id(a[1]),id(b[1])),\n\nc = copy.deepcopy(a)\nprint(\"深拷贝:\",a,c, id(a),id(c), id(a[1]),id(c[1])),\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/03-高级数据类型.md","raw":"---\ntitle: 03-高级数据类型\ntoc: true\ndate: 2020-09-22 17:32:53\ntags:\ncategories:\n- python\n- python基础\n---\n\n\n# 一.01_列表的创建\n\n```\n\"\"\"\n列表的基本描述：\n1，列表的创建方式 a = [1,2,3]\n2，列表是有序的集合，可以通过索引，分片进行元素的操作\n3，列表是一个可变对象，对于列表的元素，可以进行修改，删除等操作\n4，列表中元素的数据类型可以是任意的数据类型，数字，字符串\n5，列表可以嵌套，列表中的原酸可以是列表数据类型\n6，列表中存放的是每个元素的对象的引用\n7，列表的数据的表示方式是使用一对中括号[],每个元素之间使用逗号隔开\n\"\"\"\n\nlist1 = [1,2,3]\nprint(list1)\nprint(type(list1))\nprint(len(list1))\n\n#可变对象，长度可以修改，元素可以添加，删除，修改\nlist2 = [1,2,\"a\"]\nprint(list2)\n\nlist3 = [1,2,[2,3]]\nprint(list3)\nprint(len(list3))\n\n```\n\n# 二.02_列表的索引和分片\n\n```\n\"\"\"\n\"\"\"\nlist1 = [1,2,3]\nprint(\"list1:\",list1)\n\n#索引操作\nprint(list1[1])\nlist1[1] = 100\nprint(list1)\n\n#删除\ndel list1[1]\nprint(\"删除后，list1:\",list1)\n\n#分片操作, [:]操作 【:), 前包括后不包括\nlist2 = list1[0:2]\nprint(\"list2:\",list2)\nprint(\"id,list1=，\",id(list1))\nprint(\"id,list2= \",id(list2))\n\nprint(\"=\"*50)\n\nlist1[2:2] = [4,5] \nprint(\"插入之前：\",list1)\n\n#先删除,在插入 【0:）操作，在0的位置上，插入[\"a\",\"b\",\"c\"]\nlist1[1:2] = [\"a\",\"b\",\"c\"]\nprint(list1) \n\n#只删除第0个元素\nlist1[0:1] = []\nprint(list1)\n\n#只添加操作\nlist1[0:0] = [100,200]\nprint(list1)\n\n#for 遍历\nfor item in list1:\n    print(item)\n\n```\n\n# 三.03_列表的加号和乘号\n\n```\n\"\"\"\n+ 连接符\n* 复制符号\n\"\"\"\n\n#必须是相同类型的序列， list()函数，可以将字符串分解成list\nlist1 = [1,2,3] + list(\"abc\")\nprint(list1)\n\n# * 复制符号\nlist2 = [1,[2]] * 2\nprint(list2)        # [1,[2],1,[2]]\n\n#把第一个元素改成100\nlist2[0] = 100\nprint(list2)        #[100,[2],1,[2]]\n\n#把第二个元素中的第一个元素改成200\nlist2[1][0] = 200\nprint(list2) #[100,[200],1,[200]], 这里你会发现，第2个元素和第4个元素，同时修改了值\n\nlist2[1] = [300]\nprint(list2) # 只改第2个元素\n\n```\n\n# 四.04_列表的常用方法\n\n```\n\nlist1 = [1,2,3]\n\n#append， 在末尾增加一个元素，在原来的list1的基础上进行修改，返回值是None\nret = list1.append(50)\n\n#插入 索引\nlist1.insert(1,100)\n#如果索引不在范围内，如果索引是正数，则会插入到末尾，如果是负数，则会插入到第一个元素\nlist1.insert(1000,1000)\n\n#删除，根据值来删除, 如果没有，直接报错 ValueError\n#list1.remove(500)\n\n#查询\n#返回查到的次数，如果没有，返回0\nprint(list1.count(4))\n\n#返回查到的索引，如果没有，直接报错 ValueError\nprint(list1.index(1))\n\n#返回True ，False\nprint(500 in list1)\n\n#合并两个元素\nlist1.append([\"x\",\"y\",\"z\"]) #这里是追加元素，把[\"x\",\"y\",\"z\"] 当成一个元素\nlist1.extend([\"a\",\"b\",\"c\"])  #这里是将两个列表合并，[\"x\",\"y\",\"z\"] 合并之后，成为3个元素\n\nprint(list1)\n\n#翻转,倒叙\nlist1.reverse()\nprint(list1)\n\n```\n\n# 五.05_列表推导式\n\n```\n\"\"\"\n需求：将字符串wolfcode中每一个字符取出来，放到list中\n\n#第一种方式，常见for循环\nlist1 = []\nfor item in text:\n    list1.append(item)\n\nprint(list1)\n\n\"\"\"\ntext = \"wolfcode\"\n\n#列表推导式\nlist1 = [item for item in text]\nprint(list1)\n\n#需求，将字符串 MF 和 SMLX 中每一个字符去除，交叉组成新的字符串，放到list中\n\n\"\"\"\n#for循环\nlist2 = []\nfor sex in \"MF\":\n    for size in \"SMLX\":\n       list2.append(sex+size)\n\nprint(list2)\n\"\"\"\n\n#列表推导式\n#刨除FX型号\nlist2 = [sex+size for sex in \"MF\" for size in \"SMLX\" if not (sex==\"F\" and size==\"X\")]\nprint(list2)\n\n\n```\n\n# 六.06_元组的基本操作\n\n```\n\"\"\"\n\"\"\"\n#创建元组\nt1 = (1,2,3)\nprint(len(t1))\nprint(t1)\nprint(type(t1))\n\nt2 = (1,[1,2])\nprint(t2)\n\n#元组是不可变的，这里会报错\n#t2[0] = 1000\n\n#这里是正确的，因为，元组中最后一个元素是一个列表，列表是可变的\nt2[-1][1] = 100\nprint(t2)\n\n#分片操作\nprint(\"分片:\",t1[1:])\nt1 = t1[1:]\nprint(t1)\n\n```\n\n# 七.07_元组的基本操作2\n\n```\n\"\"\"\n\"\"\"\n\nt1 = (1,2,3)\nprint(t1)\nprint(type(t1))\n\n#count()\nprint(t1.count(10))\nprint(t1.index(2))\n\nfor item in t1:\n    print(item)\n\n#元组的装包和拆包\n#在赋值符号的右边，会把多个值包装成一个元组\na = 3,4,5\nprint(a)\nprint(type(a))\n\nprint(\"=\"*50)\n\n#把一个元组拆分成三个赋值给a,b,c\n#在元组拆包的时候，变量的个数必须和元组的数据个数一致，否则报错\na,b,c = (3,4,5)\nprint(a)\nprint(b)\n\n```\n\n# 八.08_range的基本操作\n\n```\n\"\"\"\nrange是一个不可变的序列对象，主要用于生产整数的序列，\n通常是配合for循环用于生成循环次数，可以把range对象的数据\n转换为list数据\n\"\"\"\n\n#创建一个range\n#创建一个[0,10) 的一个整数的数据\nr1 = range(10)\nprint(r1)\nprint(len(r1))\nprint(type(r1))\nprint(list(r1))\n\n#有序序列\nprint(r1[0])\nprint(r1[-1])\n\nfor item in r1:\n    print(item)\n\nprint(\"=\"*50)\n\nlist1 = list(r1)\nprint(list1)\nprint(100 in r1)\n\n#生成[5,10)的range数据\nr2 = range(5,10,2)   #start,stop, step\nprint(list(r2))\n\n```\n\n# 九.09_set集合的基本操作\n\n```\n\"\"\"\nset集合：\n没有顺序，不允许元素重复\n\"\"\"\n\ns1 = {1,2,4,3}\nprint(type(s1))\nprint(len(s1))\nprint(s1)\n\n#报错\n#print(s1[0])\n\ns2 = {1,2,1,3,1,4}\nprint(s2)\n\nlist1 = {1,2,1,100,200}\ns3 = set(list1)\nprint(s3)\nprint(list(s3))\n\n#创建空集合\ns4 = set(), #并不是{},这个{}的类型是dict\nprint(type(s4))\n\n```\n\n# 十.10_set集合的常用操作\n\n```\n\"\"\"\n\"\"\"\ns1 = {1,3,2,4}\ns2 = {3,1,8,0}\ns1.add(100)\n\n#在set集合中，可以存放不可变的数据，但是对于可变的数据列表list, 集合数据set不行, 元组可以\ns1.add((200,300))\n\n#删除100这个元素\ns1.remove(100)\n\n#随机删除一个元素\n# s1.pop()\n\n#清空集合\n# s1.clear()\n\n#两个集合的交集\nprint(\"交集:\",s1 & s2)\n\n#两个集合的并集\nprint(\"并集:\",s1 | s2)\n\n#两个集合的差集\nprint(\"差集:\",s1 - s2)\n\nprint(s1)\nprint(s2)\n\n#循环遍历集合\nfor item in s1:\n    print(item)\n\nprint(\"=\"*50)\n#集合推导式\ns3 = {index for index in range(10) if index%2 == 0}\nprint(s3)\n\n```\n\n# 十一.11_字典dict的基本操作\n\n```\n\"\"\"\n字典：\n1, 创建方式 a = {\"number\":\"001\", \"score\":100}\n2, 数据是无序的，不能通过索引，分片操作，获取字典元素需要通过键来获取\n    键值对一一对应的\n3，字典是一个可变的集合，可以对字典进行添加，删除，修改等操作\n4，字典的key 通常是一个字符串类型，也可以是数字，元组等不可变类型，\n    但不能是集合set和列表list以及字典类型，但是对于字典的值可以是任意类型\n\n\"\"\"\n\nd1 = {\"姓名\":\"张三\",\"语文\":90, \"数学\":85,\"英语\":60}\nprint(d1)\nprint(len(d1))\nprint(type(d1))\n\nprint(d1[\"姓名\"])\n\n#这儿报错，key不能是list\n#d3 = {[1,2]:3}\n\n#key可以是元组\nd3 = {(1,3):3}\nprint(d3)\n\n```\n\n# 十二.12_字典dict常用方法\n\n```\n\"\"\"\n\"\"\"\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\nd2 = {\"姓名\":\"李四\",\"语文\":100,\"数学\":70,\"英语\":75}\n\nprint(d1[\"姓名\"])\n\n\n#设置总成绩，添加字段\nd1[\"总成绩\"] = 240\nd2[\"总成绩\"] = 245\n\n#修改，如果有key, 则进行修改，如果没有，则添加\nd1[\"英语\"] = 100\nd1[\"历史\"] = 75\n\n#删除\ndel d1[\"历史\"]\n\n#通过方法\nprint(\"获取成绩:\",d1.get(\"语文\"))\n#get方法，第一个参数为key值，第二个参数为默认值，如果没有key, \n#则将默认值返回\nprint(\"获取成绩:\",d1.get(\"地理\",95))\n\n#删除语文\n#d1.pop(\"语文\")\n\n#同时修改姓名和数学成绩\nd1.update([(\"姓名\",\"王五\"),(\"数学\",20)])\n\nprint(d1)\nprint(d2)\n\nprint(\"=\"*100)\n\n#把两个学生放到list集合\nlist1 = [d1,d2]\nfor item in list1:\n    print(item)\n\n#in 在字典中，用来判断key是否存在\nprint(\"姓名\" in d1)\n\n#获取所有的key\nprint(\"keys:\",d1.keys())\n\n#获取所有的value\nprint(\"values:\",d1.values())\n\n#获取所有的键值对\nprint(\"键值对:\",d1.items())\n\n```\n\n# 十三.13_字典dict推导式\n\n```\n\"\"\"\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\n需求：通过循环的方式打印所有的信息\n\"\"\"\n\nd1 = {\"姓名\":\"张三\",\"语文\":90,\"数学\":85,\"英语\":60}\n\nprint(\"方法一：\")\n#方法一：\nkeys = d1.keys()\nfor key in keys:\n    print(\"{0}-->{1}\".format(key,d1[key]))\n\nprint(\"方法二：\")\n#方法二：\nitems = d1.items()\n#这里本来应该是item, 通过拆包操作，将元组item拆分为key,value\nfor key,value in items:\n    print(\"{0}-->{1}\".format(key,value))\n    \n\nprint(\"方法三：\")\n#方法三, 对于字典的for=遍历，默认情况下是遍历所有的keys\nfor key in d1:\n    print(\"{0}-->{1}\".format(key,d1[key]))\n\n\n#需求2， 生成1-10之间所有数字的平法，并且对应起来 {1:1,2:4,3:9,...9:81}\nd3 = {key:key**2 for key in range(1,10)}\nprint(\"d3:\",d3)\n\n```\n\n# 十四.14_图书管理系统\n\n```\n\"\"\"\n图书管理系统\n1.查找图书\n2.借阅图书\n3.归还图书\n4.显示所有图书\n5.退出系统\n\"\"\"\n\nprint(\"=\"*50)\nprint(\"图书管理系统\")\nprint(\"1.查找图书\")\nprint(\"2.借阅图书\")\nprint(\"3.归还图书\")\nprint(\"4.显示所有图书\")\nprint(\"5.退出系统\")\nprint(\"=\"*50)\n\nbooks = [\n    {\"名称\":\"python\",\"数量\":10},\n    {\"名称\":\"java\",\"数量\":10},\n    {\"名称\":\"c\",\"数量\":10},\n]\n\nwhile True:\n    model = int(input(\"请输入你的选择序号:\"))\n    if model == 1:\n        print(\"1.查找图书\")\n        book_name = input(\"请输入图书名称:\")\n        for book in books:\n            if book_name == book[\"名称\"]:\n                print(\"找到你需要的图书信息:\",book)\n                break\n        #循环中的else, 一般都是配合break使用，当没有执行break的时候，会执行else中的语句\n        #如果执行了break,就不会执行else的语句\n        else:\n            print(\"未找到当前图书,\",book_name)\n    elif model == 2:\n        #print(\"2.借阅图书\")\n        book_name = input(\"请输入你要借阅的图书书名:\")\n        for book in books:\n            if book_name == book[\"名称\"] and book[\"数量\"] > 0:\n                print(\"借阅成功\")\n                book[\"数量\"] -= 1\n                break\n        else:\n            print(\"没有找到你需要的图书,\",book_name)\n    elif model == 3:\n        #print(\"3.归还图书\")\n        book_name = input(\"请输入你要归还的图书书名:\")\n        for book in books:\n            if book_name == book[\"名称\"] :\n                book[\"数量\"] += 1\n                break\n        else:\n            books.append({\"名称\":book_name,\"数量\":1},)\n        print(\"归还成功\")\n    elif model == 4:\n        #循环遍历图书信息\n        for book in books:\n            print(book)\n    elif model == 5:\n        break\n    else :\n        print(\"输入序号错误\")\n\n```\n\n# 十五.15_对象的拷贝\n\n```\n\"\"\"\nlist1 = [1,2,3]\nlist2 = list1;\nprint(list1)\nprint(list2)\n\n#修改list2里面的值\nprint(\"=\"*50)\nlist2[0] = 100\n\nprint(list1)\nprint(list2)\n\n#内存地址\nprint(\"list1:\",id(list1))\nprint(\"list2:\",id(list2))\n\"\"\"\n\nlist1 = [1,2,3]\nlist2 = list1[:] #通过分片操作，拷贝对象\n\nprint(list1)\nprint(list2)\n\nprint(\"=\"*50)\nlist2[0] = 100\n\nprint(list1)\nprint(list2)\n\n#内存地址\nprint(\"list1:\",id(list1))\nprint(\"list2:\",id(list2))\n\n```\n\n# 十六.16_对象的拷贝2\n\n```\n\"\"\"\n对于浅拷贝和深拷贝，在python中，有专门的copy模块，有2个方法,\ncopy 和 deepcopy\n\n#列表中没有集合元素\n#导入拷贝的模块\nimport copy\na = [1,2,3]\nb = copy.copy(a)\nprint(\"浅拷贝:\",id(a),id(b))\nb[1] = 100\nprint(a)\nprint(b)\n\"\"\"\n\n#导入拷贝的模块\nimport copy\na = [1,[2]]\nb = copy.copy(a)\n#a[1] 和 b[1] 是相同的内存地址\nprint(\"浅拷贝:\",a,b, id(a),id(b), id(a[1]),id(b[1])),\n\nc = copy.deepcopy(a)\nprint(\"深拷贝:\",a,c, id(a),id(c), id(a[1]),id(c[1])),\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/03-高级数据类型","published":1,"updated":"2020-09-23T02:20:54.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenm6008xu3s6gzzz9stx","content":"<h1 id=\"一-01-列表的创建\"><a href=\"#一-01-列表的创建\" class=\"headerlink\" title=\"一.01_列表的创建\"></a>一.01_列表的创建</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">列表的基本描述：</span><br><span class=\"line\">1，列表的创建方式 a &#x3D; [1,2,3]</span><br><span class=\"line\">2，列表是有序的集合，可以通过索引，分片进行元素的操作</span><br><span class=\"line\">3，列表是一个可变对象，对于列表的元素，可以进行修改，删除等操作</span><br><span class=\"line\">4，列表中元素的数据类型可以是任意的数据类型，数字，字符串</span><br><span class=\"line\">5，列表可以嵌套，列表中的原酸可以是列表数据类型</span><br><span class=\"line\">6，列表中存放的是每个元素的对象的引用</span><br><span class=\"line\">7，列表的数据的表示方式是使用一对中括号[],每个元素之间使用逗号隔开</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(type(list1))</span><br><span class=\"line\">print(len(list1))</span><br><span class=\"line\"></span><br><span class=\"line\">#可变对象，长度可以修改，元素可以添加，删除，修改</span><br><span class=\"line\">list2 &#x3D; [1,2,&quot;a&quot;]</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">list3 &#x3D; [1,2,[2,3]]</span><br><span class=\"line\">print(list3)</span><br><span class=\"line\">print(len(list3))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-列表的索引和分片\"><a href=\"#二-02-列表的索引和分片\" class=\"headerlink\" title=\"二.02_列表的索引和分片\"></a>二.02_列表的索引和分片</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">print(&quot;list1:&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#索引操作</span><br><span class=\"line\">print(list1[1])</span><br><span class=\"line\">list1[1] &#x3D; 100</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">del list1[1]</span><br><span class=\"line\">print(&quot;删除后，list1:&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#分片操作, [:]操作 【:), 前包括后不包括</span><br><span class=\"line\">list2 &#x3D; list1[0:2]</span><br><span class=\"line\">print(&quot;list2:&quot;,list2)</span><br><span class=\"line\">print(&quot;id,list1&#x3D;，&quot;,id(list1))</span><br><span class=\"line\">print(&quot;id,list2&#x3D; &quot;,id(list2))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">list1[2:2] &#x3D; [4,5] </span><br><span class=\"line\">print(&quot;插入之前：&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#先删除,在插入 【0:）操作，在0的位置上，插入[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">list1[1:2] &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">print(list1) </span><br><span class=\"line\"></span><br><span class=\"line\">#只删除第0个元素</span><br><span class=\"line\">list1[0:1] &#x3D; []</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#只添加操作</span><br><span class=\"line\">list1[0:0] &#x3D; [100,200]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#for 遍历</span><br><span class=\"line\">for item in list1:</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-列表的加号和乘号\"><a href=\"#三-03-列表的加号和乘号\" class=\"headerlink\" title=\"三.03_列表的加号和乘号\"></a>三.03_列表的加号和乘号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">+ 连接符</span><br><span class=\"line\">* 复制符号</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#必须是相同类型的序列， list()函数，可以将字符串分解成list</span><br><span class=\"line\">list1 &#x3D; [1,2,3] + list(&quot;abc&quot;)</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\"># * 复制符号</span><br><span class=\"line\">list2 &#x3D; [1,[2]] * 2</span><br><span class=\"line\">print(list2)        # [1,[2],1,[2]]</span><br><span class=\"line\"></span><br><span class=\"line\">#把第一个元素改成100</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\">print(list2)        #[100,[2],1,[2]]</span><br><span class=\"line\"></span><br><span class=\"line\">#把第二个元素中的第一个元素改成200</span><br><span class=\"line\">list2[1][0] &#x3D; 200</span><br><span class=\"line\">print(list2) #[100,[200],1,[200]], 这里你会发现，第2个元素和第4个元素，同时修改了值</span><br><span class=\"line\"></span><br><span class=\"line\">list2[1] &#x3D; [300]</span><br><span class=\"line\">print(list2) # 只改第2个元素</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-列表的常用方法\"><a href=\"#四-04-列表的常用方法\" class=\"headerlink\" title=\"四.04_列表的常用方法\"></a>四.04_列表的常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">#append， 在末尾增加一个元素，在原来的list1的基础上进行修改，返回值是None</span><br><span class=\"line\">ret &#x3D; list1.append(50)</span><br><span class=\"line\"></span><br><span class=\"line\">#插入 索引</span><br><span class=\"line\">list1.insert(1,100)</span><br><span class=\"line\">#如果索引不在范围内，如果索引是正数，则会插入到末尾，如果是负数，则会插入到第一个元素</span><br><span class=\"line\">list1.insert(1000,1000)</span><br><span class=\"line\"></span><br><span class=\"line\">#删除，根据值来删除, 如果没有，直接报错 ValueError</span><br><span class=\"line\">#list1.remove(500)</span><br><span class=\"line\"></span><br><span class=\"line\">#查询</span><br><span class=\"line\">#返回查到的次数，如果没有，返回0</span><br><span class=\"line\">print(list1.count(4))</span><br><span class=\"line\"></span><br><span class=\"line\">#返回查到的索引，如果没有，直接报错 ValueError</span><br><span class=\"line\">print(list1.index(1))</span><br><span class=\"line\"></span><br><span class=\"line\">#返回True ，False</span><br><span class=\"line\">print(500 in list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#合并两个元素</span><br><span class=\"line\">list1.append([&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]) #这里是追加元素，把[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;] 当成一个元素</span><br><span class=\"line\">list1.extend([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])  #这里是将两个列表合并，[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;] 合并之后，成为3个元素</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#翻转,倒叙</span><br><span class=\"line\">list1.reverse()</span><br><span class=\"line\">print(list1)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-列表推导式\"><a href=\"#五-05-列表推导式\" class=\"headerlink\" title=\"五.05_列表推导式\"></a>五.05_列表推导式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：将字符串wolfcode中每一个字符取出来，放到list中</span><br><span class=\"line\"></span><br><span class=\"line\">#第一种方式，常见for循环</span><br><span class=\"line\">list1 &#x3D; []</span><br><span class=\"line\">for item in text:</span><br><span class=\"line\">    list1.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#列表推导式</span><br><span class=\"line\">list1 &#x3D; [item for item in text]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求，将字符串 MF 和 SMLX 中每一个字符去除，交叉组成新的字符串，放到list中</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#for循环</span><br><span class=\"line\">list2 &#x3D; []</span><br><span class=\"line\">for sex in &quot;MF&quot;:</span><br><span class=\"line\">    for size in &quot;SMLX&quot;:</span><br><span class=\"line\">       list2.append(sex+size)</span><br><span class=\"line\"></span><br><span class=\"line\">print(list2)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#列表推导式</span><br><span class=\"line\">#刨除FX型号</span><br><span class=\"line\">list2 &#x3D; [sex+size for sex in &quot;MF&quot; for size in &quot;SMLX&quot; if not (sex&#x3D;&#x3D;&quot;F&quot; and size&#x3D;&#x3D;&quot;X&quot;)]</span><br><span class=\"line\">print(list2)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-元组的基本操作\"><a href=\"#六-06-元组的基本操作\" class=\"headerlink\" title=\"六.06_元组的基本操作\"></a>六.06_元组的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#创建元组</span><br><span class=\"line\">t1 &#x3D; (1,2,3)</span><br><span class=\"line\">print(len(t1))</span><br><span class=\"line\">print(t1)</span><br><span class=\"line\">print(type(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">t2 &#x3D; (1,[1,2])</span><br><span class=\"line\">print(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">#元组是不可变的，这里会报错</span><br><span class=\"line\">#t2[0] &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\">#这里是正确的，因为，元组中最后一个元素是一个列表，列表是可变的</span><br><span class=\"line\">t2[-1][1] &#x3D; 100</span><br><span class=\"line\">print(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">#分片操作</span><br><span class=\"line\">print(&quot;分片:&quot;,t1[1:])</span><br><span class=\"line\">t1 &#x3D; t1[1:]</span><br><span class=\"line\">print(t1)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-元组的基本操作2\"><a href=\"#七-07-元组的基本操作2\" class=\"headerlink\" title=\"七.07_元组的基本操作2\"></a>七.07_元组的基本操作2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">t1 &#x3D; (1,2,3)</span><br><span class=\"line\">print(t1)</span><br><span class=\"line\">print(type(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">#count()</span><br><span class=\"line\">print(t1.count(10))</span><br><span class=\"line\">print(t1.index(2))</span><br><span class=\"line\"></span><br><span class=\"line\">for item in t1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">#元组的装包和拆包</span><br><span class=\"line\">#在赋值符号的右边，会把多个值包装成一个元组</span><br><span class=\"line\">a &#x3D; 3,4,5</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(type(a))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#把一个元组拆分成三个赋值给a,b,c</span><br><span class=\"line\">#在元组拆包的时候，变量的个数必须和元组的数据个数一致，否则报错</span><br><span class=\"line\">a,b,c &#x3D; (3,4,5)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-range的基本操作\"><a href=\"#八-08-range的基本操作\" class=\"headerlink\" title=\"八.08_range的基本操作\"></a>八.08_range的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">range是一个不可变的序列对象，主要用于生产整数的序列，</span><br><span class=\"line\">通常是配合for循环用于生成循环次数，可以把range对象的数据</span><br><span class=\"line\">转换为list数据</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#创建一个range</span><br><span class=\"line\">#创建一个[0,10) 的一个整数的数据</span><br><span class=\"line\">r1 &#x3D; range(10)</span><br><span class=\"line\">print(r1)</span><br><span class=\"line\">print(len(r1))</span><br><span class=\"line\">print(type(r1))</span><br><span class=\"line\">print(list(r1))</span><br><span class=\"line\"></span><br><span class=\"line\">#有序序列</span><br><span class=\"line\">print(r1[0])</span><br><span class=\"line\">print(r1[-1])</span><br><span class=\"line\"></span><br><span class=\"line\">for item in r1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; list(r1)</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(100 in r1)</span><br><span class=\"line\"></span><br><span class=\"line\">#生成[5,10)的range数据</span><br><span class=\"line\">r2 &#x3D; range(5,10,2)   #start,stop, step</span><br><span class=\"line\">print(list(r2))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-set集合的基本操作\"><a href=\"#九-09-set集合的基本操作\" class=\"headerlink\" title=\"九.09_set集合的基本操作\"></a>九.09_set集合的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">set集合：</span><br><span class=\"line\">没有顺序，不允许元素重复</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">s1 &#x3D; &#123;1,2,4,3&#125;</span><br><span class=\"line\">print(type(s1))</span><br><span class=\"line\">print(len(s1))</span><br><span class=\"line\">print(s1)</span><br><span class=\"line\"></span><br><span class=\"line\">#报错</span><br><span class=\"line\">#print(s1[0])</span><br><span class=\"line\"></span><br><span class=\"line\">s2 &#x3D; &#123;1,2,1,3,1,4&#125;</span><br><span class=\"line\">print(s2)</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; &#123;1,2,1,100,200&#125;</span><br><span class=\"line\">s3 &#x3D; set(list1)</span><br><span class=\"line\">print(s3)</span><br><span class=\"line\">print(list(s3))</span><br><span class=\"line\"></span><br><span class=\"line\">#创建空集合</span><br><span class=\"line\">s4 &#x3D; set(), #并不是&#123;&#125;,这个&#123;&#125;的类型是dict</span><br><span class=\"line\">print(type(s4))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-set集合的常用操作\"><a href=\"#十-10-set集合的常用操作\" class=\"headerlink\" title=\"十.10_set集合的常用操作\"></a>十.10_set集合的常用操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">s1 &#x3D; &#123;1,3,2,4&#125;</span><br><span class=\"line\">s2 &#x3D; &#123;3,1,8,0&#125;</span><br><span class=\"line\">s1.add(100)</span><br><span class=\"line\"></span><br><span class=\"line\">#在set集合中，可以存放不可变的数据，但是对于可变的数据列表list, 集合数据set不行, 元组可以</span><br><span class=\"line\">s1.add((200,300))</span><br><span class=\"line\"></span><br><span class=\"line\">#删除100这个元素</span><br><span class=\"line\">s1.remove(100)</span><br><span class=\"line\"></span><br><span class=\"line\">#随机删除一个元素</span><br><span class=\"line\"># s1.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">#清空集合</span><br><span class=\"line\"># s1.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的交集</span><br><span class=\"line\">print(&quot;交集:&quot;,s1 &amp; s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的并集</span><br><span class=\"line\">print(&quot;并集:&quot;,s1 | s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的差集</span><br><span class=\"line\">print(&quot;差集:&quot;,s1 - s2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(s1)</span><br><span class=\"line\">print(s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#循环遍历集合</span><br><span class=\"line\">for item in s1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">#集合推导式</span><br><span class=\"line\">s3 &#x3D; &#123;index for index in range(10) if index%2 &#x3D;&#x3D; 0&#125;</span><br><span class=\"line\">print(s3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-字典dict的基本操作\"><a href=\"#十一-11-字典dict的基本操作\" class=\"headerlink\" title=\"十一.11_字典dict的基本操作\"></a>十一.11_字典dict的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字典：</span><br><span class=\"line\">1, 创建方式 a &#x3D; &#123;&quot;number&quot;:&quot;001&quot;, &quot;score&quot;:100&#125;</span><br><span class=\"line\">2, 数据是无序的，不能通过索引，分片操作，获取字典元素需要通过键来获取</span><br><span class=\"line\">    键值对一一对应的</span><br><span class=\"line\">3，字典是一个可变的集合，可以对字典进行添加，删除，修改等操作</span><br><span class=\"line\">4，字典的key 通常是一个字符串类型，也可以是数字，元组等不可变类型，</span><br><span class=\"line\">    但不能是集合set和列表list以及字典类型，但是对于字典的值可以是任意类型</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90, &quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">print(d1)</span><br><span class=\"line\">print(len(d1))</span><br><span class=\"line\">print(type(d1))</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1[&quot;姓名&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">#这儿报错，key不能是list</span><br><span class=\"line\">#d3 &#x3D; &#123;[1,2]:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#key可以是元组</span><br><span class=\"line\">d3 &#x3D; &#123;(1,3):3&#125;</span><br><span class=\"line\">print(d3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十二-12-字典dict常用方法\"><a href=\"#十二-12-字典dict常用方法\" class=\"headerlink\" title=\"十二.12_字典dict常用方法\"></a>十二.12_字典dict常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">d2 &#x3D; &#123;&quot;姓名&quot;:&quot;李四&quot;,&quot;语文&quot;:100,&quot;数学&quot;:70,&quot;英语&quot;:75&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1[&quot;姓名&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#设置总成绩，添加字段</span><br><span class=\"line\">d1[&quot;总成绩&quot;] &#x3D; 240</span><br><span class=\"line\">d2[&quot;总成绩&quot;] &#x3D; 245</span><br><span class=\"line\"></span><br><span class=\"line\">#修改，如果有key, 则进行修改，如果没有，则添加</span><br><span class=\"line\">d1[&quot;英语&quot;] &#x3D; 100</span><br><span class=\"line\">d1[&quot;历史&quot;] &#x3D; 75</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">del d1[&quot;历史&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#通过方法</span><br><span class=\"line\">print(&quot;获取成绩:&quot;,d1.get(&quot;语文&quot;))</span><br><span class=\"line\">#get方法，第一个参数为key值，第二个参数为默认值，如果没有key, </span><br><span class=\"line\">#则将默认值返回</span><br><span class=\"line\">print(&quot;获取成绩:&quot;,d1.get(&quot;地理&quot;,95))</span><br><span class=\"line\"></span><br><span class=\"line\">#删除语文</span><br><span class=\"line\">#d1.pop(&quot;语文&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#同时修改姓名和数学成绩</span><br><span class=\"line\">d1.update([(&quot;姓名&quot;,&quot;王五&quot;),(&quot;数学&quot;,20)])</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1)</span><br><span class=\"line\">print(d2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*100)</span><br><span class=\"line\"></span><br><span class=\"line\">#把两个学生放到list集合</span><br><span class=\"line\">list1 &#x3D; [d1,d2]</span><br><span class=\"line\">for item in list1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">#in 在字典中，用来判断key是否存在</span><br><span class=\"line\">print(&quot;姓名&quot; in d1)</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的key</span><br><span class=\"line\">print(&quot;keys:&quot;,d1.keys())</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的value</span><br><span class=\"line\">print(&quot;values:&quot;,d1.values())</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的键值对</span><br><span class=\"line\">print(&quot;键值对:&quot;,d1.items())</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-13-字典dict推导式\"><a href=\"#十三-13-字典dict推导式\" class=\"headerlink\" title=\"十三.13_字典dict推导式\"></a>十三.13_字典dict推导式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">需求：通过循环的方式打印所有的信息</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法一：&quot;)</span><br><span class=\"line\">#方法一：</span><br><span class=\"line\">keys &#x3D; d1.keys()</span><br><span class=\"line\">for key in keys:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,d1[key]))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法二：&quot;)</span><br><span class=\"line\">#方法二：</span><br><span class=\"line\">items &#x3D; d1.items()</span><br><span class=\"line\">#这里本来应该是item, 通过拆包操作，将元组item拆分为key,value</span><br><span class=\"line\">for key,value in items:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,value))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法三：&quot;)</span><br><span class=\"line\">#方法三, 对于字典的for&#x3D;遍历，默认情况下是遍历所有的keys</span><br><span class=\"line\">for key in d1:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,d1[key]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#需求2， 生成1-10之间所有数字的平法，并且对应起来 &#123;1:1,2:4,3:9,...9:81&#125;</span><br><span class=\"line\">d3 &#x3D; &#123;key:key**2 for key in range(1,10)&#125;</span><br><span class=\"line\">print(&quot;d3:&quot;,d3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-14-图书管理系统\"><a href=\"#十四-14-图书管理系统\" class=\"headerlink\" title=\"十四.14_图书管理系统\"></a>十四.14_图书管理系统</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">图书管理系统</span><br><span class=\"line\">1.查找图书</span><br><span class=\"line\">2.借阅图书</span><br><span class=\"line\">3.归还图书</span><br><span class=\"line\">4.显示所有图书</span><br><span class=\"line\">5.退出系统</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(&quot;图书管理系统&quot;)</span><br><span class=\"line\">print(&quot;1.查找图书&quot;)</span><br><span class=\"line\">print(&quot;2.借阅图书&quot;)</span><br><span class=\"line\">print(&quot;3.归还图书&quot;)</span><br><span class=\"line\">print(&quot;4.显示所有图书&quot;)</span><br><span class=\"line\">print(&quot;5.退出系统&quot;)</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">books &#x3D; [</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;python&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;java&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;c&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; int(input(&quot;请输入你的选择序号:&quot;))</span><br><span class=\"line\">    if model &#x3D;&#x3D; 1:</span><br><span class=\"line\">        print(&quot;1.查找图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入图书名称:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;]:</span><br><span class=\"line\">                print(&quot;找到你需要的图书信息:&quot;,book)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        #循环中的else, 一般都是配合break使用，当没有执行break的时候，会执行else中的语句</span><br><span class=\"line\">        #如果执行了break,就不会执行else的语句</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;未找到当前图书,&quot;,book_name)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 2:</span><br><span class=\"line\">        #print(&quot;2.借阅图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入你要借阅的图书书名:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;] and book[&quot;数量&quot;] &gt; 0:</span><br><span class=\"line\">                print(&quot;借阅成功&quot;)</span><br><span class=\"line\">                book[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到你需要的图书,&quot;,book_name)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 3:</span><br><span class=\"line\">        #print(&quot;3.归还图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入你要归还的图书书名:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;] :</span><br><span class=\"line\">                book[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            books.append(&#123;&quot;名称&quot;:book_name,&quot;数量&quot;:1&#125;,)</span><br><span class=\"line\">        print(&quot;归还成功&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 4:</span><br><span class=\"line\">        #循环遍历图书信息</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            print(book)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 5:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else :</span><br><span class=\"line\">        print(&quot;输入序号错误&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十五-15-对象的拷贝\"><a href=\"#十五-15-对象的拷贝\" class=\"headerlink\" title=\"十五.15_对象的拷贝\"></a>十五.15_对象的拷贝</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">list2 &#x3D; list1;</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#修改list2里面的值</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#内存地址</span><br><span class=\"line\">print(&quot;list1:&quot;,id(list1))</span><br><span class=\"line\">print(&quot;list2:&quot;,id(list2))</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">list2 &#x3D; list1[:] #通过分片操作，拷贝对象</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#内存地址</span><br><span class=\"line\">print(&quot;list1:&quot;,id(list1))</span><br><span class=\"line\">print(&quot;list2:&quot;,id(list2))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十六-16-对象的拷贝2\"><a href=\"#十六-16-对象的拷贝2\" class=\"headerlink\" title=\"十六.16_对象的拷贝2\"></a>十六.16_对象的拷贝2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">对于浅拷贝和深拷贝，在python中，有专门的copy模块，有2个方法,</span><br><span class=\"line\">copy 和 deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\">#列表中没有集合元素</span><br><span class=\"line\">#导入拷贝的模块</span><br><span class=\"line\">import copy</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">b &#x3D; copy.copy(a)</span><br><span class=\"line\">print(&quot;浅拷贝:&quot;,id(a),id(b))</span><br><span class=\"line\">b[1] &#x3D; 100</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#导入拷贝的模块</span><br><span class=\"line\">import copy</span><br><span class=\"line\">a &#x3D; [1,[2]]</span><br><span class=\"line\">b &#x3D; copy.copy(a)</span><br><span class=\"line\">#a[1] 和 b[1] 是相同的内存地址</span><br><span class=\"line\">print(&quot;浅拷贝:&quot;,a,b, id(a),id(b), id(a[1]),id(b[1])),</span><br><span class=\"line\"></span><br><span class=\"line\">c &#x3D; copy.deepcopy(a)</span><br><span class=\"line\">print(&quot;深拷贝:&quot;,a,c, id(a),id(c), id(a[1]),id(c[1])),</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-01-列表的创建\"><a href=\"#一-01-列表的创建\" class=\"headerlink\" title=\"一.01_列表的创建\"></a>一.01_列表的创建</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">列表的基本描述：</span><br><span class=\"line\">1，列表的创建方式 a &#x3D; [1,2,3]</span><br><span class=\"line\">2，列表是有序的集合，可以通过索引，分片进行元素的操作</span><br><span class=\"line\">3，列表是一个可变对象，对于列表的元素，可以进行修改，删除等操作</span><br><span class=\"line\">4，列表中元素的数据类型可以是任意的数据类型，数字，字符串</span><br><span class=\"line\">5，列表可以嵌套，列表中的原酸可以是列表数据类型</span><br><span class=\"line\">6，列表中存放的是每个元素的对象的引用</span><br><span class=\"line\">7，列表的数据的表示方式是使用一对中括号[],每个元素之间使用逗号隔开</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(type(list1))</span><br><span class=\"line\">print(len(list1))</span><br><span class=\"line\"></span><br><span class=\"line\">#可变对象，长度可以修改，元素可以添加，删除，修改</span><br><span class=\"line\">list2 &#x3D; [1,2,&quot;a&quot;]</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">list3 &#x3D; [1,2,[2,3]]</span><br><span class=\"line\">print(list3)</span><br><span class=\"line\">print(len(list3))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-列表的索引和分片\"><a href=\"#二-02-列表的索引和分片\" class=\"headerlink\" title=\"二.02_列表的索引和分片\"></a>二.02_列表的索引和分片</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">print(&quot;list1:&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#索引操作</span><br><span class=\"line\">print(list1[1])</span><br><span class=\"line\">list1[1] &#x3D; 100</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">del list1[1]</span><br><span class=\"line\">print(&quot;删除后，list1:&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#分片操作, [:]操作 【:), 前包括后不包括</span><br><span class=\"line\">list2 &#x3D; list1[0:2]</span><br><span class=\"line\">print(&quot;list2:&quot;,list2)</span><br><span class=\"line\">print(&quot;id,list1&#x3D;，&quot;,id(list1))</span><br><span class=\"line\">print(&quot;id,list2&#x3D; &quot;,id(list2))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">list1[2:2] &#x3D; [4,5] </span><br><span class=\"line\">print(&quot;插入之前：&quot;,list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#先删除,在插入 【0:）操作，在0的位置上，插入[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">list1[1:2] &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class=\"line\">print(list1) </span><br><span class=\"line\"></span><br><span class=\"line\">#只删除第0个元素</span><br><span class=\"line\">list1[0:1] &#x3D; []</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#只添加操作</span><br><span class=\"line\">list1[0:0] &#x3D; [100,200]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#for 遍历</span><br><span class=\"line\">for item in list1:</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-列表的加号和乘号\"><a href=\"#三-03-列表的加号和乘号\" class=\"headerlink\" title=\"三.03_列表的加号和乘号\"></a>三.03_列表的加号和乘号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">+ 连接符</span><br><span class=\"line\">* 复制符号</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#必须是相同类型的序列， list()函数，可以将字符串分解成list</span><br><span class=\"line\">list1 &#x3D; [1,2,3] + list(&quot;abc&quot;)</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\"># * 复制符号</span><br><span class=\"line\">list2 &#x3D; [1,[2]] * 2</span><br><span class=\"line\">print(list2)        # [1,[2],1,[2]]</span><br><span class=\"line\"></span><br><span class=\"line\">#把第一个元素改成100</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\">print(list2)        #[100,[2],1,[2]]</span><br><span class=\"line\"></span><br><span class=\"line\">#把第二个元素中的第一个元素改成200</span><br><span class=\"line\">list2[1][0] &#x3D; 200</span><br><span class=\"line\">print(list2) #[100,[200],1,[200]], 这里你会发现，第2个元素和第4个元素，同时修改了值</span><br><span class=\"line\"></span><br><span class=\"line\">list2[1] &#x3D; [300]</span><br><span class=\"line\">print(list2) # 只改第2个元素</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-04-列表的常用方法\"><a href=\"#四-04-列表的常用方法\" class=\"headerlink\" title=\"四.04_列表的常用方法\"></a>四.04_列表的常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">#append， 在末尾增加一个元素，在原来的list1的基础上进行修改，返回值是None</span><br><span class=\"line\">ret &#x3D; list1.append(50)</span><br><span class=\"line\"></span><br><span class=\"line\">#插入 索引</span><br><span class=\"line\">list1.insert(1,100)</span><br><span class=\"line\">#如果索引不在范围内，如果索引是正数，则会插入到末尾，如果是负数，则会插入到第一个元素</span><br><span class=\"line\">list1.insert(1000,1000)</span><br><span class=\"line\"></span><br><span class=\"line\">#删除，根据值来删除, 如果没有，直接报错 ValueError</span><br><span class=\"line\">#list1.remove(500)</span><br><span class=\"line\"></span><br><span class=\"line\">#查询</span><br><span class=\"line\">#返回查到的次数，如果没有，返回0</span><br><span class=\"line\">print(list1.count(4))</span><br><span class=\"line\"></span><br><span class=\"line\">#返回查到的索引，如果没有，直接报错 ValueError</span><br><span class=\"line\">print(list1.index(1))</span><br><span class=\"line\"></span><br><span class=\"line\">#返回True ，False</span><br><span class=\"line\">print(500 in list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#合并两个元素</span><br><span class=\"line\">list1.append([&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]) #这里是追加元素，把[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;] 当成一个元素</span><br><span class=\"line\">list1.extend([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])  #这里是将两个列表合并，[&quot;x&quot;,&quot;y&quot;,&quot;z&quot;] 合并之后，成为3个元素</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#翻转,倒叙</span><br><span class=\"line\">list1.reverse()</span><br><span class=\"line\">print(list1)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-05-列表推导式\"><a href=\"#五-05-列表推导式\" class=\"headerlink\" title=\"五.05_列表推导式\"></a>五.05_列表推导式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">需求：将字符串wolfcode中每一个字符取出来，放到list中</span><br><span class=\"line\"></span><br><span class=\"line\">#第一种方式，常见for循环</span><br><span class=\"line\">list1 &#x3D; []</span><br><span class=\"line\">for item in text:</span><br><span class=\"line\">    list1.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">text &#x3D; &quot;wolfcode&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#列表推导式</span><br><span class=\"line\">list1 &#x3D; [item for item in text]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">#需求，将字符串 MF 和 SMLX 中每一个字符去除，交叉组成新的字符串，放到list中</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#for循环</span><br><span class=\"line\">list2 &#x3D; []</span><br><span class=\"line\">for sex in &quot;MF&quot;:</span><br><span class=\"line\">    for size in &quot;SMLX&quot;:</span><br><span class=\"line\">       list2.append(sex+size)</span><br><span class=\"line\"></span><br><span class=\"line\">print(list2)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#列表推导式</span><br><span class=\"line\">#刨除FX型号</span><br><span class=\"line\">list2 &#x3D; [sex+size for sex in &quot;MF&quot; for size in &quot;SMLX&quot; if not (sex&#x3D;&#x3D;&quot;F&quot; and size&#x3D;&#x3D;&quot;X&quot;)]</span><br><span class=\"line\">print(list2)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-元组的基本操作\"><a href=\"#六-06-元组的基本操作\" class=\"headerlink\" title=\"六.06_元组的基本操作\"></a>六.06_元组的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#创建元组</span><br><span class=\"line\">t1 &#x3D; (1,2,3)</span><br><span class=\"line\">print(len(t1))</span><br><span class=\"line\">print(t1)</span><br><span class=\"line\">print(type(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">t2 &#x3D; (1,[1,2])</span><br><span class=\"line\">print(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">#元组是不可变的，这里会报错</span><br><span class=\"line\">#t2[0] &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\">#这里是正确的，因为，元组中最后一个元素是一个列表，列表是可变的</span><br><span class=\"line\">t2[-1][1] &#x3D; 100</span><br><span class=\"line\">print(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">#分片操作</span><br><span class=\"line\">print(&quot;分片:&quot;,t1[1:])</span><br><span class=\"line\">t1 &#x3D; t1[1:]</span><br><span class=\"line\">print(t1)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-07-元组的基本操作2\"><a href=\"#七-07-元组的基本操作2\" class=\"headerlink\" title=\"七.07_元组的基本操作2\"></a>七.07_元组的基本操作2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">t1 &#x3D; (1,2,3)</span><br><span class=\"line\">print(t1)</span><br><span class=\"line\">print(type(t1))</span><br><span class=\"line\"></span><br><span class=\"line\">#count()</span><br><span class=\"line\">print(t1.count(10))</span><br><span class=\"line\">print(t1.index(2))</span><br><span class=\"line\"></span><br><span class=\"line\">for item in t1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">#元组的装包和拆包</span><br><span class=\"line\">#在赋值符号的右边，会把多个值包装成一个元组</span><br><span class=\"line\">a &#x3D; 3,4,5</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(type(a))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">#把一个元组拆分成三个赋值给a,b,c</span><br><span class=\"line\">#在元组拆包的时候，变量的个数必须和元组的数据个数一致，否则报错</span><br><span class=\"line\">a,b,c &#x3D; (3,4,5)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八-08-range的基本操作\"><a href=\"#八-08-range的基本操作\" class=\"headerlink\" title=\"八.08_range的基本操作\"></a>八.08_range的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">range是一个不可变的序列对象，主要用于生产整数的序列，</span><br><span class=\"line\">通常是配合for循环用于生成循环次数，可以把range对象的数据</span><br><span class=\"line\">转换为list数据</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#创建一个range</span><br><span class=\"line\">#创建一个[0,10) 的一个整数的数据</span><br><span class=\"line\">r1 &#x3D; range(10)</span><br><span class=\"line\">print(r1)</span><br><span class=\"line\">print(len(r1))</span><br><span class=\"line\">print(type(r1))</span><br><span class=\"line\">print(list(r1))</span><br><span class=\"line\"></span><br><span class=\"line\">#有序序列</span><br><span class=\"line\">print(r1[0])</span><br><span class=\"line\">print(r1[-1])</span><br><span class=\"line\"></span><br><span class=\"line\">for item in r1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; list(r1)</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(100 in r1)</span><br><span class=\"line\"></span><br><span class=\"line\">#生成[5,10)的range数据</span><br><span class=\"line\">r2 &#x3D; range(5,10,2)   #start,stop, step</span><br><span class=\"line\">print(list(r2))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-09-set集合的基本操作\"><a href=\"#九-09-set集合的基本操作\" class=\"headerlink\" title=\"九.09_set集合的基本操作\"></a>九.09_set集合的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">set集合：</span><br><span class=\"line\">没有顺序，不允许元素重复</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">s1 &#x3D; &#123;1,2,4,3&#125;</span><br><span class=\"line\">print(type(s1))</span><br><span class=\"line\">print(len(s1))</span><br><span class=\"line\">print(s1)</span><br><span class=\"line\"></span><br><span class=\"line\">#报错</span><br><span class=\"line\">#print(s1[0])</span><br><span class=\"line\"></span><br><span class=\"line\">s2 &#x3D; &#123;1,2,1,3,1,4&#125;</span><br><span class=\"line\">print(s2)</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; &#123;1,2,1,100,200&#125;</span><br><span class=\"line\">s3 &#x3D; set(list1)</span><br><span class=\"line\">print(s3)</span><br><span class=\"line\">print(list(s3))</span><br><span class=\"line\"></span><br><span class=\"line\">#创建空集合</span><br><span class=\"line\">s4 &#x3D; set(), #并不是&#123;&#125;,这个&#123;&#125;的类型是dict</span><br><span class=\"line\">print(type(s4))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-10-set集合的常用操作\"><a href=\"#十-10-set集合的常用操作\" class=\"headerlink\" title=\"十.10_set集合的常用操作\"></a>十.10_set集合的常用操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">s1 &#x3D; &#123;1,3,2,4&#125;</span><br><span class=\"line\">s2 &#x3D; &#123;3,1,8,0&#125;</span><br><span class=\"line\">s1.add(100)</span><br><span class=\"line\"></span><br><span class=\"line\">#在set集合中，可以存放不可变的数据，但是对于可变的数据列表list, 集合数据set不行, 元组可以</span><br><span class=\"line\">s1.add((200,300))</span><br><span class=\"line\"></span><br><span class=\"line\">#删除100这个元素</span><br><span class=\"line\">s1.remove(100)</span><br><span class=\"line\"></span><br><span class=\"line\">#随机删除一个元素</span><br><span class=\"line\"># s1.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">#清空集合</span><br><span class=\"line\"># s1.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的交集</span><br><span class=\"line\">print(&quot;交集:&quot;,s1 &amp; s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的并集</span><br><span class=\"line\">print(&quot;并集:&quot;,s1 | s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#两个集合的差集</span><br><span class=\"line\">print(&quot;差集:&quot;,s1 - s2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(s1)</span><br><span class=\"line\">print(s2)</span><br><span class=\"line\"></span><br><span class=\"line\">#循环遍历集合</span><br><span class=\"line\">for item in s1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">#集合推导式</span><br><span class=\"line\">s3 &#x3D; &#123;index for index in range(10) if index%2 &#x3D;&#x3D; 0&#125;</span><br><span class=\"line\">print(s3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-11-字典dict的基本操作\"><a href=\"#十一-11-字典dict的基本操作\" class=\"headerlink\" title=\"十一.11_字典dict的基本操作\"></a>十一.11_字典dict的基本操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">字典：</span><br><span class=\"line\">1, 创建方式 a &#x3D; &#123;&quot;number&quot;:&quot;001&quot;, &quot;score&quot;:100&#125;</span><br><span class=\"line\">2, 数据是无序的，不能通过索引，分片操作，获取字典元素需要通过键来获取</span><br><span class=\"line\">    键值对一一对应的</span><br><span class=\"line\">3，字典是一个可变的集合，可以对字典进行添加，删除，修改等操作</span><br><span class=\"line\">4，字典的key 通常是一个字符串类型，也可以是数字，元组等不可变类型，</span><br><span class=\"line\">    但不能是集合set和列表list以及字典类型，但是对于字典的值可以是任意类型</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90, &quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">print(d1)</span><br><span class=\"line\">print(len(d1))</span><br><span class=\"line\">print(type(d1))</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1[&quot;姓名&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">#这儿报错，key不能是list</span><br><span class=\"line\">#d3 &#x3D; &#123;[1,2]:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#key可以是元组</span><br><span class=\"line\">d3 &#x3D; &#123;(1,3):3&#125;</span><br><span class=\"line\">print(d3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十二-12-字典dict常用方法\"><a href=\"#十二-12-字典dict常用方法\" class=\"headerlink\" title=\"十二.12_字典dict常用方法\"></a>十二.12_字典dict常用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">d2 &#x3D; &#123;&quot;姓名&quot;:&quot;李四&quot;,&quot;语文&quot;:100,&quot;数学&quot;:70,&quot;英语&quot;:75&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1[&quot;姓名&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#设置总成绩，添加字段</span><br><span class=\"line\">d1[&quot;总成绩&quot;] &#x3D; 240</span><br><span class=\"line\">d2[&quot;总成绩&quot;] &#x3D; 245</span><br><span class=\"line\"></span><br><span class=\"line\">#修改，如果有key, 则进行修改，如果没有，则添加</span><br><span class=\"line\">d1[&quot;英语&quot;] &#x3D; 100</span><br><span class=\"line\">d1[&quot;历史&quot;] &#x3D; 75</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">del d1[&quot;历史&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#通过方法</span><br><span class=\"line\">print(&quot;获取成绩:&quot;,d1.get(&quot;语文&quot;))</span><br><span class=\"line\">#get方法，第一个参数为key值，第二个参数为默认值，如果没有key, </span><br><span class=\"line\">#则将默认值返回</span><br><span class=\"line\">print(&quot;获取成绩:&quot;,d1.get(&quot;地理&quot;,95))</span><br><span class=\"line\"></span><br><span class=\"line\">#删除语文</span><br><span class=\"line\">#d1.pop(&quot;语文&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#同时修改姓名和数学成绩</span><br><span class=\"line\">d1.update([(&quot;姓名&quot;,&quot;王五&quot;),(&quot;数学&quot;,20)])</span><br><span class=\"line\"></span><br><span class=\"line\">print(d1)</span><br><span class=\"line\">print(d2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*100)</span><br><span class=\"line\"></span><br><span class=\"line\">#把两个学生放到list集合</span><br><span class=\"line\">list1 &#x3D; [d1,d2]</span><br><span class=\"line\">for item in list1:</span><br><span class=\"line\">    print(item)</span><br><span class=\"line\"></span><br><span class=\"line\">#in 在字典中，用来判断key是否存在</span><br><span class=\"line\">print(&quot;姓名&quot; in d1)</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的key</span><br><span class=\"line\">print(&quot;keys:&quot;,d1.keys())</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的value</span><br><span class=\"line\">print(&quot;values:&quot;,d1.values())</span><br><span class=\"line\"></span><br><span class=\"line\">#获取所有的键值对</span><br><span class=\"line\">print(&quot;键值对:&quot;,d1.items())</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十三-13-字典dict推导式\"><a href=\"#十三-13-字典dict推导式\" class=\"headerlink\" title=\"十三.13_字典dict推导式\"></a>十三.13_字典dict推导式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\">需求：通过循环的方式打印所有的信息</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">d1 &#x3D; &#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;语文&quot;:90,&quot;数学&quot;:85,&quot;英语&quot;:60&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法一：&quot;)</span><br><span class=\"line\">#方法一：</span><br><span class=\"line\">keys &#x3D; d1.keys()</span><br><span class=\"line\">for key in keys:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,d1[key]))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法二：&quot;)</span><br><span class=\"line\">#方法二：</span><br><span class=\"line\">items &#x3D; d1.items()</span><br><span class=\"line\">#这里本来应该是item, 通过拆包操作，将元组item拆分为key,value</span><br><span class=\"line\">for key,value in items:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,value))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;方法三：&quot;)</span><br><span class=\"line\">#方法三, 对于字典的for&#x3D;遍历，默认情况下是遍历所有的keys</span><br><span class=\"line\">for key in d1:</span><br><span class=\"line\">    print(&quot;&#123;0&#125;--&gt;&#123;1&#125;&quot;.format(key,d1[key]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#需求2， 生成1-10之间所有数字的平法，并且对应起来 &#123;1:1,2:4,3:9,...9:81&#125;</span><br><span class=\"line\">d3 &#x3D; &#123;key:key**2 for key in range(1,10)&#125;</span><br><span class=\"line\">print(&quot;d3:&quot;,d3)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十四-14-图书管理系统\"><a href=\"#十四-14-图书管理系统\" class=\"headerlink\" title=\"十四.14_图书管理系统\"></a>十四.14_图书管理系统</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">图书管理系统</span><br><span class=\"line\">1.查找图书</span><br><span class=\"line\">2.借阅图书</span><br><span class=\"line\">3.归还图书</span><br><span class=\"line\">4.显示所有图书</span><br><span class=\"line\">5.退出系统</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">print(&quot;图书管理系统&quot;)</span><br><span class=\"line\">print(&quot;1.查找图书&quot;)</span><br><span class=\"line\">print(&quot;2.借阅图书&quot;)</span><br><span class=\"line\">print(&quot;3.归还图书&quot;)</span><br><span class=\"line\">print(&quot;4.显示所有图书&quot;)</span><br><span class=\"line\">print(&quot;5.退出系统&quot;)</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">books &#x3D; [</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;python&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;java&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">    &#123;&quot;名称&quot;:&quot;c&quot;,&quot;数量&quot;:10&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    model &#x3D; int(input(&quot;请输入你的选择序号:&quot;))</span><br><span class=\"line\">    if model &#x3D;&#x3D; 1:</span><br><span class=\"line\">        print(&quot;1.查找图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入图书名称:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;]:</span><br><span class=\"line\">                print(&quot;找到你需要的图书信息:&quot;,book)</span><br><span class=\"line\">                break</span><br><span class=\"line\">        #循环中的else, 一般都是配合break使用，当没有执行break的时候，会执行else中的语句</span><br><span class=\"line\">        #如果执行了break,就不会执行else的语句</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;未找到当前图书,&quot;,book_name)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 2:</span><br><span class=\"line\">        #print(&quot;2.借阅图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入你要借阅的图书书名:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;] and book[&quot;数量&quot;] &gt; 0:</span><br><span class=\"line\">                print(&quot;借阅成功&quot;)</span><br><span class=\"line\">                book[&quot;数量&quot;] -&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;没有找到你需要的图书,&quot;,book_name)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 3:</span><br><span class=\"line\">        #print(&quot;3.归还图书&quot;)</span><br><span class=\"line\">        book_name &#x3D; input(&quot;请输入你要归还的图书书名:&quot;)</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            if book_name &#x3D;&#x3D; book[&quot;名称&quot;] :</span><br><span class=\"line\">                book[&quot;数量&quot;] +&#x3D; 1</span><br><span class=\"line\">                break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            books.append(&#123;&quot;名称&quot;:book_name,&quot;数量&quot;:1&#125;,)</span><br><span class=\"line\">        print(&quot;归还成功&quot;)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 4:</span><br><span class=\"line\">        #循环遍历图书信息</span><br><span class=\"line\">        for book in books:</span><br><span class=\"line\">            print(book)</span><br><span class=\"line\">    elif model &#x3D;&#x3D; 5:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else :</span><br><span class=\"line\">        print(&quot;输入序号错误&quot;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十五-15-对象的拷贝\"><a href=\"#十五-15-对象的拷贝\" class=\"headerlink\" title=\"十五.15_对象的拷贝\"></a>十五.15_对象的拷贝</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">list2 &#x3D; list1;</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#修改list2里面的值</span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#内存地址</span><br><span class=\"line\">print(&quot;list1:&quot;,id(list1))</span><br><span class=\"line\">print(&quot;list2:&quot;,id(list2))</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">list1 &#x3D; [1,2,3]</span><br><span class=\"line\">list2 &#x3D; list1[:] #通过分片操作，拷贝对象</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;&#x3D;&quot;*50)</span><br><span class=\"line\">list2[0] &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">#内存地址</span><br><span class=\"line\">print(&quot;list1:&quot;,id(list1))</span><br><span class=\"line\">print(&quot;list2:&quot;,id(list2))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十六-16-对象的拷贝2\"><a href=\"#十六-16-对象的拷贝2\" class=\"headerlink\" title=\"十六.16_对象的拷贝2\"></a>十六.16_对象的拷贝2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">对于浅拷贝和深拷贝，在python中，有专门的copy模块，有2个方法,</span><br><span class=\"line\">copy 和 deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\">#列表中没有集合元素</span><br><span class=\"line\">#导入拷贝的模块</span><br><span class=\"line\">import copy</span><br><span class=\"line\">a &#x3D; [1,2,3]</span><br><span class=\"line\">b &#x3D; copy.copy(a)</span><br><span class=\"line\">print(&quot;浅拷贝:&quot;,id(a),id(b))</span><br><span class=\"line\">b[1] &#x3D; 100</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#导入拷贝的模块</span><br><span class=\"line\">import copy</span><br><span class=\"line\">a &#x3D; [1,[2]]</span><br><span class=\"line\">b &#x3D; copy.copy(a)</span><br><span class=\"line\">#a[1] 和 b[1] 是相同的内存地址</span><br><span class=\"line\">print(&quot;浅拷贝:&quot;,a,b, id(a),id(b), id(a[1]),id(b[1])),</span><br><span class=\"line\"></span><br><span class=\"line\">c &#x3D; copy.deepcopy(a)</span><br><span class=\"line\">print(&quot;深拷贝:&quot;,a,c, id(a),id(c), id(a[1]),id(c[1])),</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"06-模块","toc":true,"date":"2020-09-22T09:33:40.000Z","_content":"\n\n# 一.01_随机生成一个整数\n\n```\n#随机生成一个整数\n\n#方式一\n# import random\n# num = random.randint(1,10)\n# print(num)\n\n#方式二, 导入random模块中的randint函数\n# from random import randint\n# num2 = randint(1,5)\n# print(num2)\n\n#方式三，导入random模块中的多个函数,\n# from random import randint,choice\n#导入的函数比较多，可以使用 * 代替\nfrom random import *\nnum3 = randint(1,10)\nprint(num3)\n#随机选择序列中的一个数字\nprint(choice([1,3,5,7,9]))\n```\n\n# 二.02_导入模块\n\n```\n#导入模块,\n# import log\n# log.fun_01()\n# log.fun_02()\n\n#导入模块\n# from log import fun_01,fun_02\n# fun_01()\n# fun_02()\n\n# #导入模块的时候，多个模块，有相同的函数名\n# # 第一： 使用import 这种导入方法\n# # 第二： 要是使用了from 模块名 import 函数名 这种，可以给函数名加上一个别名\n# from util import fun_01 as logFn1,fun_02 as logFn2\n# from log import fun_01 as utilFn1,fun_02 as utilFn2\n#\n# #使用\n# logFn1()\n# logFn2()\n# utilFn1()\n# utilFn2()\n\n# from util.logutil import fun_02\n# fun_02()\n\n```\n\n# 三.03_包的管理_main\n\n```\n# #第一种导入\n# import util.logutil\n# import util.stringutil\n#\n# if __name__ == \"__main__\":\n#     util.logutil.fun_01()\n#     util.logutil.fun_02()\n#     util.stringutil.fun_01()\n#     util.stringutil.fun_02()\n\n\n#第二种方式导入\nfrom util import logutil\nfrom util import stringutil\n\nif __name__ == '__main__':\n    logutil.fun_01()\n    logutil.fun_02()\n    stringutil.fun_01()\n    stringutil.fun_02()\n\n\n```\n\n![图1](06-模块/06_001.png)\n![图1](06-模块/06_002.png)\n\n# 四.04_模块的发布\n\n```\n\"\"\"\n1, 制作一个setup.py文件\nfrom distutils.core import setup\nsetup(\n    name='util',\n    version='1.0',\n    author='wolfcode',\n    author_email='wolfcode@wolfcode.cn',\n    url='http://www.wolfcode.cn',\n    download_url='http://www.wolfcode.cn',\n    description='util module',\n    py_modules=['util.logutil','util.stringuitl']\n)\n2, 构建模块(命令行中)\npython setup.py build\n\n3, 生成发布压缩包\npython setup.py sdist\n\"\"\"\n\n```\n\n![图1](06-模块/06_003.png)\n\n# 五.05_模块的安装\n\n```\n\"\"\"\n第一种方式：\n命令行执行: pip install 模块名称\n直到看见 Successfully installed ...\n\n卸载模块： pip uninstall 模块名称\n\n第二种方式：\n去网站 https://pypi.org/ 找到对应的模块，下载 ***.whl 文件\n使用命令： pin install ***.whl\n\n第三种方式：\n使用pycharm工具安装\nfile -> settings -> Project 项目名称*** -> Python Interpreter --> 右侧+\n\n第四种方式：（源代码安装）\n去网站 https://pypi.org/ 找到对应的模块，下载 ***.tar.gz 文件\n解压到某个目录，然后命令行进入到该目录\n执行命令： python setup.py install\n\n\"\"\"\n\n```\n\n# 六.06_模块的查找路径\n\n```\nimport time\nimport random\nimport util.logutil\nimport sys\n\nif __name__ == '__main__':\n\n    #查找模块的具体位置\n    print(util.logutil.__file__)\n    print(random.__file__)\n\n    print(\"*\"*50)\n\n    #在sys中的path就指定了模块查找的路径方式\n    for item in sys.path:\n        print(item)\n\n\n    \"\"\"\n    for循环打印：\n    D:\\pzl\\wkPython\\14_模块\n    D:\\pzl\\wkPython\\14_模块\n    D:\\pzl\\yingyonganzhuang\\python37\\python37.zip\n    D:\\pzl\\yingyonganzhuang\\python37\\DLLs\n    D:\\pzl\\yingyonganzhuang\\python37\\lib\n    D:\\pzl\\yingyonganzhuang\\python37\n    D:\\pzl\\yingyonganzhuang\\python37\\lib\\site-packages\n    \"\"\"\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/06-模块.md","raw":"---\ntitle: 06-模块\ntoc: true\ndate: 2020-09-22 17:33:40\ntags:\ncategories:\n- python\n- python基础\n---\n\n\n# 一.01_随机生成一个整数\n\n```\n#随机生成一个整数\n\n#方式一\n# import random\n# num = random.randint(1,10)\n# print(num)\n\n#方式二, 导入random模块中的randint函数\n# from random import randint\n# num2 = randint(1,5)\n# print(num2)\n\n#方式三，导入random模块中的多个函数,\n# from random import randint,choice\n#导入的函数比较多，可以使用 * 代替\nfrom random import *\nnum3 = randint(1,10)\nprint(num3)\n#随机选择序列中的一个数字\nprint(choice([1,3,5,7,9]))\n```\n\n# 二.02_导入模块\n\n```\n#导入模块,\n# import log\n# log.fun_01()\n# log.fun_02()\n\n#导入模块\n# from log import fun_01,fun_02\n# fun_01()\n# fun_02()\n\n# #导入模块的时候，多个模块，有相同的函数名\n# # 第一： 使用import 这种导入方法\n# # 第二： 要是使用了from 模块名 import 函数名 这种，可以给函数名加上一个别名\n# from util import fun_01 as logFn1,fun_02 as logFn2\n# from log import fun_01 as utilFn1,fun_02 as utilFn2\n#\n# #使用\n# logFn1()\n# logFn2()\n# utilFn1()\n# utilFn2()\n\n# from util.logutil import fun_02\n# fun_02()\n\n```\n\n# 三.03_包的管理_main\n\n```\n# #第一种导入\n# import util.logutil\n# import util.stringutil\n#\n# if __name__ == \"__main__\":\n#     util.logutil.fun_01()\n#     util.logutil.fun_02()\n#     util.stringutil.fun_01()\n#     util.stringutil.fun_02()\n\n\n#第二种方式导入\nfrom util import logutil\nfrom util import stringutil\n\nif __name__ == '__main__':\n    logutil.fun_01()\n    logutil.fun_02()\n    stringutil.fun_01()\n    stringutil.fun_02()\n\n\n```\n\n![图1](06-模块/06_001.png)\n![图1](06-模块/06_002.png)\n\n# 四.04_模块的发布\n\n```\n\"\"\"\n1, 制作一个setup.py文件\nfrom distutils.core import setup\nsetup(\n    name='util',\n    version='1.0',\n    author='wolfcode',\n    author_email='wolfcode@wolfcode.cn',\n    url='http://www.wolfcode.cn',\n    download_url='http://www.wolfcode.cn',\n    description='util module',\n    py_modules=['util.logutil','util.stringuitl']\n)\n2, 构建模块(命令行中)\npython setup.py build\n\n3, 生成发布压缩包\npython setup.py sdist\n\"\"\"\n\n```\n\n![图1](06-模块/06_003.png)\n\n# 五.05_模块的安装\n\n```\n\"\"\"\n第一种方式：\n命令行执行: pip install 模块名称\n直到看见 Successfully installed ...\n\n卸载模块： pip uninstall 模块名称\n\n第二种方式：\n去网站 https://pypi.org/ 找到对应的模块，下载 ***.whl 文件\n使用命令： pin install ***.whl\n\n第三种方式：\n使用pycharm工具安装\nfile -> settings -> Project 项目名称*** -> Python Interpreter --> 右侧+\n\n第四种方式：（源代码安装）\n去网站 https://pypi.org/ 找到对应的模块，下载 ***.tar.gz 文件\n解压到某个目录，然后命令行进入到该目录\n执行命令： python setup.py install\n\n\"\"\"\n\n```\n\n# 六.06_模块的查找路径\n\n```\nimport time\nimport random\nimport util.logutil\nimport sys\n\nif __name__ == '__main__':\n\n    #查找模块的具体位置\n    print(util.logutil.__file__)\n    print(random.__file__)\n\n    print(\"*\"*50)\n\n    #在sys中的path就指定了模块查找的路径方式\n    for item in sys.path:\n        print(item)\n\n\n    \"\"\"\n    for循环打印：\n    D:\\pzl\\wkPython\\14_模块\n    D:\\pzl\\wkPython\\14_模块\n    D:\\pzl\\yingyonganzhuang\\python37\\python37.zip\n    D:\\pzl\\yingyonganzhuang\\python37\\DLLs\n    D:\\pzl\\yingyonganzhuang\\python37\\lib\n    D:\\pzl\\yingyonganzhuang\\python37\n    D:\\pzl\\yingyonganzhuang\\python37\\lib\\site-packages\n    \"\"\"\n\n```\n\n\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/06-模块","published":1,"updated":"2020-09-23T02:20:54.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenm7008zu3s6ghvt853g","content":"<h1 id=\"一-01-随机生成一个整数\"><a href=\"#一-01-随机生成一个整数\" class=\"headerlink\" title=\"一.01_随机生成一个整数\"></a>一.01_随机生成一个整数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#随机生成一个整数</span><br><span class=\"line\"></span><br><span class=\"line\">#方式一</span><br><span class=\"line\"># import random</span><br><span class=\"line\"># num &#x3D; random.randint(1,10)</span><br><span class=\"line\"># print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二, 导入random模块中的randint函数</span><br><span class=\"line\"># from random import randint</span><br><span class=\"line\"># num2 &#x3D; randint(1,5)</span><br><span class=\"line\"># print(num2)</span><br><span class=\"line\"></span><br><span class=\"line\">#方式三，导入random模块中的多个函数,</span><br><span class=\"line\"># from random import randint,choice</span><br><span class=\"line\">#导入的函数比较多，可以使用 * 代替</span><br><span class=\"line\">from random import *</span><br><span class=\"line\">num3 &#x3D; randint(1,10)</span><br><span class=\"line\">print(num3)</span><br><span class=\"line\">#随机选择序列中的一个数字</span><br><span class=\"line\">print(choice([1,3,5,7,9]))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-导入模块\"><a href=\"#二-02-导入模块\" class=\"headerlink\" title=\"二.02_导入模块\"></a>二.02_导入模块</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#导入模块,</span><br><span class=\"line\"># import log</span><br><span class=\"line\"># log.fun_01()</span><br><span class=\"line\"># log.fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\">#导入模块</span><br><span class=\"line\"># from log import fun_01,fun_02</span><br><span class=\"line\"># fun_01()</span><br><span class=\"line\"># fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\"># #导入模块的时候，多个模块，有相同的函数名</span><br><span class=\"line\"># # 第一： 使用import 这种导入方法</span><br><span class=\"line\"># # 第二： 要是使用了from 模块名 import 函数名 这种，可以给函数名加上一个别名</span><br><span class=\"line\"># from util import fun_01 as logFn1,fun_02 as logFn2</span><br><span class=\"line\"># from log import fun_01 as utilFn1,fun_02 as utilFn2</span><br><span class=\"line\">#</span><br><span class=\"line\"># #使用</span><br><span class=\"line\"># logFn1()</span><br><span class=\"line\"># logFn2()</span><br><span class=\"line\"># utilFn1()</span><br><span class=\"line\"># utilFn2()</span><br><span class=\"line\"></span><br><span class=\"line\"># from util.logutil import fun_02</span><br><span class=\"line\"># fun_02()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-包的管理-main\"><a href=\"#三-03-包的管理-main\" class=\"headerlink\" title=\"三.03_包的管理_main\"></a>三.03_包的管理_main</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #第一种导入</span><br><span class=\"line\"># import util.logutil</span><br><span class=\"line\"># import util.stringutil</span><br><span class=\"line\">#</span><br><span class=\"line\"># if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">#     util.logutil.fun_01()</span><br><span class=\"line\">#     util.logutil.fun_02()</span><br><span class=\"line\">#     util.stringutil.fun_01()</span><br><span class=\"line\">#     util.stringutil.fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#第二种方式导入</span><br><span class=\"line\">from util import logutil</span><br><span class=\"line\">from util import stringutil</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    logutil.fun_01()</span><br><span class=\"line\">    logutil.fun_02()</span><br><span class=\"line\">    stringutil.fun_01()</span><br><span class=\"line\">    stringutil.fun_02()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_001.png\" alt=\"图1\"><br><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_002.png\" alt=\"图1\"></p>\n<h1 id=\"四-04-模块的发布\"><a href=\"#四-04-模块的发布\" class=\"headerlink\" title=\"四.04_模块的发布\"></a>四.04_模块的发布</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">1, 制作一个setup.py文件</span><br><span class=\"line\">from distutils.core import setup</span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name&#x3D;&#39;util&#39;,</span><br><span class=\"line\">    version&#x3D;&#39;1.0&#39;,</span><br><span class=\"line\">    author&#x3D;&#39;wolfcode&#39;,</span><br><span class=\"line\">    author_email&#x3D;&#39;wolfcode@wolfcode.cn&#39;,</span><br><span class=\"line\">    url&#x3D;&#39;http:&#x2F;&#x2F;www.wolfcode.cn&#39;,</span><br><span class=\"line\">    download_url&#x3D;&#39;http:&#x2F;&#x2F;www.wolfcode.cn&#39;,</span><br><span class=\"line\">    description&#x3D;&#39;util module&#39;,</span><br><span class=\"line\">    py_modules&#x3D;[&#39;util.logutil&#39;,&#39;util.stringuitl&#39;]</span><br><span class=\"line\">)</span><br><span class=\"line\">2, 构建模块(命令行中)</span><br><span class=\"line\">python setup.py build</span><br><span class=\"line\"></span><br><span class=\"line\">3, 生成发布压缩包</span><br><span class=\"line\">python setup.py sdist</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_003.png\" alt=\"图1\"></p>\n<h1 id=\"五-05-模块的安装\"><a href=\"#五-05-模块的安装\" class=\"headerlink\" title=\"五.05_模块的安装\"></a>五.05_模块的安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">第一种方式：</span><br><span class=\"line\">命令行执行: pip install 模块名称</span><br><span class=\"line\">直到看见 Successfully installed ...</span><br><span class=\"line\"></span><br><span class=\"line\">卸载模块： pip uninstall 模块名称</span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式：</span><br><span class=\"line\">去网站 https:&#x2F;&#x2F;pypi.org&#x2F; 找到对应的模块，下载 ***.whl 文件</span><br><span class=\"line\">使用命令： pin install ***.whl</span><br><span class=\"line\"></span><br><span class=\"line\">第三种方式：</span><br><span class=\"line\">使用pycharm工具安装</span><br><span class=\"line\">file -&gt; settings -&gt; Project 项目名称*** -&gt; Python Interpreter --&gt; 右侧+</span><br><span class=\"line\"></span><br><span class=\"line\">第四种方式：（源代码安装）</span><br><span class=\"line\">去网站 https:&#x2F;&#x2F;pypi.org&#x2F; 找到对应的模块，下载 ***.tar.gz 文件</span><br><span class=\"line\">解压到某个目录，然后命令行进入到该目录</span><br><span class=\"line\">执行命令： python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-模块的查找路径\"><a href=\"#六-06-模块的查找路径\" class=\"headerlink\" title=\"六.06_模块的查找路径\"></a>六.06_模块的查找路径</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import util.logutil</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">    #查找模块的具体位置</span><br><span class=\"line\">    print(util.logutil.__file__)</span><br><span class=\"line\">    print(random.__file__)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #在sys中的path就指定了模块查找的路径方式</span><br><span class=\"line\">    for item in sys.path:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    for循环打印：</span><br><span class=\"line\">    D:\\pzl\\wkPython\\14_模块</span><br><span class=\"line\">    D:\\pzl\\wkPython\\14_模块</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\python37.zip</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\DLLs</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\lib</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\lib\\site-packages</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-01-随机生成一个整数\"><a href=\"#一-01-随机生成一个整数\" class=\"headerlink\" title=\"一.01_随机生成一个整数\"></a>一.01_随机生成一个整数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#随机生成一个整数</span><br><span class=\"line\"></span><br><span class=\"line\">#方式一</span><br><span class=\"line\"># import random</span><br><span class=\"line\"># num &#x3D; random.randint(1,10)</span><br><span class=\"line\"># print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二, 导入random模块中的randint函数</span><br><span class=\"line\"># from random import randint</span><br><span class=\"line\"># num2 &#x3D; randint(1,5)</span><br><span class=\"line\"># print(num2)</span><br><span class=\"line\"></span><br><span class=\"line\">#方式三，导入random模块中的多个函数,</span><br><span class=\"line\"># from random import randint,choice</span><br><span class=\"line\">#导入的函数比较多，可以使用 * 代替</span><br><span class=\"line\">from random import *</span><br><span class=\"line\">num3 &#x3D; randint(1,10)</span><br><span class=\"line\">print(num3)</span><br><span class=\"line\">#随机选择序列中的一个数字</span><br><span class=\"line\">print(choice([1,3,5,7,9]))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-02-导入模块\"><a href=\"#二-02-导入模块\" class=\"headerlink\" title=\"二.02_导入模块\"></a>二.02_导入模块</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#导入模块,</span><br><span class=\"line\"># import log</span><br><span class=\"line\"># log.fun_01()</span><br><span class=\"line\"># log.fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\">#导入模块</span><br><span class=\"line\"># from log import fun_01,fun_02</span><br><span class=\"line\"># fun_01()</span><br><span class=\"line\"># fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\"># #导入模块的时候，多个模块，有相同的函数名</span><br><span class=\"line\"># # 第一： 使用import 这种导入方法</span><br><span class=\"line\"># # 第二： 要是使用了from 模块名 import 函数名 这种，可以给函数名加上一个别名</span><br><span class=\"line\"># from util import fun_01 as logFn1,fun_02 as logFn2</span><br><span class=\"line\"># from log import fun_01 as utilFn1,fun_02 as utilFn2</span><br><span class=\"line\">#</span><br><span class=\"line\"># #使用</span><br><span class=\"line\"># logFn1()</span><br><span class=\"line\"># logFn2()</span><br><span class=\"line\"># utilFn1()</span><br><span class=\"line\"># utilFn2()</span><br><span class=\"line\"></span><br><span class=\"line\"># from util.logutil import fun_02</span><br><span class=\"line\"># fun_02()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-03-包的管理-main\"><a href=\"#三-03-包的管理-main\" class=\"headerlink\" title=\"三.03_包的管理_main\"></a>三.03_包的管理_main</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #第一种导入</span><br><span class=\"line\"># import util.logutil</span><br><span class=\"line\"># import util.stringutil</span><br><span class=\"line\">#</span><br><span class=\"line\"># if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">#     util.logutil.fun_01()</span><br><span class=\"line\">#     util.logutil.fun_02()</span><br><span class=\"line\">#     util.stringutil.fun_01()</span><br><span class=\"line\">#     util.stringutil.fun_02()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#第二种方式导入</span><br><span class=\"line\">from util import logutil</span><br><span class=\"line\">from util import stringutil</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    logutil.fun_01()</span><br><span class=\"line\">    logutil.fun_02()</span><br><span class=\"line\">    stringutil.fun_01()</span><br><span class=\"line\">    stringutil.fun_02()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_001.png\" alt=\"图1\"><br><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_002.png\" alt=\"图1\"></p>\n<h1 id=\"四-04-模块的发布\"><a href=\"#四-04-模块的发布\" class=\"headerlink\" title=\"四.04_模块的发布\"></a>四.04_模块的发布</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">1, 制作一个setup.py文件</span><br><span class=\"line\">from distutils.core import setup</span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name&#x3D;&#39;util&#39;,</span><br><span class=\"line\">    version&#x3D;&#39;1.0&#39;,</span><br><span class=\"line\">    author&#x3D;&#39;wolfcode&#39;,</span><br><span class=\"line\">    author_email&#x3D;&#39;wolfcode@wolfcode.cn&#39;,</span><br><span class=\"line\">    url&#x3D;&#39;http:&#x2F;&#x2F;www.wolfcode.cn&#39;,</span><br><span class=\"line\">    download_url&#x3D;&#39;http:&#x2F;&#x2F;www.wolfcode.cn&#39;,</span><br><span class=\"line\">    description&#x3D;&#39;util module&#39;,</span><br><span class=\"line\">    py_modules&#x3D;[&#39;util.logutil&#39;,&#39;util.stringuitl&#39;]</span><br><span class=\"line\">)</span><br><span class=\"line\">2, 构建模块(命令行中)</span><br><span class=\"line\">python setup.py build</span><br><span class=\"line\"></span><br><span class=\"line\">3, 生成发布压缩包</span><br><span class=\"line\">python setup.py sdist</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/09/22/python/base/06-%E6%A8%A1%E5%9D%97/06_003.png\" alt=\"图1\"></p>\n<h1 id=\"五-05-模块的安装\"><a href=\"#五-05-模块的安装\" class=\"headerlink\" title=\"五.05_模块的安装\"></a>五.05_模块的安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">第一种方式：</span><br><span class=\"line\">命令行执行: pip install 模块名称</span><br><span class=\"line\">直到看见 Successfully installed ...</span><br><span class=\"line\"></span><br><span class=\"line\">卸载模块： pip uninstall 模块名称</span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式：</span><br><span class=\"line\">去网站 https:&#x2F;&#x2F;pypi.org&#x2F; 找到对应的模块，下载 ***.whl 文件</span><br><span class=\"line\">使用命令： pin install ***.whl</span><br><span class=\"line\"></span><br><span class=\"line\">第三种方式：</span><br><span class=\"line\">使用pycharm工具安装</span><br><span class=\"line\">file -&gt; settings -&gt; Project 项目名称*** -&gt; Python Interpreter --&gt; 右侧+</span><br><span class=\"line\"></span><br><span class=\"line\">第四种方式：（源代码安装）</span><br><span class=\"line\">去网站 https:&#x2F;&#x2F;pypi.org&#x2F; 找到对应的模块，下载 ***.tar.gz 文件</span><br><span class=\"line\">解压到某个目录，然后命令行进入到该目录</span><br><span class=\"line\">执行命令： python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六-06-模块的查找路径\"><a href=\"#六-06-模块的查找路径\" class=\"headerlink\" title=\"六.06_模块的查找路径\"></a>六.06_模块的查找路径</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import util.logutil</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">    #查找模块的具体位置</span><br><span class=\"line\">    print(util.logutil.__file__)</span><br><span class=\"line\">    print(random.__file__)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;*&quot;*50)</span><br><span class=\"line\"></span><br><span class=\"line\">    #在sys中的path就指定了模块查找的路径方式</span><br><span class=\"line\">    for item in sys.path:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    for循环打印：</span><br><span class=\"line\">    D:\\pzl\\wkPython\\14_模块</span><br><span class=\"line\">    D:\\pzl\\wkPython\\14_模块</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\python37.zip</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\DLLs</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\lib</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37</span><br><span class=\"line\">    D:\\pzl\\yingyonganzhuang\\python37\\lib\\site-packages</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"},{"title":"07-植物大战僵尸","toc":true,"date":"2020-09-22T09:34:23.000Z","_content":"\n\n效果图：\n\n![图1](07-植物大战僵尸/07_001.gif)\n\n代码：\n\n```\nimport pygame\nimport random\nfrom pygame.locals import *\n\nWIDTH = 1000\nHEIGHT = 500\n\n#豌豆类\nclass Peas:\n    def __init__(self):\n        # 豌豆图片\n        self.image = pygame.image.load(\"./res/peas.gif\")\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = 200\n        self.is_move_up = False\n        self.is_move_down = False\n        #是否发射炮弹\n        self.is_shout = False\n\n    #显示\n    def display(self):\n        # 豌豆显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n\n    #向上移动\n    def move_up(self):\n        if self.image_rect.top > 10:\n            self.image_rect.move_ip(0,-6)\n\n        #豌豆是碰上僵尸\n        for zombie in Zombie.zombie_list:\n            if(self.image_rect.colliderect(zombie.image_rect)):\n                pygame.quit();\n                exit()\n\n    #向下移动\n    def move_down(self):\n        if self.image_rect.bottom < 500:\n            self.image_rect.move_ip(0,6)\n\n        #豌豆碰上僵尸\n        for zombie in Zombie.zombie_list:\n            if self.image_rect.colliderect(zombie.image_rect):\n                pygame.quit()\n                exit()\n    #发射炮弹\n    def shout_bullit(self):\n        #创建炮弹对象\n        bullet = Bullet(self)\n        #将炮弹对象添加到集合中\n        Bullet.bullet_list.append(bullet)\n\n#键盘控制\ndef key_control():\n    # 对事件的处理\n    for event in pygame.event.get():\n        #对事件的处理\n        if event.type == QUIT:\n            quit()\n        elif event.type == KEYDOWN:        #键盘按下\n            #向上键\n            if event.key == K_UP:\n                #向上移动\n                peas.is_move_up = True\n                #向下键\n            elif event.key == K_DOWN:\n                #向下移动\n                peas.is_move_down = True\n            elif event.key == K_SPACE:      #空格键\n                peas.is_shout = True\n\n        elif event.type == KEYUP:\n            #键盘弹起\n            if event.key == K_UP:          #向上键\n                peas.is_move_up = False\n            elif event.key == K_DOWN:      #向下键\n                peas.is_move_down = False\n            elif event.key == K_SPACE:      #空格键\n                peas.is_shout = False\n\n\n#炮弹对象\nclass Bullet:\n    # 所有的炮弹对象\n    bullet_list = []\n\n    # 创建炮弹的间隔时间\n    interval = 0\n\n    def __init__(self,peas):\n        self.image = pygame.image.load(\"./res/bullet.gif\")\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = peas.image_rect.top\n        self.image_rect.left = peas.image_rect.right\n\n    #炮弹显示\n    def display(self):\n        # 炮弹显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n    #炮弹移动\n    def move(self):\n        self.image_rect.move_ip(10,0)\n        #如果炮弹超出范围，则删除\n        if self.image_rect.left > WIDTH:\n            Bullet.bullet_list.remove(self)\n\n        for zombie in Zombie.zombie_list:\n            if self.image_rect.colliderect(zombie.image_rect):\n                Bullet.bullet_list.remove(self)\n                Zombie.zombie_list.remove(zombie)\n\n\n#僵尸类\nclass Zombie:\n    #存放僵尸对象\n    zombie_list = []\n\n    #存放僵尸创建的时间\n    interval = 0\n\n    def __init__(self):\n        self.image = pygame.image.load(\"./res/zombie.gif\")\n        self.image = pygame.transform.scale(self.image, (70, 70))\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = random.randint(10, HEIGHT - 70)\n        self.image_rect.left = WIDTH\n\n    #显示\n    def display(self):\n        # 僵尸显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n    # 僵尸移动\n    def move(self):\n        self.image_rect.move_ip(-2, 0)\n        # 如果炮弹超出范围，则删除\n        if self.image_rect.left < -70:\n            Zombie.zombie_list.remove(self)\n\n        #循环僵尸，查看僵尸是否碰上炮弹\n        for bullet in Bullet.bullet_list:\n            #发生碰撞\n            if self.image_rect.colliderect(bullet.image_rect):\n                Zombie.zombie_list.remove(self)\n                Bullet.bullet_list.remove(bullet)\n\n        #查看僵尸是否碰上豌豆\n        if self.image_rect.colliderect(peas.image_rect):\n            pygame.quit();\n            exit()\n\nif __name__ == '__main__':\n    #显示窗体\n    screen = pygame.display.set_mode(size=(WIDTH,HEIGHT))\n    pygame.display.set_mode()\n    #设置背景图片\n    background_image = pygame.image.load(\"./res/background.png\")\n\n    #改变图片大小\n    scale_background_image = pygame.transform.scale(background_image,(WIDTH,HEIGHT))\n    #获取图片的位置和大小\n    scale_background_image_rect = scale_background_image.get_rect()\n\n    #定义两个状态，用于判断是否向下，向上移动\n    peas_is_move_up = False\n    peas_is_move_down = False\n\n    #创建一个时钟，优化运行的速度效果\n    clock = pygame.time.Clock()\n\n    # 创建豌豆对象\n    peas = Peas()\n    \n    while True:\n        #设置背景颜色为黑色\n        screen.fill((0,0,0))\n        \n        # 设置窗体的背景图片\n        screen.blit(scale_background_image, scale_background_image_rect)\n\n        # 显示豌豆\n        peas.display()\n\n        # 键盘控制\n        key_control()\n\n        if peas.is_move_up:\n            peas.move_up()\n\n        if peas.is_move_down:\n            peas.move_down()\n\n        #发射炮弹\n        Bullet.interval += 1\n        if peas.is_shout and Bullet.interval >= 20:\n            Bullet.interval = 0\n            peas.shout_bullit()\n\n        #显示所有炮弹\n        for bullet in Bullet.bullet_list:\n            bullet.display()\n            bullet.move()\n\n        Zombie.interval += 1\n        #创建僵尸\n        if Zombie.interval > 20:\n            Zombie.interval = 0\n            zombie = Zombie()\n            Zombie.zombie_list.append(zombie)\n\n        #显示所有僵尸\n        for zombie in Zombie.zombie_list:\n            zombie.display()\n            zombie.move()\n\n        #帧频率\n        clock.tick(60)\n\n        pygame.display.update()\n\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","source":"_posts/python/base/07-植物大战僵尸.md","raw":"---\ntitle: 07-植物大战僵尸\ntoc: true\ndate: 2020-09-22 17:34:23\ntags:\ncategories:\n- python\n- python基础\n---\n\n\n效果图：\n\n![图1](07-植物大战僵尸/07_001.gif)\n\n代码：\n\n```\nimport pygame\nimport random\nfrom pygame.locals import *\n\nWIDTH = 1000\nHEIGHT = 500\n\n#豌豆类\nclass Peas:\n    def __init__(self):\n        # 豌豆图片\n        self.image = pygame.image.load(\"./res/peas.gif\")\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = 200\n        self.is_move_up = False\n        self.is_move_down = False\n        #是否发射炮弹\n        self.is_shout = False\n\n    #显示\n    def display(self):\n        # 豌豆显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n\n    #向上移动\n    def move_up(self):\n        if self.image_rect.top > 10:\n            self.image_rect.move_ip(0,-6)\n\n        #豌豆是碰上僵尸\n        for zombie in Zombie.zombie_list:\n            if(self.image_rect.colliderect(zombie.image_rect)):\n                pygame.quit();\n                exit()\n\n    #向下移动\n    def move_down(self):\n        if self.image_rect.bottom < 500:\n            self.image_rect.move_ip(0,6)\n\n        #豌豆碰上僵尸\n        for zombie in Zombie.zombie_list:\n            if self.image_rect.colliderect(zombie.image_rect):\n                pygame.quit()\n                exit()\n    #发射炮弹\n    def shout_bullit(self):\n        #创建炮弹对象\n        bullet = Bullet(self)\n        #将炮弹对象添加到集合中\n        Bullet.bullet_list.append(bullet)\n\n#键盘控制\ndef key_control():\n    # 对事件的处理\n    for event in pygame.event.get():\n        #对事件的处理\n        if event.type == QUIT:\n            quit()\n        elif event.type == KEYDOWN:        #键盘按下\n            #向上键\n            if event.key == K_UP:\n                #向上移动\n                peas.is_move_up = True\n                #向下键\n            elif event.key == K_DOWN:\n                #向下移动\n                peas.is_move_down = True\n            elif event.key == K_SPACE:      #空格键\n                peas.is_shout = True\n\n        elif event.type == KEYUP:\n            #键盘弹起\n            if event.key == K_UP:          #向上键\n                peas.is_move_up = False\n            elif event.key == K_DOWN:      #向下键\n                peas.is_move_down = False\n            elif event.key == K_SPACE:      #空格键\n                peas.is_shout = False\n\n\n#炮弹对象\nclass Bullet:\n    # 所有的炮弹对象\n    bullet_list = []\n\n    # 创建炮弹的间隔时间\n    interval = 0\n\n    def __init__(self,peas):\n        self.image = pygame.image.load(\"./res/bullet.gif\")\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = peas.image_rect.top\n        self.image_rect.left = peas.image_rect.right\n\n    #炮弹显示\n    def display(self):\n        # 炮弹显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n    #炮弹移动\n    def move(self):\n        self.image_rect.move_ip(10,0)\n        #如果炮弹超出范围，则删除\n        if self.image_rect.left > WIDTH:\n            Bullet.bullet_list.remove(self)\n\n        for zombie in Zombie.zombie_list:\n            if self.image_rect.colliderect(zombie.image_rect):\n                Bullet.bullet_list.remove(self)\n                Zombie.zombie_list.remove(zombie)\n\n\n#僵尸类\nclass Zombie:\n    #存放僵尸对象\n    zombie_list = []\n\n    #存放僵尸创建的时间\n    interval = 0\n\n    def __init__(self):\n        self.image = pygame.image.load(\"./res/zombie.gif\")\n        self.image = pygame.transform.scale(self.image, (70, 70))\n        self.image_rect = self.image.get_rect()\n        self.image_rect.top = random.randint(10, HEIGHT - 70)\n        self.image_rect.left = WIDTH\n\n    #显示\n    def display(self):\n        # 僵尸显示在页面上\n        screen.blit(self.image, self.image_rect)\n\n    # 僵尸移动\n    def move(self):\n        self.image_rect.move_ip(-2, 0)\n        # 如果炮弹超出范围，则删除\n        if self.image_rect.left < -70:\n            Zombie.zombie_list.remove(self)\n\n        #循环僵尸，查看僵尸是否碰上炮弹\n        for bullet in Bullet.bullet_list:\n            #发生碰撞\n            if self.image_rect.colliderect(bullet.image_rect):\n                Zombie.zombie_list.remove(self)\n                Bullet.bullet_list.remove(bullet)\n\n        #查看僵尸是否碰上豌豆\n        if self.image_rect.colliderect(peas.image_rect):\n            pygame.quit();\n            exit()\n\nif __name__ == '__main__':\n    #显示窗体\n    screen = pygame.display.set_mode(size=(WIDTH,HEIGHT))\n    pygame.display.set_mode()\n    #设置背景图片\n    background_image = pygame.image.load(\"./res/background.png\")\n\n    #改变图片大小\n    scale_background_image = pygame.transform.scale(background_image,(WIDTH,HEIGHT))\n    #获取图片的位置和大小\n    scale_background_image_rect = scale_background_image.get_rect()\n\n    #定义两个状态，用于判断是否向下，向上移动\n    peas_is_move_up = False\n    peas_is_move_down = False\n\n    #创建一个时钟，优化运行的速度效果\n    clock = pygame.time.Clock()\n\n    # 创建豌豆对象\n    peas = Peas()\n    \n    while True:\n        #设置背景颜色为黑色\n        screen.fill((0,0,0))\n        \n        # 设置窗体的背景图片\n        screen.blit(scale_background_image, scale_background_image_rect)\n\n        # 显示豌豆\n        peas.display()\n\n        # 键盘控制\n        key_control()\n\n        if peas.is_move_up:\n            peas.move_up()\n\n        if peas.is_move_down:\n            peas.move_down()\n\n        #发射炮弹\n        Bullet.interval += 1\n        if peas.is_shout and Bullet.interval >= 20:\n            Bullet.interval = 0\n            peas.shout_bullit()\n\n        #显示所有炮弹\n        for bullet in Bullet.bullet_list:\n            bullet.display()\n            bullet.move()\n\n        Zombie.interval += 1\n        #创建僵尸\n        if Zombie.interval > 20:\n            Zombie.interval = 0\n            zombie = Zombie()\n            Zombie.zombie_list.append(zombie)\n\n        #显示所有僵尸\n        for zombie in Zombie.zombie_list:\n            zombie.display()\n            zombie.move()\n\n        #帧频率\n        clock.tick(60)\n\n        pygame.display.update()\n\n\n```\n\n## 参考资料\n> - []()\n> - []()\n","slug":"python/base/07-植物大战僵尸","published":1,"updated":"2020-09-23T02:20:54.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg7wenox009ju3s6gl6f8m16","content":"<p>效果图：</p>\n<p><img src=\"/2020/09/22/python/base/07-%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/07_001.gif\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\">import random</span><br><span class=\"line\">from pygame.locals import *</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH &#x3D; 1000</span><br><span class=\"line\">HEIGHT &#x3D; 500</span><br><span class=\"line\"></span><br><span class=\"line\">#豌豆类</span><br><span class=\"line\">class Peas:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        # 豌豆图片</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;peas.gif&quot;)</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; 200</span><br><span class=\"line\">        self.is_move_up &#x3D; False</span><br><span class=\"line\">        self.is_move_down &#x3D; False</span><br><span class=\"line\">        #是否发射炮弹</span><br><span class=\"line\">        self.is_shout &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\">    #显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 豌豆显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #向上移动</span><br><span class=\"line\">    def move_up(self):</span><br><span class=\"line\">        if self.image_rect.top &gt; 10:</span><br><span class=\"line\">            self.image_rect.move_ip(0,-6)</span><br><span class=\"line\"></span><br><span class=\"line\">        #豌豆是碰上僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if(self.image_rect.colliderect(zombie.image_rect)):</span><br><span class=\"line\">                pygame.quit();</span><br><span class=\"line\">                exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    #向下移动</span><br><span class=\"line\">    def move_down(self):</span><br><span class=\"line\">        if self.image_rect.bottom &lt; 500:</span><br><span class=\"line\">            self.image_rect.move_ip(0,6)</span><br><span class=\"line\"></span><br><span class=\"line\">        #豌豆碰上僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if self.image_rect.colliderect(zombie.image_rect):</span><br><span class=\"line\">                pygame.quit()</span><br><span class=\"line\">                exit()</span><br><span class=\"line\">    #发射炮弹</span><br><span class=\"line\">    def shout_bullit(self):</span><br><span class=\"line\">        #创建炮弹对象</span><br><span class=\"line\">        bullet &#x3D; Bullet(self)</span><br><span class=\"line\">        #将炮弹对象添加到集合中</span><br><span class=\"line\">        Bullet.bullet_list.append(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">#键盘控制</span><br><span class=\"line\">def key_control():</span><br><span class=\"line\">    # 对事件的处理</span><br><span class=\"line\">    for event in pygame.event.get():</span><br><span class=\"line\">        #对事件的处理</span><br><span class=\"line\">        if event.type &#x3D;&#x3D; QUIT:</span><br><span class=\"line\">            quit()</span><br><span class=\"line\">        elif event.type &#x3D;&#x3D; KEYDOWN:        #键盘按下</span><br><span class=\"line\">            #向上键</span><br><span class=\"line\">            if event.key &#x3D;&#x3D; K_UP:</span><br><span class=\"line\">                #向上移动</span><br><span class=\"line\">                peas.is_move_up &#x3D; True</span><br><span class=\"line\">                #向下键</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_DOWN:</span><br><span class=\"line\">                #向下移动</span><br><span class=\"line\">                peas.is_move_down &#x3D; True</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_SPACE:      #空格键</span><br><span class=\"line\">                peas.is_shout &#x3D; True</span><br><span class=\"line\"></span><br><span class=\"line\">        elif event.type &#x3D;&#x3D; KEYUP:</span><br><span class=\"line\">            #键盘弹起</span><br><span class=\"line\">            if event.key &#x3D;&#x3D; K_UP:          #向上键</span><br><span class=\"line\">                peas.is_move_up &#x3D; False</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_DOWN:      #向下键</span><br><span class=\"line\">                peas.is_move_down &#x3D; False</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_SPACE:      #空格键</span><br><span class=\"line\">                peas.is_shout &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#炮弹对象</span><br><span class=\"line\">class Bullet:</span><br><span class=\"line\">    # 所有的炮弹对象</span><br><span class=\"line\">    bullet_list &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">    # 创建炮弹的间隔时间</span><br><span class=\"line\">    interval &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,peas):</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;bullet.gif&quot;)</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; peas.image_rect.top</span><br><span class=\"line\">        self.image_rect.left &#x3D; peas.image_rect.right</span><br><span class=\"line\"></span><br><span class=\"line\">    #炮弹显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 炮弹显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">    #炮弹移动</span><br><span class=\"line\">    def move(self):</span><br><span class=\"line\">        self.image_rect.move_ip(10,0)</span><br><span class=\"line\">        #如果炮弹超出范围，则删除</span><br><span class=\"line\">        if self.image_rect.left &gt; WIDTH:</span><br><span class=\"line\">            Bullet.bullet_list.remove(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if self.image_rect.colliderect(zombie.image_rect):</span><br><span class=\"line\">                Bullet.bullet_list.remove(self)</span><br><span class=\"line\">                Zombie.zombie_list.remove(zombie)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#僵尸类</span><br><span class=\"line\">class Zombie:</span><br><span class=\"line\">    #存放僵尸对象</span><br><span class=\"line\">    zombie_list &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">    #存放僵尸创建的时间</span><br><span class=\"line\">    interval &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;zombie.gif&quot;)</span><br><span class=\"line\">        self.image &#x3D; pygame.transform.scale(self.image, (70, 70))</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; random.randint(10, HEIGHT - 70)</span><br><span class=\"line\">        self.image_rect.left &#x3D; WIDTH</span><br><span class=\"line\"></span><br><span class=\"line\">    #显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 僵尸显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 僵尸移动</span><br><span class=\"line\">    def move(self):</span><br><span class=\"line\">        self.image_rect.move_ip(-2, 0)</span><br><span class=\"line\">        # 如果炮弹超出范围，则删除</span><br><span class=\"line\">        if self.image_rect.left &lt; -70:</span><br><span class=\"line\">            Zombie.zombie_list.remove(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        #循环僵尸，查看僵尸是否碰上炮弹</span><br><span class=\"line\">        for bullet in Bullet.bullet_list:</span><br><span class=\"line\">            #发生碰撞</span><br><span class=\"line\">            if self.image_rect.colliderect(bullet.image_rect):</span><br><span class=\"line\">                Zombie.zombie_list.remove(self)</span><br><span class=\"line\">                Bullet.bullet_list.remove(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">        #查看僵尸是否碰上豌豆</span><br><span class=\"line\">        if self.image_rect.colliderect(peas.image_rect):</span><br><span class=\"line\">            pygame.quit();</span><br><span class=\"line\">            exit()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    #显示窗体</span><br><span class=\"line\">    screen &#x3D; pygame.display.set_mode(size&#x3D;(WIDTH,HEIGHT))</span><br><span class=\"line\">    pygame.display.set_mode()</span><br><span class=\"line\">    #设置背景图片</span><br><span class=\"line\">    background_image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;background.png&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    #改变图片大小</span><br><span class=\"line\">    scale_background_image &#x3D; pygame.transform.scale(background_image,(WIDTH,HEIGHT))</span><br><span class=\"line\">    #获取图片的位置和大小</span><br><span class=\"line\">    scale_background_image_rect &#x3D; scale_background_image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义两个状态，用于判断是否向下，向上移动</span><br><span class=\"line\">    peas_is_move_up &#x3D; False</span><br><span class=\"line\">    peas_is_move_down &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个时钟，优化运行的速度效果</span><br><span class=\"line\">    clock &#x3D; pygame.time.Clock()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 创建豌豆对象</span><br><span class=\"line\">    peas &#x3D; Peas()</span><br><span class=\"line\">    </span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        #设置背景颜色为黑色</span><br><span class=\"line\">        screen.fill((0,0,0))</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 设置窗体的背景图片</span><br><span class=\"line\">        screen.blit(scale_background_image, scale_background_image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 显示豌豆</span><br><span class=\"line\">        peas.display()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 键盘控制</span><br><span class=\"line\">        key_control()</span><br><span class=\"line\"></span><br><span class=\"line\">        if peas.is_move_up:</span><br><span class=\"line\">            peas.move_up()</span><br><span class=\"line\"></span><br><span class=\"line\">        if peas.is_move_down:</span><br><span class=\"line\">            peas.move_down()</span><br><span class=\"line\"></span><br><span class=\"line\">        #发射炮弹</span><br><span class=\"line\">        Bullet.interval +&#x3D; 1</span><br><span class=\"line\">        if peas.is_shout and Bullet.interval &gt;&#x3D; 20:</span><br><span class=\"line\">            Bullet.interval &#x3D; 0</span><br><span class=\"line\">            peas.shout_bullit()</span><br><span class=\"line\"></span><br><span class=\"line\">        #显示所有炮弹</span><br><span class=\"line\">        for bullet in Bullet.bullet_list:</span><br><span class=\"line\">            bullet.display()</span><br><span class=\"line\">            bullet.move()</span><br><span class=\"line\"></span><br><span class=\"line\">        Zombie.interval +&#x3D; 1</span><br><span class=\"line\">        #创建僵尸</span><br><span class=\"line\">        if Zombie.interval &gt; 20:</span><br><span class=\"line\">            Zombie.interval &#x3D; 0</span><br><span class=\"line\">            zombie &#x3D; Zombie()</span><br><span class=\"line\">            Zombie.zombie_list.append(zombie)</span><br><span class=\"line\"></span><br><span class=\"line\">        #显示所有僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            zombie.display()</span><br><span class=\"line\">            zombie.move()</span><br><span class=\"line\"></span><br><span class=\"line\">        #帧频率</span><br><span class=\"line\">        clock.tick(60)</span><br><span class=\"line\"></span><br><span class=\"line\">        pygame.display.update()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>效果图：</p>\n<p><img src=\"/2020/09/22/python/base/07-%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/07_001.gif\" alt=\"图1\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\">import random</span><br><span class=\"line\">from pygame.locals import *</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH &#x3D; 1000</span><br><span class=\"line\">HEIGHT &#x3D; 500</span><br><span class=\"line\"></span><br><span class=\"line\">#豌豆类</span><br><span class=\"line\">class Peas:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        # 豌豆图片</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;peas.gif&quot;)</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; 200</span><br><span class=\"line\">        self.is_move_up &#x3D; False</span><br><span class=\"line\">        self.is_move_down &#x3D; False</span><br><span class=\"line\">        #是否发射炮弹</span><br><span class=\"line\">        self.is_shout &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\">    #显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 豌豆显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #向上移动</span><br><span class=\"line\">    def move_up(self):</span><br><span class=\"line\">        if self.image_rect.top &gt; 10:</span><br><span class=\"line\">            self.image_rect.move_ip(0,-6)</span><br><span class=\"line\"></span><br><span class=\"line\">        #豌豆是碰上僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if(self.image_rect.colliderect(zombie.image_rect)):</span><br><span class=\"line\">                pygame.quit();</span><br><span class=\"line\">                exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    #向下移动</span><br><span class=\"line\">    def move_down(self):</span><br><span class=\"line\">        if self.image_rect.bottom &lt; 500:</span><br><span class=\"line\">            self.image_rect.move_ip(0,6)</span><br><span class=\"line\"></span><br><span class=\"line\">        #豌豆碰上僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if self.image_rect.colliderect(zombie.image_rect):</span><br><span class=\"line\">                pygame.quit()</span><br><span class=\"line\">                exit()</span><br><span class=\"line\">    #发射炮弹</span><br><span class=\"line\">    def shout_bullit(self):</span><br><span class=\"line\">        #创建炮弹对象</span><br><span class=\"line\">        bullet &#x3D; Bullet(self)</span><br><span class=\"line\">        #将炮弹对象添加到集合中</span><br><span class=\"line\">        Bullet.bullet_list.append(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">#键盘控制</span><br><span class=\"line\">def key_control():</span><br><span class=\"line\">    # 对事件的处理</span><br><span class=\"line\">    for event in pygame.event.get():</span><br><span class=\"line\">        #对事件的处理</span><br><span class=\"line\">        if event.type &#x3D;&#x3D; QUIT:</span><br><span class=\"line\">            quit()</span><br><span class=\"line\">        elif event.type &#x3D;&#x3D; KEYDOWN:        #键盘按下</span><br><span class=\"line\">            #向上键</span><br><span class=\"line\">            if event.key &#x3D;&#x3D; K_UP:</span><br><span class=\"line\">                #向上移动</span><br><span class=\"line\">                peas.is_move_up &#x3D; True</span><br><span class=\"line\">                #向下键</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_DOWN:</span><br><span class=\"line\">                #向下移动</span><br><span class=\"line\">                peas.is_move_down &#x3D; True</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_SPACE:      #空格键</span><br><span class=\"line\">                peas.is_shout &#x3D; True</span><br><span class=\"line\"></span><br><span class=\"line\">        elif event.type &#x3D;&#x3D; KEYUP:</span><br><span class=\"line\">            #键盘弹起</span><br><span class=\"line\">            if event.key &#x3D;&#x3D; K_UP:          #向上键</span><br><span class=\"line\">                peas.is_move_up &#x3D; False</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_DOWN:      #向下键</span><br><span class=\"line\">                peas.is_move_down &#x3D; False</span><br><span class=\"line\">            elif event.key &#x3D;&#x3D; K_SPACE:      #空格键</span><br><span class=\"line\">                peas.is_shout &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#炮弹对象</span><br><span class=\"line\">class Bullet:</span><br><span class=\"line\">    # 所有的炮弹对象</span><br><span class=\"line\">    bullet_list &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">    # 创建炮弹的间隔时间</span><br><span class=\"line\">    interval &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,peas):</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;bullet.gif&quot;)</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; peas.image_rect.top</span><br><span class=\"line\">        self.image_rect.left &#x3D; peas.image_rect.right</span><br><span class=\"line\"></span><br><span class=\"line\">    #炮弹显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 炮弹显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">    #炮弹移动</span><br><span class=\"line\">    def move(self):</span><br><span class=\"line\">        self.image_rect.move_ip(10,0)</span><br><span class=\"line\">        #如果炮弹超出范围，则删除</span><br><span class=\"line\">        if self.image_rect.left &gt; WIDTH:</span><br><span class=\"line\">            Bullet.bullet_list.remove(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            if self.image_rect.colliderect(zombie.image_rect):</span><br><span class=\"line\">                Bullet.bullet_list.remove(self)</span><br><span class=\"line\">                Zombie.zombie_list.remove(zombie)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#僵尸类</span><br><span class=\"line\">class Zombie:</span><br><span class=\"line\">    #存放僵尸对象</span><br><span class=\"line\">    zombie_list &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">    #存放僵尸创建的时间</span><br><span class=\"line\">    interval &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;zombie.gif&quot;)</span><br><span class=\"line\">        self.image &#x3D; pygame.transform.scale(self.image, (70, 70))</span><br><span class=\"line\">        self.image_rect &#x3D; self.image.get_rect()</span><br><span class=\"line\">        self.image_rect.top &#x3D; random.randint(10, HEIGHT - 70)</span><br><span class=\"line\">        self.image_rect.left &#x3D; WIDTH</span><br><span class=\"line\"></span><br><span class=\"line\">    #显示</span><br><span class=\"line\">    def display(self):</span><br><span class=\"line\">        # 僵尸显示在页面上</span><br><span class=\"line\">        screen.blit(self.image, self.image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 僵尸移动</span><br><span class=\"line\">    def move(self):</span><br><span class=\"line\">        self.image_rect.move_ip(-2, 0)</span><br><span class=\"line\">        # 如果炮弹超出范围，则删除</span><br><span class=\"line\">        if self.image_rect.left &lt; -70:</span><br><span class=\"line\">            Zombie.zombie_list.remove(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        #循环僵尸，查看僵尸是否碰上炮弹</span><br><span class=\"line\">        for bullet in Bullet.bullet_list:</span><br><span class=\"line\">            #发生碰撞</span><br><span class=\"line\">            if self.image_rect.colliderect(bullet.image_rect):</span><br><span class=\"line\">                Zombie.zombie_list.remove(self)</span><br><span class=\"line\">                Bullet.bullet_list.remove(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\">        #查看僵尸是否碰上豌豆</span><br><span class=\"line\">        if self.image_rect.colliderect(peas.image_rect):</span><br><span class=\"line\">            pygame.quit();</span><br><span class=\"line\">            exit()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    #显示窗体</span><br><span class=\"line\">    screen &#x3D; pygame.display.set_mode(size&#x3D;(WIDTH,HEIGHT))</span><br><span class=\"line\">    pygame.display.set_mode()</span><br><span class=\"line\">    #设置背景图片</span><br><span class=\"line\">    background_image &#x3D; pygame.image.load(&quot;.&#x2F;res&#x2F;background.png&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    #改变图片大小</span><br><span class=\"line\">    scale_background_image &#x3D; pygame.transform.scale(background_image,(WIDTH,HEIGHT))</span><br><span class=\"line\">    #获取图片的位置和大小</span><br><span class=\"line\">    scale_background_image_rect &#x3D; scale_background_image.get_rect()</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义两个状态，用于判断是否向下，向上移动</span><br><span class=\"line\">    peas_is_move_up &#x3D; False</span><br><span class=\"line\">    peas_is_move_down &#x3D; False</span><br><span class=\"line\"></span><br><span class=\"line\">    #创建一个时钟，优化运行的速度效果</span><br><span class=\"line\">    clock &#x3D; pygame.time.Clock()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 创建豌豆对象</span><br><span class=\"line\">    peas &#x3D; Peas()</span><br><span class=\"line\">    </span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        #设置背景颜色为黑色</span><br><span class=\"line\">        screen.fill((0,0,0))</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 设置窗体的背景图片</span><br><span class=\"line\">        screen.blit(scale_background_image, scale_background_image_rect)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 显示豌豆</span><br><span class=\"line\">        peas.display()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 键盘控制</span><br><span class=\"line\">        key_control()</span><br><span class=\"line\"></span><br><span class=\"line\">        if peas.is_move_up:</span><br><span class=\"line\">            peas.move_up()</span><br><span class=\"line\"></span><br><span class=\"line\">        if peas.is_move_down:</span><br><span class=\"line\">            peas.move_down()</span><br><span class=\"line\"></span><br><span class=\"line\">        #发射炮弹</span><br><span class=\"line\">        Bullet.interval +&#x3D; 1</span><br><span class=\"line\">        if peas.is_shout and Bullet.interval &gt;&#x3D; 20:</span><br><span class=\"line\">            Bullet.interval &#x3D; 0</span><br><span class=\"line\">            peas.shout_bullit()</span><br><span class=\"line\"></span><br><span class=\"line\">        #显示所有炮弹</span><br><span class=\"line\">        for bullet in Bullet.bullet_list:</span><br><span class=\"line\">            bullet.display()</span><br><span class=\"line\">            bullet.move()</span><br><span class=\"line\"></span><br><span class=\"line\">        Zombie.interval +&#x3D; 1</span><br><span class=\"line\">        #创建僵尸</span><br><span class=\"line\">        if Zombie.interval &gt; 20:</span><br><span class=\"line\">            Zombie.interval &#x3D; 0</span><br><span class=\"line\">            zombie &#x3D; Zombie()</span><br><span class=\"line\">            Zombie.zombie_list.append(zombie)</span><br><span class=\"line\"></span><br><span class=\"line\">        #显示所有僵尸</span><br><span class=\"line\">        for zombie in Zombie.zombie_list:</span><br><span class=\"line\">            zombie.display()</span><br><span class=\"line\">            zombie.move()</span><br><span class=\"line\"></span><br><span class=\"line\">        #帧频率</span><br><span class=\"line\">        clock.tick(60)</span><br><span class=\"line\"></span><br><span class=\"line\">        pygame.display.update()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li><a href></a></li>\n<li><a href></a></li>\n</ul>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_002.png","slug":"01_002.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_003.png","slug":"01_003.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_008.png","slug":"01_008.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_007.png","slug":"01_007.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_009.png","slug":"01_009.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_012.png","slug":"01_012.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_005.png","slug":"02_005.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_003.png","slug":"03_003.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_002.png","slug":"04_002.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_007.png","slug":"04_007.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_005.png","slug":"06_005.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_005.png","slug":"05_005.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_023.png","slug":"05_023.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_005.png","slug":"07_005.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_003.png","slug":"08_003.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/14-虚线和星星评分/14_001.png","slug":"14_001.png","post":"ckg7wengj002eu3s6eo41fwna","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_017.png","slug":"16_017.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_004.png","slug":"17_004.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_006.png","slug":"17_006.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_011.png","slug":"17_011.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_016.png","slug":"17_016.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_003.png","slug":"18_003.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_012.png","slug":"19_012.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_009.png","slug":"18_009.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userLogin.png","slug":"userLogin.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-4.jpeg","slug":"oc-UITableViewCell-xib-4.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_006.png","slug":"01_006.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_001.png","slug":"02_001.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_003.png","slug":"02_003.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_008.png","slug":"02_008.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_009.png","slug":"02_009.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_013.png","slug":"02_013.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_005.png","slug":"04_005.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_001.png","slug":"05_001.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_003.png","slug":"15_003.png","post":"ckg7wengk002gu3s60fd0bvgd","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_004.png","slug":"15_004.png","post":"ckg7wengk002gu3s60fd0bvgd","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_002.png","slug":"17_002.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_022.png","slug":"19_022.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/userVerification.png","slug":"userVerification.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/fingerLogin.png","slug":"fingerLogin.png","post":"ckg7wenh5004cu3s647uc4h47","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/startFingerPrint.png","slug":"startFingerPrint.png","post":"ckg7wenh5004cu3s647uc4h47","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_001.png","slug":"01_001.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_005.png","slug":"01_005.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_011.png","slug":"02_011.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_010.png","slug":"02_010.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_014.png","slug":"02_014.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_001.png","slug":"03_001.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_004.png","slug":"04_004.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_001.png","slug":"16_001.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_008.png","slug":"16_008.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_018.png","slug":"17_018.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AKeyLogin/ios_akey_flowChart.png","slug":"ios_akey_flowChart.png","post":"ckg7wenh30045u3s6eddy0bh7","modified":0,"renderable":0},{"_id":"source/_posts/flutter/demo/01-九宫格手势解锁/01_001.png","slug":"01_001.png","post":"ckg7wengs0033u3s6g28i9qhy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-customProgressCircle/oc-Ani-customProgressCircle-1.png","slug":"oc-Ani-customProgressCircle-1.png","post":"ckg7wengu0038u3s6999bdeb7","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-QRCode/ios_qrcode_login.jpeg","slug":"ios_qrcode_login.jpeg","post":"ckg7wenh20041u3s62ko98fym","modified":0,"renderable":0},{"_id":"source/_posts/oc/Screen/oc-screenSize-detail/oc-screenSize-detail-1.png","slug":"oc-screenSize-detail-1.png","post":"ckg7wenh6004fu3s6a42nchzw","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-wk/oc-WaterMark-wk-1.png","slug":"oc-WaterMark-wk-1.png","post":"ckg7wenhb004wu3s6hl2p5n6h","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-1.jpeg","slug":"oc-foundation-strFile-1.jpeg","post":"ckg7wengw003gu3s6hulhgccz","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc-foundation-strFile/oc-foundation-strFile-2.jpeg","slug":"oc-foundation-strFile-2.jpeg","post":"ckg7wengw003gu3s6hulhgccz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_001.png","slug":"10_001.png","post":"ckg7wengg0026u3s6ckbofdzp","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_002.png","slug":"10_002.png","post":"ckg7wengg0026u3s6ckbofdzp","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/10-图文混排，按钮，图片/10_003.png","slug":"10_003.png","post":"ckg7wengg0026u3s6ckbofdzp","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_001.png","slug":"12_001.png","post":"ckg7wengh0029u3s68ujrc9il","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_002.png","slug":"12_002.png","post":"ckg7wengh0029u3s68ujrc9il","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/12-滚动组件的使用/12_003.png","slug":"12_003.png","post":"ckg7wengh0029u3s68ujrc9il","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-1.jpeg","slug":"oc-Ani-TableViewHeader-1.jpeg","post":"ckg7wengt0035u3s69bajaql1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-2.jpeg","slug":"oc-Ani-TableViewHeader-2.jpeg","post":"ckg7wengt0035u3s69bajaql1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-TableViewHeader/oc-Ani-TableViewHeader-3.jpeg","slug":"oc-Ani-TableViewHeader-3.jpeg","post":"ckg7wengt0035u3s69bajaql1","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-1.jpeg","slug":"oc-Ani-rotatingMenu-1.jpeg","post":"ckg7wengv003bu3s6gc8g7o70","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-2.jpeg","slug":"oc-Ani-rotatingMenu-2.jpeg","post":"ckg7wengv003bu3s6gc8g7o70","modified":0,"renderable":0},{"_id":"source/_posts/oc/Ani/oc-Ani-rotatingMenu/oc-Ani-rotatingMenu-3.jpeg","slug":"oc-Ani-rotatingMenu-3.jpeg","post":"ckg7wengv003bu3s6gc8g7o70","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-TouchID/dataStuct.png","slug":"dataStuct.png","post":"ckg7wenh5004cu3s647uc4h47","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-1.jpeg","slug":"oc-UITableViewCell-sc-1.jpeg","post":"ckg7wenh7004ju3s6hw125vod","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-2.jpeg","slug":"oc-UITableViewCell-sc-2.jpeg","post":"ckg7wenh7004ju3s6hw125vod","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-sc/oc-UITableViewCell-sc-3.jpeg","slug":"oc-UITableViewCell-sc-3.jpeg","post":"ckg7wenh7004ju3s6hw125vod","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_001.png","slug":"15_001.png","post":"ckg7wengk002gu3s60fd0bvgd","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/15-豆瓣首页的实现/15_002.png","slug":"15_002.png","post":"ckg7wengk002gu3s60fd0bvgd","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_1.jpeg","slug":"category_1.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_2.jpeg","slug":"category_2.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_3.jpeg","slug":"category_3.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_4.jpeg","slug":"category_4.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_5.jpeg","slug":"category_5.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_category_desc/category_6.jpeg","slug":"category_6.jpeg","post":"ckg7wenh2003zu3s66t1h57fy","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_002.png","slug":"03_002.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_004.png","slug":"03_004.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_005.png","slug":"03_005.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_006.png","slug":"03_006.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/03-Hello-Flutter/03_007.png","slug":"03_007.png","post":"ckg7weng9001mu3s696ztc7rw","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_001.png","slug":"08_001.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_002.png","slug":"08_002.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_004.png","slug":"08_004.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_005.png","slug":"08_005.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_006.png","slug":"08_006.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/08-按钮变小设置/08_007.png","slug":"08_007.png","post":"ckg7wengb001ru3s6a7c73zul","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_1.jpeg","slug":"class_init_1.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_2.jpeg","slug":"class_init_2.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_3.jpeg","slug":"class_init_3.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_4.jpeg","slug":"class_init_4.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_5.jpeg","slug":"class_init_5.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_6.jpeg","slug":"class_init_6.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/Foundation/oc_class_init/class_init_7.jpeg","slug":"class_init_7.jpeg","post":"ckg7wenh0003uu3s66m1o7yxn","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-1.jpeg","slug":"oc-UITableViewCell-xib-1.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-2.jpeg","slug":"oc-UITableViewCell-xib-2.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-3.jpeg","slug":"oc-UITableViewCell-xib-3.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-5.jpeg","slug":"oc-UITableViewCell-xib-5.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-6.jpeg","slug":"oc-UITableViewCell-xib-6.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/oc/UITableView/oc-UITableViewCell-xib/oc-UITableViewCell-xib-7.jpeg","slug":"oc-UITableViewCell-xib-7.jpeg","post":"ckg7wenh8004mu3s626ub1snk","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_001.png","slug":"04_001.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_003.png","slug":"04_003.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_006.png","slug":"04_006.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/04-Android-Studio-中下载Android-SDK的两种方式/04_008.png","slug":"04_008.png","post":"ckg7wenga001pu3s61m9v0umc","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_001.png","slug":"11_001.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_002.png","slug":"11_002.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_003.png","slug":"11_003.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_004.png","slug":"11_004.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_005.png","slug":"11_005.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_006.png","slug":"11_006.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_007.png","slug":"11_007.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/11-基础组件的使用/11_008.png","slug":"11_008.png","post":"ckg7wengg0024u3s69yq473ll","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_001.png","slug":"18_001.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_002.png","slug":"18_002.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_003_0.png","slug":"18_003_0.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_004.png","slug":"18_004.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_005.png","slug":"18_005.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_006.png","slug":"18_006.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_007.png","slug":"18_007.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/18-Flutter事件监听/18_008.png","slug":"18_008.png","post":"ckg7wengm002ou3s60l3x52e1","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_007.png","slug":"02_007.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/backgroundSetup.png","slug":"backgroundSetup.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenDataStruct.jpg","slug":"identityTokenDataStruct.jpg","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/identityTokenVerityProcess.jpg","slug":"identityTokenVerityProcess.jpg","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/joinSteps.png","slug":"joinSteps.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/jwtDataStruct.jpg","slug":"jwtDataStruct.jpg","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/loginBtnStyle.png","slug":"loginBtnStyle.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/signVerityProcess.jpg","slug":"signVerityProcess.jpg","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/styleLocalize.png","slug":"styleLocalize.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/oc/Login/oc-Login-AppleLogin/xcodeSetup.png","slug":"xcodeSetup.png","post":"ckg7wenh40048u3s62kqef3k2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_004.png","slug":"01_004.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_010.png","slug":"01_010.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_011.png","slug":"01_011.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/01-flutter学习开始/01_013.png","slug":"01_013.png","post":"ckg7weng7001ku3s63457gxc0","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_012.png","slug":"02_012.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_002.png","slug":"02_002.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_004.png","slug":"02_004.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_006.png","slug":"02_006.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/02-flutter之环境搭建/02_015.png","slug":"02_015.png","post":"ckg7weng6001hu3s6357c0qfq","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_001.png","slug":"07_001.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_002.png","slug":"07_002.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_003.png","slug":"07_003.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_004.png","slug":"07_004.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_006.png","slug":"07_006.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_007.png","slug":"07_007.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_008.png","slug":"07_008.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_009.png","slug":"07_009.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_010.png","slug":"07_010.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_011.png","slug":"07_011.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_012.png","slug":"07_012.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_013.png","slug":"07_013.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_014.png","slug":"07_014.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_015.png","slug":"07_015.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_016.png","slug":"07_016.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_017.png","slug":"07_017.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_018.png","slug":"07_018.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_019.png","slug":"07_019.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_020.png","slug":"07_020.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_021.png","slug":"07_021.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/07-Flutter的基础Widget/07_022.png","slug":"07_022.png","post":"ckg7wengc001wu3s6gf3o2eln","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_001.png","slug":"17_001.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_003.png","slug":"17_003.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_005.png","slug":"17_005.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_007.png","slug":"17_007.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_008.png","slug":"17_008.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_009.png","slug":"17_009.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_010.png","slug":"17_010.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_012.png","slug":"17_012.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_013.png","slug":"17_013.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_014.png","slug":"17_014.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_015.png","slug":"17_015.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_017.png","slug":"17_017.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_019.png","slug":"17_019.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_020.png","slug":"17_020.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_021.png","slug":"17_021.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_022.png","slug":"17_022.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_023.png","slug":"17_023.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/17-Flutter状态管理/17_024.png","slug":"17_024.png","post":"ckg7wengm002lu3s64es71rem","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_001.png","slug":"19_001.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_002.png","slug":"19_002.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_003.png","slug":"19_003.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_004.png","slug":"19_004.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_005.png","slug":"19_005.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_006.png","slug":"19_006.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_007.png","slug":"19_007.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_008.png","slug":"19_008.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_009.png","slug":"19_009.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_010.png","slug":"19_010.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_011.png","slug":"19_011.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_013.png","slug":"19_013.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_014.png","slug":"19_014.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_015.png","slug":"19_015.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_016.png","slug":"19_016.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_017.png","slug":"19_017.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_018.png","slug":"19_018.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_019.png","slug":"19_019.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_020.png","slug":"19_020.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_021.png","slug":"19_021.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_023.png","slug":"19_023.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_024.png","slug":"19_024.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/19-Flutter路由导航/19_025.png","slug":"19_025.png","post":"ckg7wengp002vu3s6d3kebrb2","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_019.png","slug":"16_019.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_002.png","slug":"05_002.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_003.png","slug":"05_003.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_004.png","slug":"05_004.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_006.png","slug":"05_006.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_007.png","slug":"05_007.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_008.png","slug":"05_008.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_009.png","slug":"05_009.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_010.png","slug":"05_010.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_011.png","slug":"05_011.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_012.png","slug":"05_012.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_013.png","slug":"05_013.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_014.png","slug":"05_014.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_015.png","slug":"05_015.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_016.png","slug":"05_016.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_017.png","slug":"05_017.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_018.png","slug":"05_018.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_019.png","slug":"05_019.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_020.png","slug":"05_020.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_021.png","slug":"05_021.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_022.png","slug":"05_022.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_024.png","slug":"05_024.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_025.png","slug":"05_025.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_026.png","slug":"05_026.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/05-Dart-一/05_027.png","slug":"05_027.png","post":"ckg7wengd001zu3s66s0h8dvm","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_002.png","slug":"16_002.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_003.png","slug":"16_003.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_004.png","slug":"16_004.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_005.png","slug":"16_005.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_006.png","slug":"16_006.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_007.png","slug":"16_007.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_009.png","slug":"16_009.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_010.png","slug":"16_010.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_011.png","slug":"16_011.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_012.png","slug":"16_012.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_013.png","slug":"16_013.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_014.png","slug":"16_014.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_015.png","slug":"16_015.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_016.png","slug":"16_016.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_018.png","slug":"16_018.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_020.png","slug":"16_020.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_021.png","slug":"16_021.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_022.png","slug":"16_022.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_023.png","slug":"16_023.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_024.png","slug":"16_024.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_025.png","slug":"16_025.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_026.png","slug":"16_026.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/16-Flutter的Widget-Element-RenderObject/16_027.png","slug":"16_027.png","post":"ckg7wengl002ju3s6ausa1irz","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_001.png","slug":"13_001.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_002.png","slug":"13_002.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_003.png","slug":"13_003.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_004.png","slug":"13_004.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_005.png","slug":"13_005.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_006.png","slug":"13_006.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_007.png","slug":"13_007.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_008.png","slug":"13_008.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_009.png","slug":"13_009.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_010.png","slug":"13_010.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_011.png","slug":"13_011.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_012.png","slug":"13_012.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_013.png","slug":"13_013.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_014.png","slug":"13_014.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_015.png","slug":"13_015.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_016.png","slug":"13_016.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_017.png","slug":"13_017.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_018.png","slug":"13_018.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_019.png","slug":"13_019.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_020.png","slug":"13_020.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_021.png","slug":"13_021.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_022.png","slug":"13_022.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_023.png","slug":"13_023.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_024.png","slug":"13_024.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_025.png","slug":"13_025.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_026.png","slug":"13_026.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_027.png","slug":"13_027.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_028.png","slug":"13_028.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_029.png","slug":"13_029.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_030.png","slug":"13_030.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_031.png","slug":"13_031.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_032.png","slug":"13_032.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/13-Dart中的异步/13_033.png","slug":"13_033.png","post":"ckg7wengi002bu3s6egnadjoo","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_001.png","slug":"06_001.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_002.png","slug":"06_002.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_003.png","slug":"06_003.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_004.png","slug":"06_004.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_006.png","slug":"06_006.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_007.png","slug":"06_007.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_008.png","slug":"06_008.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_009.png","slug":"06_009.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_010.png","slug":"06_010.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_011.png","slug":"06_011.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_012.png","slug":"06_012.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_013.png","slug":"06_013.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_014.png","slug":"06_014.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_015.png","slug":"06_015.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_016.png","slug":"06_016.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_017.png","slug":"06_017.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_018.png","slug":"06_018.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_019.png","slug":"06_019.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_020.png","slug":"06_020.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_021.png","slug":"06_021.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_022.png","slug":"06_022.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_023.png","slug":"06_023.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_024.png","slug":"06_024.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_025.png","slug":"06_025.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_026.png","slug":"06_026.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_027.png","slug":"06_027.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_028.png","slug":"06_028.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_029.png","slug":"06_029.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_030.png","slug":"06_030.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_031.png","slug":"06_031.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_032.png","slug":"06_032.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_033.png","slug":"06_033.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_034.png","slug":"06_034.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_035.png","slug":"06_035.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_036.png","slug":"06_036.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_037.png","slug":"06_037.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_038.png","slug":"06_038.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_039.png","slug":"06_039.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_040.png","slug":"06_040.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_041.png","slug":"06_041.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_042.png","slug":"06_042.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_043.png","slug":"06_043.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_044.png","slug":"06_044.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_045.png","slug":"06_045.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_046.png","slug":"06_046.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_047.png","slug":"06_047.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_048.png","slug":"06_048.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_049.png","slug":"06_049.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_050.png","slug":"06_050.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_051.png","slug":"06_051.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_052.png","slug":"06_052.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/flutter/flutter框架一/06-Dart-二/06_053.png","slug":"06_053.png","post":"ckg7wengc001uu3s6gysfci3m","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-1.png","slug":"oc-WaterMark-rotateLabel-1.png","post":"ckg7wenlx008nu3s66zzzgz6p","modified":0,"renderable":0},{"_id":"source/_posts/oc/WaterMark/oc-WaterMark-rotateLabel/oc-WaterMark-rotateLabel-2.jpg","slug":"oc-WaterMark-rotateLabel-2.jpg","post":"ckg7wenlx008nu3s66zzzgz6p","modified":0,"renderable":0},{"_id":"source/_posts/python/base/06-模块/06_001.png","slug":"06_001.png","post":"ckg7wenm7008zu3s6ghvt853g","modified":0,"renderable":0},{"_id":"source/_posts/python/base/06-模块/06_002.png","slug":"06_002.png","post":"ckg7wenm7008zu3s6ghvt853g","modified":0,"renderable":0},{"_id":"source/_posts/python/base/06-模块/06_003.png","slug":"06_003.png","post":"ckg7wenm7008zu3s6ghvt853g","modified":0,"renderable":0},{"_id":"source/_posts/python/base/07-植物大战僵尸/07_001.gif","slug":"07_001.gif","post":"ckg7wenox009ju3s6gl6f8m16","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckg7wen8m0008u3s61sfg4jst","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8r000gu3s66p052fqm"},{"post_id":"ckg7wen8f0003u3s62mx4hrg0","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8s000lu3s6egb89ta3"},{"post_id":"ckg7wen8n0009u3s65chscif0","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8s000nu3s616qi8i1m"},{"post_id":"ckg7wen8p000du3s68rax6nzy","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8t000qu3s62x4vfyhf"},{"post_id":"ckg7wen8i0004u3s68d0bgavv","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8t000su3s6fk1xevrz"},{"post_id":"ckg7wen8l0007u3s64q263vfx","category_id":"ckg7wen8k0005u3s69gz50xlr","_id":"ckg7wen8t000tu3s6ayus8rjo"},{"post_id":"ckg7wen8r000ku3s6eg03a1qi","category_id":"ckg7wen8t000ou3s65q59anbc","_id":"ckg7wen8t000uu3s688jifurp"},{"post_id":"ckg7weng00018u3s64gxaauu1","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7weng4001du3s64g8zcx0b"},{"post_id":"ckg7weng00018u3s64gxaauu1","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7weng5001gu3s6cu20ekli"},{"post_id":"ckg7wenfv000zu3s671xdfiw8","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7weng6001iu3s62od38lax"},{"post_id":"ckg7wenfv000zu3s671xdfiw8","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7weng9001lu3s63djlczma"},{"post_id":"ckg7weng10019u3s6cvcg0za4","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7weng9001nu3s6dlwq1yuh"},{"post_id":"ckg7weng10019u3s6cvcg0za4","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wenga001qu3s615wf0yml"},{"post_id":"ckg7weng3001bu3s660iab1gp","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengb001su3s6focddbak"},{"post_id":"ckg7weng3001bu3s660iab1gp","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengc001vu3s6956se1ys"},{"post_id":"ckg7wenfs000vu3s6hp3n94i7","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengd001xu3s63u54cdoj"},{"post_id":"ckg7wenfs000vu3s6hp3n94i7","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wenge0020u3s6blonhrnt"},{"post_id":"ckg7weng4001cu3s60jl1aia6","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengf0022u3s66wtcdjgf"},{"post_id":"ckg7weng4001cu3s60jl1aia6","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengg0025u3s643vaax6z"},{"post_id":"ckg7weng5001fu3s6h25j54sv","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengh0027u3s66mj7fson"},{"post_id":"ckg7weng5001fu3s6h25j54sv","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengi002au3s68rnpbd51"},{"post_id":"ckg7wenfw0010u3s60n0l6epo","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengj002cu3s6a5ix52e8"},{"post_id":"ckg7wenfw0010u3s60n0l6epo","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengk002fu3s632nzbd6q"},{"post_id":"ckg7wenfx0012u3s61y61bn0e","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengk002hu3s6c80obkda"},{"post_id":"ckg7wenfx0012u3s61y61bn0e","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengl002ku3s6gfhn8zvk"},{"post_id":"ckg7wenft000wu3s6govahslb","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengm002mu3s6box2f515"},{"post_id":"ckg7wenft000wu3s6govahslb","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengn002pu3s64pi35kb4"},{"post_id":"ckg7wenfy0013u3s68ira3blu","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengo002ru3s647sh2vqk"},{"post_id":"ckg7wenfy0013u3s68ira3blu","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengp002uu3s68zdtghby"},{"post_id":"ckg7wenfz0015u3s6b9s74lij","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengq002wu3s6evbedn5s"},{"post_id":"ckg7wenfz0015u3s6b9s74lij","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengr002zu3s61jcx4so2"},{"post_id":"ckg7wenfu000yu3s6cn222r0d","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengs0031u3s6haxegub4"},{"post_id":"ckg7wenfu000yu3s6cn222r0d","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengt0034u3s65qe38yul"},{"post_id":"ckg7wenfz0016u3s68xi1bz31","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengt0036u3s6aix5dy1a"},{"post_id":"ckg7wenfz0016u3s68xi1bz31","category_id":"ckg7weng00017u3s6fvpf5tnc","_id":"ckg7wengu0039u3s6hi9fgfd6"},{"post_id":"ckg7wengj002eu3s6eo41fwna","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengv003cu3s66vag6bhf"},{"post_id":"ckg7wengj002eu3s6eo41fwna","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wengw003fu3s699jx8f7i"},{"post_id":"ckg7weng6001hu3s6357c0qfq","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengx003iu3s660ho1qnd"},{"post_id":"ckg7weng6001hu3s6357c0qfq","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wengy003mu3s69opkcs6e"},{"post_id":"ckg7wengk002gu3s60fd0bvgd","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wengz003pu3s620ij7yz9"},{"post_id":"ckg7wengk002gu3s60fd0bvgd","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenh0003tu3s6c13a7fhp"},{"post_id":"ckg7wengl002ju3s6ausa1irz","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh1003wu3s6ezm7dj8s"},{"post_id":"ckg7wengl002ju3s6ausa1irz","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenh20040u3s62cpu2ffv"},{"post_id":"ckg7weng7001ku3s63457gxc0","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh30043u3s6gbhl15p3"},{"post_id":"ckg7weng7001ku3s63457gxc0","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenh40047u3s64pk3f5uz"},{"post_id":"ckg7wengm002lu3s64es71rem","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh5004au3s6ddzn3peg"},{"post_id":"ckg7wengm002lu3s64es71rem","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenh6004eu3s60gu025au"},{"post_id":"ckg7wengm002ou3s60l3x52e1","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh7004hu3s697l87pbj"},{"post_id":"ckg7wengm002ou3s60l3x52e1","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenh8004lu3s60ve0e3e7"},{"post_id":"ckg7weng9001mu3s696ztc7rw","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenh9004ou3s63t5s5rd5"},{"post_id":"ckg7weng9001mu3s696ztc7rw","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenha004su3s6dliwacsi"},{"post_id":"ckg7wengn002qu3s66xpy7dv2","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhb004uu3s6gzdgf6p2"},{"post_id":"ckg7wengn002qu3s66xpy7dv2","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenhd004zu3s680il8smm"},{"post_id":"ckg7wengo002tu3s6bwgr0er7","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhe0050u3s62m0v8cmd"},{"post_id":"ckg7wengo002tu3s6bwgr0er7","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenhe0054u3s6bdbk5xaf"},{"post_id":"ckg7wenga001pu3s61m9v0umc","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhf0055u3s66ud1gsgc"},{"post_id":"ckg7wenga001pu3s61m9v0umc","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenhf0059u3s61wne9ke2"},{"post_id":"ckg7wengp002vu3s6d3kebrb2","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhg005au3s6f5amdlru"},{"post_id":"ckg7wengp002vu3s6d3kebrb2","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenhg005du3s61or076x4"},{"post_id":"ckg7wengq002yu3s6ghvrc2zk","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhp005fu3s6aaye2v3p"},{"post_id":"ckg7wengq002yu3s6ghvrc2zk","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenhu005iu3s691no39ge"},{"post_id":"ckg7wengb001ru3s6a7c73zul","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenhz005ku3s64tul5scs"},{"post_id":"ckg7wengb001ru3s6a7c73zul","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7weni5005nu3s6d2vydpad"},{"post_id":"ckg7wengr0030u3s675st986j","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenia005pu3s63cpx315r"},{"post_id":"ckg7wengr0030u3s675st986j","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenig005su3s6fuiwhh4h"},{"post_id":"ckg7wengc001uu3s6gysfci3m","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenim005uu3s617o6ebr8"},{"post_id":"ckg7wengc001uu3s6gysfci3m","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenit005xu3s6cuouel7r"},{"post_id":"ckg7wengc001wu3s6gf3o2eln","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7weniy005zu3s6e9xf2s0u"},{"post_id":"ckg7wengc001wu3s6gf3o2eln","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenj40062u3s61zjt9mni"},{"post_id":"ckg7wengd001zu3s66s0h8dvm","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenj90064u3s6h61c4wfe"},{"post_id":"ckg7wengd001zu3s66s0h8dvm","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenje0067u3s63ooqc5bk"},{"post_id":"ckg7wenge0021u3s655vx4f8m","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenjj0069u3s6hpnx3hii"},{"post_id":"ckg7wenge0021u3s655vx4f8m","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenjo006bu3s61o2691er"},{"post_id":"ckg7wengg0024u3s69yq473ll","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenjv006eu3s692wpfp0a"},{"post_id":"ckg7wengg0024u3s69yq473ll","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenk0006gu3s6hn3x766a"},{"post_id":"ckg7wengg0026u3s6ckbofdzp","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenk5006ju3s61trp4xc7"},{"post_id":"ckg7wengg0026u3s6ckbofdzp","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenka006lu3s656r733l0"},{"post_id":"ckg7wengh0029u3s68ujrc9il","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenkf006nu3s6hwnmg2jc"},{"post_id":"ckg7wengh0029u3s68ujrc9il","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenkk006pu3s66tkme606"},{"post_id":"ckg7wengi002bu3s6egnadjoo","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenkr006qu3s63mkm59hx"},{"post_id":"ckg7wengi002bu3s6egnadjoo","category_id":"ckg7wengj002du3s6g5oc0cdy","_id":"ckg7wenkw006tu3s612bfaloq"},{"post_id":"ckg7wengs0033u3s6g28i9qhy","category_id":"ckg7wenfu000xu3s6ecpn5dvx","_id":"ckg7wenl1006vu3s684s1ed0n"},{"post_id":"ckg7wengs0033u3s6g28i9qhy","category_id":"ckg7wenh7004iu3s6cm386j2u","_id":"ckg7wenl6006xu3s67seebvfr"},{"post_id":"ckg7wenha004tu3s6h4bchcll","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlh0071u3s62cgf7njq"},{"post_id":"ckg7wenha004tu3s6h4bchcll","category_id":"ckg7wenlg006zu3s6g5xg7yq8","_id":"ckg7wenlh0073u3s6da07gn7c"},{"post_id":"ckg7wengt0035u3s69bajaql1","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlh0074u3s67yol34ky"},{"post_id":"ckg7wengt0035u3s69bajaql1","category_id":"ckg7wenlg0070u3s68w0aelk8","_id":"ckg7wenlh0076u3s6cwzbdgem"},{"post_id":"ckg7wenhb004wu3s6hl2p5n6h","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenli0078u3s615usfzkv"},{"post_id":"ckg7wenhb004wu3s6hl2p5n6h","category_id":"ckg7wenlh0072u3s6eara2t96","_id":"ckg7wenli0079u3s616f4an5p"},{"post_id":"ckg7wengu0038u3s6999bdeb7","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenli007bu3s6esdt24wn"},{"post_id":"ckg7wengu0038u3s6999bdeb7","category_id":"ckg7wenlg0070u3s68w0aelk8","_id":"ckg7wenli007cu3s6aq2v4s4u"},{"post_id":"ckg7wengv003bu3s6gc8g7o70","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenli007du3s67zq967dm"},{"post_id":"ckg7wengv003bu3s6gc8g7o70","category_id":"ckg7wenlg0070u3s68w0aelk8","_id":"ckg7wenli007fu3s648fo9qia"},{"post_id":"ckg7wengw003eu3s69x01gajx","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlj007hu3s68g1yglkj"},{"post_id":"ckg7wengw003eu3s69x01gajx","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenlj007iu3s67s6jc6kx"},{"post_id":"ckg7wengw003gu3s6hulhgccz","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlj007ku3s650s254rm"},{"post_id":"ckg7wengw003gu3s6hulhgccz","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenlj007lu3s6hqkn2xq2"},{"post_id":"ckg7wengy003lu3s608digqx6","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlj007nu3s6b0jq3xm3"},{"post_id":"ckg7wengy003lu3s608digqx6","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenlk007ou3s6cjqxdb25"},{"post_id":"ckg7wengy003nu3s6afjv75to","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlk007qu3s69t9t3c4i"},{"post_id":"ckg7wengy003nu3s6afjv75to","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenlk007ru3s66o6q11gb"},{"post_id":"ckg7wenh0003su3s6hmbuf4ru","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlk007tu3s6gho544ig"},{"post_id":"ckg7wenh0003su3s6hmbuf4ru","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenlk007uu3s6djem8psd"},{"post_id":"ckg7wenh0003uu3s66m1o7yxn","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenll007wu3s66f319nb2"},{"post_id":"ckg7wenh0003uu3s66m1o7yxn","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenll007xu3s62ipl0t73"},{"post_id":"ckg7wenh2003zu3s66t1h57fy","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenll007yu3s6g8pl7n6z"},{"post_id":"ckg7wenh2003zu3s66t1h57fy","category_id":"ckg7wenli007au3s67szr7sga","_id":"ckg7wenll0080u3s65cwhauwi"},{"post_id":"ckg7wenh20041u3s62ko98fym","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenll0082u3s61xm6dg7c"},{"post_id":"ckg7wenh20041u3s62ko98fym","category_id":"ckg7wenlk007vu3s67p3xe7fa","_id":"ckg7wenlm0083u3s661ue5ulv"},{"post_id":"ckg7wenh30045u3s6eddy0bh7","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlm0085u3s6celrhnd4"},{"post_id":"ckg7wenh30045u3s6eddy0bh7","category_id":"ckg7wenlk007vu3s67p3xe7fa","_id":"ckg7wenlm0086u3s64jwudvj5"},{"post_id":"ckg7wenh40048u3s62kqef3k2","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlm0088u3s60jks58np"},{"post_id":"ckg7wenh40048u3s62kqef3k2","category_id":"ckg7wenlk007vu3s67p3xe7fa","_id":"ckg7wenlm0089u3s6gmfkamj4"},{"post_id":"ckg7wenh5004cu3s647uc4h47","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenln008au3s665uggcwv"},{"post_id":"ckg7wenh5004cu3s647uc4h47","category_id":"ckg7wenlk007vu3s67p3xe7fa","_id":"ckg7wenln008cu3s6djuddtdt"},{"post_id":"ckg7wenh6004fu3s6a42nchzw","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenln008du3s6dbyac39w"},{"post_id":"ckg7wenh6004fu3s6a42nchzw","category_id":"ckg7wenlm0087u3s65yx0aae6","_id":"ckg7wenln008fu3s6ez6wcwzg"},{"post_id":"ckg7wenh7004ju3s6hw125vod","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenln008hu3s644tj97h7"},{"post_id":"ckg7wenh7004ju3s6hw125vod","category_id":"ckg7wenln008bu3s65v3kdm14","_id":"ckg7wenlo008iu3s67ajvbxf7"},{"post_id":"ckg7wenh8004mu3s626ub1snk","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlo008ju3s66ghv9uat"},{"post_id":"ckg7wenh8004mu3s626ub1snk","category_id":"ckg7wenln008bu3s65v3kdm14","_id":"ckg7wenlo008ku3s688aq21pl"},{"post_id":"ckg7wenha004qu3s698th3ej4","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenlo008lu3s69n906w55"},{"post_id":"ckg7wenha004qu3s698th3ej4","category_id":"ckg7wenlg006zu3s6g5xg7yq8","_id":"ckg7wenlo008mu3s6bdp1gmss"},{"post_id":"ckg7wenlx008nu3s66zzzgz6p","category_id":"ckg7wenh9004pu3s6478x81tp","_id":"ckg7wenm5008uu3s6dklrb5qn"},{"post_id":"ckg7wenlx008nu3s66zzzgz6p","category_id":"ckg7wenlh0072u3s6eara2t96","_id":"ckg7wenm6008wu3s6ctnbakb1"},{"post_id":"ckg7wenm5008vu3s65mdbc0vs","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenna0094u3s65rpp2xtz"},{"post_id":"ckg7wenm5008vu3s65mdbc0vs","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wenng0095u3s61adhhu2h"},{"post_id":"ckg7wenlx008ou3s62ud1gcyk","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wennl0097u3s63axe18kx"},{"post_id":"ckg7wenlx008ou3s62ud1gcyk","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wennq0098u3s65boddr28"},{"post_id":"ckg7wenm6008xu3s6gzzz9stx","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wennx009au3s63anrd1za"},{"post_id":"ckg7wenm6008xu3s6gzzz9stx","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7weno4009bu3s62k6jf7j0"},{"post_id":"ckg7wenm7008zu3s6ghvt853g","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenoa009du3s63omshdjo"},{"post_id":"ckg7wenm7008zu3s6ghvt853g","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wenof009eu3s6fkd64519"},{"post_id":"ckg7wenly008qu3s66mqo3sx9","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenok009fu3s61fcz5gu2"},{"post_id":"ckg7wenly008qu3s66mqo3sx9","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wenol009gu3s66d9y1u77"},{"post_id":"ckg7wenm5008tu3s63e145v35","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenol009hu3s6ba75b5cb"},{"post_id":"ckg7wenm5008tu3s63e145v35","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wenol009iu3s6glwb0n1k"},{"post_id":"ckg7wenox009ju3s6gl6f8m16","category_id":"ckg7wenm4008ru3s693pd3jfc","_id":"ckg7wenoy009ku3s6ad84d8fk"},{"post_id":"ckg7wenox009ju3s6gl6f8m16","category_id":"ckg7wenmn0091u3s62hkn7pxn","_id":"ckg7wenoy009lu3s6e7kjfhdf"}],"PostTag":[{"post_id":"ckg7wen8m0008u3s61sfg4jst","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8p000cu3s6dkjx76el"},{"post_id":"ckg7wen8f0003u3s62mx4hrg0","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8q000eu3s6h7o3flxn"},{"post_id":"ckg7wen8n0009u3s65chscif0","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8r000ju3s6gwx336he"},{"post_id":"ckg7wen8p000du3s68rax6nzy","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8s000mu3s6ccfseyw3"},{"post_id":"ckg7wen8i0004u3s68d0bgavv","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8t000pu3s67esj4m61"},{"post_id":"ckg7wen8l0007u3s64q263vfx","tag_id":"ckg7wen8l0006u3s6b02q91tu","_id":"ckg7wen8t000ru3s62js123zd"},{"post_id":"ckg7wengt0035u3s69bajaql1","tag_id":"ckg7wengv003au3s6fem4be1m","_id":"ckg7wengy003ku3s6h4jj1ust"},{"post_id":"ckg7wengu0038u3s6999bdeb7","tag_id":"ckg7wengv003au3s6fem4be1m","_id":"ckg7wengz003ru3s60co7fuyo"},{"post_id":"ckg7wengv003bu3s6gc8g7o70","tag_id":"ckg7wengv003au3s6fem4be1m","_id":"ckg7wenh1003yu3s649ij147e"},{"post_id":"ckg7wengw003eu3s69x01gajx","tag_id":"ckg7wenh1003vu3s6d89gc47v","_id":"ckg7wenh40046u3s62c450w6z"},{"post_id":"ckg7wengw003gu3s6hulhgccz","tag_id":"ckg7wenh1003vu3s6d89gc47v","_id":"ckg7wenh6004du3s6be6lfuoh"},{"post_id":"ckg7wengy003lu3s608digqx6","tag_id":"ckg7wenh1003vu3s6d89gc47v","_id":"ckg7wenh8004ku3s6co2jhm4j"},{"post_id":"ckg7wengy003nu3s6afjv75to","tag_id":"ckg7wenh1003vu3s6d89gc47v","_id":"ckg7wenha004ru3s6hfnnhifa"},{"post_id":"ckg7wenh0003su3s6hmbuf4ru","tag_id":"ckg7wenh9004nu3s6fcnc9ci8","_id":"ckg7wenhd004yu3s6h2vj33sx"},{"post_id":"ckg7wenh0003uu3s66m1o7yxn","tag_id":"ckg7wenh9004nu3s6fcnc9ci8","_id":"ckg7wenhe0053u3s6cin9colz"},{"post_id":"ckg7wenh2003zu3s66t1h57fy","tag_id":"ckg7wenh9004nu3s6fcnc9ci8","_id":"ckg7wenhf0058u3s67cy0g78e"},{"post_id":"ckg7wenh20041u3s62ko98fym","tag_id":"ckg7wenhf0056u3s63nyff2mq","_id":"ckg7wenho005eu3s6e2zo85x3"},{"post_id":"ckg7wenh30045u3s6eddy0bh7","tag_id":"ckg7wenhf0056u3s63nyff2mq","_id":"ckg7wenhy005ju3s6dm7v0bdj"},{"post_id":"ckg7wenh40048u3s62kqef3k2","tag_id":"ckg7wenhf0056u3s63nyff2mq","_id":"ckg7wenia005ou3s64i7q48t8"},{"post_id":"ckg7wenh5004cu3s647uc4h47","tag_id":"ckg7wenhf0056u3s63nyff2mq","_id":"ckg7wenil005tu3s6bxsd7stf"},{"post_id":"ckg7wenh6004fu3s6a42nchzw","tag_id":"ckg7wenif005qu3s6e4mpa6ox","_id":"ckg7weniy005yu3s6bvxd2scg"},{"post_id":"ckg7wenh7004ju3s6hw125vod","tag_id":"ckg7wenit005vu3s6hq2j1sf7","_id":"ckg7wenj90063u3s6e598btcn"},{"post_id":"ckg7wenh8004mu3s626ub1snk","tag_id":"ckg7wenit005vu3s6hq2j1sf7","_id":"ckg7wenjj0068u3s6hx1pf3rm"},{"post_id":"ckg7wenha004qu3s698th3ej4","tag_id":"ckg7wenje0066u3s6b1c43qps","_id":"ckg7wenjv006du3s65zi8a53l"},{"post_id":"ckg7wenha004tu3s6h4bchcll","tag_id":"ckg7wenje0066u3s6b1c43qps","_id":"ckg7wenk5006iu3s6hej60orw"},{"post_id":"ckg7wenhb004wu3s6hl2p5n6h","tag_id":"ckg7wenk4006hu3s6gzwmboc6","_id":"ckg7wenkv006ru3s69nop9uck"},{"post_id":"ckg7wenhb004wu3s6hl2p5n6h","tag_id":"ckg7wenkf006mu3s66erp9lmj","_id":"ckg7wenl1006uu3s6aseb4cad"},{"post_id":"ckg7wenlx008nu3s66zzzgz6p","tag_id":"ckg7wenk4006hu3s6gzwmboc6","_id":"ckg7wenly008pu3s686g8cqu6"},{"post_id":"ckg7wenlx008nu3s66zzzgz6p","tag_id":"ckg7wenkf006mu3s66erp9lmj","_id":"ckg7wenm5008su3s6gvlpao4m"}],"Tag":[{"name":"C","_id":"ckg7wen8l0006u3s6b02q91tu"},{"name":"OC动画","_id":"ckg7wengv003au3s6fem4be1m"},{"name":"Foundation","_id":"ckg7wenh1003vu3s6d89gc47v"},{"name":"OC","_id":"ckg7wenh9004nu3s6fcnc9ci8"},{"name":"登录","_id":"ckg7wenhf0056u3s63nyff2mq"},{"name":"屏幕","_id":"ckg7wenif005qu3s6e4mpa6ox"},{"name":"UITableViewCell","_id":"ckg7wenit005vu3s6hq2j1sf7"},{"name":"上传","_id":"ckg7wenje0066u3s6b1c43qps"},{"name":"动画","_id":"ckg7wenk4006hu3s6gzwmboc6"},{"name":"水印","_id":"ckg7wenkf006mu3s66erp9lmj"}]}}